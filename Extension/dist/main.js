module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/agent-base/index.js":
/*!******************************************!*\
  !*** ./node_modules/agent-base/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n__webpack_require__(/*! ./patch-core */ \"./node_modules/agent-base/patch-core.js\");\nconst inherits = __webpack_require__(/*! util */ \"util\").inherits;\nconst promisify = __webpack_require__(/*! es6-promisify */ \"./node_modules/es6-promisify/dist/promisify.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\").EventEmitter;\n\nmodule.exports = Agent;\n\nfunction isAgent(v) {\n  return v && typeof v.addRequest === 'function';\n}\n\n/**\n * Base `http.Agent` implementation.\n * No pooling/keep-alive is implemented by default.\n *\n * @param {Function} callback\n * @api public\n */\nfunction Agent(callback, _opts) {\n  if (!(this instanceof Agent)) {\n    return new Agent(callback, _opts);\n  }\n\n  EventEmitter.call(this);\n\n  // The callback gets promisified if it has 3 parameters\n  // (i.e. it has a callback function) lazily\n  this._promisifiedCallback = false;\n\n  let opts = _opts;\n  if ('function' === typeof callback) {\n    this.callback = callback;\n  } else if (callback) {\n    opts = callback;\n  }\n\n  // timeout for the socket to be returned from the callback\n  this.timeout = (opts && opts.timeout) || null;\n\n  this.options = opts;\n}\ninherits(Agent, EventEmitter);\n\n/**\n * Override this function in your subclass!\n */\nAgent.prototype.callback = function callback(req, opts) {\n  throw new Error(\n    '\"agent-base\" has no default implementation, you must subclass and override `callback()`'\n  );\n};\n\n/**\n * Called by node-core's \"_http_client.js\" module when creating\n * a new HTTP request with this Agent instance.\n *\n * @api public\n */\nAgent.prototype.addRequest = function addRequest(req, _opts) {\n  const ownOpts = Object.assign({}, _opts);\n\n  // Set default `host` for HTTP to localhost\n  if (null == ownOpts.host) {\n    ownOpts.host = 'localhost';\n  }\n\n  // Set default `port` for HTTP if none was explicitly specified\n  if (null == ownOpts.port) {\n    ownOpts.port = ownOpts.secureEndpoint ? 443 : 80;\n  }\n\n  const opts = Object.assign({}, this.options, ownOpts);\n\n  if (opts.host && opts.path) {\n    // If both a `host` and `path` are specified then it's most likely the\n    // result of a `url.parse()` call... we need to remove the `path` portion so\n    // that `net.connect()` doesn't attempt to open that as a unix socket file.\n    delete opts.path;\n  }\n\n  delete opts.agent;\n  delete opts.hostname;\n  delete opts._defaultAgent;\n  delete opts.defaultPort;\n  delete opts.createConnection;\n\n  // Hint to use \"Connection: close\"\n  // XXX: non-documented `http` module API :(\n  req._last = true;\n  req.shouldKeepAlive = false;\n\n  // Create the `stream.Duplex` instance\n  let timeout;\n  let timedOut = false;\n  const timeoutMs = this.timeout;\n  const freeSocket = this.freeSocket;\n\n  function onerror(err) {\n    if (req._hadError) return;\n    req.emit('error', err);\n    // For Safety. Some additional errors might fire later on\n    // and we need to make sure we don't double-fire the error event.\n    req._hadError = true;\n  }\n\n  function ontimeout() {\n    timeout = null;\n    timedOut = true;\n    const err = new Error(\n      'A \"socket\" was not created for HTTP request before ' + timeoutMs + 'ms'\n    );\n    err.code = 'ETIMEOUT';\n    onerror(err);\n  }\n\n  function callbackError(err) {\n    if (timedOut) return;\n    if (timeout != null) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n    onerror(err);\n  }\n\n  function onsocket(socket) {\n    if (timedOut) return;\n    if (timeout != null) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n    if (isAgent(socket)) {\n      // `socket` is actually an http.Agent instance, so relinquish\n      // responsibility for this `req` to the Agent from here on\n      socket.addRequest(req, opts);\n    } else if (socket) {\n      function onfree() {\n        freeSocket(socket, opts);\n      }\n      socket.on('free', onfree);\n      req.onSocket(socket);\n    } else {\n      const err = new Error(\n        'no Duplex stream was returned to agent-base for `' + req.method + ' ' + req.path + '`'\n      );\n      onerror(err);\n    }\n  }\n\n  if (!this._promisifiedCallback && this.callback.length >= 3) {\n    // Legacy callback function - convert to a Promise\n    this.callback = promisify(this.callback, this);\n    this._promisifiedCallback = true;\n  }\n\n  if (timeoutMs > 0) {\n    timeout = setTimeout(ontimeout, timeoutMs);\n  }\n\n  try {\n    Promise.resolve(this.callback(req, opts)).then(onsocket, callbackError);\n  } catch (err) {\n    Promise.reject(err).catch(callbackError);\n  }\n};\n\nAgent.prototype.freeSocket = function freeSocket(socket, opts) {\n  // TODO reuse sockets\n  socket.destroy();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWdlbnQtYmFzZS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYWdlbnQtYmFzZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL3BhdGNoLWNvcmUnKTtcbmNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzO1xuY29uc3QgcHJvbWlzaWZ5ID0gcmVxdWlyZSgnZXM2LXByb21pc2lmeScpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFnZW50O1xuXG5mdW5jdGlvbiBpc0FnZW50KHYpIHtcbiAgcmV0dXJuIHYgJiYgdHlwZW9mIHYuYWRkUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBCYXNlIGBodHRwLkFnZW50YCBpbXBsZW1lbnRhdGlvbi5cbiAqIE5vIHBvb2xpbmcva2VlcC1hbGl2ZSBpcyBpbXBsZW1lbnRlZCBieSBkZWZhdWx0LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBBZ2VudChjYWxsYmFjaywgX29wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFnZW50KSkge1xuICAgIHJldHVybiBuZXcgQWdlbnQoY2FsbGJhY2ssIF9vcHRzKTtcbiAgfVxuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIFRoZSBjYWxsYmFjayBnZXRzIHByb21pc2lmaWVkIGlmIGl0IGhhcyAzIHBhcmFtZXRlcnNcbiAgLy8gKGkuZS4gaXQgaGFzIGEgY2FsbGJhY2sgZnVuY3Rpb24pIGxhemlseVxuICB0aGlzLl9wcm9taXNpZmllZENhbGxiYWNrID0gZmFsc2U7XG5cbiAgbGV0IG9wdHMgPSBfb3B0cztcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjaykge1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgIG9wdHMgPSBjYWxsYmFjaztcbiAgfVxuXG4gIC8vIHRpbWVvdXQgZm9yIHRoZSBzb2NrZXQgdG8gYmUgcmV0dXJuZWQgZnJvbSB0aGUgY2FsbGJhY2tcbiAgdGhpcy50aW1lb3V0ID0gKG9wdHMgJiYgb3B0cy50aW1lb3V0KSB8fCBudWxsO1xuXG4gIHRoaXMub3B0aW9ucyA9IG9wdHM7XG59XG5pbmhlcml0cyhBZ2VudCwgRXZlbnRFbWl0dGVyKTtcblxuLyoqXG4gKiBPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIHlvdXIgc3ViY2xhc3MhXG4gKi9cbkFnZW50LnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKHJlcSwgb3B0cykge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ1wiYWdlbnQtYmFzZVwiIGhhcyBubyBkZWZhdWx0IGltcGxlbWVudGF0aW9uLCB5b3UgbXVzdCBzdWJjbGFzcyBhbmQgb3ZlcnJpZGUgYGNhbGxiYWNrKClgJ1xuICApO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgYnkgbm9kZS1jb3JlJ3MgXCJfaHR0cF9jbGllbnQuanNcIiBtb2R1bGUgd2hlbiBjcmVhdGluZ1xuICogYSBuZXcgSFRUUCByZXF1ZXN0IHdpdGggdGhpcyBBZ2VudCBpbnN0YW5jZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5BZ2VudC5wcm90b3R5cGUuYWRkUmVxdWVzdCA9IGZ1bmN0aW9uIGFkZFJlcXVlc3QocmVxLCBfb3B0cykge1xuICBjb25zdCBvd25PcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgX29wdHMpO1xuXG4gIC8vIFNldCBkZWZhdWx0IGBob3N0YCBmb3IgSFRUUCB0byBsb2NhbGhvc3RcbiAgaWYgKG51bGwgPT0gb3duT3B0cy5ob3N0KSB7XG4gICAgb3duT3B0cy5ob3N0ID0gJ2xvY2FsaG9zdCc7XG4gIH1cblxuICAvLyBTZXQgZGVmYXVsdCBgcG9ydGAgZm9yIEhUVFAgaWYgbm9uZSB3YXMgZXhwbGljaXRseSBzcGVjaWZpZWRcbiAgaWYgKG51bGwgPT0gb3duT3B0cy5wb3J0KSB7XG4gICAgb3duT3B0cy5wb3J0ID0gb3duT3B0cy5zZWN1cmVFbmRwb2ludCA/IDQ0MyA6IDgwO1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywgb3duT3B0cyk7XG5cbiAgaWYgKG9wdHMuaG9zdCAmJiBvcHRzLnBhdGgpIHtcbiAgICAvLyBJZiBib3RoIGEgYGhvc3RgIGFuZCBgcGF0aGAgYXJlIHNwZWNpZmllZCB0aGVuIGl0J3MgbW9zdCBsaWtlbHkgdGhlXG4gICAgLy8gcmVzdWx0IG9mIGEgYHVybC5wYXJzZSgpYCBjYWxsLi4uIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBgcGF0aGAgcG9ydGlvbiBzb1xuICAgIC8vIHRoYXQgYG5ldC5jb25uZWN0KClgIGRvZXNuJ3QgYXR0ZW1wdCB0byBvcGVuIHRoYXQgYXMgYSB1bml4IHNvY2tldCBmaWxlLlxuICAgIGRlbGV0ZSBvcHRzLnBhdGg7XG4gIH1cblxuICBkZWxldGUgb3B0cy5hZ2VudDtcbiAgZGVsZXRlIG9wdHMuaG9zdG5hbWU7XG4gIGRlbGV0ZSBvcHRzLl9kZWZhdWx0QWdlbnQ7XG4gIGRlbGV0ZSBvcHRzLmRlZmF1bHRQb3J0O1xuICBkZWxldGUgb3B0cy5jcmVhdGVDb25uZWN0aW9uO1xuXG4gIC8vIEhpbnQgdG8gdXNlIFwiQ29ubmVjdGlvbjogY2xvc2VcIlxuICAvLyBYWFg6IG5vbi1kb2N1bWVudGVkIGBodHRwYCBtb2R1bGUgQVBJIDooXG4gIHJlcS5fbGFzdCA9IHRydWU7XG4gIHJlcS5zaG91bGRLZWVwQWxpdmUgPSBmYWxzZTtcblxuICAvLyBDcmVhdGUgdGhlIGBzdHJlYW0uRHVwbGV4YCBpbnN0YW5jZVxuICBsZXQgdGltZW91dDtcbiAgbGV0IHRpbWVkT3V0ID0gZmFsc2U7XG4gIGNvbnN0IHRpbWVvdXRNcyA9IHRoaXMudGltZW91dDtcbiAgY29uc3QgZnJlZVNvY2tldCA9IHRoaXMuZnJlZVNvY2tldDtcblxuICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGlmIChyZXEuX2hhZEVycm9yKSByZXR1cm47XG4gICAgcmVxLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAvLyBGb3IgU2FmZXR5LiBTb21lIGFkZGl0aW9uYWwgZXJyb3JzIG1pZ2h0IGZpcmUgbGF0ZXIgb25cbiAgICAvLyBhbmQgd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgZG91YmxlLWZpcmUgdGhlIGVycm9yIGV2ZW50LlxuICAgIHJlcS5faGFkRXJyb3IgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gb250aW1lb3V0KCkge1xuICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIHRpbWVkT3V0ID0gdHJ1ZTtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQSBcInNvY2tldFwiIHdhcyBub3QgY3JlYXRlZCBmb3IgSFRUUCByZXF1ZXN0IGJlZm9yZSAnICsgdGltZW91dE1zICsgJ21zJ1xuICAgICk7XG4gICAgZXJyLmNvZGUgPSAnRVRJTUVPVVQnO1xuICAgIG9uZXJyb3IoZXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxiYWNrRXJyb3IoZXJyKSB7XG4gICAgaWYgKHRpbWVkT3V0KSByZXR1cm47XG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIG9uZXJyb3IoZXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uc29ja2V0KHNvY2tldCkge1xuICAgIGlmICh0aW1lZE91dCkgcmV0dXJuO1xuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNBZ2VudChzb2NrZXQpKSB7XG4gICAgICAvLyBgc29ja2V0YCBpcyBhY3R1YWxseSBhbiBodHRwLkFnZW50IGluc3RhbmNlLCBzbyByZWxpbnF1aXNoXG4gICAgICAvLyByZXNwb25zaWJpbGl0eSBmb3IgdGhpcyBgcmVxYCB0byB0aGUgQWdlbnQgZnJvbSBoZXJlIG9uXG4gICAgICBzb2NrZXQuYWRkUmVxdWVzdChyZXEsIG9wdHMpO1xuICAgIH0gZWxzZSBpZiAoc29ja2V0KSB7XG4gICAgICBmdW5jdGlvbiBvbmZyZWUoKSB7XG4gICAgICAgIGZyZWVTb2NrZXQoc29ja2V0LCBvcHRzKTtcbiAgICAgIH1cbiAgICAgIHNvY2tldC5vbignZnJlZScsIG9uZnJlZSk7XG4gICAgICByZXEub25Tb2NrZXQoc29ja2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAnbm8gRHVwbGV4IHN0cmVhbSB3YXMgcmV0dXJuZWQgdG8gYWdlbnQtYmFzZSBmb3IgYCcgKyByZXEubWV0aG9kICsgJyAnICsgcmVxLnBhdGggKyAnYCdcbiAgICAgICk7XG4gICAgICBvbmVycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0aGlzLl9wcm9taXNpZmllZENhbGxiYWNrICYmIHRoaXMuY2FsbGJhY2subGVuZ3RoID49IDMpIHtcbiAgICAvLyBMZWdhY3kgY2FsbGJhY2sgZnVuY3Rpb24gLSBjb252ZXJ0IHRvIGEgUHJvbWlzZVxuICAgIHRoaXMuY2FsbGJhY2sgPSBwcm9taXNpZnkodGhpcy5jYWxsYmFjaywgdGhpcyk7XG4gICAgdGhpcy5fcHJvbWlzaWZpZWRDYWxsYmFjayA9IHRydWU7XG4gIH1cblxuICBpZiAodGltZW91dE1zID4gMCkge1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9udGltZW91dCwgdGltZW91dE1zKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHRoaXMuY2FsbGJhY2socmVxLCBvcHRzKSkudGhlbihvbnNvY2tldCwgY2FsbGJhY2tFcnJvcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIFByb21pc2UucmVqZWN0KGVycikuY2F0Y2goY2FsbGJhY2tFcnJvcik7XG4gIH1cbn07XG5cbkFnZW50LnByb3RvdHlwZS5mcmVlU29ja2V0ID0gZnVuY3Rpb24gZnJlZVNvY2tldChzb2NrZXQsIG9wdHMpIHtcbiAgLy8gVE9ETyByZXVzZSBzb2NrZXRzXG4gIHNvY2tldC5kZXN0cm95KCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/agent-base/index.js\n");

/***/ }),

/***/ "./node_modules/agent-base/patch-core.js":
/*!***********************************************!*\
  !*** ./node_modules/agent-base/patch-core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst url = __webpack_require__(/*! url */ \"url\");\nconst https = __webpack_require__(/*! https */ \"https\");\n\n/**\n * This currently needs to be applied to all Node.js versions\n * in order to determine if the `req` is an HTTP or HTTPS request.\n *\n * There is currently no PR attempting to move this property upstream.\n */\nhttps.request = (function(request) {\n  return function(_options, cb) {\n    let options;\n    if (typeof _options === 'string') {\n      options = url.parse(_options);\n    } else {\n      options = Object.assign({}, _options);\n    }\n    if (null == options.port) {\n      options.port = 443;\n    }\n    options.secureEndpoint = true;\n    return request.call(https, options, cb);\n  };\n})(https.request);\n\n/**\n * This is needed for Node.js >= 9.0.0 to make sure `https.get()` uses the\n * patched `https.request()`.\n *\n * Ref: https://github.com/nodejs/node/commit/5118f31\n */\nhttps.get = function(options, cb) {\n  const req = https.request(options, cb);\n  req.end();\n  return req;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWdlbnQtYmFzZS9wYXRjaC1jb3JlLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hZ2VudC1iYXNlL3BhdGNoLWNvcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5cbi8qKlxuICogVGhpcyBjdXJyZW50bHkgbmVlZHMgdG8gYmUgYXBwbGllZCB0byBhbGwgTm9kZS5qcyB2ZXJzaW9uc1xuICogaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIHRoZSBgcmVxYCBpcyBhbiBIVFRQIG9yIEhUVFBTIHJlcXVlc3QuXG4gKlxuICogVGhlcmUgaXMgY3VycmVudGx5IG5vIFBSIGF0dGVtcHRpbmcgdG8gbW92ZSB0aGlzIHByb3BlcnR5IHVwc3RyZWFtLlxuICovXG5odHRwcy5yZXF1ZXN0ID0gKGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKF9vcHRpb25zLCBjYikge1xuICAgIGxldCBvcHRpb25zO1xuICAgIGlmICh0eXBlb2YgX29wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zID0gdXJsLnBhcnNlKF9vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIF9vcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKG51bGwgPT0gb3B0aW9ucy5wb3J0KSB7XG4gICAgICBvcHRpb25zLnBvcnQgPSA0NDM7XG4gICAgfVxuICAgIG9wdGlvbnMuc2VjdXJlRW5kcG9pbnQgPSB0cnVlO1xuICAgIHJldHVybiByZXF1ZXN0LmNhbGwoaHR0cHMsIG9wdGlvbnMsIGNiKTtcbiAgfTtcbn0pKGh0dHBzLnJlcXVlc3QpO1xuXG4vKipcbiAqIFRoaXMgaXMgbmVlZGVkIGZvciBOb2RlLmpzID49IDkuMC4wIHRvIG1ha2Ugc3VyZSBgaHR0cHMuZ2V0KClgIHVzZXMgdGhlXG4gKiBwYXRjaGVkIGBodHRwcy5yZXF1ZXN0KClgLlxuICpcbiAqIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC81MTE4ZjMxXG4gKi9cbmh0dHBzLmdldCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNiKSB7XG4gIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucywgY2IpO1xuICByZXEuZW5kKCk7XG4gIHJldHVybiByZXE7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/agent-base/patch-core.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/Console.js":
/*!************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/Console.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar DiagChannel = __webpack_require__(/*! ./diagnostic-channel/initialization */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/initialization.js\");\r\nvar AutoCollectConsole = (function () {\r\n    function AutoCollectConsole(client) {\r\n        if (!!AutoCollectConsole.INSTANCE) {\r\n            throw new Error(\"Console logging adapter tracking should be configured from the applicationInsights object\");\r\n        }\r\n        this._client = client;\r\n        AutoCollectConsole.INSTANCE = this;\r\n    }\r\n    AutoCollectConsole.prototype.enable = function (isEnabled, collectConsoleLog) {\r\n        if (DiagChannel.IsInitialized) {\r\n            __webpack_require__(/*! ./diagnostic-channel/console.sub */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/console.sub.js\").enable(isEnabled && collectConsoleLog, this._client);\r\n            __webpack_require__(/*! ./diagnostic-channel/bunyan.sub */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/bunyan.sub.js\").enable(isEnabled, this._client);\r\n            __webpack_require__(/*! ./diagnostic-channel/winston.sub */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/winston.sub.js\").enable(isEnabled, this._client);\r\n        }\r\n    };\r\n    AutoCollectConsole.prototype.isInitialized = function () {\r\n        return this._isInitialized;\r\n    };\r\n    AutoCollectConsole.prototype.dispose = function () {\r\n        AutoCollectConsole.INSTANCE = null;\r\n        this.enable(false, false);\r\n    };\r\n    AutoCollectConsole._methodNames = [\"debug\", \"info\", \"log\", \"warn\", \"error\"];\r\n    return AutoCollectConsole;\r\n}());\r\nmodule.exports = AutoCollectConsole;\r\n//# sourceMappingURL=Console.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vQ29uc29sZS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vQ29uc29sZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIERpYWdDaGFubmVsID0gcmVxdWlyZShcIi4vZGlhZ25vc3RpYy1jaGFubmVsL2luaXRpYWxpemF0aW9uXCIpO1xyXG52YXIgQXV0b0NvbGxlY3RDb25zb2xlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEF1dG9Db2xsZWN0Q29uc29sZShjbGllbnQpIHtcclxuICAgICAgICBpZiAoISFBdXRvQ29sbGVjdENvbnNvbGUuSU5TVEFOQ0UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uc29sZSBsb2dnaW5nIGFkYXB0ZXIgdHJhY2tpbmcgc2hvdWxkIGJlIGNvbmZpZ3VyZWQgZnJvbSB0aGUgYXBwbGljYXRpb25JbnNpZ2h0cyBvYmplY3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcclxuICAgICAgICBBdXRvQ29sbGVjdENvbnNvbGUuSU5TVEFOQ0UgPSB0aGlzO1xyXG4gICAgfVxyXG4gICAgQXV0b0NvbGxlY3RDb25zb2xlLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoaXNFbmFibGVkLCBjb2xsZWN0Q29uc29sZUxvZykge1xyXG4gICAgICAgIGlmIChEaWFnQ2hhbm5lbC5Jc0luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgIHJlcXVpcmUoXCIuL2RpYWdub3N0aWMtY2hhbm5lbC9jb25zb2xlLnN1YlwiKS5lbmFibGUoaXNFbmFibGVkICYmIGNvbGxlY3RDb25zb2xlTG9nLCB0aGlzLl9jbGllbnQpO1xyXG4gICAgICAgICAgICByZXF1aXJlKFwiLi9kaWFnbm9zdGljLWNoYW5uZWwvYnVueWFuLnN1YlwiKS5lbmFibGUoaXNFbmFibGVkLCB0aGlzLl9jbGllbnQpO1xyXG4gICAgICAgICAgICByZXF1aXJlKFwiLi9kaWFnbm9zdGljLWNoYW5uZWwvd2luc3Rvbi5zdWJcIikuZW5hYmxlKGlzRW5hYmxlZCwgdGhpcy5fY2xpZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQXV0b0NvbGxlY3RDb25zb2xlLnByb3RvdHlwZS5pc0luaXRpYWxpemVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0luaXRpYWxpemVkO1xyXG4gICAgfTtcclxuICAgIEF1dG9Db2xsZWN0Q29uc29sZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBBdXRvQ29sbGVjdENvbnNvbGUuSU5TVEFOQ0UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlKGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgQXV0b0NvbGxlY3RDb25zb2xlLl9tZXRob2ROYW1lcyA9IFtcImRlYnVnXCIsIFwiaW5mb1wiLCBcImxvZ1wiLCBcIndhcm5cIiwgXCJlcnJvclwiXTtcclxuICAgIHJldHVybiBBdXRvQ29sbGVjdENvbnNvbGU7XHJcbn0oKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gQXV0b0NvbGxlY3RDb25zb2xlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25zb2xlLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/Console.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Logging = __webpack_require__(/*! ../Library/Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar DiagChannel = __webpack_require__(/*! ./diagnostic-channel/initialization */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/initialization.js\");\r\nvar CorrelationContextManager = (function () {\r\n    function CorrelationContextManager() {\r\n    }\r\n    /**\r\n     *  Provides the current Context.\r\n     *  The context is the most recent one entered into for the current\r\n     *  logical chain of execution, including across asynchronous calls.\r\n     */\r\n    CorrelationContextManager.getCurrentContext = function () {\r\n        if (!CorrelationContextManager.enabled) {\r\n            return null;\r\n        }\r\n        return Zone.current.get(\"context\");\r\n    };\r\n    /**\r\n     *  A helper to generate objects conforming to the CorrelationContext interface\r\n     */\r\n    CorrelationContextManager.generateContextObject = function (operationId, parentId, operationName, correlationContextHeader) {\r\n        parentId = parentId || operationId;\r\n        if (this.enabled) {\r\n            return {\r\n                operation: {\r\n                    name: operationName,\r\n                    id: operationId,\r\n                    parentId: parentId\r\n                },\r\n                customProperties: new CustomPropertiesImpl(correlationContextHeader)\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *  Runs a function inside a given Context.\r\n     *  All logical children of the execution path that entered this Context\r\n     *  will receive this Context object on calls to GetCurrentContext.\r\n     */\r\n    CorrelationContextManager.runWithContext = function (context, fn) {\r\n        if (CorrelationContextManager.enabled) {\r\n            var newZone = Zone.current.fork({\r\n                name: \"AI-\" + ((context && context.operation.parentId) || \"Unknown\"),\r\n                properties: { context: context }\r\n            });\r\n            newZone.run(fn);\r\n        }\r\n        else {\r\n            fn();\r\n        }\r\n    };\r\n    /**\r\n     *  Patches a callback to restore the correct Context when getCurrentContext\r\n     *  is run within it. This is necessary if automatic correlation fails to work\r\n     *  with user-included libraries.\r\n     *\r\n     *  The supplied callback will be given the same context that was present for\r\n     *  the call to wrapCallback.  */\r\n    CorrelationContextManager.wrapCallback = function (fn) {\r\n        if (CorrelationContextManager.enabled) {\r\n            return Zone.current.wrap(fn, \"User-wrapped method\");\r\n        }\r\n        return fn;\r\n    };\r\n    /**\r\n     *  Enables the CorrelationContextManager.\r\n     */\r\n    CorrelationContextManager.enable = function () {\r\n        if (this.enabled) {\r\n            return;\r\n        }\r\n        if (!this.isNodeVersionCompatible()) {\r\n            this.enabled = false;\r\n            return;\r\n        }\r\n        // Run patches for Zone.js\r\n        if (!CorrelationContextManager.hasEverEnabled) {\r\n            this.hasEverEnabled = true;\r\n            // Load in Zone.js\r\n            try {\r\n                // Require zone if we can't detect its presence - guarded because of issue #346\r\n                // Note that usually multiple requires of zone.js does not error - but we see reports of it happening\r\n                // in the Azure Functions environment.\r\n                // This indicates that the file is being included multiple times in the same global scope,\r\n                // averting require's cache somehow.\r\n                if (typeof Zone === \"undefined\") {\r\n                    __webpack_require__(/*! zone.js */ \"./node_modules/zone.js/dist/zone-node.js\");\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Zone was already loaded even though we couldn't find its global variable\r\n                Logging.warn(\"Failed to require zone.js\");\r\n            }\r\n            DiagChannel.registerContextPreservation(function (cb) {\r\n                return Zone.current.wrap(cb, \"AI-ContextPreservation\");\r\n            });\r\n            this.patchError();\r\n            this.patchTimers([\"setTimeout\", \"setInterval\"]);\r\n        }\r\n        this.enabled = true;\r\n    };\r\n    /**\r\n     *  Disables the CorrelationContextManager.\r\n     */\r\n    CorrelationContextManager.disable = function () {\r\n        this.enabled = false;\r\n    };\r\n    /**\r\n     *  Reports if the CorrelationContextManager is able to run in this environment\r\n     */\r\n    CorrelationContextManager.isNodeVersionCompatible = function () {\r\n        // Unit tests warn of errors < 3.3 from timer patching. All versions before 4 were 0.x\r\n        var nodeVer = process.versions.node.split(\".\");\r\n        return parseInt(nodeVer[0]) > 3 || (parseInt(nodeVer[0]) > 2 && parseInt(nodeVer[1]) > 2);\r\n    };\r\n    // Zone.js breaks concatenation of timer return values.\r\n    // This fixes that.\r\n    CorrelationContextManager.patchTimers = function (methodNames) {\r\n        methodNames.forEach(function (methodName) {\r\n            var orig = global[methodName];\r\n            global[methodName] = function () {\r\n                var ret = orig.apply(this, arguments);\r\n                ret.toString = function () {\r\n                    if (this.data && typeof this.data.handleId !== 'undefined') {\r\n                        return this.data.handleId.toString();\r\n                    }\r\n                    else {\r\n                        return Object.prototype.toString.call(this);\r\n                    }\r\n                };\r\n                return ret;\r\n            };\r\n        });\r\n    };\r\n    // Zone.js breaks deepEqual on error objects (by making internal properties enumerable).\r\n    // This fixes that by subclassing the error object and making all properties not enumerable\r\n    CorrelationContextManager.patchError = function () {\r\n        var orig = global.Error;\r\n        // New error handler\r\n        function AppInsightsAsyncCorrelatedErrorWrapper() {\r\n            if (!(this instanceof AppInsightsAsyncCorrelatedErrorWrapper)) {\r\n                return AppInsightsAsyncCorrelatedErrorWrapper.apply(Object.create(AppInsightsAsyncCorrelatedErrorWrapper.prototype), arguments);\r\n            }\r\n            // Is this object set to rewrite the stack?\r\n            // If so, we should turn off some Zone stuff that is prone to break\r\n            var stackRewrite = orig.stackRewrite;\r\n            if (orig.prepareStackTrace) {\r\n                orig.stackRewrite = false;\r\n                var stackTrace = orig.prepareStackTrace;\r\n                orig.prepareStackTrace = function (e, s) {\r\n                    // Remove some AI and Zone methods from the stack trace\r\n                    // Otherwise we leave side-effects\r\n                    // Algorithm is to find the first frame on the stack after the first instance(s)\r\n                    // of AutoCollection/CorrelationContextManager\r\n                    // Eg. this should return the User frame on an array like below:\r\n                    //  Zone | Zone | CorrelationContextManager | CorrelationContextManager | User\r\n                    var foundOne = false;\r\n                    for (var i = 0; i < s.length; i++) {\r\n                        var fileName = s[i].getFileName();\r\n                        if (fileName) {\r\n                            if (fileName.indexOf(\"AutoCollection/CorrelationContextManager\") === -1 &&\r\n                                fileName.indexOf(\"AutoCollection\\\\CorrelationContextManager\") === -1) {\r\n                                if (foundOne) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                foundOne = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // Loop above goes one extra step\r\n                    i = Math.max(0, i - 1);\r\n                    if (foundOne) {\r\n                        s.splice(0, i);\r\n                    }\r\n                    return stackTrace(e, s);\r\n                };\r\n            }\r\n            // Apply the error constructor\r\n            orig.apply(this, arguments);\r\n            // Restore Zone stack rewriting settings\r\n            orig.stackRewrite = stackRewrite;\r\n            // Remove unexpected bits from stack trace\r\n            if (this.stack && typeof this.stack === \"string\") {\r\n                var stackFrames = this.stack.split(\"\\n\");\r\n                // Remove this class\r\n                if (stackFrames.length > 3) {\r\n                    if (stackFrames[2].trim().indexOf(\"at Error.AppInsightsAsyncCorrelatedErrorWrapper\") === 0) {\r\n                        stackFrames.splice(2, 1);\r\n                    }\r\n                    else if (stackFrames[1].trim().indexOf(\"at AppInsightsAsyncCorrelatedErrorWrapper.ZoneAwareError\") === 0\r\n                        && stackFrames[2].trim().indexOf(\"at new AppInsightsAsyncCorrelatedErrorWrapper\") === 0) {\r\n                        stackFrames.splice(1, 2);\r\n                    }\r\n                }\r\n                // Remove AI correlation ids\r\n                this.stack = stackFrames.map(function (v) {\r\n                    var startIndex = v.indexOf(\") [\");\r\n                    if (startIndex > -1) {\r\n                        v = v.substr(0, startIndex + 1);\r\n                    }\r\n                    return v;\r\n                }).join(\"\\n\");\r\n            }\r\n            // getOwnPropertyNames should be a superset of Object.keys...\r\n            // This appears to not always be the case\r\n            var props = Object.getOwnPropertyNames(this).concat(Object.keys(this));\r\n            // Zone.js will automatically create some hidden properties at read time.\r\n            // We need to proactively make those not enumerable as well as the currently visible properties\r\n            for (var i = 0; i < props.length; i++) {\r\n                var propertyName = props[i];\r\n                var hiddenPropertyName = Zone['__symbol__'](propertyName);\r\n                Object.defineProperty(this, propertyName, { enumerable: false });\r\n                Object.defineProperty(this, hiddenPropertyName, { enumerable: false, writable: true });\r\n            }\r\n            return this;\r\n        }\r\n        // Inherit from the Zone.js error handler\r\n        AppInsightsAsyncCorrelatedErrorWrapper.prototype = orig.prototype;\r\n        // We need this loop to copy outer methods like Error.captureStackTrace\r\n        var props = Object.getOwnPropertyNames(orig);\r\n        for (var i = 0; i < props.length; i++) {\r\n            var propertyName = props[i];\r\n            if (!AppInsightsAsyncCorrelatedErrorWrapper[propertyName]) {\r\n                Object.defineProperty(AppInsightsAsyncCorrelatedErrorWrapper, propertyName, Object.getOwnPropertyDescriptor(orig, propertyName));\r\n            }\r\n        }\r\n        // explicit cast to <any> required to avoid type error for captureStackTrace\r\n        // with latest node.d.ts (despite workaround above)\r\n        global.Error = AppInsightsAsyncCorrelatedErrorWrapper;\r\n    };\r\n    CorrelationContextManager.enabled = false;\r\n    CorrelationContextManager.hasEverEnabled = false;\r\n    return CorrelationContextManager;\r\n}());\r\nexports.CorrelationContextManager = CorrelationContextManager;\r\nvar CustomPropertiesImpl = (function () {\r\n    function CustomPropertiesImpl(header) {\r\n        this.props = [];\r\n        this.addHeaderData(header);\r\n    }\r\n    CustomPropertiesImpl.prototype.addHeaderData = function (header) {\r\n        var keyvals = header ? header.split(\", \") : [];\r\n        this.props = keyvals.map(function (keyval) {\r\n            var parts = keyval.split(\"=\");\r\n            return { key: parts[0], value: parts[1] };\r\n        }).concat(this.props);\r\n    };\r\n    CustomPropertiesImpl.prototype.serializeToHeader = function () {\r\n        return this.props.map(function (keyval) {\r\n            return keyval.key + \"=\" + keyval.value;\r\n        }).join(\", \");\r\n    };\r\n    CustomPropertiesImpl.prototype.getProperty = function (prop) {\r\n        for (var i = 0; i < this.props.length; ++i) {\r\n            var keyval = this.props[i];\r\n            if (keyval.key === prop) {\r\n                return keyval.value;\r\n            }\r\n        }\r\n        return;\r\n    };\r\n    // TODO: Strictly according to the spec, properties which are recieved from\r\n    // an incoming request should be left untouched, while we may add our own new\r\n    // properties. The logic here will need to change to track that.\r\n    CustomPropertiesImpl.prototype.setProperty = function (prop, val) {\r\n        if (CustomPropertiesImpl.bannedCharacters.test(prop) || CustomPropertiesImpl.bannedCharacters.test(val)) {\r\n            Logging.warn(\"Correlation context property keys and values must not contain ',' or '='. setProperty was called with key: \" + prop + \" and value: \" + val);\r\n            return;\r\n        }\r\n        for (var i = 0; i < this.props.length; ++i) {\r\n            var keyval = this.props[i];\r\n            if (keyval.key === prop) {\r\n                keyval.value = val;\r\n                return;\r\n            }\r\n        }\r\n        this.props.push({ key: prop, value: val });\r\n    };\r\n    CustomPropertiesImpl.bannedCharacters = /[,=]/;\r\n    return CustomPropertiesImpl;\r\n}());\r\n//# sourceMappingURL=CorrelationContextManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgTG9nZ2luZyA9IHJlcXVpcmUoXCIuLi9MaWJyYXJ5L0xvZ2dpbmdcIik7XHJcbnZhciBEaWFnQ2hhbm5lbCA9IHJlcXVpcmUoXCIuL2RpYWdub3N0aWMtY2hhbm5lbC9pbml0aWFsaXphdGlvblwiKTtcclxudmFyIENvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlcigpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFByb3ZpZGVzIHRoZSBjdXJyZW50IENvbnRleHQuXHJcbiAgICAgKiAgVGhlIGNvbnRleHQgaXMgdGhlIG1vc3QgcmVjZW50IG9uZSBlbnRlcmVkIGludG8gZm9yIHRoZSBjdXJyZW50XHJcbiAgICAgKiAgbG9naWNhbCBjaGFpbiBvZiBleGVjdXRpb24sIGluY2x1ZGluZyBhY3Jvc3MgYXN5bmNocm9ub3VzIGNhbGxzLlxyXG4gICAgICovXHJcbiAgICBDb3JyZWxhdGlvbkNvbnRleHRNYW5hZ2VyLmdldEN1cnJlbnRDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gWm9uZS5jdXJyZW50LmdldChcImNvbnRleHRcIik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQSBoZWxwZXIgdG8gZ2VuZXJhdGUgb2JqZWN0cyBjb25mb3JtaW5nIHRvIHRoZSBDb3JyZWxhdGlvbkNvbnRleHQgaW50ZXJmYWNlXHJcbiAgICAgKi9cclxuICAgIENvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXIuZ2VuZXJhdGVDb250ZXh0T2JqZWN0ID0gZnVuY3Rpb24gKG9wZXJhdGlvbklkLCBwYXJlbnRJZCwgb3BlcmF0aW9uTmFtZSwgY29ycmVsYXRpb25Db250ZXh0SGVhZGVyKSB7XHJcbiAgICAgICAgcGFyZW50SWQgPSBwYXJlbnRJZCB8fCBvcGVyYXRpb25JZDtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBvcGVyYXRpb25OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBvcGVyYXRpb25JZCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRJZDogcGFyZW50SWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBuZXcgQ3VzdG9tUHJvcGVydGllc0ltcGwoY29ycmVsYXRpb25Db250ZXh0SGVhZGVyKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICBSdW5zIGEgZnVuY3Rpb24gaW5zaWRlIGEgZ2l2ZW4gQ29udGV4dC5cclxuICAgICAqICBBbGwgbG9naWNhbCBjaGlsZHJlbiBvZiB0aGUgZXhlY3V0aW9uIHBhdGggdGhhdCBlbnRlcmVkIHRoaXMgQ29udGV4dFxyXG4gICAgICogIHdpbGwgcmVjZWl2ZSB0aGlzIENvbnRleHQgb2JqZWN0IG9uIGNhbGxzIHRvIEdldEN1cnJlbnRDb250ZXh0LlxyXG4gICAgICovXHJcbiAgICBDb3JyZWxhdGlvbkNvbnRleHRNYW5hZ2VyLnJ1bldpdGhDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQsIGZuKSB7XHJcbiAgICAgICAgaWYgKENvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXIuZW5hYmxlZCkge1xyXG4gICAgICAgICAgICB2YXIgbmV3Wm9uZSA9IFpvbmUuY3VycmVudC5mb3JrKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiQUktXCIgKyAoKGNvbnRleHQgJiYgY29udGV4dC5vcGVyYXRpb24ucGFyZW50SWQpIHx8IFwiVW5rbm93blwiKSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgY29udGV4dDogY29udGV4dCB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuZXdab25lLnJ1bihmbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmbigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICBQYXRjaGVzIGEgY2FsbGJhY2sgdG8gcmVzdG9yZSB0aGUgY29ycmVjdCBDb250ZXh0IHdoZW4gZ2V0Q3VycmVudENvbnRleHRcclxuICAgICAqICBpcyBydW4gd2l0aGluIGl0LiBUaGlzIGlzIG5lY2Vzc2FyeSBpZiBhdXRvbWF0aWMgY29ycmVsYXRpb24gZmFpbHMgdG8gd29ya1xyXG4gICAgICogIHdpdGggdXNlci1pbmNsdWRlZCBsaWJyYXJpZXMuXHJcbiAgICAgKlxyXG4gICAgICogIFRoZSBzdXBwbGllZCBjYWxsYmFjayB3aWxsIGJlIGdpdmVuIHRoZSBzYW1lIGNvbnRleHQgdGhhdCB3YXMgcHJlc2VudCBmb3JcclxuICAgICAqICB0aGUgY2FsbCB0byB3cmFwQ2FsbGJhY2suICAqL1xyXG4gICAgQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci53cmFwQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICBpZiAoQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBab25lLmN1cnJlbnQud3JhcChmbiwgXCJVc2VyLXdyYXBwZWQgbWV0aG9kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm47XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgRW5hYmxlcyB0aGUgQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5cclxuICAgICAqL1xyXG4gICAgQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc05vZGVWZXJzaW9uQ29tcGF0aWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFJ1biBwYXRjaGVzIGZvciBab25lLmpzXHJcbiAgICAgICAgaWYgKCFDb3JyZWxhdGlvbkNvbnRleHRNYW5hZ2VyLmhhc0V2ZXJFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzRXZlckVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyBMb2FkIGluIFpvbmUuanNcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIFJlcXVpcmUgem9uZSBpZiB3ZSBjYW4ndCBkZXRlY3QgaXRzIHByZXNlbmNlIC0gZ3VhcmRlZCBiZWNhdXNlIG9mIGlzc3VlICMzNDZcclxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB1c3VhbGx5IG11bHRpcGxlIHJlcXVpcmVzIG9mIHpvbmUuanMgZG9lcyBub3QgZXJyb3IgLSBidXQgd2Ugc2VlIHJlcG9ydHMgb2YgaXQgaGFwcGVuaW5nXHJcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgQXp1cmUgRnVuY3Rpb25zIGVudmlyb25tZW50LlxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpbmRpY2F0ZXMgdGhhdCB0aGUgZmlsZSBpcyBiZWluZyBpbmNsdWRlZCBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgc2FtZSBnbG9iYWwgc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAvLyBhdmVydGluZyByZXF1aXJlJ3MgY2FjaGUgc29tZWhvdy5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgWm9uZSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoXCJ6b25lLmpzXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBab25lIHdhcyBhbHJlYWR5IGxvYWRlZCBldmVuIHRob3VnaCB3ZSBjb3VsZG4ndCBmaW5kIGl0cyBnbG9iYWwgdmFyaWFibGVcclxuICAgICAgICAgICAgICAgIExvZ2dpbmcud2FybihcIkZhaWxlZCB0byByZXF1aXJlIHpvbmUuanNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgRGlhZ0NoYW5uZWwucmVnaXN0ZXJDb250ZXh0UHJlc2VydmF0aW9uKGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvbmUuY3VycmVudC53cmFwKGNiLCBcIkFJLUNvbnRleHRQcmVzZXJ2YXRpb25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnBhdGNoRXJyb3IoKTtcclxuICAgICAgICAgICAgdGhpcy5wYXRjaFRpbWVycyhbXCJzZXRUaW1lb3V0XCIsIFwic2V0SW50ZXJ2YWxcIl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogIERpc2FibGVzIHRoZSBDb3JyZWxhdGlvbkNvbnRleHRNYW5hZ2VyLlxyXG4gICAgICovXHJcbiAgICBDb3JyZWxhdGlvbkNvbnRleHRNYW5hZ2VyLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgUmVwb3J0cyBpZiB0aGUgQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlciBpcyBhYmxlIHRvIHJ1biBpbiB0aGlzIGVudmlyb25tZW50XHJcbiAgICAgKi9cclxuICAgIENvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXIuaXNOb2RlVmVyc2lvbkNvbXBhdGlibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gVW5pdCB0ZXN0cyB3YXJuIG9mIGVycm9ycyA8IDMuMyBmcm9tIHRpbWVyIHBhdGNoaW5nLiBBbGwgdmVyc2lvbnMgYmVmb3JlIDQgd2VyZSAwLnhcclxuICAgICAgICB2YXIgbm9kZVZlciA9IHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KG5vZGVWZXJbMF0pID4gMyB8fCAocGFyc2VJbnQobm9kZVZlclswXSkgPiAyICYmIHBhcnNlSW50KG5vZGVWZXJbMV0pID4gMik7XHJcbiAgICB9O1xyXG4gICAgLy8gWm9uZS5qcyBicmVha3MgY29uY2F0ZW5hdGlvbiBvZiB0aW1lciByZXR1cm4gdmFsdWVzLlxyXG4gICAgLy8gVGhpcyBmaXhlcyB0aGF0LlxyXG4gICAgQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5wYXRjaFRpbWVycyA9IGZ1bmN0aW9uIChtZXRob2ROYW1lcykge1xyXG4gICAgICAgIG1ldGhvZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIG9yaWcgPSBnbG9iYWxbbWV0aG9kTmFtZV07XHJcbiAgICAgICAgICAgIGdsb2JhbFttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXQgPSBvcmlnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICByZXQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YSAmJiB0eXBlb2YgdGhpcy5kYXRhLmhhbmRsZUlkICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmhhbmRsZUlkLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIFpvbmUuanMgYnJlYWtzIGRlZXBFcXVhbCBvbiBlcnJvciBvYmplY3RzIChieSBtYWtpbmcgaW50ZXJuYWwgcHJvcGVydGllcyBlbnVtZXJhYmxlKS5cclxuICAgIC8vIFRoaXMgZml4ZXMgdGhhdCBieSBzdWJjbGFzc2luZyB0aGUgZXJyb3Igb2JqZWN0IGFuZCBtYWtpbmcgYWxsIHByb3BlcnRpZXMgbm90IGVudW1lcmFibGVcclxuICAgIENvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXIucGF0Y2hFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3JpZyA9IGdsb2JhbC5FcnJvcjtcclxuICAgICAgICAvLyBOZXcgZXJyb3IgaGFuZGxlclxyXG4gICAgICAgIGZ1bmN0aW9uIEFwcEluc2lnaHRzQXN5bmNDb3JyZWxhdGVkRXJyb3JXcmFwcGVyKCkge1xyXG4gICAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQXBwSW5zaWdodHNBc3luY0NvcnJlbGF0ZWRFcnJvcldyYXBwZXIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXBwSW5zaWdodHNBc3luY0NvcnJlbGF0ZWRFcnJvcldyYXBwZXIuYXBwbHkoT2JqZWN0LmNyZWF0ZShBcHBJbnNpZ2h0c0FzeW5jQ29ycmVsYXRlZEVycm9yV3JhcHBlci5wcm90b3R5cGUpLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIElzIHRoaXMgb2JqZWN0IHNldCB0byByZXdyaXRlIHRoZSBzdGFjaz9cclxuICAgICAgICAgICAgLy8gSWYgc28sIHdlIHNob3VsZCB0dXJuIG9mZiBzb21lIFpvbmUgc3R1ZmYgdGhhdCBpcyBwcm9uZSB0byBicmVha1xyXG4gICAgICAgICAgICB2YXIgc3RhY2tSZXdyaXRlID0gb3JpZy5zdGFja1Jld3JpdGU7XHJcbiAgICAgICAgICAgIGlmIChvcmlnLnByZXBhcmVTdGFja1RyYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBvcmlnLnN0YWNrUmV3cml0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YWNrVHJhY2UgPSBvcmlnLnByZXBhcmVTdGFja1RyYWNlO1xyXG4gICAgICAgICAgICAgICAgb3JpZy5wcmVwYXJlU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIChlLCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNvbWUgQUkgYW5kIFpvbmUgbWV0aG9kcyBmcm9tIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBsZWF2ZSBzaWRlLWVmZmVjdHNcclxuICAgICAgICAgICAgICAgICAgICAvLyBBbGdvcml0aG0gaXMgdG8gZmluZCB0aGUgZmlyc3QgZnJhbWUgb24gdGhlIHN0YWNrIGFmdGVyIHRoZSBmaXJzdCBpbnN0YW5jZShzKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIEF1dG9Db2xsZWN0aW9uL0NvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXJcclxuICAgICAgICAgICAgICAgICAgICAvLyBFZy4gdGhpcyBzaG91bGQgcmV0dXJuIHRoZSBVc2VyIGZyYW1lIG9uIGFuIGFycmF5IGxpa2UgYmVsb3c6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIFpvbmUgfCBab25lIHwgQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlciB8IENvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXIgfCBVc2VyXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kT25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IHNbaV0uZ2V0RmlsZU5hbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZU5hbWUuaW5kZXhPZihcIkF1dG9Db2xsZWN0aW9uL0NvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXJcIikgPT09IC0xICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWUuaW5kZXhPZihcIkF1dG9Db2xsZWN0aW9uXFxcXENvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXJcIikgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kT25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kT25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBMb29wIGFib3ZlIGdvZXMgb25lIGV4dHJhIHN0ZXBcclxuICAgICAgICAgICAgICAgICAgICBpID0gTWF0aC5tYXgoMCwgaSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZE9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNwbGljZSgwLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrVHJhY2UoZSwgcyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBlcnJvciBjb25zdHJ1Y3RvclxyXG4gICAgICAgICAgICBvcmlnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgWm9uZSBzdGFjayByZXdyaXRpbmcgc2V0dGluZ3NcclxuICAgICAgICAgICAgb3JpZy5zdGFja1Jld3JpdGUgPSBzdGFja1Jld3JpdGU7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB1bmV4cGVjdGVkIGJpdHMgZnJvbSBzdGFjayB0cmFjZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFjayAmJiB0eXBlb2YgdGhpcy5zdGFjayA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YWNrRnJhbWVzID0gdGhpcy5zdGFjay5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGlzIGNsYXNzXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2tGcmFtZXMubGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFja0ZyYW1lc1syXS50cmltKCkuaW5kZXhPZihcImF0IEVycm9yLkFwcEluc2lnaHRzQXN5bmNDb3JyZWxhdGVkRXJyb3JXcmFwcGVyXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRnJhbWVzLnNwbGljZSgyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhY2tGcmFtZXNbMV0udHJpbSgpLmluZGV4T2YoXCJhdCBBcHBJbnNpZ2h0c0FzeW5jQ29ycmVsYXRlZEVycm9yV3JhcHBlci5ab25lQXdhcmVFcnJvclwiKSA9PT0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBzdGFja0ZyYW1lc1syXS50cmltKCkuaW5kZXhPZihcImF0IG5ldyBBcHBJbnNpZ2h0c0FzeW5jQ29ycmVsYXRlZEVycm9yV3JhcHBlclwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFja0ZyYW1lcy5zcGxpY2UoMSwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIEFJIGNvcnJlbGF0aW9uIGlkc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjayA9IHN0YWNrRnJhbWVzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gdi5pbmRleE9mKFwiKSBbXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydEluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHYuc3Vic3RyKDAsIHN0YXJ0SW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgICAgICAgICB9KS5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGdldE93blByb3BlcnR5TmFtZXMgc2hvdWxkIGJlIGEgc3VwZXJzZXQgb2YgT2JqZWN0LmtleXMuLi5cclxuICAgICAgICAgICAgLy8gVGhpcyBhcHBlYXJzIHRvIG5vdCBhbHdheXMgYmUgdGhlIGNhc2VcclxuICAgICAgICAgICAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykuY29uY2F0KE9iamVjdC5rZXlzKHRoaXMpKTtcclxuICAgICAgICAgICAgLy8gWm9uZS5qcyB3aWxsIGF1dG9tYXRpY2FsbHkgY3JlYXRlIHNvbWUgaGlkZGVuIHByb3BlcnRpZXMgYXQgcmVhZCB0aW1lLlxyXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHByb2FjdGl2ZWx5IG1ha2UgdGhvc2Ugbm90IGVudW1lcmFibGUgYXMgd2VsbCBhcyB0aGUgY3VycmVudGx5IHZpc2libGUgcHJvcGVydGllc1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gcHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgaGlkZGVuUHJvcGVydHlOYW1lID0gWm9uZVsnX19zeW1ib2xfXyddKHByb3BlcnR5TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHlOYW1lLCB7IGVudW1lcmFibGU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGhpZGRlblByb3BlcnR5TmFtZSwgeyBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEluaGVyaXQgZnJvbSB0aGUgWm9uZS5qcyBlcnJvciBoYW5kbGVyXHJcbiAgICAgICAgQXBwSW5zaWdodHNBc3luY0NvcnJlbGF0ZWRFcnJvcldyYXBwZXIucHJvdG90eXBlID0gb3JpZy5wcm90b3R5cGU7XHJcbiAgICAgICAgLy8gV2UgbmVlZCB0aGlzIGxvb3AgdG8gY29weSBvdXRlciBtZXRob2RzIGxpa2UgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2VcclxuICAgICAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcmlnKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBwcm9wc1tpXTtcclxuICAgICAgICAgICAgaWYgKCFBcHBJbnNpZ2h0c0FzeW5jQ29ycmVsYXRlZEVycm9yV3JhcHBlcltwcm9wZXJ0eU5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwSW5zaWdodHNBc3luY0NvcnJlbGF0ZWRFcnJvcldyYXBwZXIsIHByb3BlcnR5TmFtZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvcmlnLCBwcm9wZXJ0eU5hbWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBsaWNpdCBjYXN0IHRvIDxhbnk+IHJlcXVpcmVkIHRvIGF2b2lkIHR5cGUgZXJyb3IgZm9yIGNhcHR1cmVTdGFja1RyYWNlXHJcbiAgICAgICAgLy8gd2l0aCBsYXRlc3Qgbm9kZS5kLnRzIChkZXNwaXRlIHdvcmthcm91bmQgYWJvdmUpXHJcbiAgICAgICAgZ2xvYmFsLkVycm9yID0gQXBwSW5zaWdodHNBc3luY0NvcnJlbGF0ZWRFcnJvcldyYXBwZXI7XHJcbiAgICB9O1xyXG4gICAgQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlci5lbmFibGVkID0gZmFsc2U7XHJcbiAgICBDb3JyZWxhdGlvbkNvbnRleHRNYW5hZ2VyLmhhc0V2ZXJFbmFibGVkID0gZmFsc2U7XHJcbiAgICByZXR1cm4gQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlcjtcclxufSgpKTtcclxuZXhwb3J0cy5Db3JyZWxhdGlvbkNvbnRleHRNYW5hZ2VyID0gQ29ycmVsYXRpb25Db250ZXh0TWFuYWdlcjtcclxudmFyIEN1c3RvbVByb3BlcnRpZXNJbXBsID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEN1c3RvbVByb3BlcnRpZXNJbXBsKGhlYWRlcikge1xyXG4gICAgICAgIHRoaXMucHJvcHMgPSBbXTtcclxuICAgICAgICB0aGlzLmFkZEhlYWRlckRhdGEoaGVhZGVyKTtcclxuICAgIH1cclxuICAgIEN1c3RvbVByb3BlcnRpZXNJbXBsLnByb3RvdHlwZS5hZGRIZWFkZXJEYXRhID0gZnVuY3Rpb24gKGhlYWRlcikge1xyXG4gICAgICAgIHZhciBrZXl2YWxzID0gaGVhZGVyID8gaGVhZGVyLnNwbGl0KFwiLCBcIikgOiBbXTtcclxuICAgICAgICB0aGlzLnByb3BzID0ga2V5dmFscy5tYXAoZnVuY3Rpb24gKGtleXZhbCkge1xyXG4gICAgICAgICAgICB2YXIgcGFydHMgPSBrZXl2YWwuc3BsaXQoXCI9XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBrZXk6IHBhcnRzWzBdLCB2YWx1ZTogcGFydHNbMV0gfTtcclxuICAgICAgICB9KS5jb25jYXQodGhpcy5wcm9wcyk7XHJcbiAgICB9O1xyXG4gICAgQ3VzdG9tUHJvcGVydGllc0ltcGwucHJvdG90eXBlLnNlcmlhbGl6ZVRvSGVhZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm1hcChmdW5jdGlvbiAoa2V5dmFsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXl2YWwua2V5ICsgXCI9XCIgKyBrZXl2YWwudmFsdWU7XHJcbiAgICAgICAgfSkuam9pbihcIiwgXCIpO1xyXG4gICAgfTtcclxuICAgIEN1c3RvbVByb3BlcnRpZXNJbXBsLnByb3RvdHlwZS5nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnByb3BzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXl2YWwgPSB0aGlzLnByb3BzW2ldO1xyXG4gICAgICAgICAgICBpZiAoa2V5dmFsLmtleSA9PT0gcHJvcCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXZhbC52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9O1xyXG4gICAgLy8gVE9ETzogU3RyaWN0bHkgYWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBwcm9wZXJ0aWVzIHdoaWNoIGFyZSByZWNpZXZlZCBmcm9tXHJcbiAgICAvLyBhbiBpbmNvbWluZyByZXF1ZXN0IHNob3VsZCBiZSBsZWZ0IHVudG91Y2hlZCwgd2hpbGUgd2UgbWF5IGFkZCBvdXIgb3duIG5ld1xyXG4gICAgLy8gcHJvcGVydGllcy4gVGhlIGxvZ2ljIGhlcmUgd2lsbCBuZWVkIHRvIGNoYW5nZSB0byB0cmFjayB0aGF0LlxyXG4gICAgQ3VzdG9tUHJvcGVydGllc0ltcGwucHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24gKHByb3AsIHZhbCkge1xyXG4gICAgICAgIGlmIChDdXN0b21Qcm9wZXJ0aWVzSW1wbC5iYW5uZWRDaGFyYWN0ZXJzLnRlc3QocHJvcCkgfHwgQ3VzdG9tUHJvcGVydGllc0ltcGwuYmFubmVkQ2hhcmFjdGVycy50ZXN0KHZhbCkpIHtcclxuICAgICAgICAgICAgTG9nZ2luZy53YXJuKFwiQ29ycmVsYXRpb24gY29udGV4dCBwcm9wZXJ0eSBrZXlzIGFuZCB2YWx1ZXMgbXVzdCBub3QgY29udGFpbiAnLCcgb3IgJz0nLiBzZXRQcm9wZXJ0eSB3YXMgY2FsbGVkIHdpdGgga2V5OiBcIiArIHByb3AgKyBcIiBhbmQgdmFsdWU6IFwiICsgdmFsKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucHJvcHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGtleXZhbCA9IHRoaXMucHJvcHNbaV07XHJcbiAgICAgICAgICAgIGlmIChrZXl2YWwua2V5ID09PSBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICBrZXl2YWwudmFsdWUgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9wcy5wdXNoKHsga2V5OiBwcm9wLCB2YWx1ZTogdmFsIH0pO1xyXG4gICAgfTtcclxuICAgIEN1c3RvbVByb3BlcnRpZXNJbXBsLmJhbm5lZENoYXJhY3RlcnMgPSAvWyw9XS87XHJcbiAgICByZXR1cm4gQ3VzdG9tUHJvcGVydGllc0ltcGw7XHJcbn0oKSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvcnJlbGF0aW9uQ29udGV4dE1hbmFnZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/Exceptions.js":
/*!***************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/Exceptions.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar AutoCollectExceptions = (function () {\r\n    function AutoCollectExceptions(client) {\r\n        if (!!AutoCollectExceptions.INSTANCE) {\r\n            throw new Error(\"Exception tracking should be configured from the applicationInsights object\");\r\n        }\r\n        AutoCollectExceptions.INSTANCE = this;\r\n        this._client = client;\r\n    }\r\n    Object.defineProperty(AutoCollectExceptions, \"UNCAUGHT_EXCEPTION_HANDLER_NAME\", {\r\n        get: function () { return \"uncaughtException\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AutoCollectExceptions, \"UNHANDLED_REJECTION_HANDLER_NAME\", {\r\n        get: function () { return \"unhandledRejection\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AutoCollectExceptions.prototype.isInitialized = function () {\r\n        return this._isInitialized;\r\n    };\r\n    AutoCollectExceptions.prototype.enable = function (isEnabled) {\r\n        var _this = this;\r\n        if (isEnabled) {\r\n            this._isInitialized = true;\r\n            var self = this;\r\n            if (!this._exceptionListenerHandle) {\r\n                var handle = function (reThrow, error) {\r\n                    _this._client.trackException({ exception: error });\r\n                    _this._client.flush({ isAppCrashing: true });\r\n                    if (reThrow) {\r\n                        var THIS_IS_APPLICATION_INSIGHTS_RETHROWING_YOUR_EXCEPTION = error;\r\n                        throw THIS_IS_APPLICATION_INSIGHTS_RETHROWING_YOUR_EXCEPTION; // Error originated somewhere else in your app\r\n                    }\r\n                };\r\n                this._exceptionListenerHandle = handle.bind(this, true);\r\n                this._rejectionListenerHandle = handle.bind(this, false);\r\n                process.on(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\r\n                process.on(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\r\n            }\r\n        }\r\n        else {\r\n            if (this._exceptionListenerHandle) {\r\n                process.removeListener(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\r\n                process.removeListener(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\r\n                this._exceptionListenerHandle = undefined;\r\n                this._rejectionListenerHandle = undefined;\r\n                delete this._exceptionListenerHandle;\r\n                delete this._rejectionListenerHandle;\r\n            }\r\n        }\r\n    };\r\n    AutoCollectExceptions.prototype.dispose = function () {\r\n        AutoCollectExceptions.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    };\r\n    AutoCollectExceptions.INSTANCE = null;\r\n    return AutoCollectExceptions;\r\n}());\r\nmodule.exports = AutoCollectExceptions;\r\n//# sourceMappingURL=Exceptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vRXhjZXB0aW9ucy5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vRXhjZXB0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIEF1dG9Db2xsZWN0RXhjZXB0aW9ucyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBdXRvQ29sbGVjdEV4Y2VwdGlvbnMoY2xpZW50KSB7XHJcbiAgICAgICAgaWYgKCEhQXV0b0NvbGxlY3RFeGNlcHRpb25zLklOU1RBTkNFKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4Y2VwdGlvbiB0cmFja2luZyBzaG91bGQgYmUgY29uZmlndXJlZCBmcm9tIHRoZSBhcHBsaWNhdGlvbkluc2lnaHRzIG9iamVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQXV0b0NvbGxlY3RFeGNlcHRpb25zLklOU1RBTkNFID0gdGhpcztcclxuICAgICAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0b0NvbGxlY3RFeGNlcHRpb25zLCBcIlVOQ0FVR0hUX0VYQ0VQVElPTl9IQU5ETEVSX05BTUVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJ1bmNhdWdodEV4Y2VwdGlvblwiOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRvQ29sbGVjdEV4Y2VwdGlvbnMsIFwiVU5IQU5ETEVEX1JFSkVDVElPTl9IQU5ETEVSX05BTUVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJ1bmhhbmRsZWRSZWplY3Rpb25cIjsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBdXRvQ29sbGVjdEV4Y2VwdGlvbnMucHJvdG90eXBlLmlzSW5pdGlhbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSW5pdGlhbGl6ZWQ7XHJcbiAgICB9O1xyXG4gICAgQXV0b0NvbGxlY3RFeGNlcHRpb25zLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZXhjZXB0aW9uTGlzdGVuZXJIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoYW5kbGUgPSBmdW5jdGlvbiAocmVUaHJvdywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2xpZW50LnRyYWNrRXhjZXB0aW9uKHsgZXhjZXB0aW9uOiBlcnJvciB9KTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2xpZW50LmZsdXNoKHsgaXNBcHBDcmFzaGluZzogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVUaHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgVEhJU19JU19BUFBMSUNBVElPTl9JTlNJR0hUU19SRVRIUk9XSU5HX1lPVVJfRVhDRVBUSU9OID0gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFRISVNfSVNfQVBQTElDQVRJT05fSU5TSUdIVFNfUkVUSFJPV0lOR19ZT1VSX0VYQ0VQVElPTjsgLy8gRXJyb3Igb3JpZ2luYXRlZCBzb21ld2hlcmUgZWxzZSBpbiB5b3VyIGFwcFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leGNlcHRpb25MaXN0ZW5lckhhbmRsZSA9IGhhbmRsZS5iaW5kKHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVqZWN0aW9uTGlzdGVuZXJIYW5kbGUgPSBoYW5kbGUuYmluZCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzLm9uKEF1dG9Db2xsZWN0RXhjZXB0aW9ucy5VTkNBVUdIVF9FWENFUFRJT05fSEFORExFUl9OQU1FLCB0aGlzLl9leGNlcHRpb25MaXN0ZW5lckhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzLm9uKEF1dG9Db2xsZWN0RXhjZXB0aW9ucy5VTkhBTkRMRURfUkVKRUNUSU9OX0hBTkRMRVJfTkFNRSwgdGhpcy5fcmVqZWN0aW9uTGlzdGVuZXJIYW5kbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZXhjZXB0aW9uTGlzdGVuZXJIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoQXV0b0NvbGxlY3RFeGNlcHRpb25zLlVOQ0FVR0hUX0VYQ0VQVElPTl9IQU5ETEVSX05BTUUsIHRoaXMuX2V4Y2VwdGlvbkxpc3RlbmVySGFuZGxlKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoQXV0b0NvbGxlY3RFeGNlcHRpb25zLlVOSEFORExFRF9SRUpFQ1RJT05fSEFORExFUl9OQU1FLCB0aGlzLl9yZWplY3Rpb25MaXN0ZW5lckhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leGNlcHRpb25MaXN0ZW5lckhhbmRsZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlamVjdGlvbkxpc3RlbmVySGFuZGxlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V4Y2VwdGlvbkxpc3RlbmVySGFuZGxlO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3JlamVjdGlvbkxpc3RlbmVySGFuZGxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEF1dG9Db2xsZWN0RXhjZXB0aW9ucy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBBdXRvQ29sbGVjdEV4Y2VwdGlvbnMuSU5TVEFOQ0UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgQXV0b0NvbGxlY3RFeGNlcHRpb25zLklOU1RBTkNFID0gbnVsbDtcclxuICAgIHJldHVybiBBdXRvQ29sbGVjdEV4Y2VwdGlvbnM7XHJcbn0oKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gQXV0b0NvbGxlY3RFeGNlcHRpb25zO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeGNlcHRpb25zLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/Exceptions.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/HttpDependencies.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/HttpDependencies.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar http = __webpack_require__(/*! http */ \"http\");\r\nvar https = __webpack_require__(/*! https */ \"https\");\r\nvar Logging = __webpack_require__(/*! ../Library/Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar Util = __webpack_require__(/*! ../Library/Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar RequestResponseHeaders = __webpack_require__(/*! ../Library/RequestResponseHeaders */ \"./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js\");\r\nvar HttpDependencyParser = __webpack_require__(/*! ./HttpDependencyParser */ \"./node_modules/applicationinsights/out/AutoCollection/HttpDependencyParser.js\");\r\nvar CorrelationContextManager_1 = __webpack_require__(/*! ./CorrelationContextManager */ \"./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js\");\r\nvar DiagChannel = __webpack_require__(/*! ./diagnostic-channel/initialization */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/initialization.js\");\r\nvar AutoCollectHttpDependencies = (function () {\r\n    function AutoCollectHttpDependencies(client) {\r\n        if (!!AutoCollectHttpDependencies.INSTANCE) {\r\n            throw new Error(\"Client request tracking should be configured from the applicationInsights object\");\r\n        }\r\n        AutoCollectHttpDependencies.INSTANCE = this;\r\n        this._client = client;\r\n    }\r\n    AutoCollectHttpDependencies.prototype.enable = function (isEnabled) {\r\n        this._isEnabled = isEnabled;\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._initialize();\r\n        }\r\n        if (DiagChannel.IsInitialized) {\r\n            __webpack_require__(/*! ./diagnostic-channel/mongodb.sub */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mongodb.sub.js\").enable(isEnabled, this._client);\r\n            __webpack_require__(/*! ./diagnostic-channel/mysql.sub */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mysql.sub.js\").enable(isEnabled, this._client);\r\n            __webpack_require__(/*! ./diagnostic-channel/redis.sub */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/redis.sub.js\").enable(isEnabled, this._client);\r\n            __webpack_require__(/*! ./diagnostic-channel/postgres.sub */ \"./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/postgres.sub.js\").enable(isEnabled, this._client);\r\n        }\r\n    };\r\n    AutoCollectHttpDependencies.prototype.isInitialized = function () {\r\n        return this._isInitialized;\r\n    };\r\n    AutoCollectHttpDependencies.prototype._initialize = function () {\r\n        var _this = this;\r\n        this._isInitialized = true;\r\n        var originalGet = http.get;\r\n        var originalRequest = http.request;\r\n        var originalHttpsRequest = https.request;\r\n        var clientRequestPatch = function (request, options) {\r\n            var shouldCollect = !options[AutoCollectHttpDependencies.disableCollectionRequestOption] &&\r\n                !request[AutoCollectHttpDependencies.alreadyAutoCollectedFlag];\r\n            request[AutoCollectHttpDependencies.alreadyAutoCollectedFlag] = true;\r\n            if (request && options && shouldCollect) {\r\n                AutoCollectHttpDependencies.trackRequest(_this._client, { options: options, request: request });\r\n            }\r\n        };\r\n        // On node >= v0.11.12 and < 9.0 (excluding 8.9.0) https.request just calls http.request (with additional options).\r\n        // On node < 0.11.12, 8.9.0, and 9.0 > https.request is handled separately\r\n        // Patch both and leave a flag to not double-count on versions that just call through\r\n        // We add the flag to both http and https to protect against strange double collection in other scenarios\r\n        http.request = function (options) {\r\n            var requestArgs = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                requestArgs[_i - 1] = arguments[_i];\r\n            }\r\n            var request = originalRequest.call.apply(originalRequest, [http, options].concat(requestArgs));\r\n            clientRequestPatch(request, options);\r\n            return request;\r\n        };\r\n        https.request = function (options) {\r\n            var requestArgs = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                requestArgs[_i - 1] = arguments[_i];\r\n            }\r\n            var request = originalHttpsRequest.call.apply(originalHttpsRequest, [https, options].concat(requestArgs));\r\n            clientRequestPatch(request, options);\r\n            return request;\r\n        };\r\n        // Node 8 calls http.request from http.get using a local reference!\r\n        // We have to patch .get manually in this case and can't just assume request is enough\r\n        // We have to replace the entire method in this case. We can't call the original.\r\n        // This is because calling the original will give us no chance to set headers as it internally does .end().\r\n        http.get = function (options) {\r\n            var requestArgs = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                requestArgs[_i - 1] = arguments[_i];\r\n            }\r\n            var request = (_a = http.request).call.apply(_a, [http, options].concat(requestArgs));\r\n            request.end();\r\n            return request;\r\n            var _a;\r\n        };\r\n        https.get = function (options) {\r\n            var requestArgs = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                requestArgs[_i - 1] = arguments[_i];\r\n            }\r\n            var request = (_a = https.request).call.apply(_a, [https, options].concat(requestArgs));\r\n            request.end();\r\n            return request;\r\n            var _a;\r\n        };\r\n    };\r\n    /**\r\n     * Tracks an outgoing request. Because it may set headers this method must be called before\r\n     * writing content to or ending the request.\r\n     */\r\n    AutoCollectHttpDependencies.trackRequest = function (client, telemetry) {\r\n        if (!telemetry.options || !telemetry.request || !client) {\r\n            Logging.info(\"AutoCollectHttpDependencies.trackRequest was called with invalid parameters: \", !telemetry.options, !telemetry.request, !client);\r\n            return;\r\n        }\r\n        var requestParser = new HttpDependencyParser(telemetry.options, telemetry.request);\r\n        var currentContext = CorrelationContextManager_1.CorrelationContextManager.getCurrentContext();\r\n        var uniqueRequestId = currentContext && currentContext.operation && (currentContext.operation.parentId + AutoCollectHttpDependencies.requestNumber++ + '.');\r\n        // Add the source correlationId to the request headers, if a value was not already provided.\r\n        // The getHeader/setHeader methods aren't available on very old Node versions, and\r\n        // are not included in the v0.10 type declarations currently used. So check if the\r\n        // methods exist before invoking them.\r\n        if (Util.canIncludeCorrelationHeader(client, requestParser.getUrl()) && telemetry.request.getHeader && telemetry.request.setHeader) {\r\n            if (client.config && client.config.correlationId) {\r\n                var correlationHeader = telemetry.request.getHeader(RequestResponseHeaders.requestContextHeader);\r\n                if (correlationHeader) {\r\n                    var components = correlationHeader.split(\",\");\r\n                    var key_1 = RequestResponseHeaders.requestContextSourceKey + \"=\";\r\n                    if (!components.some(function (value) { return value.substring(0, key_1.length) === key_1; })) {\r\n                        telemetry.request.setHeader(RequestResponseHeaders.requestContextHeader, correlationHeader + \",\" + RequestResponseHeaders.requestContextSourceKey + \"=\" + client.config.correlationId);\r\n                    }\r\n                }\r\n                else {\r\n                    telemetry.request.setHeader(RequestResponseHeaders.requestContextHeader, RequestResponseHeaders.requestContextSourceKey + \"=\" + client.config.correlationId);\r\n                }\r\n            }\r\n            if (currentContext && currentContext.operation) {\r\n                telemetry.request.setHeader(RequestResponseHeaders.requestIdHeader, uniqueRequestId);\r\n                // Also set legacy headers\r\n                telemetry.request.setHeader(RequestResponseHeaders.parentIdHeader, currentContext.operation.id);\r\n                telemetry.request.setHeader(RequestResponseHeaders.rootIdHeader, uniqueRequestId);\r\n                var correlationContextHeader = currentContext.customProperties.serializeToHeader();\r\n                if (correlationContextHeader) {\r\n                    telemetry.request.setHeader(RequestResponseHeaders.correlationContextHeader, correlationContextHeader);\r\n                }\r\n            }\r\n        }\r\n        // Collect dependency telemetry about the request when it finishes.\r\n        if (telemetry.request.on) {\r\n            telemetry.request.on('response', function (response) {\r\n                requestParser.onResponse(response);\r\n                var dependencyTelemetry = requestParser.getDependencyTelemetry(telemetry, uniqueRequestId);\r\n                dependencyTelemetry.contextObjects = dependencyTelemetry.contextObjects || {};\r\n                dependencyTelemetry.contextObjects[\"http.RequestOptions\"] = telemetry.options;\r\n                dependencyTelemetry.contextObjects[\"http.ClientRequest\"] = telemetry.request;\r\n                dependencyTelemetry.contextObjects[\"http.ClientResponse\"] = response;\r\n                client.trackDependency(dependencyTelemetry);\r\n            });\r\n            telemetry.request.on('error', function (e) {\r\n                requestParser.onError(e);\r\n                var dependencyTelemetry = requestParser.getDependencyTelemetry(telemetry, uniqueRequestId);\r\n                dependencyTelemetry.contextObjects = dependencyTelemetry.contextObjects || {};\r\n                dependencyTelemetry.contextObjects[\"http.RequestOptions\"] = telemetry.options;\r\n                dependencyTelemetry.contextObjects[\"http.ClientRequest\"] = telemetry.request;\r\n                dependencyTelemetry.contextObjects[\"Error\"] = e;\r\n                client.trackDependency(dependencyTelemetry);\r\n            });\r\n        }\r\n    };\r\n    AutoCollectHttpDependencies.prototype.dispose = function () {\r\n        AutoCollectHttpDependencies.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    };\r\n    AutoCollectHttpDependencies.disableCollectionRequestOption = 'disableAppInsightsAutoCollection';\r\n    AutoCollectHttpDependencies.requestNumber = 1;\r\n    AutoCollectHttpDependencies.alreadyAutoCollectedFlag = '_appInsightsAutoCollected';\r\n    return AutoCollectHttpDependencies;\r\n}());\r\nmodule.exports = AutoCollectHttpDependencies;\r\n//# sourceMappingURL=HttpDependencies.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/HttpDependencies.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/HttpDependencyParser.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/HttpDependencyParser.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar url = __webpack_require__(/*! url */ \"url\");\r\nvar Contracts = __webpack_require__(/*! ../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar Util = __webpack_require__(/*! ../Library/Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar RequestResponseHeaders = __webpack_require__(/*! ../Library/RequestResponseHeaders */ \"./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js\");\r\nvar RequestParser = __webpack_require__(/*! ./RequestParser */ \"./node_modules/applicationinsights/out/AutoCollection/RequestParser.js\");\r\nvar CorrelationIdManager = __webpack_require__(/*! ../Library/CorrelationIdManager */ \"./node_modules/applicationinsights/out/Library/CorrelationIdManager.js\");\r\n/**\r\n * Helper class to read data from the requst/response objects and convert them into the telemetry contract\r\n */\r\nvar HttpDependencyParser = (function (_super) {\r\n    __extends(HttpDependencyParser, _super);\r\n    function HttpDependencyParser(requestOptions, request) {\r\n        var _this = _super.call(this) || this;\r\n        if (request && request.method && requestOptions) {\r\n            // The ClientRequest.method property isn't documented, but is always there.\r\n            _this.method = request.method;\r\n            _this.url = HttpDependencyParser._getUrlFromRequestOptions(requestOptions, request);\r\n            _this.startTime = +new Date();\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Called when the ClientRequest emits an error event.\r\n     */\r\n    HttpDependencyParser.prototype.onError = function (error) {\r\n        this._setStatus(undefined, error);\r\n    };\r\n    /**\r\n     * Called when the ClientRequest emits a response event.\r\n     */\r\n    HttpDependencyParser.prototype.onResponse = function (response) {\r\n        this._setStatus(response.statusCode, undefined);\r\n        this.correlationId = Util.getCorrelationContextTarget(response, RequestResponseHeaders.requestContextTargetKey);\r\n    };\r\n    /**\r\n     * Gets a dependency data contract object for a completed ClientRequest.\r\n     */\r\n    HttpDependencyParser.prototype.getDependencyTelemetry = function (baseTelemetry, dependencyId) {\r\n        var urlObject = url.parse(this.url);\r\n        urlObject.search = undefined;\r\n        urlObject.hash = undefined;\r\n        var dependencyName = this.method.toUpperCase() + \" \" + urlObject.pathname;\r\n        var remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_HTTP;\r\n        var remoteDependencyTarget = urlObject.hostname;\r\n        if (this.correlationId) {\r\n            remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_AI;\r\n            if (this.correlationId !== CorrelationIdManager.correlationIdPrefix) {\r\n                remoteDependencyTarget = urlObject.hostname + \" | \" + this.correlationId;\r\n            }\r\n        }\r\n        else {\r\n            remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_HTTP;\r\n        }\r\n        var dependencyTelemetry = {\r\n            id: dependencyId,\r\n            name: dependencyName,\r\n            data: this.url,\r\n            duration: this.duration,\r\n            success: this._isSuccess(),\r\n            resultCode: this.statusCode ? this.statusCode.toString() : null,\r\n            properties: this.properties || {},\r\n            dependencyTypeName: remoteDependencyType,\r\n            target: remoteDependencyTarget\r\n        };\r\n        // We should keep any parameters the user passed in\r\n        // Except the fields defined above in requestTelemetry, which take priority\r\n        // Except the properties field, where they're merged instead, with baseTelemetry taking priority\r\n        if (baseTelemetry) {\r\n            // Copy missing fields\r\n            for (var key in baseTelemetry) {\r\n                if (!dependencyTelemetry[key]) {\r\n                    dependencyTelemetry[key] = baseTelemetry[key];\r\n                }\r\n            }\r\n            // Merge properties\r\n            if (baseTelemetry.properties) {\r\n                for (var key in baseTelemetry.properties) {\r\n                    dependencyTelemetry.properties[key] = baseTelemetry.properties[key];\r\n                }\r\n            }\r\n        }\r\n        return dependencyTelemetry;\r\n    };\r\n    /**\r\n     * Builds a URL from request options, using the same logic as http.request(). This is\r\n     * necessary because a ClientRequest object does not expose a url property.\r\n     */\r\n    HttpDependencyParser._getUrlFromRequestOptions = function (options, request) {\r\n        if (typeof options === 'string') {\r\n            options = url.parse(options);\r\n        }\r\n        else {\r\n            // Avoid modifying the original options object.\r\n            var originalOptions_1 = options;\r\n            options = {};\r\n            if (originalOptions_1) {\r\n                Object.keys(originalOptions_1).forEach(function (key) {\r\n                    options[key] = originalOptions_1[key];\r\n                });\r\n            }\r\n        }\r\n        // Oddly, url.format ignores path and only uses pathname and search,\r\n        // so create them from the path, if path was specified\r\n        if (options.path) {\r\n            var parsedQuery = url.parse(options.path);\r\n            options.pathname = parsedQuery.pathname;\r\n            options.search = parsedQuery.search;\r\n        }\r\n        // Simiarly, url.format ignores hostname and port if host is specified,\r\n        // even if host doesn't have the port, but http.request does not work\r\n        // this way. It will use the port if one is not specified in host,\r\n        // effectively treating host as hostname, but will use the port specified\r\n        // in host if it exists.\r\n        if (options.host && options.port) {\r\n            // Force a protocol so it will parse the host as the host, not path.\r\n            // It is discarded and not used, so it doesn't matter if it doesn't match\r\n            var parsedHost = url.parse(\"http://\" + options.host);\r\n            if (!parsedHost.port && options.port) {\r\n                options.hostname = options.host;\r\n                delete options.host;\r\n            }\r\n        }\r\n        // Mix in default values used by http.request and others\r\n        options.protocol = options.protocol || (request.agent && request.agent.protocol) || undefined;\r\n        options.hostname = options.hostname || 'localhost';\r\n        return url.format(options);\r\n    };\r\n    return HttpDependencyParser;\r\n}(RequestParser));\r\nmodule.exports = HttpDependencyParser;\r\n//# sourceMappingURL=HttpDependencyParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/HttpDependencyParser.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/HttpRequestParser.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/HttpRequestParser.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar url = __webpack_require__(/*! url */ \"url\");\r\nvar Contracts = __webpack_require__(/*! ../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar Util = __webpack_require__(/*! ../Library/Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar RequestResponseHeaders = __webpack_require__(/*! ../Library/RequestResponseHeaders */ \"./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js\");\r\nvar RequestParser = __webpack_require__(/*! ./RequestParser */ \"./node_modules/applicationinsights/out/AutoCollection/RequestParser.js\");\r\nvar CorrelationIdManager = __webpack_require__(/*! ../Library/CorrelationIdManager */ \"./node_modules/applicationinsights/out/Library/CorrelationIdManager.js\");\r\n/**\r\n * Helper class to read data from the requst/response objects and convert them into the telemetry contract\r\n */\r\nvar HttpRequestParser = (function (_super) {\r\n    __extends(HttpRequestParser, _super);\r\n    function HttpRequestParser(request, requestId) {\r\n        var _this = _super.call(this) || this;\r\n        if (request) {\r\n            _this.method = request.method;\r\n            _this.url = _this._getAbsoluteUrl(request);\r\n            _this.startTime = +new Date();\r\n            _this.socketRemoteAddress = request.socket && request.socket.remoteAddress;\r\n            _this.parseHeaders(request, requestId);\r\n            if (request.connection) {\r\n                _this.connectionRemoteAddress = request.connection.remoteAddress;\r\n                _this.legacySocketRemoteAddress = request.connection[\"socket\"] && request.connection[\"socket\"].remoteAddress;\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    HttpRequestParser.prototype.onError = function (error, ellapsedMilliseconds) {\r\n        this._setStatus(undefined, error);\r\n        // This parameter is only for overrides. setStatus handles this internally for the autocollected case\r\n        if (ellapsedMilliseconds) {\r\n            this.duration = ellapsedMilliseconds;\r\n        }\r\n    };\r\n    HttpRequestParser.prototype.onResponse = function (response, ellapsedMilliseconds) {\r\n        this._setStatus(response.statusCode, undefined);\r\n        // This parameter is only for overrides. setStatus handles this internally for the autocollected case\r\n        if (ellapsedMilliseconds) {\r\n            this.duration = ellapsedMilliseconds;\r\n        }\r\n    };\r\n    HttpRequestParser.prototype.getRequestTelemetry = function (baseTelemetry) {\r\n        var requestTelemetry = {\r\n            id: this.requestId,\r\n            name: this.method + \" \" + url.parse(this.url).pathname,\r\n            url: this.url,\r\n            /*\r\n            See https://github.com/Microsoft/ApplicationInsights-dotnet-server/blob/25d695e6a906fbe977f67be3966d25dbf1c50a79/Src/Web/Web.Shared.Net/RequestTrackingTelemetryModule.cs#L250\r\n            for reference\r\n            */\r\n            source: this.sourceCorrelationId,\r\n            duration: this.duration,\r\n            resultCode: this.statusCode ? this.statusCode.toString() : null,\r\n            success: this._isSuccess(),\r\n            properties: this.properties\r\n        };\r\n        // We should keep any parameters the user passed in\r\n        // Except the fields defined above in requestTelemetry, which take priority\r\n        // Except the properties field, where they're merged instead, with baseTelemetry taking priority\r\n        if (baseTelemetry) {\r\n            // Copy missing fields\r\n            for (var key in baseTelemetry) {\r\n                if (!requestTelemetry[key]) {\r\n                    requestTelemetry[key] = baseTelemetry[key];\r\n                }\r\n            }\r\n            // Merge properties\r\n            if (baseTelemetry.properties) {\r\n                for (var key in baseTelemetry.properties) {\r\n                    requestTelemetry.properties[key] = baseTelemetry.properties[key];\r\n                }\r\n            }\r\n        }\r\n        return requestTelemetry;\r\n    };\r\n    HttpRequestParser.prototype.getRequestTags = function (tags) {\r\n        // create a copy of the context for requests since client info will be used here\r\n        var newTags = {};\r\n        for (var key in tags) {\r\n            newTags[key] = tags[key];\r\n        }\r\n        // don't override tags if they are already set\r\n        newTags[HttpRequestParser.keys.locationIp] = tags[HttpRequestParser.keys.locationIp] || this._getIp();\r\n        newTags[HttpRequestParser.keys.sessionId] = tags[HttpRequestParser.keys.sessionId] || this._getId(\"ai_session\");\r\n        newTags[HttpRequestParser.keys.userId] = tags[HttpRequestParser.keys.userId] || this._getId(\"ai_user\");\r\n        newTags[HttpRequestParser.keys.userAuthUserId] = tags[HttpRequestParser.keys.userAuthUserId] || this._getId(\"ai_authUser\");\r\n        newTags[HttpRequestParser.keys.operationName] = this.getOperationName(tags);\r\n        newTags[HttpRequestParser.keys.operationParentId] = this.getOperationParentId(tags);\r\n        newTags[HttpRequestParser.keys.operationId] = this.getOperationId(tags);\r\n        return newTags;\r\n    };\r\n    HttpRequestParser.prototype.getOperationId = function (tags) {\r\n        return tags[HttpRequestParser.keys.operationId] || this.operationId;\r\n    };\r\n    HttpRequestParser.prototype.getOperationParentId = function (tags) {\r\n        return tags[HttpRequestParser.keys.operationParentId] || this.parentId || this.getOperationId(tags);\r\n    };\r\n    HttpRequestParser.prototype.getOperationName = function (tags) {\r\n        return tags[HttpRequestParser.keys.operationName] || this.method + \" \" + url.parse(this.url).pathname;\r\n    };\r\n    HttpRequestParser.prototype.getRequestId = function () {\r\n        return this.requestId;\r\n    };\r\n    HttpRequestParser.prototype.getCorrelationContextHeader = function () {\r\n        return this.correlationContextHeader;\r\n    };\r\n    HttpRequestParser.prototype._getAbsoluteUrl = function (request) {\r\n        if (!request.headers) {\r\n            return request.url;\r\n        }\r\n        var encrypted = request.connection ? request.connection.encrypted : null;\r\n        var requestUrl = url.parse(request.url);\r\n        var pathName = requestUrl.pathname;\r\n        var search = requestUrl.search;\r\n        var absoluteUrl = url.format({\r\n            protocol: encrypted ? \"https\" : \"http\",\r\n            host: request.headers.host,\r\n            pathname: pathName,\r\n            search: search\r\n        });\r\n        return absoluteUrl;\r\n    };\r\n    HttpRequestParser.prototype._getIp = function () {\r\n        // regex to match ipv4 without port\r\n        // Note: including the port would cause the payload to be rejected by the data collector\r\n        var ipMatch = /[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/;\r\n        var check = function (str) {\r\n            var results = ipMatch.exec(str);\r\n            if (results) {\r\n                return results[0];\r\n            }\r\n        };\r\n        var ip = check(this.rawHeaders[\"x-forwarded-for\"])\r\n            || check(this.rawHeaders[\"x-client-ip\"])\r\n            || check(this.rawHeaders[\"x-real-ip\"])\r\n            || check(this.connectionRemoteAddress)\r\n            || check(this.socketRemoteAddress)\r\n            || check(this.legacySocketRemoteAddress);\r\n        // node v12 returns this if the address is \"localhost\"\r\n        if (!ip\r\n            && this.connectionRemoteAddress\r\n            && this.connectionRemoteAddress.substr\r\n            && this.connectionRemoteAddress.substr(0, 2) === \"::\") {\r\n            ip = \"127.0.0.1\";\r\n        }\r\n        return ip;\r\n    };\r\n    HttpRequestParser.prototype._getId = function (name) {\r\n        var cookie = (this.rawHeaders && this.rawHeaders[\"cookie\"] &&\r\n            typeof this.rawHeaders[\"cookie\"] === 'string' && this.rawHeaders[\"cookie\"]) || \"\";\r\n        var value = HttpRequestParser.parseId(Util.getCookie(name, cookie));\r\n        return value;\r\n    };\r\n    HttpRequestParser.prototype.parseHeaders = function (request, requestId) {\r\n        this.rawHeaders = request.headers || request.rawHeaders;\r\n        this.userAgent = request.headers && request.headers[\"user-agent\"];\r\n        this.sourceCorrelationId = Util.getCorrelationContextTarget(request, RequestResponseHeaders.requestContextSourceKey);\r\n        if (request.headers) {\r\n            this.correlationContextHeader = request.headers[RequestResponseHeaders.correlationContextHeader];\r\n            if (request.headers[RequestResponseHeaders.requestIdHeader]) {\r\n                this.parentId = request.headers[RequestResponseHeaders.requestIdHeader];\r\n                this.requestId = CorrelationIdManager.generateRequestId(this.parentId);\r\n                this.correlationContextHeader = request.headers[RequestResponseHeaders.correlationContextHeader];\r\n            }\r\n            else {\r\n                // Legacy fallback\r\n                var rootId = request.headers[RequestResponseHeaders.rootIdHeader];\r\n                this.parentId = request.headers[RequestResponseHeaders.parentIdHeader];\r\n                this.requestId = CorrelationIdManager.generateRequestId(rootId || this.parentId);\r\n                this.correlationContextHeader = null;\r\n            }\r\n            if (requestId) {\r\n                // For the scenarios that don't guarantee an AI-created context,\r\n                // override the requestId with the provided one.\r\n                this.requestId = requestId;\r\n            }\r\n            this.operationId = CorrelationIdManager.getRootId(this.requestId);\r\n        }\r\n    };\r\n    HttpRequestParser.parseId = function (cookieValue) {\r\n        return cookieValue.substr(0, cookieValue.indexOf('|'));\r\n    };\r\n    HttpRequestParser.keys = new Contracts.ContextTagKeys();\r\n    return HttpRequestParser;\r\n}(RequestParser));\r\nmodule.exports = HttpRequestParser;\r\n//# sourceMappingURL=HttpRequestParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/HttpRequestParser.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/HttpRequests.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/HttpRequests.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar http = __webpack_require__(/*! http */ \"http\");\r\nvar https = __webpack_require__(/*! https */ \"https\");\r\nvar Logging = __webpack_require__(/*! ../Library/Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar Util = __webpack_require__(/*! ../Library/Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar RequestResponseHeaders = __webpack_require__(/*! ../Library/RequestResponseHeaders */ \"./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js\");\r\nvar HttpRequestParser = __webpack_require__(/*! ./HttpRequestParser */ \"./node_modules/applicationinsights/out/AutoCollection/HttpRequestParser.js\");\r\nvar CorrelationContextManager_1 = __webpack_require__(/*! ./CorrelationContextManager */ \"./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js\");\r\nvar AutoCollectPerformance = __webpack_require__(/*! ./Performance */ \"./node_modules/applicationinsights/out/AutoCollection/Performance.js\");\r\nvar AutoCollectHttpRequests = (function () {\r\n    function AutoCollectHttpRequests(client) {\r\n        if (!!AutoCollectHttpRequests.INSTANCE) {\r\n            throw new Error(\"Server request tracking should be configured from the applicationInsights object\");\r\n        }\r\n        AutoCollectHttpRequests.INSTANCE = this;\r\n        this._client = client;\r\n    }\r\n    AutoCollectHttpRequests.prototype.enable = function (isEnabled) {\r\n        this._isEnabled = isEnabled;\r\n        // Autocorrelation requires automatic monitoring of incoming server requests\r\n        // Disabling autocollection but enabling autocorrelation will still enable\r\n        // request monitoring but will not produce request events\r\n        if ((this._isAutoCorrelating || this._isEnabled || AutoCollectPerformance.isEnabled()) && !this._isInitialized) {\r\n            this.useAutoCorrelation(this._isAutoCorrelating);\r\n            this._initialize();\r\n        }\r\n    };\r\n    AutoCollectHttpRequests.prototype.useAutoCorrelation = function (isEnabled) {\r\n        if (isEnabled && !this._isAutoCorrelating) {\r\n            CorrelationContextManager_1.CorrelationContextManager.enable();\r\n        }\r\n        else if (!isEnabled && this._isAutoCorrelating) {\r\n            CorrelationContextManager_1.CorrelationContextManager.disable();\r\n        }\r\n        this._isAutoCorrelating = isEnabled;\r\n    };\r\n    AutoCollectHttpRequests.prototype.isInitialized = function () {\r\n        return this._isInitialized;\r\n    };\r\n    AutoCollectHttpRequests.prototype.isAutoCorrelating = function () {\r\n        return this._isAutoCorrelating;\r\n    };\r\n    AutoCollectHttpRequests.prototype._generateCorrelationContext = function (requestParser) {\r\n        if (!this._isAutoCorrelating) {\r\n            return;\r\n        }\r\n        return CorrelationContextManager_1.CorrelationContextManager.generateContextObject(requestParser.getOperationId(this._client.context.tags), requestParser.getRequestId(), requestParser.getOperationName(this._client.context.tags), requestParser.getCorrelationContextHeader());\r\n    };\r\n    AutoCollectHttpRequests.prototype._initialize = function () {\r\n        var _this = this;\r\n        this._isInitialized = true;\r\n        var wrapOnRequestHandler = function (onRequest) {\r\n            if (!onRequest) {\r\n                return undefined;\r\n            }\r\n            if (typeof onRequest !== 'function') {\r\n                throw new Error('onRequest handler must be a function');\r\n            }\r\n            return function (request, response) {\r\n                var shouldCollect = request && !request[AutoCollectHttpRequests.alreadyAutoCollectedFlag];\r\n                if (request && shouldCollect) {\r\n                    // Set up correlation context\r\n                    var requestParser_1 = new HttpRequestParser(request);\r\n                    var correlationContext = _this._generateCorrelationContext(requestParser_1);\r\n                    // Note: Check for if correlation is enabled happens within this method.\r\n                    // If not enabled, function will directly call the callback.\r\n                    CorrelationContextManager_1.CorrelationContextManager.runWithContext(correlationContext, function () {\r\n                        if (_this._isEnabled) {\r\n                            // Mark as auto collected\r\n                            request[AutoCollectHttpRequests.alreadyAutoCollectedFlag] = true;\r\n                            // Auto collect request\r\n                            AutoCollectHttpRequests.trackRequest(_this._client, { request: request, response: response }, requestParser_1);\r\n                        }\r\n                        // Add this request to the performance counter\r\n                        // Note: Check for if perf counters are enabled happens within this method.\r\n                        // TODO: Refactor common bits between trackRequest and countRequest so they can\r\n                        // be used together, even when perf counters are on, and request tracking is off\r\n                        AutoCollectPerformance.countRequest(request, response);\r\n                        if (typeof onRequest === \"function\") {\r\n                            onRequest(request, response);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    if (typeof onRequest === \"function\") {\r\n                        onRequest(request, response);\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        // The `http.createServer` function will instantiate a new http.Server object.\r\n        // Inside the Server's constructor, it is using addListener to register the\r\n        // onRequest handler. So there are two ways to inject the wrapped onRequest handler:\r\n        // 1) Overwrite Server.prototype.addListener (and .on()) globally and not patching\r\n        //    the http.createServer call. Or\r\n        // 2) Overwrite the http.createServer method and add a patched addListener to the\r\n        //    fresh server instance. This seems more stable for possible future changes as\r\n        //    it also covers the case where the Server might not use addListener to manage\r\n        //    the callback internally.\r\n        //    And also as long as the constructor uses addListener to add the handle, it is\r\n        //    ok to patch the addListener after construction only. Because if we would patch\r\n        //    the prototype one and the createServer method, we would wrap the handler twice\r\n        //    in case of the constructor call.\r\n        var wrapServerEventHandler = function (server) {\r\n            var originalAddListener = server.addListener.bind(server);\r\n            server.addListener = function (eventType, eventHandler) {\r\n                switch (eventType) {\r\n                    case 'request':\r\n                    case 'checkContinue':\r\n                        return originalAddListener(eventType, wrapOnRequestHandler(eventHandler));\r\n                    default:\r\n                        return originalAddListener(eventType, eventHandler);\r\n                }\r\n            };\r\n            // on is an alias to addListener only\r\n            server.on = server.addListener;\r\n        };\r\n        var originalHttpServer = http.createServer;\r\n        http.createServer = function (onRequest) {\r\n            // todo: get a pointer to the server so the IP address can be read from server.address\r\n            var server = originalHttpServer(wrapOnRequestHandler(onRequest));\r\n            wrapServerEventHandler(server);\r\n            return server;\r\n        };\r\n        var originalHttpsServer = https.createServer;\r\n        https.createServer = function (options, onRequest) {\r\n            var server = originalHttpsServer(options, wrapOnRequestHandler(onRequest));\r\n            wrapServerEventHandler(server);\r\n            return server;\r\n        };\r\n    };\r\n    /**\r\n     * Tracks a request synchronously (doesn't wait for response 'finish' event)\r\n     */\r\n    AutoCollectHttpRequests.trackRequestSync = function (client, telemetry) {\r\n        if (!telemetry.request || !telemetry.response || !client) {\r\n            Logging.info(\"AutoCollectHttpRequests.trackRequestSync was called with invalid parameters: \", !telemetry.request, !telemetry.response, !client);\r\n            return;\r\n        }\r\n        AutoCollectHttpRequests.addResponseCorrelationIdHeader(client, telemetry.response);\r\n        // store data about the request\r\n        var correlationContext = CorrelationContextManager_1.CorrelationContextManager.getCurrentContext();\r\n        var requestParser = new HttpRequestParser(telemetry.request, (correlationContext && correlationContext.operation.parentId));\r\n        // Overwrite correlation context with request parser results\r\n        if (correlationContext) {\r\n            correlationContext.operation.id = requestParser.getOperationId(client.context.tags) || correlationContext.operation.id;\r\n            correlationContext.operation.name = requestParser.getOperationName(client.context.tags) || correlationContext.operation.name;\r\n            correlationContext.operation.parentId = requestParser.getRequestId() || correlationContext.operation.parentId;\r\n            correlationContext.customProperties.addHeaderData(requestParser.getCorrelationContextHeader());\r\n        }\r\n        AutoCollectHttpRequests.endRequest(client, requestParser, telemetry, telemetry.duration, telemetry.error);\r\n    };\r\n    /**\r\n     * Tracks a request by listening to the response 'finish' event\r\n     */\r\n    AutoCollectHttpRequests.trackRequest = function (client, telemetry, _requestParser) {\r\n        if (!telemetry.request || !telemetry.response || !client) {\r\n            Logging.info(\"AutoCollectHttpRequests.trackRequest was called with invalid parameters: \", !telemetry.request, !telemetry.response, !client);\r\n            return;\r\n        }\r\n        // store data about the request\r\n        var correlationContext = CorrelationContextManager_1.CorrelationContextManager.getCurrentContext();\r\n        var requestParser = _requestParser || new HttpRequestParser(telemetry.request, correlationContext && correlationContext.operation.parentId);\r\n        if (Util.canIncludeCorrelationHeader(client, requestParser.getUrl())) {\r\n            AutoCollectHttpRequests.addResponseCorrelationIdHeader(client, telemetry.response);\r\n        }\r\n        // Overwrite correlation context with request parser results (if not an automatic track. we've already precalculated the correlation context in that case)\r\n        if (correlationContext && !_requestParser) {\r\n            correlationContext.operation.id = requestParser.getOperationId(client.context.tags) || correlationContext.operation.id;\r\n            correlationContext.operation.name = requestParser.getOperationName(client.context.tags) || correlationContext.operation.name;\r\n            correlationContext.operation.parentId = requestParser.getOperationParentId(client.context.tags) || correlationContext.operation.parentId;\r\n            correlationContext.customProperties.addHeaderData(requestParser.getCorrelationContextHeader());\r\n        }\r\n        // response listeners\r\n        if (telemetry.response.once) {\r\n            telemetry.response.once(\"finish\", function () {\r\n                AutoCollectHttpRequests.endRequest(client, requestParser, telemetry, null, null);\r\n            });\r\n        }\r\n        // track a failed request if an error is emitted\r\n        if (telemetry.request.on) {\r\n            telemetry.request.on(\"error\", function (error) {\r\n                AutoCollectHttpRequests.endRequest(client, requestParser, telemetry, null, error);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Add the target correlationId to the response headers, if not already provided.\r\n     */\r\n    AutoCollectHttpRequests.addResponseCorrelationIdHeader = function (client, response) {\r\n        if (client.config && client.config.correlationId &&\r\n            response.getHeader && response.setHeader && !response.headersSent) {\r\n            var correlationHeader = response.getHeader(RequestResponseHeaders.requestContextHeader);\r\n            if (correlationHeader) {\r\n                var components = correlationHeader.split(\",\");\r\n                var key_1 = RequestResponseHeaders.requestContextSourceKey + \"=\";\r\n                if (!components.some(function (value) { return value.substring(0, key_1.length) === key_1; })) {\r\n                    response.setHeader(RequestResponseHeaders.requestContextHeader, correlationHeader + \",\" + RequestResponseHeaders.requestContextSourceKey + \"=\" + client.config.correlationId);\r\n                }\r\n            }\r\n            else {\r\n                response.setHeader(RequestResponseHeaders.requestContextHeader, RequestResponseHeaders.requestContextSourceKey + \"=\" + client.config.correlationId);\r\n            }\r\n        }\r\n    };\r\n    AutoCollectHttpRequests.endRequest = function (client, requestParser, telemetry, ellapsedMilliseconds, error) {\r\n        if (error) {\r\n            requestParser.onError(error, ellapsedMilliseconds);\r\n        }\r\n        else {\r\n            requestParser.onResponse(telemetry.response, ellapsedMilliseconds);\r\n        }\r\n        var requestTelemetry = requestParser.getRequestTelemetry(telemetry);\r\n        requestTelemetry.tagOverrides = requestParser.getRequestTags(client.context.tags);\r\n        if (telemetry.tagOverrides) {\r\n            for (var key in telemetry.tagOverrides) {\r\n                requestTelemetry.tagOverrides[key] = telemetry.tagOverrides[key];\r\n            }\r\n        }\r\n        requestTelemetry.contextObjects = requestTelemetry.contextObjects || {};\r\n        requestTelemetry.contextObjects[\"http.ServerRequest\"] = telemetry.request;\r\n        requestTelemetry.contextObjects[\"http.ServerResponse\"] = telemetry.response;\r\n        client.trackRequest(requestTelemetry);\r\n    };\r\n    AutoCollectHttpRequests.prototype.dispose = function () {\r\n        AutoCollectHttpRequests.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    };\r\n    AutoCollectHttpRequests.alreadyAutoCollectedFlag = '_appInsightsAutoCollected';\r\n    return AutoCollectHttpRequests;\r\n}());\r\nmodule.exports = AutoCollectHttpRequests;\r\n//# sourceMappingURL=HttpRequests.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/HttpRequests.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/Performance.js":
/*!****************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/Performance.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar os = __webpack_require__(/*! os */ \"os\");\r\nvar Logging = __webpack_require__(/*! ../Library/Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar AutoCollectPerformance = (function () {\r\n    function AutoCollectPerformance(client) {\r\n        if (!!AutoCollectPerformance.INSTANCE) {\r\n            throw new Error(\"Performance tracking should be configured from the applicationInsights object\");\r\n        }\r\n        AutoCollectPerformance.INSTANCE = this;\r\n        this._isInitialized = false;\r\n        this._client = client;\r\n    }\r\n    AutoCollectPerformance.prototype.enable = function (isEnabled) {\r\n        var _this = this;\r\n        this._isEnabled = isEnabled;\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._isInitialized = true;\r\n        }\r\n        if (isEnabled) {\r\n            if (!this._handle) {\r\n                this._lastCpus = os.cpus();\r\n                this._lastRequests = {\r\n                    totalRequestCount: AutoCollectPerformance._totalRequestCount,\r\n                    totalFailedRequestCount: AutoCollectPerformance._totalFailedRequestCount,\r\n                    time: +new Date\r\n                };\r\n                if (typeof process.cpuUsage === 'function') {\r\n                    this._lastAppCpuUsage = process.cpuUsage();\r\n                }\r\n                this._lastHrtime = process.hrtime();\r\n                this._handle = setInterval(function () { return _this.trackPerformance(); }, 60000);\r\n                this._handle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n        }\r\n        else {\r\n            if (this._handle) {\r\n                clearInterval(this._handle);\r\n                this._handle = undefined;\r\n            }\r\n        }\r\n    };\r\n    AutoCollectPerformance.countRequest = function (request, response) {\r\n        var _this = this;\r\n        if (!AutoCollectPerformance.isEnabled()) {\r\n            return;\r\n        }\r\n        var start = +new Date;\r\n        if (!request || !response) {\r\n            Logging.warn(\"AutoCollectPerformance.countRequest was called with invalid parameters: \", !!request, !!response);\r\n            return;\r\n        }\r\n        // response listeners\r\n        if (typeof response.once === \"function\") {\r\n            response.once(\"finish\", function () {\r\n                var end = +new Date;\r\n                _this._lastRequestExecutionTime = end - start;\r\n                AutoCollectPerformance._totalRequestCount++;\r\n                if (response.statusCode >= 400) {\r\n                    AutoCollectPerformance._totalFailedRequestCount++;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    AutoCollectPerformance.prototype.isInitialized = function () {\r\n        return this._isInitialized;\r\n    };\r\n    AutoCollectPerformance.isEnabled = function () {\r\n        return AutoCollectPerformance.INSTANCE && AutoCollectPerformance.INSTANCE._isEnabled;\r\n    };\r\n    AutoCollectPerformance.prototype.trackPerformance = function () {\r\n        this._trackCpu();\r\n        this._trackMemory();\r\n        this._trackNetwork();\r\n    };\r\n    AutoCollectPerformance.prototype._trackCpu = function () {\r\n        // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\r\n        // to find the delta since the last measurement\r\n        var cpus = os.cpus();\r\n        if (cpus && cpus.length && this._lastCpus && cpus.length === this._lastCpus.length) {\r\n            var totalUser = 0;\r\n            var totalSys = 0;\r\n            var totalNice = 0;\r\n            var totalIdle = 0;\r\n            var totalIrq = 0;\r\n            for (var i = 0; !!cpus && i < cpus.length; i++) {\r\n                var cpu = cpus[i];\r\n                var lastCpu = this._lastCpus[i];\r\n                var name = \"% cpu(\" + i + \") \";\r\n                var model = cpu.model;\r\n                var speed = cpu.speed;\r\n                var times = cpu.times;\r\n                var lastTimes = lastCpu.times;\r\n                // user cpu time (or) % CPU time spent in user space\r\n                var user = (times.user - lastTimes.user) || 0;\r\n                totalUser += user;\r\n                // system cpu time (or) % CPU time spent in kernel space\r\n                var sys = (times.sys - lastTimes.sys) || 0;\r\n                totalSys += sys;\r\n                // user nice cpu time (or) % CPU time spent on low priority processes\r\n                var nice = (times.nice - lastTimes.nice) || 0;\r\n                totalNice += nice;\r\n                // idle cpu time (or) % CPU time spent idle\r\n                var idle = (times.idle - lastTimes.idle) || 0;\r\n                totalIdle += idle;\r\n                // irq (or) % CPU time spent servicing/handling hardware interrupts\r\n                var irq = (times.irq - lastTimes.irq) || 0;\r\n                totalIrq += irq;\r\n            }\r\n            // Calculate % of total cpu time (user + system) this App Process used (Only supported by node v6.1.0+)\r\n            var appCpuPercent = undefined;\r\n            if (typeof process.cpuUsage === 'function') {\r\n                var appCpuUsage = process.cpuUsage();\r\n                var hrtime = process.hrtime();\r\n                var totalApp = ((appCpuUsage.user - this._lastAppCpuUsage.user) + (appCpuUsage.system - this._lastAppCpuUsage.system)) || 0;\r\n                if (typeof this._lastHrtime !== 'undefined' && this._lastHrtime.length === 2) {\r\n                    var elapsedTime = ((hrtime[0] - this._lastHrtime[0]) * 1e6 + (hrtime[1] - this._lastHrtime[1]) / 1e3) || 0; // convert to microseconds\r\n                    appCpuPercent = 100 * totalApp / (elapsedTime * cpus.length);\r\n                }\r\n                // Set previous\r\n                this._lastAppCpuUsage = appCpuUsage;\r\n                this._lastHrtime = hrtime;\r\n            }\r\n            var combinedTotal = (totalUser + totalSys + totalNice + totalIdle + totalIrq) || 1;\r\n            this._client.trackMetric({ name: \"\\\\Processor(_Total)\\\\% Processor Time\", value: ((combinedTotal - totalIdle) / combinedTotal) * 100 });\r\n            this._client.trackMetric({ name: \"\\\\Process(??APP_WIN32_PROC??)\\\\% Processor Time\", value: appCpuPercent || ((totalUser / combinedTotal) * 100) });\r\n        }\r\n        this._lastCpus = cpus;\r\n    };\r\n    AutoCollectPerformance.prototype._trackMemory = function () {\r\n        var freeMem = os.freemem();\r\n        var usedMem = process.memoryUsage().rss;\r\n        this._client.trackMetric({ name: \"\\\\Process(??APP_WIN32_PROC??)\\\\Private Bytes\", value: usedMem });\r\n        this._client.trackMetric({ name: \"\\\\Memory\\\\Available Bytes\", value: freeMem });\r\n    };\r\n    AutoCollectPerformance.prototype._trackNetwork = function () {\r\n        // track total request counters\r\n        var lastRequests = this._lastRequests;\r\n        var requests = {\r\n            totalRequestCount: AutoCollectPerformance._totalRequestCount,\r\n            totalFailedRequestCount: AutoCollectPerformance._totalFailedRequestCount,\r\n            time: +new Date\r\n        };\r\n        var intervalRequests = (requests.totalRequestCount - lastRequests.totalRequestCount) || 0;\r\n        var intervalFailedRequests = (requests.totalFailedRequestCount - lastRequests.totalFailedRequestCount) || 0;\r\n        var elapsedMs = requests.time - lastRequests.time;\r\n        var elapsedSeconds = elapsedMs / 1000;\r\n        if (elapsedMs > 0) {\r\n            var requestsPerSec = intervalRequests / elapsedSeconds;\r\n            var failedRequestsPerSec = intervalFailedRequests / elapsedSeconds;\r\n            this._client.trackMetric({ name: \"\\\\ASP.NET Applications(??APP_W3SVC_PROC??)\\\\Requests/Sec\", value: requestsPerSec });\r\n            this._client.trackMetric({ name: \"\\\\ASP.NET Applications(??APP_W3SVC_PROC??)\\\\Request Execution Time\", value: AutoCollectPerformance._lastRequestExecutionTime });\r\n        }\r\n        this._lastRequests = requests;\r\n    };\r\n    AutoCollectPerformance.prototype.dispose = function () {\r\n        AutoCollectPerformance.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    };\r\n    AutoCollectPerformance._totalRequestCount = 0;\r\n    AutoCollectPerformance._totalFailedRequestCount = 0;\r\n    AutoCollectPerformance._lastRequestExecutionTime = 0;\r\n    return AutoCollectPerformance;\r\n}());\r\nmodule.exports = AutoCollectPerformance;\r\n//# sourceMappingURL=Performance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/Performance.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/RequestParser.js":
/*!******************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/RequestParser.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Base class for helpers that read data from HTTP requst/response objects and convert them\r\n * into the telemetry contract objects.\r\n */\r\nvar RequestParser = (function () {\r\n    function RequestParser() {\r\n    }\r\n    /**\r\n     * Gets a url parsed out from request options\r\n     */\r\n    RequestParser.prototype.getUrl = function () {\r\n        return this.url;\r\n    };\r\n    RequestParser.prototype.RequestParser = function () {\r\n        this.startTime = +new Date();\r\n    };\r\n    RequestParser.prototype._setStatus = function (status, error) {\r\n        var endTime = +new Date();\r\n        this.duration = endTime - this.startTime;\r\n        this.statusCode = status;\r\n        var properties = this.properties || {};\r\n        if (error) {\r\n            if (typeof error === \"string\") {\r\n                properties[\"error\"] = error;\r\n            }\r\n            else if (error instanceof Error) {\r\n                properties[\"error\"] = error.message;\r\n            }\r\n            else if (typeof error === \"object\") {\r\n                for (var key in error) {\r\n                    properties[key] = error[key] && error[key].toString && error[key].toString();\r\n                }\r\n            }\r\n        }\r\n        this.properties = properties;\r\n    };\r\n    RequestParser.prototype._isSuccess = function () {\r\n        return (0 < this.statusCode) && (this.statusCode < 400);\r\n    };\r\n    return RequestParser;\r\n}());\r\nmodule.exports = RequestParser;\r\n//# sourceMappingURL=RequestParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vUmVxdWVzdFBhcnNlci5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vUmVxdWVzdFBhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIGhlbHBlcnMgdGhhdCByZWFkIGRhdGEgZnJvbSBIVFRQIHJlcXVzdC9yZXNwb25zZSBvYmplY3RzIGFuZCBjb252ZXJ0IHRoZW1cclxuICogaW50byB0aGUgdGVsZW1ldHJ5IGNvbnRyYWN0IG9iamVjdHMuXHJcbiAqL1xyXG52YXIgUmVxdWVzdFBhcnNlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZXF1ZXN0UGFyc2VyKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgdXJsIHBhcnNlZCBvdXQgZnJvbSByZXF1ZXN0IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgUmVxdWVzdFBhcnNlci5wcm90b3R5cGUuZ2V0VXJsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVybDtcclxuICAgIH07XHJcbiAgICBSZXF1ZXN0UGFyc2VyLnByb3RvdHlwZS5SZXF1ZXN0UGFyc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gK25ldyBEYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgUmVxdWVzdFBhcnNlci5wcm90b3R5cGUuX3NldFN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0dXMsIGVycm9yKSB7XHJcbiAgICAgICAgdmFyIGVuZFRpbWUgPSArbmV3IERhdGUoKTtcclxuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZW5kVGltZSAtIHRoaXMuc3RhcnRUaW1lO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1cztcclxuICAgICAgICB2YXIgcHJvcGVydGllcyA9IHRoaXMucHJvcGVydGllcyB8fCB7fTtcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllc1tcImVycm9yXCJdID0gZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllc1tcImVycm9yXCJdID0gZXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZXJyb3IgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXNba2V5XSA9IGVycm9yW2tleV0gJiYgZXJyb3Jba2V5XS50b1N0cmluZyAmJiBlcnJvcltrZXldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcclxuICAgIH07XHJcbiAgICBSZXF1ZXN0UGFyc2VyLnByb3RvdHlwZS5faXNTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAoMCA8IHRoaXMuc3RhdHVzQ29kZSkgJiYgKHRoaXMuc3RhdHVzQ29kZSA8IDQwMCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlcXVlc3RQYXJzZXI7XHJcbn0oKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gUmVxdWVzdFBhcnNlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVxdWVzdFBhcnNlci5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/RequestParser.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/bunyan.sub.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/bunyan.sub.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Contracts_1 = __webpack_require__(/*! ../../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar clients = [];\r\n// Mapping from bunyan levels defined at https://github.com/trentm/node-bunyan/blob/master/lib/bunyan.js#L256\r\nvar bunyanToAILevelMap = {\r\n    10: Contracts_1.SeverityLevel.Verbose,\r\n    20: Contracts_1.SeverityLevel.Verbose,\r\n    30: Contracts_1.SeverityLevel.Information,\r\n    40: Contracts_1.SeverityLevel.Warning,\r\n    50: Contracts_1.SeverityLevel.Error,\r\n    60: Contracts_1.SeverityLevel.Critical,\r\n};\r\nvar subscriber = function (event) {\r\n    clients.forEach(function (client) {\r\n        var AIlevel = bunyanToAILevelMap[event.data.level];\r\n        client.trackTrace({ message: event.data.result, severity: AIlevel });\r\n    });\r\n};\r\nfunction enable(enabled, client) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.subscribe(\"bunyan\", subscriber);\r\n        }\r\n        ;\r\n        clients.push(client);\r\n    }\r\n    else {\r\n        clients = clients.filter(function (c) { return c != client; });\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.unsubscribe(\"bunyan\", subscriber);\r\n        }\r\n    }\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=bunyan.sub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL2J1bnlhbi5zdWIuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0F1dG9Db2xsZWN0aW9uL2RpYWdub3N0aWMtY2hhbm5lbC9idW55YW4uc3ViLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBDb250cmFjdHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9EZWNsYXJhdGlvbnMvQ29udHJhY3RzXCIpO1xyXG52YXIgZGlhZ25vc3RpY19jaGFubmVsXzEgPSByZXF1aXJlKFwiZGlhZ25vc3RpYy1jaGFubmVsXCIpO1xyXG52YXIgY2xpZW50cyA9IFtdO1xyXG4vLyBNYXBwaW5nIGZyb20gYnVueWFuIGxldmVscyBkZWZpbmVkIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS90cmVudG0vbm9kZS1idW55YW4vYmxvYi9tYXN0ZXIvbGliL2J1bnlhbi5qcyNMMjU2XHJcbnZhciBidW55YW5Ub0FJTGV2ZWxNYXAgPSB7XHJcbiAgICAxMDogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5WZXJib3NlLFxyXG4gICAgMjA6IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuVmVyYm9zZSxcclxuICAgIDMwOiBDb250cmFjdHNfMS5TZXZlcml0eUxldmVsLkluZm9ybWF0aW9uLFxyXG4gICAgNDA6IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuV2FybmluZyxcclxuICAgIDUwOiBDb250cmFjdHNfMS5TZXZlcml0eUxldmVsLkVycm9yLFxyXG4gICAgNjA6IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuQ3JpdGljYWwsXHJcbn07XHJcbnZhciBzdWJzY3JpYmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBjbGllbnRzLmZvckVhY2goZnVuY3Rpb24gKGNsaWVudCkge1xyXG4gICAgICAgIHZhciBBSWxldmVsID0gYnVueWFuVG9BSUxldmVsTWFwW2V2ZW50LmRhdGEubGV2ZWxdO1xyXG4gICAgICAgIGNsaWVudC50cmFja1RyYWNlKHsgbWVzc2FnZTogZXZlbnQuZGF0YS5yZXN1bHQsIHNldmVyaXR5OiBBSWxldmVsIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcbmZ1bmN0aW9uIGVuYWJsZShlbmFibGVkLCBjbGllbnQpIHtcclxuICAgIGlmIChlbmFibGVkKSB7XHJcbiAgICAgICAgaWYgKGNsaWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwuc3Vic2NyaWJlKFwiYnVueWFuXCIsIHN1YnNjcmliZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgY2xpZW50cy5wdXNoKGNsaWVudCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjbGllbnRzID0gY2xpZW50cy5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgIT0gY2xpZW50OyB9KTtcclxuICAgICAgICBpZiAoY2xpZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC51bnN1YnNjcmliZShcImJ1bnlhblwiLCBzdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bnlhbi5zdWIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/bunyan.sub.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/console.sub.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/console.sub.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Contracts_1 = __webpack_require__(/*! ../../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar clients = [];\r\nvar subscriber = function (event) {\r\n    clients.forEach(function (client) {\r\n        // Message can have a trailing newline\r\n        var message = event.data.message;\r\n        if (message.lastIndexOf(\"\\n\") == message.length - 1) {\r\n            message = message.substring(0, message.length - 1);\r\n        }\r\n        client.trackTrace({ message: message, severity: (event.data.stderr ? Contracts_1.SeverityLevel.Warning : Contracts_1.SeverityLevel.Information) });\r\n    });\r\n};\r\nfunction enable(enabled, client) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.subscribe(\"console\", subscriber);\r\n        }\r\n        ;\r\n        clients.push(client);\r\n    }\r\n    else {\r\n        clients = clients.filter(function (c) { return c != client; });\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.unsubscribe(\"console\", subscriber);\r\n        }\r\n    }\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=console.sub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL2NvbnNvbGUuc3ViLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9BdXRvQ29sbGVjdGlvbi9kaWFnbm9zdGljLWNoYW5uZWwvY29uc29sZS5zdWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIENvbnRyYWN0c18xID0gcmVxdWlyZShcIi4uLy4uL0RlY2xhcmF0aW9ucy9Db250cmFjdHNcIik7XHJcbnZhciBkaWFnbm9zdGljX2NoYW5uZWxfMSA9IHJlcXVpcmUoXCJkaWFnbm9zdGljLWNoYW5uZWxcIik7XHJcbnZhciBjbGllbnRzID0gW107XHJcbnZhciBzdWJzY3JpYmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBjbGllbnRzLmZvckVhY2goZnVuY3Rpb24gKGNsaWVudCkge1xyXG4gICAgICAgIC8vIE1lc3NhZ2UgY2FuIGhhdmUgYSB0cmFpbGluZyBuZXdsaW5lXHJcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBldmVudC5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UubGFzdEluZGV4T2YoXCJcXG5cIikgPT0gbWVzc2FnZS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnN1YnN0cmluZygwLCBtZXNzYWdlLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGllbnQudHJhY2tUcmFjZSh7IG1lc3NhZ2U6IG1lc3NhZ2UsIHNldmVyaXR5OiAoZXZlbnQuZGF0YS5zdGRlcnIgPyBDb250cmFjdHNfMS5TZXZlcml0eUxldmVsLldhcm5pbmcgOiBDb250cmFjdHNfMS5TZXZlcml0eUxldmVsLkluZm9ybWF0aW9uKSB9KTtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBlbmFibGUoZW5hYmxlZCwgY2xpZW50KSB7XHJcbiAgICBpZiAoZW5hYmxlZCkge1xyXG4gICAgICAgIGlmIChjbGllbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnN1YnNjcmliZShcImNvbnNvbGVcIiwgc3Vic2NyaWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDtcclxuICAgICAgICBjbGllbnRzLnB1c2goY2xpZW50KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNsaWVudHMgPSBjbGllbnRzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAhPSBjbGllbnQ7IH0pO1xyXG4gICAgICAgIGlmIChjbGllbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnVuc3Vic2NyaWJlKFwiY29uc29sZVwiLCBzdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnNvbGUuc3ViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/console.sub.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/initialization.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/initialization.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IsInitialized = !process.env[\"APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL\"];\r\nif (exports.IsInitialized) {\r\n    var publishers = __webpack_require__(/*! diagnostic-channel-publishers */ \"./node_modules/diagnostic-channel-publishers/dist/src/index.js\");\r\n    var individualOptOuts = process.env[\"APPLICATION_INSIGHTS_NO_PATCH_MODULES\"] || \"\";\r\n    var unpatchedModules = individualOptOuts.split(\",\");\r\n    var modules = {\r\n        bunyan: publishers.bunyan,\r\n        console: publishers.console,\r\n        mongodb: publishers.mongodb,\r\n        mongodbCore: publishers.mongodbCore,\r\n        mysql: publishers.mysql,\r\n        redis: publishers.redis,\r\n        pg: publishers.pg,\r\n        pgPool: publishers.pgPool,\r\n        winston: publishers.winston\r\n    };\r\n    for (var mod in modules) {\r\n        if (unpatchedModules.indexOf(mod) === -1) {\r\n            modules[mod].enable();\r\n        }\r\n    }\r\n}\r\nfunction registerContextPreservation(cb) {\r\n    if (!exports.IsInitialized) {\r\n        return;\r\n    }\r\n    __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\").channel.addContextPreservation(cb);\r\n}\r\nexports.registerContextPreservation = registerContextPreservation;\r\n//# sourceMappingURL=initialization.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL2luaXRpYWxpemF0aW9uLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9BdXRvQ29sbGVjdGlvbi9kaWFnbm9zdGljLWNoYW5uZWwvaW5pdGlhbGl6YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZGV0YWlscy5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLklzSW5pdGlhbGl6ZWQgPSAhcHJvY2Vzcy5lbnZbXCJBUFBMSUNBVElPTl9JTlNJR0hUU19OT19ESUFHTk9TVElDX0NIQU5ORUxcIl07XHJcbmlmIChleHBvcnRzLklzSW5pdGlhbGl6ZWQpIHtcclxuICAgIHZhciBwdWJsaXNoZXJzID0gcmVxdWlyZShcImRpYWdub3N0aWMtY2hhbm5lbC1wdWJsaXNoZXJzXCIpO1xyXG4gICAgdmFyIGluZGl2aWR1YWxPcHRPdXRzID0gcHJvY2Vzcy5lbnZbXCJBUFBMSUNBVElPTl9JTlNJR0hUU19OT19QQVRDSF9NT0RVTEVTXCJdIHx8IFwiXCI7XHJcbiAgICB2YXIgdW5wYXRjaGVkTW9kdWxlcyA9IGluZGl2aWR1YWxPcHRPdXRzLnNwbGl0KFwiLFwiKTtcclxuICAgIHZhciBtb2R1bGVzID0ge1xyXG4gICAgICAgIGJ1bnlhbjogcHVibGlzaGVycy5idW55YW4sXHJcbiAgICAgICAgY29uc29sZTogcHVibGlzaGVycy5jb25zb2xlLFxyXG4gICAgICAgIG1vbmdvZGI6IHB1Ymxpc2hlcnMubW9uZ29kYixcclxuICAgICAgICBtb25nb2RiQ29yZTogcHVibGlzaGVycy5tb25nb2RiQ29yZSxcclxuICAgICAgICBteXNxbDogcHVibGlzaGVycy5teXNxbCxcclxuICAgICAgICByZWRpczogcHVibGlzaGVycy5yZWRpcyxcclxuICAgICAgICBwZzogcHVibGlzaGVycy5wZyxcclxuICAgICAgICBwZ1Bvb2w6IHB1Ymxpc2hlcnMucGdQb29sLFxyXG4gICAgICAgIHdpbnN0b246IHB1Ymxpc2hlcnMud2luc3RvblxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIG1vZCBpbiBtb2R1bGVzKSB7XHJcbiAgICAgICAgaWYgKHVucGF0Y2hlZE1vZHVsZXMuaW5kZXhPZihtb2QpID09PSAtMSkge1xyXG4gICAgICAgICAgICBtb2R1bGVzW21vZF0uZW5hYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQ29udGV4dFByZXNlcnZhdGlvbihjYikge1xyXG4gICAgaWYgKCFleHBvcnRzLklzSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICByZXF1aXJlKFwiZGlhZ25vc3RpYy1jaGFubmVsXCIpLmNoYW5uZWwuYWRkQ29udGV4dFByZXNlcnZhdGlvbihjYik7XHJcbn1cclxuZXhwb3J0cy5yZWdpc3RlckNvbnRleHRQcmVzZXJ2YXRpb24gPSByZWdpc3RlckNvbnRleHRQcmVzZXJ2YXRpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXRpYWxpemF0aW9uLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/initialization.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mongodb.sub.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mongodb.sub.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar clients = [];\r\nexports.subscriber = function (event) {\r\n    clients.forEach(function (client) {\r\n        var dbName = (event.data.startedData && event.data.startedData.databaseName) || \"Unknown database\";\r\n        client.trackDependency({\r\n            target: dbName,\r\n            data: event.data.event.commandName,\r\n            name: event.data.event.commandName,\r\n            duration: event.data.event.duration,\r\n            success: event.data.succeeded,\r\n            /* TODO: transmit result code from mongo */\r\n            resultCode: event.data.succeeded ? \"0\" : \"1\",\r\n            dependencyTypeName: 'mongodb'\r\n        });\r\n    });\r\n};\r\nfunction enable(enabled, client) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.subscribe(\"mongodb\", exports.subscriber);\r\n        }\r\n        ;\r\n        clients.push(client);\r\n    }\r\n    else {\r\n        clients = clients.filter(function (c) { return c != client; });\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.unsubscribe(\"mongodb\", exports.subscriber);\r\n        }\r\n    }\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=mongodb.sub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL21vbmdvZGIuc3ViLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9BdXRvQ29sbGVjdGlvbi9kaWFnbm9zdGljLWNoYW5uZWwvbW9uZ29kYi5zdWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGRpYWdub3N0aWNfY2hhbm5lbF8xID0gcmVxdWlyZShcImRpYWdub3N0aWMtY2hhbm5lbFwiKTtcclxudmFyIGNsaWVudHMgPSBbXTtcclxuZXhwb3J0cy5zdWJzY3JpYmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBjbGllbnRzLmZvckVhY2goZnVuY3Rpb24gKGNsaWVudCkge1xyXG4gICAgICAgIHZhciBkYk5hbWUgPSAoZXZlbnQuZGF0YS5zdGFydGVkRGF0YSAmJiBldmVudC5kYXRhLnN0YXJ0ZWREYXRhLmRhdGFiYXNlTmFtZSkgfHwgXCJVbmtub3duIGRhdGFiYXNlXCI7XHJcbiAgICAgICAgY2xpZW50LnRyYWNrRGVwZW5kZW5jeSh7XHJcbiAgICAgICAgICAgIHRhcmdldDogZGJOYW1lLFxyXG4gICAgICAgICAgICBkYXRhOiBldmVudC5kYXRhLmV2ZW50LmNvbW1hbmROYW1lLFxyXG4gICAgICAgICAgICBuYW1lOiBldmVudC5kYXRhLmV2ZW50LmNvbW1hbmROYW1lLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogZXZlbnQuZGF0YS5ldmVudC5kdXJhdGlvbixcclxuICAgICAgICAgICAgc3VjY2VzczogZXZlbnQuZGF0YS5zdWNjZWVkZWQsXHJcbiAgICAgICAgICAgIC8qIFRPRE86IHRyYW5zbWl0IHJlc3VsdCBjb2RlIGZyb20gbW9uZ28gKi9cclxuICAgICAgICAgICAgcmVzdWx0Q29kZTogZXZlbnQuZGF0YS5zdWNjZWVkZWQgPyBcIjBcIiA6IFwiMVwiLFxyXG4gICAgICAgICAgICBkZXBlbmRlbmN5VHlwZU5hbWU6ICdtb25nb2RiJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcbmZ1bmN0aW9uIGVuYWJsZShlbmFibGVkLCBjbGllbnQpIHtcclxuICAgIGlmIChlbmFibGVkKSB7XHJcbiAgICAgICAgaWYgKGNsaWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwuc3Vic2NyaWJlKFwibW9uZ29kYlwiLCBleHBvcnRzLnN1YnNjcmliZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgY2xpZW50cy5wdXNoKGNsaWVudCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjbGllbnRzID0gY2xpZW50cy5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgIT0gY2xpZW50OyB9KTtcclxuICAgICAgICBpZiAoY2xpZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC51bnN1YnNjcmliZShcIm1vbmdvZGJcIiwgZXhwb3J0cy5zdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvZGIuc3ViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mongodb.sub.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mysql.sub.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mysql.sub.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar clients = [];\r\nexports.subscriber = function (event) {\r\n    clients.forEach(function (client) {\r\n        var queryObj = event.data.query || {};\r\n        var sqlString = queryObj.sql || \"Unknown query\";\r\n        var success = !event.data.err;\r\n        var connection = queryObj._connection || {};\r\n        var connectionConfig = connection.config || {};\r\n        var dbName = connectionConfig.socketPath ? connectionConfig.socketPath : (connectionConfig.host || \"localhost\") + \":\" + connectionConfig.port;\r\n        client.trackDependency({\r\n            target: dbName,\r\n            data: sqlString,\r\n            name: sqlString,\r\n            duration: event.data.duration,\r\n            success: success,\r\n            /* TODO: transmit result code from mysql */\r\n            resultCode: success ? \"0\" : \"1\",\r\n            dependencyTypeName: \"mysql\"\r\n        });\r\n    });\r\n};\r\nfunction enable(enabled, client) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.subscribe(\"mysql\", exports.subscriber);\r\n        }\r\n        ;\r\n        clients.push(client);\r\n    }\r\n    else {\r\n        clients = clients.filter(function (c) { return c != client; });\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.unsubscribe(\"mysql\", exports.subscriber);\r\n        }\r\n    }\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=mysql.sub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL215c3FsLnN1Yi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL215c3FsLnN1Yi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZGlhZ25vc3RpY19jaGFubmVsXzEgPSByZXF1aXJlKFwiZGlhZ25vc3RpYy1jaGFubmVsXCIpO1xyXG52YXIgY2xpZW50cyA9IFtdO1xyXG5leHBvcnRzLnN1YnNjcmliZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIGNsaWVudHMuZm9yRWFjaChmdW5jdGlvbiAoY2xpZW50KSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5T2JqID0gZXZlbnQuZGF0YS5xdWVyeSB8fCB7fTtcclxuICAgICAgICB2YXIgc3FsU3RyaW5nID0gcXVlcnlPYmouc3FsIHx8IFwiVW5rbm93biBxdWVyeVwiO1xyXG4gICAgICAgIHZhciBzdWNjZXNzID0gIWV2ZW50LmRhdGEuZXJyO1xyXG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gcXVlcnlPYmouX2Nvbm5lY3Rpb24gfHwge307XHJcbiAgICAgICAgdmFyIGNvbm5lY3Rpb25Db25maWcgPSBjb25uZWN0aW9uLmNvbmZpZyB8fCB7fTtcclxuICAgICAgICB2YXIgZGJOYW1lID0gY29ubmVjdGlvbkNvbmZpZy5zb2NrZXRQYXRoID8gY29ubmVjdGlvbkNvbmZpZy5zb2NrZXRQYXRoIDogKGNvbm5lY3Rpb25Db25maWcuaG9zdCB8fCBcImxvY2FsaG9zdFwiKSArIFwiOlwiICsgY29ubmVjdGlvbkNvbmZpZy5wb3J0O1xyXG4gICAgICAgIGNsaWVudC50cmFja0RlcGVuZGVuY3koe1xyXG4gICAgICAgICAgICB0YXJnZXQ6IGRiTmFtZSxcclxuICAgICAgICAgICAgZGF0YTogc3FsU3RyaW5nLFxyXG4gICAgICAgICAgICBuYW1lOiBzcWxTdHJpbmcsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiBldmVudC5kYXRhLmR1cmF0aW9uLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxyXG4gICAgICAgICAgICAvKiBUT0RPOiB0cmFuc21pdCByZXN1bHQgY29kZSBmcm9tIG15c3FsICovXHJcbiAgICAgICAgICAgIHJlc3VsdENvZGU6IHN1Y2Nlc3MgPyBcIjBcIiA6IFwiMVwiLFxyXG4gICAgICAgICAgICBkZXBlbmRlbmN5VHlwZU5hbWU6IFwibXlzcWxcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcbmZ1bmN0aW9uIGVuYWJsZShlbmFibGVkLCBjbGllbnQpIHtcclxuICAgIGlmIChlbmFibGVkKSB7XHJcbiAgICAgICAgaWYgKGNsaWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwuc3Vic2NyaWJlKFwibXlzcWxcIiwgZXhwb3J0cy5zdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgICAgIGNsaWVudHMucHVzaChjbGllbnQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2xpZW50cyA9IGNsaWVudHMuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjICE9IGNsaWVudDsgfSk7XHJcbiAgICAgICAgaWYgKGNsaWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwudW5zdWJzY3JpYmUoXCJteXNxbFwiLCBleHBvcnRzLnN1YnNjcmliZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwuc3ViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/mysql.sub.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/postgres.sub.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/postgres.sub.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar clients = [];\r\nexports.subscriber = function (event) {\r\n    clients.forEach(function (client) {\r\n        var q = event.data.query;\r\n        var sql = (q.preparable && q.preparable.text) || q.plan || q.text || \"unknown query\";\r\n        var success = !event.data.error;\r\n        var conn = event.data.database.host + \":\" + event.data.database.port;\r\n        client.trackDependency({\r\n            target: conn,\r\n            data: sql,\r\n            name: sql,\r\n            duration: event.data.duration,\r\n            success: success,\r\n            resultCode: success ? \"0\" : \"1\",\r\n            dependencyTypeName: \"postgres\"\r\n        });\r\n    });\r\n};\r\nfunction enable(enabled, client) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.subscribe(\"postgres\", exports.subscriber);\r\n        }\r\n        ;\r\n        clients.push(client);\r\n    }\r\n    else {\r\n        clients = clients.filter(function (c) { return c != client; });\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.unsubscribe(\"postgres\", exports.subscriber);\r\n        }\r\n    }\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=postgres.sub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL3Bvc3RncmVzLnN1Yi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL3Bvc3RncmVzLnN1Yi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZGlhZ25vc3RpY19jaGFubmVsXzEgPSByZXF1aXJlKFwiZGlhZ25vc3RpYy1jaGFubmVsXCIpO1xyXG52YXIgY2xpZW50cyA9IFtdO1xyXG5leHBvcnRzLnN1YnNjcmliZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIGNsaWVudHMuZm9yRWFjaChmdW5jdGlvbiAoY2xpZW50KSB7XHJcbiAgICAgICAgdmFyIHEgPSBldmVudC5kYXRhLnF1ZXJ5O1xyXG4gICAgICAgIHZhciBzcWwgPSAocS5wcmVwYXJhYmxlICYmIHEucHJlcGFyYWJsZS50ZXh0KSB8fCBxLnBsYW4gfHwgcS50ZXh0IHx8IFwidW5rbm93biBxdWVyeVwiO1xyXG4gICAgICAgIHZhciBzdWNjZXNzID0gIWV2ZW50LmRhdGEuZXJyb3I7XHJcbiAgICAgICAgdmFyIGNvbm4gPSBldmVudC5kYXRhLmRhdGFiYXNlLmhvc3QgKyBcIjpcIiArIGV2ZW50LmRhdGEuZGF0YWJhc2UucG9ydDtcclxuICAgICAgICBjbGllbnQudHJhY2tEZXBlbmRlbmN5KHtcclxuICAgICAgICAgICAgdGFyZ2V0OiBjb25uLFxyXG4gICAgICAgICAgICBkYXRhOiBzcWwsXHJcbiAgICAgICAgICAgIG5hbWU6IHNxbCxcclxuICAgICAgICAgICAgZHVyYXRpb246IGV2ZW50LmRhdGEuZHVyYXRpb24sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXHJcbiAgICAgICAgICAgIHJlc3VsdENvZGU6IHN1Y2Nlc3MgPyBcIjBcIiA6IFwiMVwiLFxyXG4gICAgICAgICAgICBkZXBlbmRlbmN5VHlwZU5hbWU6IFwicG9zdGdyZXNcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcbmZ1bmN0aW9uIGVuYWJsZShlbmFibGVkLCBjbGllbnQpIHtcclxuICAgIGlmIChlbmFibGVkKSB7XHJcbiAgICAgICAgaWYgKGNsaWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwuc3Vic2NyaWJlKFwicG9zdGdyZXNcIiwgZXhwb3J0cy5zdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgICAgIGNsaWVudHMucHVzaChjbGllbnQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2xpZW50cyA9IGNsaWVudHMuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjICE9IGNsaWVudDsgfSk7XHJcbiAgICAgICAgaWYgKGNsaWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwudW5zdWJzY3JpYmUoXCJwb3N0Z3Jlc1wiLCBleHBvcnRzLnN1YnNjcmliZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdGdyZXMuc3ViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/postgres.sub.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/redis.sub.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/redis.sub.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar clients = [];\r\nexports.subscriber = function (event) {\r\n    clients.forEach(function (client) {\r\n        if (event.data.commandObj.command === \"info\") {\r\n            // We don't want to report 'info', it's irrelevant\r\n            return;\r\n        }\r\n        client.trackDependency({\r\n            target: event.data.address,\r\n            name: event.data.commandObj.command,\r\n            data: event.data.commandObj.command,\r\n            duration: event.data.duration,\r\n            success: !event.data.err,\r\n            /* TODO: transmit result code from redis */\r\n            resultCode: event.data.err ? \"1\" : \"0\",\r\n            dependencyTypeName: \"redis\"\r\n        });\r\n    });\r\n};\r\nfunction enable(enabled, client) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.subscribe(\"redis\", exports.subscriber);\r\n        }\r\n        ;\r\n        clients.push(client);\r\n    }\r\n    else {\r\n        clients = clients.filter(function (c) { return c != client; });\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.unsubscribe(\"redis\", exports.subscriber);\r\n        }\r\n    }\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=redis.sub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL3JlZGlzLnN1Yi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL3JlZGlzLnN1Yi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZGlhZ25vc3RpY19jaGFubmVsXzEgPSByZXF1aXJlKFwiZGlhZ25vc3RpYy1jaGFubmVsXCIpO1xyXG52YXIgY2xpZW50cyA9IFtdO1xyXG5leHBvcnRzLnN1YnNjcmliZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIGNsaWVudHMuZm9yRWFjaChmdW5jdGlvbiAoY2xpZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEuY29tbWFuZE9iai5jb21tYW5kID09PSBcImluZm9cIikge1xyXG4gICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHJlcG9ydCAnaW5mbycsIGl0J3MgaXJyZWxldmFudFxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsaWVudC50cmFja0RlcGVuZGVuY3koe1xyXG4gICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LmRhdGEuYWRkcmVzcyxcclxuICAgICAgICAgICAgbmFtZTogZXZlbnQuZGF0YS5jb21tYW5kT2JqLmNvbW1hbmQsXHJcbiAgICAgICAgICAgIGRhdGE6IGV2ZW50LmRhdGEuY29tbWFuZE9iai5jb21tYW5kLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogZXZlbnQuZGF0YS5kdXJhdGlvbixcclxuICAgICAgICAgICAgc3VjY2VzczogIWV2ZW50LmRhdGEuZXJyLFxyXG4gICAgICAgICAgICAvKiBUT0RPOiB0cmFuc21pdCByZXN1bHQgY29kZSBmcm9tIHJlZGlzICovXHJcbiAgICAgICAgICAgIHJlc3VsdENvZGU6IGV2ZW50LmRhdGEuZXJyID8gXCIxXCIgOiBcIjBcIixcclxuICAgICAgICAgICAgZGVwZW5kZW5jeVR5cGVOYW1lOiBcInJlZGlzXCJcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBlbmFibGUoZW5hYmxlZCwgY2xpZW50KSB7XHJcbiAgICBpZiAoZW5hYmxlZCkge1xyXG4gICAgICAgIGlmIChjbGllbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnN1YnNjcmliZShcInJlZGlzXCIsIGV4cG9ydHMuc3Vic2NyaWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDtcclxuICAgICAgICBjbGllbnRzLnB1c2goY2xpZW50KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNsaWVudHMgPSBjbGllbnRzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAhPSBjbGllbnQ7IH0pO1xyXG4gICAgICAgIGlmIChjbGllbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnVuc3Vic2NyaWJlKFwicmVkaXNcIiwgZXhwb3J0cy5zdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLnN1Yi5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/redis.sub.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/winston.sub.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/winston.sub.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Contracts_1 = __webpack_require__(/*! ../../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar clients = [];\r\nvar winstonToAILevelMap = {\r\n    syslog: function (og) {\r\n        var map = {\r\n            emerg: Contracts_1.SeverityLevel.Critical,\r\n            alert: Contracts_1.SeverityLevel.Critical,\r\n            crit: Contracts_1.SeverityLevel.Critical,\r\n            error: Contracts_1.SeverityLevel.Error,\r\n            warning: Contracts_1.SeverityLevel.Warning,\r\n            notice: Contracts_1.SeverityLevel.Information,\r\n            info: Contracts_1.SeverityLevel.Information,\r\n            debug: Contracts_1.SeverityLevel.Verbose\r\n        };\r\n        return map[og] === undefined ? Contracts_1.SeverityLevel.Information : map[og];\r\n    },\r\n    npm: function (og) {\r\n        var map = {\r\n            error: Contracts_1.SeverityLevel.Error,\r\n            warn: Contracts_1.SeverityLevel.Warning,\r\n            info: Contracts_1.SeverityLevel.Information,\r\n            verbose: Contracts_1.SeverityLevel.Verbose,\r\n            debug: Contracts_1.SeverityLevel.Verbose,\r\n            silly: Contracts_1.SeverityLevel.Verbose\r\n        };\r\n        return map[og] === undefined ? Contracts_1.SeverityLevel.Information : map[og];\r\n    },\r\n    unknown: function (og) {\r\n        return Contracts_1.SeverityLevel.Information;\r\n    }\r\n};\r\nvar subscriber = function (event) {\r\n    clients.forEach(function (client) {\r\n        var AIlevel = winstonToAILevelMap[event.data.levelKind](event.data.level);\r\n        client.trackTrace({\r\n            message: event.data.message,\r\n            severity: AIlevel,\r\n            properties: event.data.meta\r\n        });\r\n    });\r\n};\r\nfunction enable(enabled, client) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.subscribe(\"winston\", subscriber);\r\n        }\r\n        ;\r\n        clients.push(client);\r\n    }\r\n    else {\r\n        clients = clients.filter(function (c) { return c != client; });\r\n        if (clients.length === 0) {\r\n            diagnostic_channel_1.channel.unsubscribe(\"winston\", subscriber);\r\n        }\r\n    }\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=winston.sub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvQXV0b0NvbGxlY3Rpb24vZGlhZ25vc3RpYy1jaGFubmVsL3dpbnN0b24uc3ViLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9BdXRvQ29sbGVjdGlvbi9kaWFnbm9zdGljLWNoYW5uZWwvd2luc3Rvbi5zdWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIENvbnRyYWN0c18xID0gcmVxdWlyZShcIi4uLy4uL0RlY2xhcmF0aW9ucy9Db250cmFjdHNcIik7XHJcbnZhciBkaWFnbm9zdGljX2NoYW5uZWxfMSA9IHJlcXVpcmUoXCJkaWFnbm9zdGljLWNoYW5uZWxcIik7XHJcbnZhciBjbGllbnRzID0gW107XHJcbnZhciB3aW5zdG9uVG9BSUxldmVsTWFwID0ge1xyXG4gICAgc3lzbG9nOiBmdW5jdGlvbiAob2cpIHtcclxuICAgICAgICB2YXIgbWFwID0ge1xyXG4gICAgICAgICAgICBlbWVyZzogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5Dcml0aWNhbCxcclxuICAgICAgICAgICAgYWxlcnQ6IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuQ3JpdGljYWwsXHJcbiAgICAgICAgICAgIGNyaXQ6IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuQ3JpdGljYWwsXHJcbiAgICAgICAgICAgIGVycm9yOiBDb250cmFjdHNfMS5TZXZlcml0eUxldmVsLkVycm9yLFxyXG4gICAgICAgICAgICB3YXJuaW5nOiBDb250cmFjdHNfMS5TZXZlcml0eUxldmVsLldhcm5pbmcsXHJcbiAgICAgICAgICAgIG5vdGljZTogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5JbmZvcm1hdGlvbixcclxuICAgICAgICAgICAgaW5mbzogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5JbmZvcm1hdGlvbixcclxuICAgICAgICAgICAgZGVidWc6IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuVmVyYm9zZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG1hcFtvZ10gPT09IHVuZGVmaW5lZCA/IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuSW5mb3JtYXRpb24gOiBtYXBbb2ddO1xyXG4gICAgfSxcclxuICAgIG5wbTogZnVuY3Rpb24gKG9nKSB7XHJcbiAgICAgICAgdmFyIG1hcCA9IHtcclxuICAgICAgICAgICAgZXJyb3I6IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuRXJyb3IsXHJcbiAgICAgICAgICAgIHdhcm46IENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuV2FybmluZyxcclxuICAgICAgICAgICAgaW5mbzogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5JbmZvcm1hdGlvbixcclxuICAgICAgICAgICAgdmVyYm9zZTogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5WZXJib3NlLFxyXG4gICAgICAgICAgICBkZWJ1ZzogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5WZXJib3NlLFxyXG4gICAgICAgICAgICBzaWxseTogQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5WZXJib3NlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbWFwW29nXSA9PT0gdW5kZWZpbmVkID8gQ29udHJhY3RzXzEuU2V2ZXJpdHlMZXZlbC5JbmZvcm1hdGlvbiA6IG1hcFtvZ107XHJcbiAgICB9LFxyXG4gICAgdW5rbm93bjogZnVuY3Rpb24gKG9nKSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyYWN0c18xLlNldmVyaXR5TGV2ZWwuSW5mb3JtYXRpb247XHJcbiAgICB9XHJcbn07XHJcbnZhciBzdWJzY3JpYmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBjbGllbnRzLmZvckVhY2goZnVuY3Rpb24gKGNsaWVudCkge1xyXG4gICAgICAgIHZhciBBSWxldmVsID0gd2luc3RvblRvQUlMZXZlbE1hcFtldmVudC5kYXRhLmxldmVsS2luZF0oZXZlbnQuZGF0YS5sZXZlbCk7XHJcbiAgICAgICAgY2xpZW50LnRyYWNrVHJhY2Uoe1xyXG4gICAgICAgICAgICBtZXNzYWdlOiBldmVudC5kYXRhLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHNldmVyaXR5OiBBSWxldmVsLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBldmVudC5kYXRhLm1ldGFcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBlbmFibGUoZW5hYmxlZCwgY2xpZW50KSB7XHJcbiAgICBpZiAoZW5hYmxlZCkge1xyXG4gICAgICAgIGlmIChjbGllbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnN1YnNjcmliZShcIndpbnN0b25cIiwgc3Vic2NyaWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDtcclxuICAgICAgICBjbGllbnRzLnB1c2goY2xpZW50KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNsaWVudHMgPSBjbGllbnRzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAhPSBjbGllbnQ7IH0pO1xyXG4gICAgICAgIGlmIChjbGllbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnVuc3Vic2NyaWJlKFwid2luc3RvblwiLCBzdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbnN0b24uc3ViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/AutoCollection/diagnostic-channel/winston.sub.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Constants.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Generated_1 = __webpack_require__(/*! ./Generated */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/index.js\");\r\nvar RemoteDependencyDataConstants = (function () {\r\n    function RemoteDependencyDataConstants() {\r\n    }\r\n    RemoteDependencyDataConstants.TYPE_HTTP = \"Http\";\r\n    RemoteDependencyDataConstants.TYPE_AI = \"Http (tracked component)\";\r\n    return RemoteDependencyDataConstants;\r\n}());\r\nexports.RemoteDependencyDataConstants = RemoteDependencyDataConstants;\r\nfunction domainSupportsProperties(domain) {\r\n    return \"properties\" in domain ||\r\n        domain instanceof Generated_1.EventData ||\r\n        domain instanceof Generated_1.ExceptionData ||\r\n        domain instanceof Generated_1.MessageData ||\r\n        domain instanceof Generated_1.MetricData ||\r\n        domain instanceof Generated_1.PageViewData ||\r\n        domain instanceof Generated_1.RemoteDependencyData ||\r\n        domain instanceof Generated_1.RequestData;\r\n}\r\nexports.domainSupportsProperties = domainSupportsProperties;\r\n//# sourceMappingURL=Constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9Db25zdGFudHMuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0RlY2xhcmF0aW9ucy9Db250cmFjdHMvQ29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBHZW5lcmF0ZWRfMSA9IHJlcXVpcmUoXCIuL0dlbmVyYXRlZFwiKTtcclxudmFyIFJlbW90ZURlcGVuZGVuY3lEYXRhQ29uc3RhbnRzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlbW90ZURlcGVuZGVuY3lEYXRhQ29uc3RhbnRzKCkge1xyXG4gICAgfVxyXG4gICAgUmVtb3RlRGVwZW5kZW5jeURhdGFDb25zdGFudHMuVFlQRV9IVFRQID0gXCJIdHRwXCI7XHJcbiAgICBSZW1vdGVEZXBlbmRlbmN5RGF0YUNvbnN0YW50cy5UWVBFX0FJID0gXCJIdHRwICh0cmFja2VkIGNvbXBvbmVudClcIjtcclxuICAgIHJldHVybiBSZW1vdGVEZXBlbmRlbmN5RGF0YUNvbnN0YW50cztcclxufSgpKTtcclxuZXhwb3J0cy5SZW1vdGVEZXBlbmRlbmN5RGF0YUNvbnN0YW50cyA9IFJlbW90ZURlcGVuZGVuY3lEYXRhQ29uc3RhbnRzO1xyXG5mdW5jdGlvbiBkb21haW5TdXBwb3J0c1Byb3BlcnRpZXMoZG9tYWluKSB7XHJcbiAgICByZXR1cm4gXCJwcm9wZXJ0aWVzXCIgaW4gZG9tYWluIHx8XHJcbiAgICAgICAgZG9tYWluIGluc3RhbmNlb2YgR2VuZXJhdGVkXzEuRXZlbnREYXRhIHx8XHJcbiAgICAgICAgZG9tYWluIGluc3RhbmNlb2YgR2VuZXJhdGVkXzEuRXhjZXB0aW9uRGF0YSB8fFxyXG4gICAgICAgIGRvbWFpbiBpbnN0YW5jZW9mIEdlbmVyYXRlZF8xLk1lc3NhZ2VEYXRhIHx8XHJcbiAgICAgICAgZG9tYWluIGluc3RhbmNlb2YgR2VuZXJhdGVkXzEuTWV0cmljRGF0YSB8fFxyXG4gICAgICAgIGRvbWFpbiBpbnN0YW5jZW9mIEdlbmVyYXRlZF8xLlBhZ2VWaWV3RGF0YSB8fFxyXG4gICAgICAgIGRvbWFpbiBpbnN0YW5jZW9mIEdlbmVyYXRlZF8xLlJlbW90ZURlcGVuZGVuY3lEYXRhIHx8XHJcbiAgICAgICAgZG9tYWluIGluc3RhbmNlb2YgR2VuZXJhdGVkXzEuUmVxdWVzdERhdGE7XHJcbn1cclxuZXhwb3J0cy5kb21haW5TdXBwb3J0c1Byb3BlcnRpZXMgPSBkb21haW5TdXBwb3J0c1Byb3BlcnRpZXM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnN0YW50cy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Constants.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/AvailabilityData.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/AvailabilityData.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\n\"use strict\";\r\n/**\r\n * Instances of AvailabilityData represent the result of executing an availability test.\r\n */\r\nvar AvailabilityData = (function (_super) {\r\n    __extends(AvailabilityData, _super);\r\n    function AvailabilityData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return AvailabilityData;\r\n}(Domain));\r\nmodule.exports = AvailabilityData;\r\n//# sourceMappingURL=AvailabilityData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvQXZhaWxhYmlsaXR5RGF0YS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvQXZhaWxhYmlsaXR5RGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbi8vIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRFxyXG52YXIgRG9tYWluID0gcmVxdWlyZShcIi4vRG9tYWluXCIpO1xyXG5cInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIEluc3RhbmNlcyBvZiBBdmFpbGFiaWxpdHlEYXRhIHJlcHJlc2VudCB0aGUgcmVzdWx0IG9mIGV4ZWN1dGluZyBhbiBhdmFpbGFiaWxpdHkgdGVzdC5cclxuICovXHJcbnZhciBBdmFpbGFiaWxpdHlEYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBdmFpbGFiaWxpdHlEYXRhLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQXZhaWxhYmlsaXR5RGF0YSgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnZlciA9IDI7XHJcbiAgICAgICAgX3RoaXMucHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIF90aGlzLm1lYXN1cmVtZW50cyA9IHt9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBBdmFpbGFiaWxpdHlEYXRhO1xyXG59KERvbWFpbikpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEF2YWlsYWJpbGl0eURhdGE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF2YWlsYWJpbGl0eURhdGEuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/AvailabilityData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Base.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Base.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// THIS FILE WAS AUTOGENERATED\r\n\r\n/**\r\n * Data struct to contain only C section with custom fields.\r\n */\r\nvar Base = (function () {\r\n    function Base() {\r\n    }\r\n    return Base;\r\n}());\r\nmodule.exports = Base;\r\n//# sourceMappingURL=Base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvQmFzZS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvQmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURURcclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBEYXRhIHN0cnVjdCB0byBjb250YWluIG9ubHkgQyBzZWN0aW9uIHdpdGggY3VzdG9tIGZpZWxkcy5cclxuICovXHJcbnZhciBCYXNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJhc2UoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQmFzZTtcclxufSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSBCYXNlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Base.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ContextTagKeys.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ContextTagKeys.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// THIS FILE WAS AUTOGENERATED\r\n\r\nvar ContextTagKeys = (function () {\r\n    function ContextTagKeys() {\r\n        this.applicationVersion = \"ai.application.ver\";\r\n        this.deviceId = \"ai.device.id\";\r\n        this.deviceLocale = \"ai.device.locale\";\r\n        this.deviceModel = \"ai.device.model\";\r\n        this.deviceOEMName = \"ai.device.oemName\";\r\n        this.deviceOSVersion = \"ai.device.osVersion\";\r\n        this.deviceType = \"ai.device.type\";\r\n        this.locationIp = \"ai.location.ip\";\r\n        this.operationId = \"ai.operation.id\";\r\n        this.operationName = \"ai.operation.name\";\r\n        this.operationParentId = \"ai.operation.parentId\";\r\n        this.operationSyntheticSource = \"ai.operation.syntheticSource\";\r\n        this.operationCorrelationVector = \"ai.operation.correlationVector\";\r\n        this.sessionId = \"ai.session.id\";\r\n        this.sessionIsFirst = \"ai.session.isFirst\";\r\n        this.userAccountId = \"ai.user.accountId\";\r\n        this.userId = \"ai.user.id\";\r\n        this.userAuthUserId = \"ai.user.authUserId\";\r\n        this.cloudRole = \"ai.cloud.role\";\r\n        this.cloudRoleInstance = \"ai.cloud.roleInstance\";\r\n        this.internalSdkVersion = \"ai.internal.sdkVersion\";\r\n        this.internalAgentVersion = \"ai.internal.agentVersion\";\r\n        this.internalNodeName = \"ai.internal.nodeName\";\r\n    }\r\n    return ContextTagKeys;\r\n}());\r\nmodule.exports = ContextTagKeys;\r\n//# sourceMappingURL=ContextTagKeys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvQ29udGV4dFRhZ0tleXMuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0RlY2xhcmF0aW9ucy9Db250cmFjdHMvR2VuZXJhdGVkL0NvbnRleHRUYWdLZXlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRFxyXG5cInVzZSBzdHJpY3RcIjtcclxudmFyIENvbnRleHRUYWdLZXlzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbnRleHRUYWdLZXlzKCkge1xyXG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25WZXJzaW9uID0gXCJhaS5hcHBsaWNhdGlvbi52ZXJcIjtcclxuICAgICAgICB0aGlzLmRldmljZUlkID0gXCJhaS5kZXZpY2UuaWRcIjtcclxuICAgICAgICB0aGlzLmRldmljZUxvY2FsZSA9IFwiYWkuZGV2aWNlLmxvY2FsZVwiO1xyXG4gICAgICAgIHRoaXMuZGV2aWNlTW9kZWwgPSBcImFpLmRldmljZS5tb2RlbFwiO1xyXG4gICAgICAgIHRoaXMuZGV2aWNlT0VNTmFtZSA9IFwiYWkuZGV2aWNlLm9lbU5hbWVcIjtcclxuICAgICAgICB0aGlzLmRldmljZU9TVmVyc2lvbiA9IFwiYWkuZGV2aWNlLm9zVmVyc2lvblwiO1xyXG4gICAgICAgIHRoaXMuZGV2aWNlVHlwZSA9IFwiYWkuZGV2aWNlLnR5cGVcIjtcclxuICAgICAgICB0aGlzLmxvY2F0aW9uSXAgPSBcImFpLmxvY2F0aW9uLmlwXCI7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpb25JZCA9IFwiYWkub3BlcmF0aW9uLmlkXCI7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpb25OYW1lID0gXCJhaS5vcGVyYXRpb24ubmFtZVwiO1xyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uUGFyZW50SWQgPSBcImFpLm9wZXJhdGlvbi5wYXJlbnRJZFwiO1xyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uU3ludGhldGljU291cmNlID0gXCJhaS5vcGVyYXRpb24uc3ludGhldGljU291cmNlXCI7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpb25Db3JyZWxhdGlvblZlY3RvciA9IFwiYWkub3BlcmF0aW9uLmNvcnJlbGF0aW9uVmVjdG9yXCI7XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uSWQgPSBcImFpLnNlc3Npb24uaWRcIjtcclxuICAgICAgICB0aGlzLnNlc3Npb25Jc0ZpcnN0ID0gXCJhaS5zZXNzaW9uLmlzRmlyc3RcIjtcclxuICAgICAgICB0aGlzLnVzZXJBY2NvdW50SWQgPSBcImFpLnVzZXIuYWNjb3VudElkXCI7XHJcbiAgICAgICAgdGhpcy51c2VySWQgPSBcImFpLnVzZXIuaWRcIjtcclxuICAgICAgICB0aGlzLnVzZXJBdXRoVXNlcklkID0gXCJhaS51c2VyLmF1dGhVc2VySWRcIjtcclxuICAgICAgICB0aGlzLmNsb3VkUm9sZSA9IFwiYWkuY2xvdWQucm9sZVwiO1xyXG4gICAgICAgIHRoaXMuY2xvdWRSb2xlSW5zdGFuY2UgPSBcImFpLmNsb3VkLnJvbGVJbnN0YW5jZVwiO1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxTZGtWZXJzaW9uID0gXCJhaS5pbnRlcm5hbC5zZGtWZXJzaW9uXCI7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbEFnZW50VmVyc2lvbiA9IFwiYWkuaW50ZXJuYWwuYWdlbnRWZXJzaW9uXCI7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbE5vZGVOYW1lID0gXCJhaS5pbnRlcm5hbC5ub2RlTmFtZVwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIENvbnRleHRUYWdLZXlzO1xyXG59KCkpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRleHRUYWdLZXlzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250ZXh0VGFnS2V5cy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ContextTagKeys.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Data.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Data.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Base = __webpack_require__(/*! ./Base */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Base.js\");\r\n\"use strict\";\r\n/**\r\n * Data struct to contain both B and C sections.\r\n */\r\nvar Data = (function (_super) {\r\n    __extends(Data, _super);\r\n    function Data() {\r\n        return _super.call(this) || this;\r\n    }\r\n    return Data;\r\n}(Base));\r\nmodule.exports = Data;\r\n//# sourceMappingURL=Data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRGF0YS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbi8vIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRFxyXG52YXIgQmFzZSA9IHJlcXVpcmUoXCIuL0Jhc2VcIik7XHJcblwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogRGF0YSBzdHJ1Y3QgdG8gY29udGFpbiBib3RoIEIgYW5kIEMgc2VjdGlvbnMuXHJcbiAqL1xyXG52YXIgRGF0YSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRGF0YTtcclxufShCYXNlKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gRGF0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGF0YS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Data.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPoint.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPoint.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// THIS FILE WAS AUTOGENERATED\r\nvar DataPointType = __webpack_require__(/*! ./DataPointType */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPointType.js\");\r\n\"use strict\";\r\n/**\r\n * Metric data single measurement.\r\n */\r\nvar DataPoint = (function () {\r\n    function DataPoint() {\r\n        this.kind = DataPointType.Measurement;\r\n    }\r\n    return DataPoint;\r\n}());\r\nmodule.exports = DataPoint;\r\n//# sourceMappingURL=DataPoint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRGF0YVBvaW50LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9EZWNsYXJhdGlvbnMvQ29udHJhY3RzL0dlbmVyYXRlZC9EYXRhUG9pbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRFxyXG52YXIgRGF0YVBvaW50VHlwZSA9IHJlcXVpcmUoXCIuL0RhdGFQb2ludFR5cGVcIik7XHJcblwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogTWV0cmljIGRhdGEgc2luZ2xlIG1lYXN1cmVtZW50LlxyXG4gKi9cclxudmFyIERhdGFQb2ludCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRhUG9pbnQoKSB7XHJcbiAgICAgICAgdGhpcy5raW5kID0gRGF0YVBvaW50VHlwZS5NZWFzdXJlbWVudDtcclxuICAgIH1cclxuICAgIHJldHVybiBEYXRhUG9pbnQ7XHJcbn0oKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gRGF0YVBvaW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EYXRhUG9pbnQuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPoint.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPointType.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPointType.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// THIS FILE WAS AUTOGENERATED\r\n\r\n/**\r\n * Type of the metric data measurement.\r\n */\r\nvar DataPointType;\r\n(function (DataPointType) {\r\n    DataPointType[DataPointType[\"Measurement\"] = 0] = \"Measurement\";\r\n    DataPointType[DataPointType[\"Aggregation\"] = 1] = \"Aggregation\";\r\n})(DataPointType || (DataPointType = {}));\r\nmodule.exports = DataPointType;\r\n//# sourceMappingURL=DataPointType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRGF0YVBvaW50VHlwZS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRGF0YVBvaW50VHlwZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURURcclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBUeXBlIG9mIHRoZSBtZXRyaWMgZGF0YSBtZWFzdXJlbWVudC5cclxuICovXHJcbnZhciBEYXRhUG9pbnRUeXBlO1xyXG4oZnVuY3Rpb24gKERhdGFQb2ludFR5cGUpIHtcclxuICAgIERhdGFQb2ludFR5cGVbRGF0YVBvaW50VHlwZVtcIk1lYXN1cmVtZW50XCJdID0gMF0gPSBcIk1lYXN1cmVtZW50XCI7XHJcbiAgICBEYXRhUG9pbnRUeXBlW0RhdGFQb2ludFR5cGVbXCJBZ2dyZWdhdGlvblwiXSA9IDFdID0gXCJBZ2dyZWdhdGlvblwiO1xyXG59KShEYXRhUG9pbnRUeXBlIHx8IChEYXRhUG9pbnRUeXBlID0ge30pKTtcclxubW9kdWxlLmV4cG9ydHMgPSBEYXRhUG9pbnRUeXBlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EYXRhUG9pbnRUeXBlLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPointType.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// THIS FILE WAS AUTOGENERATED\r\n\r\n/**\r\n * The abstract common base of all domains.\r\n */\r\nvar Domain = (function () {\r\n    function Domain() {\r\n    }\r\n    return Domain;\r\n}());\r\nmodule.exports = Domain;\r\n//# sourceMappingURL=Domain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRG9tYWluLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9EZWNsYXJhdGlvbnMvQ29udHJhY3RzL0dlbmVyYXRlZC9Eb21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVEXHJcblwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogVGhlIGFic3RyYWN0IGNvbW1vbiBiYXNlIG9mIGFsbCBkb21haW5zLlxyXG4gKi9cclxudmFyIERvbWFpbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb21haW4oKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRG9tYWluO1xyXG59KCkpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IERvbWFpbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RG9tYWluLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Envelope.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Envelope.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * System variables for a telemetry item.\r\n */\r\nvar Envelope = (function () {\r\n    function Envelope() {\r\n        this.ver = 1;\r\n        this.sampleRate = 100.0;\r\n        this.tags = {};\r\n    }\r\n    return Envelope;\r\n}());\r\nmodule.exports = Envelope;\r\n//# sourceMappingURL=Envelope.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRW52ZWxvcGUuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0RlY2xhcmF0aW9ucy9Db250cmFjdHMvR2VuZXJhdGVkL0VudmVsb3BlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogU3lzdGVtIHZhcmlhYmxlcyBmb3IgYSB0ZWxlbWV0cnkgaXRlbS5cclxuICovXHJcbnZhciBFbnZlbG9wZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFbnZlbG9wZSgpIHtcclxuICAgICAgICB0aGlzLnZlciA9IDE7XHJcbiAgICAgICAgdGhpcy5zYW1wbGVSYXRlID0gMTAwLjA7XHJcbiAgICAgICAgdGhpcy50YWdzID0ge307XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRW52ZWxvcGU7XHJcbn0oKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gRW52ZWxvcGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVudmVsb3BlLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Envelope.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/EventData.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/EventData.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\n\"use strict\";\r\n/**\r\n * Instances of Event represent structured event records that can be grouped and searched by their properties. Event data item also creates a metric of event count by name.\r\n */\r\nvar EventData = (function (_super) {\r\n    __extends(EventData, _super);\r\n    function EventData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return EventData;\r\n}(Domain));\r\nmodule.exports = EventData;\r\n//# sourceMappingURL=EventData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRXZlbnREYXRhLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9EZWNsYXJhdGlvbnMvQ29udHJhY3RzL0dlbmVyYXRlZC9FdmVudERhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4vLyBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURURcclxudmFyIERvbWFpbiA9IHJlcXVpcmUoXCIuL0RvbWFpblwiKTtcclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBJbnN0YW5jZXMgb2YgRXZlbnQgcmVwcmVzZW50IHN0cnVjdHVyZWQgZXZlbnQgcmVjb3JkcyB0aGF0IGNhbiBiZSBncm91cGVkIGFuZCBzZWFyY2hlZCBieSB0aGVpciBwcm9wZXJ0aWVzLiBFdmVudCBkYXRhIGl0ZW0gYWxzbyBjcmVhdGVzIGEgbWV0cmljIG9mIGV2ZW50IGNvdW50IGJ5IG5hbWUuXHJcbiAqL1xyXG52YXIgRXZlbnREYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFdmVudERhdGEsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBFdmVudERhdGEoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy52ZXIgPSAyO1xyXG4gICAgICAgIF90aGlzLnByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICBfdGhpcy5tZWFzdXJlbWVudHMgPSB7fTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRXZlbnREYXRhO1xyXG59KERvbWFpbikpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RGF0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXZlbnREYXRhLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/EventData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionData.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionData.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\n\"use strict\";\r\n/**\r\n * An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored application.\r\n */\r\nvar ExceptionData = (function (_super) {\r\n    __extends(ExceptionData, _super);\r\n    function ExceptionData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.exceptions = [];\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return ExceptionData;\r\n}(Domain));\r\nmodule.exports = ExceptionData;\r\n//# sourceMappingURL=ExceptionData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRXhjZXB0aW9uRGF0YS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRXhjZXB0aW9uRGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbi8vIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRFxyXG52YXIgRG9tYWluID0gcmVxdWlyZShcIi4vRG9tYWluXCIpO1xyXG5cInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIEFuIGluc3RhbmNlIG9mIEV4Y2VwdGlvbiByZXByZXNlbnRzIGEgaGFuZGxlZCBvciB1bmhhbmRsZWQgZXhjZXB0aW9uIHRoYXQgb2NjdXJyZWQgZHVyaW5nIGV4ZWN1dGlvbiBvZiB0aGUgbW9uaXRvcmVkIGFwcGxpY2F0aW9uLlxyXG4gKi9cclxudmFyIEV4Y2VwdGlvbkRhdGEgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEV4Y2VwdGlvbkRhdGEsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBFeGNlcHRpb25EYXRhKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMudmVyID0gMjtcclxuICAgICAgICBfdGhpcy5leGNlcHRpb25zID0gW107XHJcbiAgICAgICAgX3RoaXMucHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIF90aGlzLm1lYXN1cmVtZW50cyA9IHt9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBFeGNlcHRpb25EYXRhO1xyXG59KERvbWFpbikpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV4Y2VwdGlvbkRhdGE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4Y2VwdGlvbkRhdGEuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionDetails.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionDetails.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Exception details of the exception in a chain.\r\n */\r\nvar ExceptionDetails = (function () {\r\n    function ExceptionDetails() {\r\n        this.hasFullStack = true;\r\n        this.parsedStack = [];\r\n    }\r\n    return ExceptionDetails;\r\n}());\r\nmodule.exports = ExceptionDetails;\r\n//# sourceMappingURL=ExceptionDetails.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRXhjZXB0aW9uRGV0YWlscy5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvRXhjZXB0aW9uRGV0YWlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIEV4Y2VwdGlvbiBkZXRhaWxzIG9mIHRoZSBleGNlcHRpb24gaW4gYSBjaGFpbi5cclxuICovXHJcbnZhciBFeGNlcHRpb25EZXRhaWxzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEV4Y2VwdGlvbkRldGFpbHMoKSB7XHJcbiAgICAgICAgdGhpcy5oYXNGdWxsU3RhY2sgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGFyc2VkU3RhY2sgPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiBFeGNlcHRpb25EZXRhaWxzO1xyXG59KCkpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV4Y2VwdGlvbkRldGFpbHM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4Y2VwdGlvbkRldGFpbHMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionDetails.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MessageData.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MessageData.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\n\"use strict\";\r\n/**\r\n * Instances of Message represent printf-like trace statements that are text-searched. Log4Net, NLog and other text-based log file entries are translated into intances of this type. The message does not have measurements.\r\n */\r\nvar MessageData = (function (_super) {\r\n    __extends(MessageData, _super);\r\n    function MessageData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        return _this;\r\n    }\r\n    return MessageData;\r\n}(Domain));\r\nmodule.exports = MessageData;\r\n//# sourceMappingURL=MessageData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvTWVzc2FnZURhdGEuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0RlY2xhcmF0aW9ucy9Db250cmFjdHMvR2VuZXJhdGVkL01lc3NhZ2VEYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuLy8gVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVEXHJcbnZhciBEb21haW4gPSByZXF1aXJlKFwiLi9Eb21haW5cIik7XHJcblwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogSW5zdGFuY2VzIG9mIE1lc3NhZ2UgcmVwcmVzZW50IHByaW50Zi1saWtlIHRyYWNlIHN0YXRlbWVudHMgdGhhdCBhcmUgdGV4dC1zZWFyY2hlZC4gTG9nNE5ldCwgTkxvZyBhbmQgb3RoZXIgdGV4dC1iYXNlZCBsb2cgZmlsZSBlbnRyaWVzIGFyZSB0cmFuc2xhdGVkIGludG8gaW50YW5jZXMgb2YgdGhpcyB0eXBlLiBUaGUgbWVzc2FnZSBkb2VzIG5vdCBoYXZlIG1lYXN1cmVtZW50cy5cclxuICovXHJcbnZhciBNZXNzYWdlRGF0YSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWVzc2FnZURhdGEsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBNZXNzYWdlRGF0YSgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnZlciA9IDI7XHJcbiAgICAgICAgX3RoaXMucHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBNZXNzYWdlRGF0YTtcclxufShEb21haW4pKTtcclxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlRGF0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVzc2FnZURhdGEuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MessageData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MetricData.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MetricData.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\n\"use strict\";\r\n/**\r\n * An instance of the Metric item is a list of measurements (single data points) and/or aggregations.\r\n */\r\nvar MetricData = (function (_super) {\r\n    __extends(MetricData, _super);\r\n    function MetricData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.metrics = [];\r\n        _this.properties = {};\r\n        return _this;\r\n    }\r\n    return MetricData;\r\n}(Domain));\r\nmodule.exports = MetricData;\r\n//# sourceMappingURL=MetricData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvTWV0cmljRGF0YS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvTWV0cmljRGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbi8vIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRFxyXG52YXIgRG9tYWluID0gcmVxdWlyZShcIi4vRG9tYWluXCIpO1xyXG5cInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBNZXRyaWMgaXRlbSBpcyBhIGxpc3Qgb2YgbWVhc3VyZW1lbnRzIChzaW5nbGUgZGF0YSBwb2ludHMpIGFuZC9vciBhZ2dyZWdhdGlvbnMuXHJcbiAqL1xyXG52YXIgTWV0cmljRGF0YSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWV0cmljRGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE1ldHJpY0RhdGEoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy52ZXIgPSAyO1xyXG4gICAgICAgIF90aGlzLm1ldHJpY3MgPSBbXTtcclxuICAgICAgICBfdGhpcy5wcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1ldHJpY0RhdGE7XHJcbn0oRG9tYWluKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gTWV0cmljRGF0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWV0cmljRGF0YS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MetricData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/PageViewData.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/PageViewData.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar EventData = __webpack_require__(/*! ./EventData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/EventData.js\");\r\n\"use strict\";\r\n/**\r\n * An instance of PageView represents a generic action on a page like a button click. It is also the base type for PageView.\r\n */\r\nvar PageViewData = (function (_super) {\r\n    __extends(PageViewData, _super);\r\n    function PageViewData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return PageViewData;\r\n}(EventData));\r\nmodule.exports = PageViewData;\r\n//# sourceMappingURL=PageViewData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvUGFnZVZpZXdEYXRhLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9EZWNsYXJhdGlvbnMvQ29udHJhY3RzL0dlbmVyYXRlZC9QYWdlVmlld0RhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4vLyBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURURcclxudmFyIEV2ZW50RGF0YSA9IHJlcXVpcmUoXCIuL0V2ZW50RGF0YVwiKTtcclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBBbiBpbnN0YW5jZSBvZiBQYWdlVmlldyByZXByZXNlbnRzIGEgZ2VuZXJpYyBhY3Rpb24gb24gYSBwYWdlIGxpa2UgYSBidXR0b24gY2xpY2suIEl0IGlzIGFsc28gdGhlIGJhc2UgdHlwZSBmb3IgUGFnZVZpZXcuXHJcbiAqL1xyXG52YXIgUGFnZVZpZXdEYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhQYWdlVmlld0RhdGEsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQYWdlVmlld0RhdGEoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy52ZXIgPSAyO1xyXG4gICAgICAgIF90aGlzLnByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICBfdGhpcy5tZWFzdXJlbWVudHMgPSB7fTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUGFnZVZpZXdEYXRhO1xyXG59KEV2ZW50RGF0YSkpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VWaWV3RGF0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFnZVZpZXdEYXRhLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/PageViewData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RemoteDependencyData.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RemoteDependencyData.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\n\"use strict\";\r\n/**\r\n * An instance of Remote Dependency represents an interaction of the monitored component with a remote component/service like SQL or an HTTP endpoint.\r\n */\r\nvar RemoteDependencyData = (function (_super) {\r\n    __extends(RemoteDependencyData, _super);\r\n    function RemoteDependencyData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.success = true;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return RemoteDependencyData;\r\n}(Domain));\r\nmodule.exports = RemoteDependencyData;\r\n//# sourceMappingURL=RemoteDependencyData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvUmVtb3RlRGVwZW5kZW5jeURhdGEuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0RlY2xhcmF0aW9ucy9Db250cmFjdHMvR2VuZXJhdGVkL1JlbW90ZURlcGVuZGVuY3lEYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuLy8gVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVEXHJcbnZhciBEb21haW4gPSByZXF1aXJlKFwiLi9Eb21haW5cIik7XHJcblwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQW4gaW5zdGFuY2Ugb2YgUmVtb3RlIERlcGVuZGVuY3kgcmVwcmVzZW50cyBhbiBpbnRlcmFjdGlvbiBvZiB0aGUgbW9uaXRvcmVkIGNvbXBvbmVudCB3aXRoIGEgcmVtb3RlIGNvbXBvbmVudC9zZXJ2aWNlIGxpa2UgU1FMIG9yIGFuIEhUVFAgZW5kcG9pbnQuXHJcbiAqL1xyXG52YXIgUmVtb3RlRGVwZW5kZW5jeURhdGEgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFJlbW90ZURlcGVuZGVuY3lEYXRhLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUmVtb3RlRGVwZW5kZW5jeURhdGEoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy52ZXIgPSAyO1xyXG4gICAgICAgIF90aGlzLnN1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgIF90aGlzLnByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICBfdGhpcy5tZWFzdXJlbWVudHMgPSB7fTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVtb3RlRGVwZW5kZW5jeURhdGE7XHJcbn0oRG9tYWluKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gUmVtb3RlRGVwZW5kZW5jeURhdGE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlbW90ZURlcGVuZGVuY3lEYXRhLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RemoteDependencyData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RequestData.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RequestData.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n// THIS FILE WAS AUTOGENERATED\r\nvar Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\n\"use strict\";\r\n/**\r\n * An instance of Request represents completion of an external request to the application to do work and contains a summary of that request execution and the results.\r\n */\r\nvar RequestData = (function (_super) {\r\n    __extends(RequestData, _super);\r\n    function RequestData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return RequestData;\r\n}(Domain));\r\nmodule.exports = RequestData;\r\n//# sourceMappingURL=RequestData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvUmVxdWVzdERhdGEuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0RlY2xhcmF0aW9ucy9Db250cmFjdHMvR2VuZXJhdGVkL1JlcXVlc3REYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuLy8gVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVEXHJcbnZhciBEb21haW4gPSByZXF1aXJlKFwiLi9Eb21haW5cIik7XHJcblwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQW4gaW5zdGFuY2Ugb2YgUmVxdWVzdCByZXByZXNlbnRzIGNvbXBsZXRpb24gb2YgYW4gZXh0ZXJuYWwgcmVxdWVzdCB0byB0aGUgYXBwbGljYXRpb24gdG8gZG8gd29yayBhbmQgY29udGFpbnMgYSBzdW1tYXJ5IG9mIHRoYXQgcmVxdWVzdCBleGVjdXRpb24gYW5kIHRoZSByZXN1bHRzLlxyXG4gKi9cclxudmFyIFJlcXVlc3REYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhSZXF1ZXN0RGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFJlcXVlc3REYXRhKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMudmVyID0gMjtcclxuICAgICAgICBfdGhpcy5wcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgX3RoaXMubWVhc3VyZW1lbnRzID0ge307XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlcXVlc3REYXRhO1xyXG59KERvbWFpbikpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3REYXRhO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0RGF0YS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RequestData.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/SeverityLevel.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/SeverityLevel.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// THIS FILE WAS AUTOGENERATED\r\n\r\n/**\r\n * Defines the level of severity for the event.\r\n */\r\nvar SeverityLevel;\r\n(function (SeverityLevel) {\r\n    SeverityLevel[SeverityLevel[\"Verbose\"] = 0] = \"Verbose\";\r\n    SeverityLevel[SeverityLevel[\"Information\"] = 1] = \"Information\";\r\n    SeverityLevel[SeverityLevel[\"Warning\"] = 2] = \"Warning\";\r\n    SeverityLevel[SeverityLevel[\"Error\"] = 3] = \"Error\";\r\n    SeverityLevel[SeverityLevel[\"Critical\"] = 4] = \"Critical\";\r\n})(SeverityLevel || (SeverityLevel = {}));\r\nmodule.exports = SeverityLevel;\r\n//# sourceMappingURL=SeverityLevel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvU2V2ZXJpdHlMZXZlbC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvU2V2ZXJpdHlMZXZlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURURcclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBEZWZpbmVzIHRoZSBsZXZlbCBvZiBzZXZlcml0eSBmb3IgdGhlIGV2ZW50LlxyXG4gKi9cclxudmFyIFNldmVyaXR5TGV2ZWw7XHJcbihmdW5jdGlvbiAoU2V2ZXJpdHlMZXZlbCkge1xyXG4gICAgU2V2ZXJpdHlMZXZlbFtTZXZlcml0eUxldmVsW1wiVmVyYm9zZVwiXSA9IDBdID0gXCJWZXJib3NlXCI7XHJcbiAgICBTZXZlcml0eUxldmVsW1NldmVyaXR5TGV2ZWxbXCJJbmZvcm1hdGlvblwiXSA9IDFdID0gXCJJbmZvcm1hdGlvblwiO1xyXG4gICAgU2V2ZXJpdHlMZXZlbFtTZXZlcml0eUxldmVsW1wiV2FybmluZ1wiXSA9IDJdID0gXCJXYXJuaW5nXCI7XHJcbiAgICBTZXZlcml0eUxldmVsW1NldmVyaXR5TGV2ZWxbXCJFcnJvclwiXSA9IDNdID0gXCJFcnJvclwiO1xyXG4gICAgU2V2ZXJpdHlMZXZlbFtTZXZlcml0eUxldmVsW1wiQ3JpdGljYWxcIl0gPSA0XSA9IFwiQ3JpdGljYWxcIjtcclxufSkoU2V2ZXJpdHlMZXZlbCB8fCAoU2V2ZXJpdHlMZXZlbCA9IHt9KSk7XHJcbm1vZHVsZS5leHBvcnRzID0gU2V2ZXJpdHlMZXZlbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2V2ZXJpdHlMZXZlbC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/SeverityLevel.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/StackFrame.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/StackFrame.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// THIS FILE WAS AUTOGENERATED\r\n\r\n/**\r\n * Stack frame information.\r\n */\r\nvar StackFrame = (function () {\r\n    function StackFrame() {\r\n    }\r\n    return StackFrame;\r\n}());\r\nmodule.exports = StackFrame;\r\n//# sourceMappingURL=StackFrame.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvU3RhY2tGcmFtZS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvU3RhY2tGcmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURURcclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBTdGFjayBmcmFtZSBpbmZvcm1hdGlvbi5cclxuICovXHJcbnZhciBTdGFja0ZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0YWNrRnJhbWUoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RhY2tGcmFtZTtcclxufSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSBTdGFja0ZyYW1lO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGFja0ZyYW1lLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/StackFrame.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/Generated/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/Generated/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// THIS FILE WAS AUTOGENERATED\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AvailabilityData = __webpack_require__(/*! ./AvailabilityData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/AvailabilityData.js\");\r\nexports.Base = __webpack_require__(/*! ./Base */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Base.js\");\r\nexports.ContextTagKeys = __webpack_require__(/*! ./ContextTagKeys */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ContextTagKeys.js\");\r\nexports.Data = __webpack_require__(/*! ./Data */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Data.js\");\r\nexports.DataPoint = __webpack_require__(/*! ./DataPoint */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPoint.js\");\r\nexports.DataPointType = __webpack_require__(/*! ./DataPointType */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/DataPointType.js\");\r\nexports.Domain = __webpack_require__(/*! ./Domain */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Domain.js\");\r\nexports.Envelope = __webpack_require__(/*! ./Envelope */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/Envelope.js\");\r\nexports.EventData = __webpack_require__(/*! ./EventData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/EventData.js\");\r\nexports.ExceptionData = __webpack_require__(/*! ./ExceptionData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionData.js\");\r\nexports.ExceptionDetails = __webpack_require__(/*! ./ExceptionDetails */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/ExceptionDetails.js\");\r\nexports.MessageData = __webpack_require__(/*! ./MessageData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MessageData.js\");\r\nexports.MetricData = __webpack_require__(/*! ./MetricData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/MetricData.js\");\r\nexports.PageViewData = __webpack_require__(/*! ./PageViewData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/PageViewData.js\");\r\nexports.RemoteDependencyData = __webpack_require__(/*! ./RemoteDependencyData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RemoteDependencyData.js\");\r\nexports.RequestData = __webpack_require__(/*! ./RequestData */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/RequestData.js\");\r\nexports.SeverityLevel = __webpack_require__(/*! ./SeverityLevel */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/SeverityLevel.js\");\r\nexports.StackFrame = __webpack_require__(/*! ./StackFrame */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/StackFrame.js\");\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9HZW5lcmF0ZWQvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0RlY2xhcmF0aW9ucy9Db250cmFjdHMvR2VuZXJhdGVkL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRFxyXG5cInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkF2YWlsYWJpbGl0eURhdGEgPSByZXF1aXJlKFwiLi9BdmFpbGFiaWxpdHlEYXRhXCIpO1xyXG5leHBvcnRzLkJhc2UgPSByZXF1aXJlKFwiLi9CYXNlXCIpO1xyXG5leHBvcnRzLkNvbnRleHRUYWdLZXlzID0gcmVxdWlyZShcIi4vQ29udGV4dFRhZ0tleXNcIik7XHJcbmV4cG9ydHMuRGF0YSA9IHJlcXVpcmUoXCIuL0RhdGFcIik7XHJcbmV4cG9ydHMuRGF0YVBvaW50ID0gcmVxdWlyZShcIi4vRGF0YVBvaW50XCIpO1xyXG5leHBvcnRzLkRhdGFQb2ludFR5cGUgPSByZXF1aXJlKFwiLi9EYXRhUG9pbnRUeXBlXCIpO1xyXG5leHBvcnRzLkRvbWFpbiA9IHJlcXVpcmUoXCIuL0RvbWFpblwiKTtcclxuZXhwb3J0cy5FbnZlbG9wZSA9IHJlcXVpcmUoXCIuL0VudmVsb3BlXCIpO1xyXG5leHBvcnRzLkV2ZW50RGF0YSA9IHJlcXVpcmUoXCIuL0V2ZW50RGF0YVwiKTtcclxuZXhwb3J0cy5FeGNlcHRpb25EYXRhID0gcmVxdWlyZShcIi4vRXhjZXB0aW9uRGF0YVwiKTtcclxuZXhwb3J0cy5FeGNlcHRpb25EZXRhaWxzID0gcmVxdWlyZShcIi4vRXhjZXB0aW9uRGV0YWlsc1wiKTtcclxuZXhwb3J0cy5NZXNzYWdlRGF0YSA9IHJlcXVpcmUoXCIuL01lc3NhZ2VEYXRhXCIpO1xyXG5leHBvcnRzLk1ldHJpY0RhdGEgPSByZXF1aXJlKFwiLi9NZXRyaWNEYXRhXCIpO1xyXG5leHBvcnRzLlBhZ2VWaWV3RGF0YSA9IHJlcXVpcmUoXCIuL1BhZ2VWaWV3RGF0YVwiKTtcclxuZXhwb3J0cy5SZW1vdGVEZXBlbmRlbmN5RGF0YSA9IHJlcXVpcmUoXCIuL1JlbW90ZURlcGVuZGVuY3lEYXRhXCIpO1xyXG5leHBvcnRzLlJlcXVlc3REYXRhID0gcmVxdWlyZShcIi4vUmVxdWVzdERhdGFcIik7XHJcbmV4cG9ydHMuU2V2ZXJpdHlMZXZlbCA9IHJlcXVpcmUoXCIuL1NldmVyaXR5TGV2ZWxcIik7XHJcbmV4cG9ydHMuU3RhY2tGcmFtZSA9IHJlcXVpcmUoXCIuL1N0YWNrRnJhbWVcIik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/Generated/index.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/TelemetryType.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/TelemetryType.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Converts the user-friendly enumeration TelemetryType to the underlying schema baseType value\r\n * @param type Type to convert to BaseData string\r\n */\r\nfunction telemetryTypeToBaseType(type) {\r\n    switch (type) {\r\n        case TelemetryType.Event:\r\n            return \"EventData\";\r\n        case TelemetryType.Exception:\r\n            return \"ExceptionData\";\r\n        case TelemetryType.Trace:\r\n            return \"MessageData\";\r\n        case TelemetryType.Metric:\r\n            return \"MetricData\";\r\n        case TelemetryType.Request:\r\n            return \"RequestData\";\r\n        case TelemetryType.Dependency:\r\n            return \"RemoteDependencyData\";\r\n    }\r\n    return undefined;\r\n}\r\nexports.telemetryTypeToBaseType = telemetryTypeToBaseType;\r\n/**\r\n * Converts the schema baseType value to the user-friendly enumeration TelemetryType\r\n * @param baseType BaseData string to convert to TelemetryType\r\n */\r\nfunction baseTypeToTelemetryType(baseType) {\r\n    switch (baseType) {\r\n        case \"EventData\":\r\n            return TelemetryType.Event;\r\n        case \"ExceptionData\":\r\n            return TelemetryType.Exception;\r\n        case \"MessageData\":\r\n            return TelemetryType.Trace;\r\n        case \"MetricData\":\r\n            return TelemetryType.Metric;\r\n        case \"RequestData\":\r\n            return TelemetryType.Request;\r\n        case \"RemoteDependencyData\":\r\n            return TelemetryType.Dependency;\r\n    }\r\n    return undefined;\r\n}\r\nexports.baseTypeToTelemetryType = baseTypeToTelemetryType;\r\n/**\r\n * Telemetry types supported by this SDK\r\n */\r\nvar TelemetryType;\r\n(function (TelemetryType) {\r\n    TelemetryType[TelemetryType[\"Event\"] = 0] = \"Event\";\r\n    TelemetryType[TelemetryType[\"Exception\"] = 1] = \"Exception\";\r\n    TelemetryType[TelemetryType[\"Trace\"] = 2] = \"Trace\";\r\n    TelemetryType[TelemetryType[\"Metric\"] = 3] = \"Metric\";\r\n    TelemetryType[TelemetryType[\"Request\"] = 4] = \"Request\";\r\n    TelemetryType[TelemetryType[\"Dependency\"] = 5] = \"Dependency\";\r\n})(TelemetryType = exports.TelemetryType || (exports.TelemetryType = {}));\r\n//# sourceMappingURL=TelemetryType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9UZWxlbWV0cnlUeXBlcy9UZWxlbWV0cnlUeXBlLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9EZWNsYXJhdGlvbnMvQ29udHJhY3RzL1RlbGVtZXRyeVR5cGVzL1RlbGVtZXRyeVR5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSB1c2VyLWZyaWVuZGx5IGVudW1lcmF0aW9uIFRlbGVtZXRyeVR5cGUgdG8gdGhlIHVuZGVybHlpbmcgc2NoZW1hIGJhc2VUeXBlIHZhbHVlXHJcbiAqIEBwYXJhbSB0eXBlIFR5cGUgdG8gY29udmVydCB0byBCYXNlRGF0YSBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIHRlbGVtZXRyeVR5cGVUb0Jhc2VUeXBlKHR5cGUpIHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgVGVsZW1ldHJ5VHlwZS5FdmVudDpcclxuICAgICAgICAgICAgcmV0dXJuIFwiRXZlbnREYXRhXCI7XHJcbiAgICAgICAgY2FzZSBUZWxlbWV0cnlUeXBlLkV4Y2VwdGlvbjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiRXhjZXB0aW9uRGF0YVwiO1xyXG4gICAgICAgIGNhc2UgVGVsZW1ldHJ5VHlwZS5UcmFjZTpcclxuICAgICAgICAgICAgcmV0dXJuIFwiTWVzc2FnZURhdGFcIjtcclxuICAgICAgICBjYXNlIFRlbGVtZXRyeVR5cGUuTWV0cmljOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJNZXRyaWNEYXRhXCI7XHJcbiAgICAgICAgY2FzZSBUZWxlbWV0cnlUeXBlLlJlcXVlc3Q6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJlcXVlc3REYXRhXCI7XHJcbiAgICAgICAgY2FzZSBUZWxlbWV0cnlUeXBlLkRlcGVuZGVuY3k6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJlbW90ZURlcGVuZGVuY3lEYXRhXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmV4cG9ydHMudGVsZW1ldHJ5VHlwZVRvQmFzZVR5cGUgPSB0ZWxlbWV0cnlUeXBlVG9CYXNlVHlwZTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBzY2hlbWEgYmFzZVR5cGUgdmFsdWUgdG8gdGhlIHVzZXItZnJpZW5kbHkgZW51bWVyYXRpb24gVGVsZW1ldHJ5VHlwZVxyXG4gKiBAcGFyYW0gYmFzZVR5cGUgQmFzZURhdGEgc3RyaW5nIHRvIGNvbnZlcnQgdG8gVGVsZW1ldHJ5VHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gYmFzZVR5cGVUb1RlbGVtZXRyeVR5cGUoYmFzZVR5cGUpIHtcclxuICAgIHN3aXRjaCAoYmFzZVR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiRXZlbnREYXRhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBUZWxlbWV0cnlUeXBlLkV2ZW50O1xyXG4gICAgICAgIGNhc2UgXCJFeGNlcHRpb25EYXRhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBUZWxlbWV0cnlUeXBlLkV4Y2VwdGlvbjtcclxuICAgICAgICBjYXNlIFwiTWVzc2FnZURhdGFcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFRlbGVtZXRyeVR5cGUuVHJhY2U7XHJcbiAgICAgICAgY2FzZSBcIk1ldHJpY0RhdGFcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFRlbGVtZXRyeVR5cGUuTWV0cmljO1xyXG4gICAgICAgIGNhc2UgXCJSZXF1ZXN0RGF0YVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gVGVsZW1ldHJ5VHlwZS5SZXF1ZXN0O1xyXG4gICAgICAgIGNhc2UgXCJSZW1vdGVEZXBlbmRlbmN5RGF0YVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gVGVsZW1ldHJ5VHlwZS5EZXBlbmRlbmN5O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5leHBvcnRzLmJhc2VUeXBlVG9UZWxlbWV0cnlUeXBlID0gYmFzZVR5cGVUb1RlbGVtZXRyeVR5cGU7XHJcbi8qKlxyXG4gKiBUZWxlbWV0cnkgdHlwZXMgc3VwcG9ydGVkIGJ5IHRoaXMgU0RLXHJcbiAqL1xyXG52YXIgVGVsZW1ldHJ5VHlwZTtcclxuKGZ1bmN0aW9uIChUZWxlbWV0cnlUeXBlKSB7XHJcbiAgICBUZWxlbWV0cnlUeXBlW1RlbGVtZXRyeVR5cGVbXCJFdmVudFwiXSA9IDBdID0gXCJFdmVudFwiO1xyXG4gICAgVGVsZW1ldHJ5VHlwZVtUZWxlbWV0cnlUeXBlW1wiRXhjZXB0aW9uXCJdID0gMV0gPSBcIkV4Y2VwdGlvblwiO1xyXG4gICAgVGVsZW1ldHJ5VHlwZVtUZWxlbWV0cnlUeXBlW1wiVHJhY2VcIl0gPSAyXSA9IFwiVHJhY2VcIjtcclxuICAgIFRlbGVtZXRyeVR5cGVbVGVsZW1ldHJ5VHlwZVtcIk1ldHJpY1wiXSA9IDNdID0gXCJNZXRyaWNcIjtcclxuICAgIFRlbGVtZXRyeVR5cGVbVGVsZW1ldHJ5VHlwZVtcIlJlcXVlc3RcIl0gPSA0XSA9IFwiUmVxdWVzdFwiO1xyXG4gICAgVGVsZW1ldHJ5VHlwZVtUZWxlbWV0cnlUeXBlW1wiRGVwZW5kZW5jeVwiXSA9IDVdID0gXCJEZXBlbmRlbmN5XCI7XHJcbn0pKFRlbGVtZXRyeVR5cGUgPSBleHBvcnRzLlRlbGVtZXRyeVR5cGUgfHwgKGV4cG9ydHMuVGVsZW1ldHJ5VHlwZSA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRlbGVtZXRyeVR5cGUuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/TelemetryType.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(/*! ./TelemetryType */ \"./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/TelemetryType.js\"));\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9UZWxlbWV0cnlUeXBlcy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9UZWxlbWV0cnlUeXBlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vVGVsZW1ldHJ5VHlwZVwiKSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/index.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Declarations/Contracts/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Declarations/Contracts/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(/*! ./Constants */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Constants.js\"));\r\n__export(__webpack_require__(/*! ./Generated */ \"./node_modules/applicationinsights/out/Declarations/Contracts/Generated/index.js\"));\r\n__export(__webpack_require__(/*! ./TelemetryTypes */ \"./node_modules/applicationinsights/out/Declarations/Contracts/TelemetryTypes/index.js\"));\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvRGVjbGFyYXRpb25zL0NvbnRyYWN0cy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vR2VuZXJhdGVkXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vVGVsZW1ldHJ5VHlwZXNcIikpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Declarations/Contracts/index.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/Channel.js":
/*!*****************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/Channel.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar Logging = __webpack_require__(/*! ./Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar Channel = (function () {\r\n    function Channel(isDisabled, getBatchSize, getBatchIntervalMs, sender) {\r\n        this._buffer = [];\r\n        this._lastSend = 0;\r\n        this._isDisabled = isDisabled;\r\n        this._getBatchSize = getBatchSize;\r\n        this._getBatchIntervalMs = getBatchIntervalMs;\r\n        this._sender = sender;\r\n    }\r\n    /**\r\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\r\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\r\n     * @param value if true events that occured while client is offline will be cached on disk\r\n     * @param resendInterval The wait interval for resending cached events.\r\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\r\n     * @returns {Configuration} this class\r\n     */\r\n    Channel.prototype.setUseDiskRetryCaching = function (value, resendInterval, maxBytesOnDisk) {\r\n        this._sender.setDiskRetryMode(value, resendInterval, maxBytesOnDisk);\r\n    };\r\n    /**\r\n     * Add a telemetry item to the send buffer\r\n     */\r\n    Channel.prototype.send = function (envelope) {\r\n        var _this = this;\r\n        // if master off switch is set, don't send any data\r\n        if (this._isDisabled()) {\r\n            // Do not send/save data\r\n            return;\r\n        }\r\n        // validate input\r\n        if (!envelope) {\r\n            Logging.warn(\"Cannot send null/undefined telemetry\");\r\n            return;\r\n        }\r\n        // check if the incoming payload is too large, truncate if necessary\r\n        var payload = this._stringify(envelope);\r\n        if (typeof payload !== \"string\") {\r\n            return;\r\n        }\r\n        // enqueue the payload\r\n        this._buffer.push(payload);\r\n        // flush if we would exceed the max-size limit by adding this item\r\n        if (this._buffer.length >= this._getBatchSize()) {\r\n            this.triggerSend(false);\r\n            return;\r\n        }\r\n        // ensure an invocation timeout is set if anything is in the buffer\r\n        if (!this._timeoutHandle && this._buffer.length > 0) {\r\n            this._timeoutHandle = setTimeout(function () {\r\n                _this._timeoutHandle = null;\r\n                _this.triggerSend(false);\r\n            }, this._getBatchIntervalMs());\r\n        }\r\n    };\r\n    /**\r\n     * Immediately send buffered data\r\n     */\r\n    Channel.prototype.triggerSend = function (isNodeCrashing, callback) {\r\n        var bufferIsEmpty = this._buffer.length < 1;\r\n        if (!bufferIsEmpty) {\r\n            // compose an array of payloads\r\n            var batch = this._buffer.join(\"\\n\");\r\n            // invoke send\r\n            if (isNodeCrashing) {\r\n                this._sender.saveOnCrash(batch);\r\n                if (typeof callback === \"function\") {\r\n                    callback(\"data saved on crash\");\r\n                }\r\n            }\r\n            else {\r\n                this._sender.send(Buffer.from ? Buffer.from(batch) : new Buffer(batch), callback);\r\n            }\r\n        }\r\n        // update lastSend time to enable throttling\r\n        this._lastSend = +new Date;\r\n        // clear buffer\r\n        this._buffer.length = 0;\r\n        clearTimeout(this._timeoutHandle);\r\n        this._timeoutHandle = null;\r\n        if (bufferIsEmpty && typeof callback === \"function\") {\r\n            callback(\"no data to send\");\r\n        }\r\n    };\r\n    Channel.prototype._stringify = function (envelope) {\r\n        try {\r\n            return JSON.stringify(envelope);\r\n        }\r\n        catch (error) {\r\n            Logging.warn(\"Failed to serialize payload\", error, envelope);\r\n        }\r\n    };\r\n    return Channel;\r\n}());\r\nmodule.exports = Channel;\r\n//# sourceMappingURL=Channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvTGlicmFyeS9DaGFubmVsLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9MaWJyYXJ5L0NoYW5uZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBMb2dnaW5nID0gcmVxdWlyZShcIi4vTG9nZ2luZ1wiKTtcclxudmFyIENoYW5uZWwgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hhbm5lbChpc0Rpc2FibGVkLCBnZXRCYXRjaFNpemUsIGdldEJhdGNoSW50ZXJ2YWxNcywgc2VuZGVyKSB7XHJcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gW107XHJcbiAgICAgICAgdGhpcy5fbGFzdFNlbmQgPSAwO1xyXG4gICAgICAgIHRoaXMuX2lzRGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xyXG4gICAgICAgIHRoaXMuX2dldEJhdGNoU2l6ZSA9IGdldEJhdGNoU2l6ZTtcclxuICAgICAgICB0aGlzLl9nZXRCYXRjaEludGVydmFsTXMgPSBnZXRCYXRjaEludGVydmFsTXM7XHJcbiAgICAgICAgdGhpcy5fc2VuZGVyID0gc2VuZGVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSBkaXNrLWJhY2tlZCByZXRyeSBjYWNoaW5nIHRvIGNhY2hlIGV2ZW50cyB3aGVuIGNsaWVudCBpcyBvZmZsaW5lIChlbmFibGVkIGJ5IGRlZmF1bHQpXHJcbiAgICAgKiBUaGVzZSBjYWNoZWQgZXZlbnRzIGFyZSBzdG9yZWQgaW4geW91ciBzeXN0ZW0gb3IgdXNlcidzIHRlbXBvcmFyeSBkaXJlY3RvcnkgYW5kIGFjY2VzcyByZXN0cmljdGVkIHRvIHlvdXIgdXNlciB3aGVuIHBvc3NpYmxlLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIGlmIHRydWUgZXZlbnRzIHRoYXQgb2NjdXJlZCB3aGlsZSBjbGllbnQgaXMgb2ZmbGluZSB3aWxsIGJlIGNhY2hlZCBvbiBkaXNrXHJcbiAgICAgKiBAcGFyYW0gcmVzZW5kSW50ZXJ2YWwgVGhlIHdhaXQgaW50ZXJ2YWwgZm9yIHJlc2VuZGluZyBjYWNoZWQgZXZlbnRzLlxyXG4gICAgICogQHBhcmFtIG1heEJ5dGVzT25EaXNrIFRoZSBtYXhpbXVtIHNpemUgKGluIGJ5dGVzKSB0aGF0IHRoZSBjcmVhdGVkIHRlbXBvcmFyeSBkaXJlY3RvcnkgZm9yIGNhY2hlIGV2ZW50cyBjYW4gZ3JvdyB0bywgYmVmb3JlIGNhY2hpbmcgaXMgZGlzYWJsZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7Q29uZmlndXJhdGlvbn0gdGhpcyBjbGFzc1xyXG4gICAgICovXHJcbiAgICBDaGFubmVsLnByb3RvdHlwZS5zZXRVc2VEaXNrUmV0cnlDYWNoaW5nID0gZnVuY3Rpb24gKHZhbHVlLCByZXNlbmRJbnRlcnZhbCwgbWF4Qnl0ZXNPbkRpc2spIHtcclxuICAgICAgICB0aGlzLl9zZW5kZXIuc2V0RGlza1JldHJ5TW9kZSh2YWx1ZSwgcmVzZW5kSW50ZXJ2YWwsIG1heEJ5dGVzT25EaXNrKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIHRlbGVtZXRyeSBpdGVtIHRvIHRoZSBzZW5kIGJ1ZmZlclxyXG4gICAgICovXHJcbiAgICBDaGFubmVsLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGVudmVsb3BlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBpZiBtYXN0ZXIgb2ZmIHN3aXRjaCBpcyBzZXQsIGRvbid0IHNlbmQgYW55IGRhdGFcclxuICAgICAgICBpZiAodGhpcy5faXNEaXNhYmxlZCgpKSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCBzZW5kL3NhdmUgZGF0YVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHZhbGlkYXRlIGlucHV0XHJcbiAgICAgICAgaWYgKCFlbnZlbG9wZSkge1xyXG4gICAgICAgICAgICBMb2dnaW5nLndhcm4oXCJDYW5ub3Qgc2VuZCBudWxsL3VuZGVmaW5lZCB0ZWxlbWV0cnlcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGluY29taW5nIHBheWxvYWQgaXMgdG9vIGxhcmdlLCB0cnVuY2F0ZSBpZiBuZWNlc3NhcnlcclxuICAgICAgICB2YXIgcGF5bG9hZCA9IHRoaXMuX3N0cmluZ2lmeShlbnZlbG9wZSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZW5xdWV1ZSB0aGUgcGF5bG9hZFxyXG4gICAgICAgIHRoaXMuX2J1ZmZlci5wdXNoKHBheWxvYWQpO1xyXG4gICAgICAgIC8vIGZsdXNoIGlmIHdlIHdvdWxkIGV4Y2VlZCB0aGUgbWF4LXNpemUgbGltaXQgYnkgYWRkaW5nIHRoaXMgaXRlbVxyXG4gICAgICAgIGlmICh0aGlzLl9idWZmZXIubGVuZ3RoID49IHRoaXMuX2dldEJhdGNoU2l6ZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlclNlbmQoZmFsc2UpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVuc3VyZSBhbiBpbnZvY2F0aW9uIHRpbWVvdXQgaXMgc2V0IGlmIGFueXRoaW5nIGlzIGluIHRoZSBidWZmZXJcclxuICAgICAgICBpZiAoIXRoaXMuX3RpbWVvdXRIYW5kbGUgJiYgdGhpcy5fYnVmZmVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fdGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3RpbWVvdXRIYW5kbGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlclNlbmQoZmFsc2UpO1xyXG4gICAgICAgICAgICB9LCB0aGlzLl9nZXRCYXRjaEludGVydmFsTXMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW1tZWRpYXRlbHkgc2VuZCBidWZmZXJlZCBkYXRhXHJcbiAgICAgKi9cclxuICAgIENoYW5uZWwucHJvdG90eXBlLnRyaWdnZXJTZW5kID0gZnVuY3Rpb24gKGlzTm9kZUNyYXNoaW5nLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBidWZmZXJJc0VtcHR5ID0gdGhpcy5fYnVmZmVyLmxlbmd0aCA8IDE7XHJcbiAgICAgICAgaWYgKCFidWZmZXJJc0VtcHR5KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbXBvc2UgYW4gYXJyYXkgb2YgcGF5bG9hZHNcclxuICAgICAgICAgICAgdmFyIGJhdGNoID0gdGhpcy5fYnVmZmVyLmpvaW4oXCJcXG5cIik7XHJcbiAgICAgICAgICAgIC8vIGludm9rZSBzZW5kXHJcbiAgICAgICAgICAgIGlmIChpc05vZGVDcmFzaGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VuZGVyLnNhdmVPbkNyYXNoKGJhdGNoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKFwiZGF0YSBzYXZlZCBvbiBjcmFzaFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmRlci5zZW5kKEJ1ZmZlci5mcm9tID8gQnVmZmVyLmZyb20oYmF0Y2gpIDogbmV3IEJ1ZmZlcihiYXRjaCksIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1cGRhdGUgbGFzdFNlbmQgdGltZSB0byBlbmFibGUgdGhyb3R0bGluZ1xyXG4gICAgICAgIHRoaXMuX2xhc3RTZW5kID0gK25ldyBEYXRlO1xyXG4gICAgICAgIC8vIGNsZWFyIGJ1ZmZlclxyXG4gICAgICAgIHRoaXMuX2J1ZmZlci5sZW5ndGggPSAwO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SGFuZGxlKTtcclxuICAgICAgICB0aGlzLl90aW1lb3V0SGFuZGxlID0gbnVsbDtcclxuICAgICAgICBpZiAoYnVmZmVySXNFbXB0eSAmJiB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhcIm5vIGRhdGEgdG8gc2VuZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuX3N0cmluZ2lmeSA9IGZ1bmN0aW9uIChlbnZlbG9wZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlbnZlbG9wZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBMb2dnaW5nLndhcm4oXCJGYWlsZWQgdG8gc2VyaWFsaXplIHBheWxvYWRcIiwgZXJyb3IsIGVudmVsb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENoYW5uZWw7XHJcbn0oKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gQ2hhbm5lbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhbm5lbC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/Channel.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/Config.js":
/*!****************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/Config.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar CorrelationIdManager = __webpack_require__(/*! ./CorrelationIdManager */ \"./node_modules/applicationinsights/out/Library/CorrelationIdManager.js\");\r\nvar Config = (function () {\r\n    function Config(instrumentationKey) {\r\n        var _this = this;\r\n        this.endpointBase = \"https://dc.services.visualstudio.com\";\r\n        this.instrumentationKey = instrumentationKey || Config._getInstrumentationKey();\r\n        this.endpointUrl = this.endpointBase + \"/v2/track\";\r\n        this.maxBatchSize = 250;\r\n        this.maxBatchIntervalMs = 15000;\r\n        this.disableAppInsights = false;\r\n        this.samplingPercentage = 100;\r\n        this.correlationIdRetryIntervalMs = 30 * 1000;\r\n        this.correlationHeaderExcludedDomains = [\r\n            \"*.core.windows.net\",\r\n            \"*.core.chinacloudapi.cn\",\r\n            \"*.core.cloudapi.de\",\r\n            \"*.core.usgovcloudapi.net\"\r\n        ];\r\n        this.setCorrelationId = function (correlationId) { return _this.correlationId = correlationId; };\r\n        this.profileQueryEndpoint = process.env[Config.ENV_profileQueryEndpoint] || this.endpointBase;\r\n        this.proxyHttpUrl = process.env[Config.ENV_http_proxy] || undefined;\r\n        this.proxyHttpsUrl = process.env[Config.ENV_https_proxy] || undefined;\r\n        this.httpAgent = undefined;\r\n        this.httpsAgent = undefined;\r\n    }\r\n    Object.defineProperty(Config.prototype, \"profileQueryEndpoint\", {\r\n        get: function () {\r\n            return this._profileQueryEndpoint;\r\n        },\r\n        set: function (endpoint) {\r\n            CorrelationIdManager.cancelCorrelationIdQuery(this, this.setCorrelationId);\r\n            this._profileQueryEndpoint = endpoint;\r\n            this.correlationId = CorrelationIdManager.correlationIdPrefix; // Reset the correlationId while we wait for the new query\r\n            CorrelationIdManager.queryCorrelationId(this, this.setCorrelationId);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Config._getInstrumentationKey = function () {\r\n        // check for both the documented env variable and the azure-prefixed variable\r\n        var iKey = process.env[Config.ENV_iKey]\r\n            || process.env[Config.ENV_azurePrefix + Config.ENV_iKey]\r\n            || process.env[Config.legacy_ENV_iKey]\r\n            || process.env[Config.ENV_azurePrefix + Config.legacy_ENV_iKey];\r\n        if (!iKey || iKey == \"\") {\r\n            throw new Error(\"Instrumentation key not found, pass the key in the config to this method or set the key in the environment variable APPINSIGHTS_INSTRUMENTATIONKEY before starting the server\");\r\n        }\r\n        return iKey;\r\n    };\r\n    // Azure adds this prefix to all environment variables\r\n    Config.ENV_azurePrefix = \"APPSETTING_\";\r\n    // This key is provided in the readme\r\n    Config.ENV_iKey = \"APPINSIGHTS_INSTRUMENTATIONKEY\";\r\n    Config.legacy_ENV_iKey = \"APPINSIGHTS_INSTRUMENTATION_KEY\";\r\n    Config.ENV_profileQueryEndpoint = \"APPINSIGHTS_PROFILE_QUERY_ENDPOINT\";\r\n    Config.ENV_http_proxy = \"http_proxy\";\r\n    Config.ENV_https_proxy = \"https_proxy\";\r\n    return Config;\r\n}());\r\nmodule.exports = Config;\r\n//# sourceMappingURL=Config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvTGlicmFyeS9Db25maWcuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0xpYnJhcnkvQ29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgQ29ycmVsYXRpb25JZE1hbmFnZXIgPSByZXF1aXJlKFwiLi9Db3JyZWxhdGlvbklkTWFuYWdlclwiKTtcclxudmFyIENvbmZpZyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb25maWcoaW5zdHJ1bWVudGF0aW9uS2V5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmVuZHBvaW50QmFzZSA9IFwiaHR0cHM6Ly9kYy5zZXJ2aWNlcy52aXN1YWxzdHVkaW8uY29tXCI7XHJcbiAgICAgICAgdGhpcy5pbnN0cnVtZW50YXRpb25LZXkgPSBpbnN0cnVtZW50YXRpb25LZXkgfHwgQ29uZmlnLl9nZXRJbnN0cnVtZW50YXRpb25LZXkoKTtcclxuICAgICAgICB0aGlzLmVuZHBvaW50VXJsID0gdGhpcy5lbmRwb2ludEJhc2UgKyBcIi92Mi90cmFja1wiO1xyXG4gICAgICAgIHRoaXMubWF4QmF0Y2hTaXplID0gMjUwO1xyXG4gICAgICAgIHRoaXMubWF4QmF0Y2hJbnRlcnZhbE1zID0gMTUwMDA7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlQXBwSW5zaWdodHMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNhbXBsaW5nUGVyY2VudGFnZSA9IDEwMDtcclxuICAgICAgICB0aGlzLmNvcnJlbGF0aW9uSWRSZXRyeUludGVydmFsTXMgPSAzMCAqIDEwMDA7XHJcbiAgICAgICAgdGhpcy5jb3JyZWxhdGlvbkhlYWRlckV4Y2x1ZGVkRG9tYWlucyA9IFtcclxuICAgICAgICAgICAgXCIqLmNvcmUud2luZG93cy5uZXRcIixcclxuICAgICAgICAgICAgXCIqLmNvcmUuY2hpbmFjbG91ZGFwaS5jblwiLFxyXG4gICAgICAgICAgICBcIiouY29yZS5jbG91ZGFwaS5kZVwiLFxyXG4gICAgICAgICAgICBcIiouY29yZS51c2dvdmNsb3VkYXBpLm5ldFwiXHJcbiAgICAgICAgXTtcclxuICAgICAgICB0aGlzLnNldENvcnJlbGF0aW9uSWQgPSBmdW5jdGlvbiAoY29ycmVsYXRpb25JZCkgeyByZXR1cm4gX3RoaXMuY29ycmVsYXRpb25JZCA9IGNvcnJlbGF0aW9uSWQ7IH07XHJcbiAgICAgICAgdGhpcy5wcm9maWxlUXVlcnlFbmRwb2ludCA9IHByb2Nlc3MuZW52W0NvbmZpZy5FTlZfcHJvZmlsZVF1ZXJ5RW5kcG9pbnRdIHx8IHRoaXMuZW5kcG9pbnRCYXNlO1xyXG4gICAgICAgIHRoaXMucHJveHlIdHRwVXJsID0gcHJvY2Vzcy5lbnZbQ29uZmlnLkVOVl9odHRwX3Byb3h5XSB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5wcm94eUh0dHBzVXJsID0gcHJvY2Vzcy5lbnZbQ29uZmlnLkVOVl9odHRwc19wcm94eV0gfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuaHR0cEFnZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuaHR0cHNBZ2VudCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25maWcucHJvdG90eXBlLCBcInByb2ZpbGVRdWVyeUVuZHBvaW50XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2ZpbGVRdWVyeUVuZHBvaW50O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoZW5kcG9pbnQpIHtcclxuICAgICAgICAgICAgQ29ycmVsYXRpb25JZE1hbmFnZXIuY2FuY2VsQ29ycmVsYXRpb25JZFF1ZXJ5KHRoaXMsIHRoaXMuc2V0Q29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2ZpbGVRdWVyeUVuZHBvaW50ID0gZW5kcG9pbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuY29ycmVsYXRpb25JZCA9IENvcnJlbGF0aW9uSWRNYW5hZ2VyLmNvcnJlbGF0aW9uSWRQcmVmaXg7IC8vIFJlc2V0IHRoZSBjb3JyZWxhdGlvbklkIHdoaWxlIHdlIHdhaXQgZm9yIHRoZSBuZXcgcXVlcnlcclxuICAgICAgICAgICAgQ29ycmVsYXRpb25JZE1hbmFnZXIucXVlcnlDb3JyZWxhdGlvbklkKHRoaXMsIHRoaXMuc2V0Q29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBDb25maWcuX2dldEluc3RydW1lbnRhdGlvbktleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBjaGVjayBmb3IgYm90aCB0aGUgZG9jdW1lbnRlZCBlbnYgdmFyaWFibGUgYW5kIHRoZSBhenVyZS1wcmVmaXhlZCB2YXJpYWJsZVxyXG4gICAgICAgIHZhciBpS2V5ID0gcHJvY2Vzcy5lbnZbQ29uZmlnLkVOVl9pS2V5XVxyXG4gICAgICAgICAgICB8fCBwcm9jZXNzLmVudltDb25maWcuRU5WX2F6dXJlUHJlZml4ICsgQ29uZmlnLkVOVl9pS2V5XVxyXG4gICAgICAgICAgICB8fCBwcm9jZXNzLmVudltDb25maWcubGVnYWN5X0VOVl9pS2V5XVxyXG4gICAgICAgICAgICB8fCBwcm9jZXNzLmVudltDb25maWcuRU5WX2F6dXJlUHJlZml4ICsgQ29uZmlnLmxlZ2FjeV9FTlZfaUtleV07XHJcbiAgICAgICAgaWYgKCFpS2V5IHx8IGlLZXkgPT0gXCJcIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnN0cnVtZW50YXRpb24ga2V5IG5vdCBmb3VuZCwgcGFzcyB0aGUga2V5IGluIHRoZSBjb25maWcgdG8gdGhpcyBtZXRob2Qgb3Igc2V0IHRoZSBrZXkgaW4gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIEFQUElOU0lHSFRTX0lOU1RSVU1FTlRBVElPTktFWSBiZWZvcmUgc3RhcnRpbmcgdGhlIHNlcnZlclwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlLZXk7XHJcbiAgICB9O1xyXG4gICAgLy8gQXp1cmUgYWRkcyB0aGlzIHByZWZpeCB0byBhbGwgZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcbiAgICBDb25maWcuRU5WX2F6dXJlUHJlZml4ID0gXCJBUFBTRVRUSU5HX1wiO1xyXG4gICAgLy8gVGhpcyBrZXkgaXMgcHJvdmlkZWQgaW4gdGhlIHJlYWRtZVxyXG4gICAgQ29uZmlnLkVOVl9pS2V5ID0gXCJBUFBJTlNJR0hUU19JTlNUUlVNRU5UQVRJT05LRVlcIjtcclxuICAgIENvbmZpZy5sZWdhY3lfRU5WX2lLZXkgPSBcIkFQUElOU0lHSFRTX0lOU1RSVU1FTlRBVElPTl9LRVlcIjtcclxuICAgIENvbmZpZy5FTlZfcHJvZmlsZVF1ZXJ5RW5kcG9pbnQgPSBcIkFQUElOU0lHSFRTX1BST0ZJTEVfUVVFUllfRU5EUE9JTlRcIjtcclxuICAgIENvbmZpZy5FTlZfaHR0cF9wcm94eSA9IFwiaHR0cF9wcm94eVwiO1xyXG4gICAgQ29uZmlnLkVOVl9odHRwc19wcm94eSA9IFwiaHR0cHNfcHJveHlcIjtcclxuICAgIHJldHVybiBDb25maWc7XHJcbn0oKSk7XHJcbm1vZHVsZS5leHBvcnRzID0gQ29uZmlnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25maWcuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/Config.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/Context.js":
/*!*****************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/Context.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__dirname) {\r\nvar os = __webpack_require__(/*! os */ \"os\");\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar Contracts = __webpack_require__(/*! ../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar Logging = __webpack_require__(/*! ./Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar Context = (function () {\r\n    function Context(packageJsonPath) {\r\n        this.keys = new Contracts.ContextTagKeys();\r\n        this.tags = {};\r\n        this._loadApplicationContext();\r\n        this._loadDeviceContext();\r\n        this._loadInternalContext();\r\n    }\r\n    Context.prototype._loadApplicationContext = function (packageJsonPath) {\r\n        // note: this should return the host package.json\r\n        packageJsonPath = packageJsonPath || path.resolve(__dirname, \"../../../../package.json\");\r\n        if (!Context.appVersion[packageJsonPath]) {\r\n            Context.appVersion[packageJsonPath] = \"unknown\";\r\n            try {\r\n                var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\r\n                if (packageJson && typeof packageJson.version === \"string\") {\r\n                    Context.appVersion[packageJsonPath] = packageJson.version;\r\n                }\r\n            }\r\n            catch (exception) {\r\n                Logging.info(\"unable to read app version: \", exception);\r\n            }\r\n        }\r\n        this.tags[this.keys.applicationVersion] = Context.appVersion[packageJsonPath];\r\n    };\r\n    Context.prototype._loadDeviceContext = function () {\r\n        this.tags[this.keys.deviceId] = \"\";\r\n        this.tags[this.keys.cloudRoleInstance] = os && os.hostname();\r\n        this.tags[this.keys.deviceOSVersion] = os && (os.type() + \" \" + os.release());\r\n        this.tags[this.keys.cloudRole] = Context.DefaultRoleName;\r\n        // not yet supported tags\r\n        this.tags[\"ai.device.osArchitecture\"] = os && os.arch();\r\n        this.tags[\"ai.device.osPlatform\"] = os && os.platform();\r\n    };\r\n    Context.prototype._loadInternalContext = function () {\r\n        // note: this should return the sdk package.json\r\n        var packageJsonPath = path.resolve(__dirname, \"../../package.json\");\r\n        if (!Context.sdkVersion) {\r\n            Context.sdkVersion = \"unknown\";\r\n            try {\r\n                var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\r\n                if (packageJson && typeof packageJson.version === \"string\") {\r\n                    Context.sdkVersion = packageJson.version;\r\n                }\r\n            }\r\n            catch (exception) {\r\n                Logging.info(\"unable to read app version: \", exception);\r\n            }\r\n        }\r\n        this.tags[this.keys.internalSdkVersion] = \"node:\" + Context.sdkVersion;\r\n    };\r\n    Context.DefaultRoleName = \"Web\";\r\n    Context.appVersion = {};\r\n    Context.sdkVersion = null;\r\n    return Context;\r\n}());\r\nmodule.exports = Context;\r\n//# sourceMappingURL=Context.js.map\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvTGlicmFyeS9Db250ZXh0LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9MaWJyYXJ5L0NvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBvcyA9IHJlcXVpcmUoXCJvc1wiKTtcclxudmFyIGZzID0gcmVxdWlyZShcImZzXCIpO1xyXG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG52YXIgQ29udHJhY3RzID0gcmVxdWlyZShcIi4uL0RlY2xhcmF0aW9ucy9Db250cmFjdHNcIik7XHJcbnZhciBMb2dnaW5nID0gcmVxdWlyZShcIi4vTG9nZ2luZ1wiKTtcclxudmFyIENvbnRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29udGV4dChwYWNrYWdlSnNvblBhdGgpIHtcclxuICAgICAgICB0aGlzLmtleXMgPSBuZXcgQ29udHJhY3RzLkNvbnRleHRUYWdLZXlzKCk7XHJcbiAgICAgICAgdGhpcy50YWdzID0ge307XHJcbiAgICAgICAgdGhpcy5fbG9hZEFwcGxpY2F0aW9uQ29udGV4dCgpO1xyXG4gICAgICAgIHRoaXMuX2xvYWREZXZpY2VDb250ZXh0KCk7XHJcbiAgICAgICAgdGhpcy5fbG9hZEludGVybmFsQ29udGV4dCgpO1xyXG4gICAgfVxyXG4gICAgQ29udGV4dC5wcm90b3R5cGUuX2xvYWRBcHBsaWNhdGlvbkNvbnRleHQgPSBmdW5jdGlvbiAocGFja2FnZUpzb25QYXRoKSB7XHJcbiAgICAgICAgLy8gbm90ZTogdGhpcyBzaG91bGQgcmV0dXJuIHRoZSBob3N0IHBhY2thZ2UuanNvblxyXG4gICAgICAgIHBhY2thZ2VKc29uUGF0aCA9IHBhY2thZ2VKc29uUGF0aCB8fCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4uLy4uLy4uLy4uL3BhY2thZ2UuanNvblwiKTtcclxuICAgICAgICBpZiAoIUNvbnRleHQuYXBwVmVyc2lvbltwYWNrYWdlSnNvblBhdGhdKSB7XHJcbiAgICAgICAgICAgIENvbnRleHQuYXBwVmVyc2lvbltwYWNrYWdlSnNvblBhdGhdID0gXCJ1bmtub3duXCI7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFja2FnZUpzb24gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYWNrYWdlSnNvblBhdGgsIFwidXRmOFwiKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFja2FnZUpzb24gJiYgdHlwZW9mIHBhY2thZ2VKc29uLnZlcnNpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBDb250ZXh0LmFwcFZlcnNpb25bcGFja2FnZUpzb25QYXRoXSA9IHBhY2thZ2VKc29uLnZlcnNpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2luZy5pbmZvKFwidW5hYmxlIHRvIHJlYWQgYXBwIHZlcnNpb246IFwiLCBleGNlcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGFnc1t0aGlzLmtleXMuYXBwbGljYXRpb25WZXJzaW9uXSA9IENvbnRleHQuYXBwVmVyc2lvbltwYWNrYWdlSnNvblBhdGhdO1xyXG4gICAgfTtcclxuICAgIENvbnRleHQucHJvdG90eXBlLl9sb2FkRGV2aWNlQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnRhZ3NbdGhpcy5rZXlzLmRldmljZUlkXSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy50YWdzW3RoaXMua2V5cy5jbG91ZFJvbGVJbnN0YW5jZV0gPSBvcyAmJiBvcy5ob3N0bmFtZSgpO1xyXG4gICAgICAgIHRoaXMudGFnc1t0aGlzLmtleXMuZGV2aWNlT1NWZXJzaW9uXSA9IG9zICYmIChvcy50eXBlKCkgKyBcIiBcIiArIG9zLnJlbGVhc2UoKSk7XHJcbiAgICAgICAgdGhpcy50YWdzW3RoaXMua2V5cy5jbG91ZFJvbGVdID0gQ29udGV4dC5EZWZhdWx0Um9sZU5hbWU7XHJcbiAgICAgICAgLy8gbm90IHlldCBzdXBwb3J0ZWQgdGFnc1xyXG4gICAgICAgIHRoaXMudGFnc1tcImFpLmRldmljZS5vc0FyY2hpdGVjdHVyZVwiXSA9IG9zICYmIG9zLmFyY2goKTtcclxuICAgICAgICB0aGlzLnRhZ3NbXCJhaS5kZXZpY2Uub3NQbGF0Zm9ybVwiXSA9IG9zICYmIG9zLnBsYXRmb3JtKCk7XHJcbiAgICB9O1xyXG4gICAgQ29udGV4dC5wcm90b3R5cGUuX2xvYWRJbnRlcm5hbENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gbm90ZTogdGhpcyBzaG91bGQgcmV0dXJuIHRoZSBzZGsgcGFja2FnZS5qc29uXHJcbiAgICAgICAgdmFyIHBhY2thZ2VKc29uUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi4vLi4vcGFja2FnZS5qc29uXCIpO1xyXG4gICAgICAgIGlmICghQ29udGV4dC5zZGtWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgIENvbnRleHQuc2RrVmVyc2lvbiA9IFwidW5rbm93blwiO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhY2thZ2VKc29uID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGFja2FnZUpzb25QYXRoLCBcInV0ZjhcIikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhY2thZ2VKc29uICYmIHR5cGVvZiBwYWNrYWdlSnNvbi52ZXJzaW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29udGV4dC5zZGtWZXJzaW9uID0gcGFja2FnZUpzb24udmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBMb2dnaW5nLmluZm8oXCJ1bmFibGUgdG8gcmVhZCBhcHAgdmVyc2lvbjogXCIsIGV4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50YWdzW3RoaXMua2V5cy5pbnRlcm5hbFNka1ZlcnNpb25dID0gXCJub2RlOlwiICsgQ29udGV4dC5zZGtWZXJzaW9uO1xyXG4gICAgfTtcclxuICAgIENvbnRleHQuRGVmYXVsdFJvbGVOYW1lID0gXCJXZWJcIjtcclxuICAgIENvbnRleHQuYXBwVmVyc2lvbiA9IHt9O1xyXG4gICAgQ29udGV4dC5zZGtWZXJzaW9uID0gbnVsbDtcclxuICAgIHJldHVybiBDb250ZXh0O1xyXG59KCkpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRleHQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRleHQuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/Context.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/CorrelationIdManager.js":
/*!******************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/CorrelationIdManager.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar Util = __webpack_require__(/*! ./Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar Logging = __webpack_require__(/*! ./Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar CorrelationIdManager = (function () {\r\n    function CorrelationIdManager() {\r\n    }\r\n    CorrelationIdManager.queryCorrelationId = function (config, callback) {\r\n        // GET request to `${this.endpointBase}/api/profiles/${this.instrumentationKey}/appId`\r\n        // If it 404s, the iKey is bad and we should give up\r\n        // If it fails otherwise, try again later\r\n        var appIdUrlString = config.profileQueryEndpoint + \"/api/profiles/\" + config.instrumentationKey + \"/appId\";\r\n        if (CorrelationIdManager.completedLookups.hasOwnProperty(appIdUrlString)) {\r\n            callback(CorrelationIdManager.completedLookups[appIdUrlString]);\r\n            return;\r\n        }\r\n        else if (CorrelationIdManager.pendingLookups[appIdUrlString]) {\r\n            CorrelationIdManager.pendingLookups[appIdUrlString].push(callback);\r\n            return;\r\n        }\r\n        CorrelationIdManager.pendingLookups[appIdUrlString] = [callback];\r\n        var fetchAppId = function () {\r\n            if (!CorrelationIdManager.pendingLookups[appIdUrlString]) {\r\n                // This query has been cancelled.\r\n                return;\r\n            }\r\n            var requestOptions = {\r\n                method: 'GET',\r\n                // Ensure this request is not captured by auto-collection.\r\n                // Note: we don't refer to the property in HttpDependencyParser because that would cause a cyclical dependency\r\n                disableAppInsightsAutoCollection: true\r\n            };\r\n            Logging.info(CorrelationIdManager.TAG, requestOptions);\r\n            var req = Util.makeRequest(config, appIdUrlString, requestOptions, function (res) {\r\n                if (res.statusCode === 200) {\r\n                    // Success; extract the appId from the body\r\n                    var appId_1 = \"\";\r\n                    res.setEncoding(\"utf-8\");\r\n                    res.on('data', function (data) {\r\n                        appId_1 += data;\r\n                    });\r\n                    res.on('end', function () {\r\n                        Logging.info(CorrelationIdManager.TAG, appId_1);\r\n                        var result = CorrelationIdManager.correlationIdPrefix + appId_1;\r\n                        CorrelationIdManager.completedLookups[appIdUrlString] = result;\r\n                        if (CorrelationIdManager.pendingLookups[appIdUrlString]) {\r\n                            CorrelationIdManager.pendingLookups[appIdUrlString].forEach(function (cb) { return cb(result); });\r\n                        }\r\n                        delete CorrelationIdManager.pendingLookups[appIdUrlString];\r\n                    });\r\n                }\r\n                else if (res.statusCode >= 400 && res.statusCode < 500) {\r\n                    // Not found, probably a bad key. Do not try again.\r\n                    CorrelationIdManager.completedLookups[appIdUrlString] = undefined;\r\n                    delete CorrelationIdManager.pendingLookups[appIdUrlString];\r\n                }\r\n                else {\r\n                    // Retry after timeout.\r\n                    setTimeout(fetchAppId, config.correlationIdRetryIntervalMs);\r\n                }\r\n            });\r\n            if (req) {\r\n                req.on('error', function (error) {\r\n                    // Unable to contact endpoint.\r\n                    // Do nothing for now.\r\n                    Logging.warn(CorrelationIdManager.TAG, error);\r\n                });\r\n                req.end();\r\n            }\r\n        };\r\n        setTimeout(fetchAppId, 0);\r\n    };\r\n    CorrelationIdManager.cancelCorrelationIdQuery = function (config, callback) {\r\n        var appIdUrlString = config.profileQueryEndpoint + \"/api/profiles/\" + config.instrumentationKey + \"/appId\";\r\n        var pendingLookups = CorrelationIdManager.pendingLookups[appIdUrlString];\r\n        if (pendingLookups) {\r\n            CorrelationIdManager.pendingLookups[appIdUrlString] = pendingLookups.filter(function (cb) { return cb != callback; });\r\n            if (CorrelationIdManager.pendingLookups[appIdUrlString].length == 0) {\r\n                delete CorrelationIdManager.pendingLookups[appIdUrlString];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Generate a request Id according to https://github.com/lmolkova/correlation/blob/master/hierarchical_request_id.md\r\n     * @param parentId\r\n     */\r\n    CorrelationIdManager.generateRequestId = function (parentId) {\r\n        if (parentId) {\r\n            parentId = parentId[0] == '|' ? parentId : '|' + parentId;\r\n            if (parentId[parentId.length - 1] !== '.') {\r\n                parentId += '.';\r\n            }\r\n            var suffix = (CorrelationIdManager.currentRootId++).toString(16);\r\n            return CorrelationIdManager.appendSuffix(parentId, suffix, '_');\r\n        }\r\n        else {\r\n            return CorrelationIdManager.generateRootId();\r\n        }\r\n    };\r\n    /**\r\n     * Given a hierarchical identifier of the form |X.*\r\n     * return the root identifier X\r\n     * @param id\r\n     */\r\n    CorrelationIdManager.getRootId = function (id) {\r\n        var endIndex = id.indexOf('.');\r\n        if (endIndex < 0) {\r\n            endIndex = id.length;\r\n        }\r\n        var startIndex = id[0] === '|' ? 1 : 0;\r\n        return id.substring(startIndex, endIndex);\r\n    };\r\n    CorrelationIdManager.generateRootId = function () {\r\n        return '|' + Util.w3cTraceId() + '.';\r\n    };\r\n    CorrelationIdManager.appendSuffix = function (parentId, suffix, delimiter) {\r\n        if (parentId.length + suffix.length < CorrelationIdManager.requestIdMaxLength) {\r\n            return parentId + suffix + delimiter;\r\n        }\r\n        // Combined identifier would be too long, so we must truncate it.\r\n        // We need 9 characters of space: 8 for the overflow ID, 1 for the\r\n        // overflow delimiter '#'\r\n        var trimPosition = CorrelationIdManager.requestIdMaxLength - 9;\r\n        if (parentId.length > trimPosition) {\r\n            for (; trimPosition > 1; --trimPosition) {\r\n                var c = parentId[trimPosition - 1];\r\n                if (c === '.' || c === '_') {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (trimPosition <= 1) {\r\n            // parentId is not a valid ID\r\n            return CorrelationIdManager.generateRootId();\r\n        }\r\n        suffix = Util.randomu32().toString(16);\r\n        while (suffix.length < 8) {\r\n            suffix = '0' + suffix;\r\n        }\r\n        return parentId.substring(0, trimPosition) + suffix + '#';\r\n    };\r\n    CorrelationIdManager.TAG = \"CorrelationIdManager\";\r\n    CorrelationIdManager.correlationIdPrefix = \"cid-v1:\";\r\n    // To avoid extraneous HTTP requests, we maintain a queue of callbacks waiting on a particular appId lookup,\r\n    // as well as a cache of completed lookups so future requests can be resolved immediately.\r\n    CorrelationIdManager.pendingLookups = {};\r\n    CorrelationIdManager.completedLookups = {};\r\n    CorrelationIdManager.requestIdMaxLength = 1024;\r\n    CorrelationIdManager.currentRootId = Util.randomu32();\r\n    return CorrelationIdManager;\r\n}());\r\nmodule.exports = CorrelationIdManager;\r\n//# sourceMappingURL=CorrelationIdManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/CorrelationIdManager.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/EnvelopeFactory.js":
/*!*************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/EnvelopeFactory.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar Contracts = __webpack_require__(/*! ../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar Util = __webpack_require__(/*! ./Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar CorrelationContextManager_1 = __webpack_require__(/*! ../AutoCollection/CorrelationContextManager */ \"./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js\");\r\n/**\r\n * Manages the logic of creating envelopes from Telemetry objects\r\n */\r\nvar EnvelopeFactory = (function () {\r\n    function EnvelopeFactory() {\r\n    }\r\n    /**\r\n     * Creates envelope ready to be sent by Channel\r\n     * @param telemetry Telemetry data\r\n     * @param telemetryType Type of telemetry\r\n     * @param commonProperties Bag of custom common properties to be added to the envelope\r\n     * @param context Client context\r\n     * @param config Client configuration\r\n     */\r\n    EnvelopeFactory.createEnvelope = function (telemetry, telemetryType, commonProperties, context, config) {\r\n        var data = null;\r\n        switch (telemetryType) {\r\n            case Contracts.TelemetryType.Trace:\r\n                data = EnvelopeFactory.createTraceData(telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Dependency:\r\n                data = EnvelopeFactory.createDependencyData(telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Event:\r\n                data = EnvelopeFactory.createEventData(telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Exception:\r\n                data = EnvelopeFactory.createExceptionData(telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Request:\r\n                data = EnvelopeFactory.createRequestData(telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Metric:\r\n                data = EnvelopeFactory.createMetricData(telemetry);\r\n                break;\r\n        }\r\n        if (commonProperties && Contracts.domainSupportsProperties(data.baseData)) {\r\n            if (data && data.baseData) {\r\n                // if no properties are specified just add the common ones\r\n                if (!data.baseData.properties) {\r\n                    data.baseData.properties = commonProperties;\r\n                }\r\n                else {\r\n                    // otherwise, check each of the common ones\r\n                    for (var name in commonProperties) {\r\n                        // only override if the property `name` has not been set on this item\r\n                        if (!data.baseData.properties[name]) {\r\n                            data.baseData.properties[name] = commonProperties[name];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // sanitize properties\r\n            data.baseData.properties = Util.validateStringMap(data.baseData.properties);\r\n        }\r\n        var iKey = config ? config.instrumentationKey || \"\" : \"\";\r\n        var envelope = new Contracts.Envelope();\r\n        envelope.data = data;\r\n        envelope.iKey = iKey;\r\n        // this is kind of a hack, but the envelope name is always the same as the data name sans the chars \"data\"\r\n        envelope.name =\r\n            \"Microsoft.ApplicationInsights.\" +\r\n                iKey.replace(/-/g, \"\") +\r\n                \".\" +\r\n                data.baseType.substr(0, data.baseType.length - 4);\r\n        envelope.tags = this.getTags(context, telemetry.tagOverrides);\r\n        envelope.time = (new Date()).toISOString();\r\n        envelope.ver = 1;\r\n        envelope.sampleRate = config ? config.samplingPercentage : 100;\r\n        // Exclude metrics from sampling by default\r\n        if (telemetryType === Contracts.TelemetryType.Metric) {\r\n            envelope.sampleRate = 100;\r\n        }\r\n        return envelope;\r\n    };\r\n    EnvelopeFactory.createTraceData = function (telemetry) {\r\n        var trace = new Contracts.MessageData();\r\n        trace.message = telemetry.message;\r\n        trace.properties = telemetry.properties;\r\n        if (!isNaN(telemetry.severity)) {\r\n            trace.severityLevel = telemetry.severity;\r\n        }\r\n        else {\r\n            trace.severityLevel = Contracts.SeverityLevel.Information;\r\n        }\r\n        var data = new Contracts.Data();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Trace);\r\n        data.baseData = trace;\r\n        return data;\r\n    };\r\n    EnvelopeFactory.createDependencyData = function (telemetry) {\r\n        var remoteDependency = new Contracts.RemoteDependencyData();\r\n        remoteDependency.name = telemetry.name;\r\n        remoteDependency.data = telemetry.data;\r\n        remoteDependency.target = telemetry.target;\r\n        remoteDependency.duration = Util.msToTimeSpan(telemetry.duration);\r\n        remoteDependency.success = telemetry.success;\r\n        remoteDependency.type = telemetry.dependencyTypeName;\r\n        remoteDependency.properties = telemetry.properties;\r\n        remoteDependency.resultCode = (telemetry.resultCode ? telemetry.resultCode + '' : '');\r\n        if (telemetry.id) {\r\n            remoteDependency.id = telemetry.id;\r\n        }\r\n        else {\r\n            remoteDependency.id = Util.w3cTraceId();\r\n        }\r\n        var data = new Contracts.Data();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Dependency);\r\n        data.baseData = remoteDependency;\r\n        return data;\r\n    };\r\n    EnvelopeFactory.createEventData = function (telemetry) {\r\n        var event = new Contracts.EventData();\r\n        event.name = telemetry.name;\r\n        event.properties = telemetry.properties;\r\n        event.measurements = telemetry.measurements;\r\n        var data = new Contracts.Data();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Event);\r\n        data.baseData = event;\r\n        return data;\r\n    };\r\n    EnvelopeFactory.createExceptionData = function (telemetry) {\r\n        var exception = new Contracts.ExceptionData();\r\n        exception.properties = telemetry.properties;\r\n        exception.severityLevel = Contracts.SeverityLevel.Error;\r\n        exception.measurements = telemetry.measurements;\r\n        exception.exceptions = [];\r\n        var stack = telemetry.exception[\"stack\"];\r\n        var exceptionDetails = new Contracts.ExceptionDetails();\r\n        exceptionDetails.message = telemetry.exception.message;\r\n        exceptionDetails.typeName = telemetry.exception.name;\r\n        exceptionDetails.parsedStack = this.parseStack(stack);\r\n        exceptionDetails.hasFullStack = Util.isArray(exceptionDetails.parsedStack) && exceptionDetails.parsedStack.length > 0;\r\n        exception.exceptions.push(exceptionDetails);\r\n        var data = new Contracts.Data();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Exception);\r\n        data.baseData = exception;\r\n        return data;\r\n    };\r\n    EnvelopeFactory.createRequestData = function (telemetry) {\r\n        var requestData = new Contracts.RequestData();\r\n        if (telemetry.id) {\r\n            requestData.id = telemetry.id;\r\n        }\r\n        else {\r\n            requestData.id = Util.w3cTraceId();\r\n        }\r\n        requestData.name = telemetry.name;\r\n        requestData.url = telemetry.url;\r\n        requestData.source = telemetry.source;\r\n        requestData.duration = Util.msToTimeSpan(telemetry.duration);\r\n        requestData.responseCode = (telemetry.resultCode ? telemetry.resultCode + '' : '');\r\n        requestData.success = telemetry.success;\r\n        requestData.properties = telemetry.properties;\r\n        var data = new Contracts.Data();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Request);\r\n        data.baseData = requestData;\r\n        return data;\r\n    };\r\n    EnvelopeFactory.createMetricData = function (telemetry) {\r\n        var metrics = new Contracts.MetricData(); // todo: enable client-batching of these\r\n        metrics.metrics = [];\r\n        var metric = new Contracts.DataPoint();\r\n        metric.count = !isNaN(telemetry.count) ? telemetry.count : 1;\r\n        metric.kind = Contracts.DataPointType.Aggregation;\r\n        metric.max = !isNaN(telemetry.max) ? telemetry.max : telemetry.value;\r\n        metric.min = !isNaN(telemetry.min) ? telemetry.min : telemetry.value;\r\n        metric.name = telemetry.name;\r\n        metric.stdDev = !isNaN(telemetry.stdDev) ? telemetry.stdDev : 0;\r\n        metric.value = telemetry.value;\r\n        metrics.metrics.push(metric);\r\n        metrics.properties = telemetry.properties;\r\n        var data = new Contracts.Data();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Metric);\r\n        data.baseData = metrics;\r\n        return data;\r\n    };\r\n    EnvelopeFactory.getTags = function (context, tagOverrides) {\r\n        var correlationContext = CorrelationContextManager_1.CorrelationContextManager.getCurrentContext();\r\n        // Make a copy of context tags so we don't alter the actual object\r\n        // Also perform tag overriding\r\n        var newTags = {};\r\n        if (context && context.tags) {\r\n            for (var key in context.tags) {\r\n                newTags[key] = context.tags[key];\r\n            }\r\n        }\r\n        if (tagOverrides) {\r\n            for (var key in tagOverrides) {\r\n                newTags[key] = tagOverrides[key];\r\n            }\r\n        }\r\n        // Fill in internally-populated values if not already set\r\n        if (correlationContext) {\r\n            newTags[context.keys.operationId] = newTags[context.keys.operationId] || correlationContext.operation.id;\r\n            newTags[context.keys.operationName] = newTags[context.keys.operationName] || correlationContext.operation.name;\r\n            newTags[context.keys.operationParentId] = newTags[context.keys.operationParentId] || correlationContext.operation.parentId;\r\n        }\r\n        return newTags;\r\n    };\r\n    EnvelopeFactory.parseStack = function (stack) {\r\n        var parsedStack = undefined;\r\n        if (typeof stack === \"string\") {\r\n            var frames = stack.split(\"\\n\");\r\n            parsedStack = [];\r\n            var level = 0;\r\n            var totalSizeInBytes = 0;\r\n            for (var i = 0; i <= frames.length; i++) {\r\n                var frame = frames[i];\r\n                if (_StackFrame.regex.test(frame)) {\r\n                    var parsedFrame = new _StackFrame(frames[i], level++);\r\n                    totalSizeInBytes += parsedFrame.sizeInBytes;\r\n                    parsedStack.push(parsedFrame);\r\n                }\r\n            }\r\n            // DP Constraint - exception parsed stack must be < 32KB\r\n            // remove frames from the middle to meet the threshold\r\n            var exceptionParsedStackThreshold = 32 * 1024;\r\n            if (totalSizeInBytes > exceptionParsedStackThreshold) {\r\n                var left = 0;\r\n                var right = parsedStack.length - 1;\r\n                var size = 0;\r\n                var acceptedLeft = left;\r\n                var acceptedRight = right;\r\n                while (left < right) {\r\n                    // check size\r\n                    var lSize = parsedStack[left].sizeInBytes;\r\n                    var rSize = parsedStack[right].sizeInBytes;\r\n                    size += lSize + rSize;\r\n                    if (size > exceptionParsedStackThreshold) {\r\n                        // remove extra frames from the middle\r\n                        var howMany = acceptedRight - acceptedLeft + 1;\r\n                        parsedStack.splice(acceptedLeft, howMany);\r\n                        break;\r\n                    }\r\n                    // update pointers\r\n                    acceptedLeft = left;\r\n                    acceptedRight = right;\r\n                    left++;\r\n                    right--;\r\n                }\r\n            }\r\n        }\r\n        return parsedStack;\r\n    };\r\n    return EnvelopeFactory;\r\n}());\r\nvar _StackFrame = (function () {\r\n    function _StackFrame(frame, level) {\r\n        this.sizeInBytes = 0;\r\n        this.level = level;\r\n        this.method = \"<no_method>\";\r\n        this.assembly = Util.trim(frame);\r\n        var matches = frame.match(_StackFrame.regex);\r\n        if (matches && matches.length >= 5) {\r\n            this.method = Util.trim(matches[2]) || this.method;\r\n            this.fileName = Util.trim(matches[4]) || \"<no_filename>\";\r\n            this.line = parseInt(matches[5]) || 0;\r\n        }\r\n        this.sizeInBytes += this.method.length;\r\n        this.sizeInBytes += this.fileName.length;\r\n        this.sizeInBytes += this.assembly.length;\r\n        // todo: these might need to be removed depending on how the back-end settles on their size calculation\r\n        this.sizeInBytes += _StackFrame.baseSize;\r\n        this.sizeInBytes += this.level.toString().length;\r\n        this.sizeInBytes += this.line.toString().length;\r\n    }\r\n    // regex to match stack frames from ie/chrome/ff\r\n    // methodName=$2, fileName=$4, lineNo=$5, column=$6\r\n    _StackFrame.regex = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\r\n    _StackFrame.baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n    return _StackFrame;\r\n}());\r\nmodule.exports = EnvelopeFactory;\r\n//# sourceMappingURL=EnvelopeFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/EnvelopeFactory.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/Logging.js":
/*!*****************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/Logging.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar Logging = (function () {\r\n    function Logging() {\r\n    }\r\n    Logging.info = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (Logging.enableDebug) {\r\n            console.info(Logging.TAG + message, optionalParams);\r\n        }\r\n    };\r\n    Logging.warn = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        if (!Logging.disableWarnings) {\r\n            console.warn(Logging.TAG + message, optionalParams);\r\n        }\r\n    };\r\n    Logging.enableDebug = false;\r\n    Logging.disableWarnings = false;\r\n    Logging.TAG = \"ApplicationInsights:\";\r\n    return Logging;\r\n}());\r\nmodule.exports = Logging;\r\n//# sourceMappingURL=Logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvTGlicmFyeS9Mb2dnaW5nLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9MaWJyYXJ5L0xvZ2dpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBMb2dnaW5nID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExvZ2dpbmcoKSB7XHJcbiAgICB9XHJcbiAgICBMb2dnaW5nLmluZm8gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBvcHRpb25hbFBhcmFtcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbmFsUGFyYW1zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTG9nZ2luZy5lbmFibGVEZWJ1Zykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmluZm8oTG9nZ2luZy5UQUcgKyBtZXNzYWdlLCBvcHRpb25hbFBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExvZ2dpbmcud2FybiA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbmFsUGFyYW1zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgb3B0aW9uYWxQYXJhbXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghTG9nZ2luZy5kaXNhYmxlV2FybmluZ3MpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKExvZ2dpbmcuVEFHICsgbWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb2dnaW5nLmVuYWJsZURlYnVnID0gZmFsc2U7XHJcbiAgICBMb2dnaW5nLmRpc2FibGVXYXJuaW5ncyA9IGZhbHNlO1xyXG4gICAgTG9nZ2luZy5UQUcgPSBcIkFwcGxpY2F0aW9uSW5zaWdodHM6XCI7XHJcbiAgICByZXR1cm4gTG9nZ2luZztcclxufSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSBMb2dnaW5nO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb2dnaW5nLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/Logging.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/NodeClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/NodeClient.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar TelemetryClient = __webpack_require__(/*! ./TelemetryClient */ \"./node_modules/applicationinsights/out/Library/TelemetryClient.js\");\r\nvar ServerRequestTracking = __webpack_require__(/*! ../AutoCollection/HttpRequests */ \"./node_modules/applicationinsights/out/AutoCollection/HttpRequests.js\");\r\nvar ClientRequestTracking = __webpack_require__(/*! ../AutoCollection/HttpDependencies */ \"./node_modules/applicationinsights/out/AutoCollection/HttpDependencies.js\");\r\nvar Logging = __webpack_require__(/*! ./Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\n/**\r\n * Application Insights Telemetry Client for Node.JS. Provides the Application Insights TelemetryClient API\r\n * in addition to Node-specific helper functions.\r\n * Construct a new TelemetryClient to have an instance with a different configuration than the default client.\r\n * In most cases, `appInsights.defaultClient` should be used instead.\r\n */\r\nvar NodeClient = (function (_super) {\r\n    __extends(NodeClient, _super);\r\n    function NodeClient() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Log RequestTelemetry from HTTP request and response. This method will log immediately without waitng for request completion\r\n     * and it requires duration parameter to be specified on NodeHttpRequestTelemetry object.\r\n     * Use trackNodeHttpRequest function to log the telemetry after request completion\r\n     * @param telemetry Object encapsulating incoming request, response and duration information\r\n     */\r\n    NodeClient.prototype.trackNodeHttpRequestSync = function (telemetry) {\r\n        if (telemetry && telemetry.request && telemetry.response && telemetry.duration) {\r\n            ServerRequestTracking.trackRequestSync(this, telemetry);\r\n        }\r\n        else {\r\n            Logging.warn(\"trackNodeHttpRequestSync requires NodeHttpRequestTelemetry object with request, response and duration specified.\");\r\n        }\r\n    };\r\n    /**\r\n     * Log RequestTelemetry from HTTP request and response. This method will `follow` the request to completion.\r\n     * Use trackNodeHttpRequestSync function to log telemetry immediately without waiting for request completion\r\n     * @param telemetry Object encapsulating incoming request and response information\r\n     */\r\n    NodeClient.prototype.trackNodeHttpRequest = function (telemetry) {\r\n        if (telemetry.duration || telemetry.error) {\r\n            Logging.warn(\"trackNodeHttpRequest will ignore supplied duration and error parameters. These values are collected from the request and response objects.\");\r\n        }\r\n        if (telemetry && telemetry.request && telemetry.response) {\r\n            ServerRequestTracking.trackRequest(this, telemetry);\r\n        }\r\n        else {\r\n            Logging.warn(\"trackNodeHttpRequest requires NodeHttpRequestTelemetry object with request and response specified.\");\r\n        }\r\n    };\r\n    /**\r\n     * Log DependencyTelemetry from outgoing HTTP request. This method will instrument the outgoing request and append\r\n     * the specified headers and will log the telemetry when outgoing request is complete\r\n     * @param telemetry Object encapsulating outgoing request information\r\n     */\r\n    NodeClient.prototype.trackNodeHttpDependency = function (telemetry) {\r\n        if (telemetry && telemetry.request) {\r\n            ClientRequestTracking.trackRequest(this, telemetry);\r\n        }\r\n        else {\r\n            Logging.warn(\"trackNodeHttpDependency requires NodeHttpDependencyTelemetry object with request specified.\");\r\n        }\r\n    };\r\n    return NodeClient;\r\n}(TelemetryClient));\r\nmodule.exports = NodeClient;\r\n//# sourceMappingURL=NodeClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvTGlicmFyeS9Ob2RlQ2xpZW50LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9MaWJyYXJ5L05vZGVDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgVGVsZW1ldHJ5Q2xpZW50ID0gcmVxdWlyZShcIi4vVGVsZW1ldHJ5Q2xpZW50XCIpO1xyXG52YXIgU2VydmVyUmVxdWVzdFRyYWNraW5nID0gcmVxdWlyZShcIi4uL0F1dG9Db2xsZWN0aW9uL0h0dHBSZXF1ZXN0c1wiKTtcclxudmFyIENsaWVudFJlcXVlc3RUcmFja2luZyA9IHJlcXVpcmUoXCIuLi9BdXRvQ29sbGVjdGlvbi9IdHRwRGVwZW5kZW5jaWVzXCIpO1xyXG52YXIgTG9nZ2luZyA9IHJlcXVpcmUoXCIuL0xvZ2dpbmdcIik7XHJcbi8qKlxyXG4gKiBBcHBsaWNhdGlvbiBJbnNpZ2h0cyBUZWxlbWV0cnkgQ2xpZW50IGZvciBOb2RlLkpTLiBQcm92aWRlcyB0aGUgQXBwbGljYXRpb24gSW5zaWdodHMgVGVsZW1ldHJ5Q2xpZW50IEFQSVxyXG4gKiBpbiBhZGRpdGlvbiB0byBOb2RlLXNwZWNpZmljIGhlbHBlciBmdW5jdGlvbnMuXHJcbiAqIENvbnN0cnVjdCBhIG5ldyBUZWxlbWV0cnlDbGllbnQgdG8gaGF2ZSBhbiBpbnN0YW5jZSB3aXRoIGEgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gdGhhbiB0aGUgZGVmYXVsdCBjbGllbnQuXHJcbiAqIEluIG1vc3QgY2FzZXMsIGBhcHBJbnNpZ2h0cy5kZWZhdWx0Q2xpZW50YCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxyXG4gKi9cclxudmFyIE5vZGVDbGllbnQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE5vZGVDbGllbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBOb2RlQ2xpZW50KCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTG9nIFJlcXVlc3RUZWxlbWV0cnkgZnJvbSBIVFRQIHJlcXVlc3QgYW5kIHJlc3BvbnNlLiBUaGlzIG1ldGhvZCB3aWxsIGxvZyBpbW1lZGlhdGVseSB3aXRob3V0IHdhaXRuZyBmb3IgcmVxdWVzdCBjb21wbGV0aW9uXHJcbiAgICAgKiBhbmQgaXQgcmVxdWlyZXMgZHVyYXRpb24gcGFyYW1ldGVyIHRvIGJlIHNwZWNpZmllZCBvbiBOb2RlSHR0cFJlcXVlc3RUZWxlbWV0cnkgb2JqZWN0LlxyXG4gICAgICogVXNlIHRyYWNrTm9kZUh0dHBSZXF1ZXN0IGZ1bmN0aW9uIHRvIGxvZyB0aGUgdGVsZW1ldHJ5IGFmdGVyIHJlcXVlc3QgY29tcGxldGlvblxyXG4gICAgICogQHBhcmFtIHRlbGVtZXRyeSBPYmplY3QgZW5jYXBzdWxhdGluZyBpbmNvbWluZyByZXF1ZXN0LCByZXNwb25zZSBhbmQgZHVyYXRpb24gaW5mb3JtYXRpb25cclxuICAgICAqL1xyXG4gICAgTm9kZUNsaWVudC5wcm90b3R5cGUudHJhY2tOb2RlSHR0cFJlcXVlc3RTeW5jID0gZnVuY3Rpb24gKHRlbGVtZXRyeSkge1xyXG4gICAgICAgIGlmICh0ZWxlbWV0cnkgJiYgdGVsZW1ldHJ5LnJlcXVlc3QgJiYgdGVsZW1ldHJ5LnJlc3BvbnNlICYmIHRlbGVtZXRyeS5kdXJhdGlvbikge1xyXG4gICAgICAgICAgICBTZXJ2ZXJSZXF1ZXN0VHJhY2tpbmcudHJhY2tSZXF1ZXN0U3luYyh0aGlzLCB0ZWxlbWV0cnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgTG9nZ2luZy53YXJuKFwidHJhY2tOb2RlSHR0cFJlcXVlc3RTeW5jIHJlcXVpcmVzIE5vZGVIdHRwUmVxdWVzdFRlbGVtZXRyeSBvYmplY3Qgd2l0aCByZXF1ZXN0LCByZXNwb25zZSBhbmQgZHVyYXRpb24gc3BlY2lmaWVkLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2cgUmVxdWVzdFRlbGVtZXRyeSBmcm9tIEhUVFAgcmVxdWVzdCBhbmQgcmVzcG9uc2UuIFRoaXMgbWV0aG9kIHdpbGwgYGZvbGxvd2AgdGhlIHJlcXVlc3QgdG8gY29tcGxldGlvbi5cclxuICAgICAqIFVzZSB0cmFja05vZGVIdHRwUmVxdWVzdFN5bmMgZnVuY3Rpb24gdG8gbG9nIHRlbGVtZXRyeSBpbW1lZGlhdGVseSB3aXRob3V0IHdhaXRpbmcgZm9yIHJlcXVlc3QgY29tcGxldGlvblxyXG4gICAgICogQHBhcmFtIHRlbGVtZXRyeSBPYmplY3QgZW5jYXBzdWxhdGluZyBpbmNvbWluZyByZXF1ZXN0IGFuZCByZXNwb25zZSBpbmZvcm1hdGlvblxyXG4gICAgICovXHJcbiAgICBOb2RlQ2xpZW50LnByb3RvdHlwZS50cmFja05vZGVIdHRwUmVxdWVzdCA9IGZ1bmN0aW9uICh0ZWxlbWV0cnkpIHtcclxuICAgICAgICBpZiAodGVsZW1ldHJ5LmR1cmF0aW9uIHx8IHRlbGVtZXRyeS5lcnJvcikge1xyXG4gICAgICAgICAgICBMb2dnaW5nLndhcm4oXCJ0cmFja05vZGVIdHRwUmVxdWVzdCB3aWxsIGlnbm9yZSBzdXBwbGllZCBkdXJhdGlvbiBhbmQgZXJyb3IgcGFyYW1ldGVycy4gVGhlc2UgdmFsdWVzIGFyZSBjb2xsZWN0ZWQgZnJvbSB0aGUgcmVxdWVzdCBhbmQgcmVzcG9uc2Ugb2JqZWN0cy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ZWxlbWV0cnkgJiYgdGVsZW1ldHJ5LnJlcXVlc3QgJiYgdGVsZW1ldHJ5LnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIFNlcnZlclJlcXVlc3RUcmFja2luZy50cmFja1JlcXVlc3QodGhpcywgdGVsZW1ldHJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZ2dpbmcud2FybihcInRyYWNrTm9kZUh0dHBSZXF1ZXN0IHJlcXVpcmVzIE5vZGVIdHRwUmVxdWVzdFRlbGVtZXRyeSBvYmplY3Qgd2l0aCByZXF1ZXN0IGFuZCByZXNwb25zZSBzcGVjaWZpZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIExvZyBEZXBlbmRlbmN5VGVsZW1ldHJ5IGZyb20gb3V0Z29pbmcgSFRUUCByZXF1ZXN0LiBUaGlzIG1ldGhvZCB3aWxsIGluc3RydW1lbnQgdGhlIG91dGdvaW5nIHJlcXVlc3QgYW5kIGFwcGVuZFxyXG4gICAgICogdGhlIHNwZWNpZmllZCBoZWFkZXJzIGFuZCB3aWxsIGxvZyB0aGUgdGVsZW1ldHJ5IHdoZW4gb3V0Z29pbmcgcmVxdWVzdCBpcyBjb21wbGV0ZVxyXG4gICAgICogQHBhcmFtIHRlbGVtZXRyeSBPYmplY3QgZW5jYXBzdWxhdGluZyBvdXRnb2luZyByZXF1ZXN0IGluZm9ybWF0aW9uXHJcbiAgICAgKi9cclxuICAgIE5vZGVDbGllbnQucHJvdG90eXBlLnRyYWNrTm9kZUh0dHBEZXBlbmRlbmN5ID0gZnVuY3Rpb24gKHRlbGVtZXRyeSkge1xyXG4gICAgICAgIGlmICh0ZWxlbWV0cnkgJiYgdGVsZW1ldHJ5LnJlcXVlc3QpIHtcclxuICAgICAgICAgICAgQ2xpZW50UmVxdWVzdFRyYWNraW5nLnRyYWNrUmVxdWVzdCh0aGlzLCB0ZWxlbWV0cnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgTG9nZ2luZy53YXJuKFwidHJhY2tOb2RlSHR0cERlcGVuZGVuY3kgcmVxdWlyZXMgTm9kZUh0dHBEZXBlbmRlbmN5VGVsZW1ldHJ5IG9iamVjdCB3aXRoIHJlcXVlc3Qgc3BlY2lmaWVkLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5vZGVDbGllbnQ7XHJcbn0oVGVsZW1ldHJ5Q2xpZW50KSk7XHJcbm1vZHVsZS5leHBvcnRzID0gTm9kZUNsaWVudDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9kZUNsaWVudC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/NodeClient.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js":
/*!********************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = {\r\n    /**\r\n     * Request-Context header\r\n     */\r\n    requestContextHeader: \"request-context\",\r\n    /**\r\n     * Source instrumentation header that is added by an application while making http\r\n     * requests and retrieved by the other application when processing incoming requests.\r\n     */\r\n    requestContextSourceKey: \"appId\",\r\n    /**\r\n     * Target instrumentation header that is added to the response and retrieved by the\r\n     * calling application when processing incoming responses.\r\n     */\r\n    requestContextTargetKey: \"appId\",\r\n    /**\r\n     * Request-Id header\r\n     */\r\n    requestIdHeader: \"request-id\",\r\n    /**\r\n     * Legacy Header containing the id of the immidiate caller\r\n     */\r\n    parentIdHeader: \"x-ms-request-id\",\r\n    /**\r\n     * Legacy Header containing the correlation id that kept the same for every telemetry item\r\n     * accross transactions\r\n     */\r\n    rootIdHeader: \"x-ms-request-root-id\",\r\n    /**\r\n     * Correlation-Context header\r\n     *\r\n     * Not currently actively used, but the contents should be passed from incoming to outgoing requests\r\n     */\r\n    correlationContextHeader: \"correlation-context\"\r\n};\r\n//# sourceMappingURL=RequestResponseHeaders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvTGlicmFyeS9SZXF1ZXN0UmVzcG9uc2VIZWFkZXJzLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9hcHBsaWNhdGlvbmluc2lnaHRzL291dC9MaWJyYXJ5L1JlcXVlc3RSZXNwb25zZUhlYWRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1ZXN0LUNvbnRleHQgaGVhZGVyXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RDb250ZXh0SGVhZGVyOiBcInJlcXVlc3QtY29udGV4dFwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3VyY2UgaW5zdHJ1bWVudGF0aW9uIGhlYWRlciB0aGF0IGlzIGFkZGVkIGJ5IGFuIGFwcGxpY2F0aW9uIHdoaWxlIG1ha2luZyBodHRwXHJcbiAgICAgKiByZXF1ZXN0cyBhbmQgcmV0cmlldmVkIGJ5IHRoZSBvdGhlciBhcHBsaWNhdGlvbiB3aGVuIHByb2Nlc3NpbmcgaW5jb21pbmcgcmVxdWVzdHMuXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RDb250ZXh0U291cmNlS2V5OiBcImFwcElkXCIsXHJcbiAgICAvKipcclxuICAgICAqIFRhcmdldCBpbnN0cnVtZW50YXRpb24gaGVhZGVyIHRoYXQgaXMgYWRkZWQgdG8gdGhlIHJlc3BvbnNlIGFuZCByZXRyaWV2ZWQgYnkgdGhlXHJcbiAgICAgKiBjYWxsaW5nIGFwcGxpY2F0aW9uIHdoZW4gcHJvY2Vzc2luZyBpbmNvbWluZyByZXNwb25zZXMuXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RDb250ZXh0VGFyZ2V0S2V5OiBcImFwcElkXCIsXHJcbiAgICAvKipcclxuICAgICAqIFJlcXVlc3QtSWQgaGVhZGVyXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RJZEhlYWRlcjogXCJyZXF1ZXN0LWlkXCIsXHJcbiAgICAvKipcclxuICAgICAqIExlZ2FjeSBIZWFkZXIgY29udGFpbmluZyB0aGUgaWQgb2YgdGhlIGltbWlkaWF0ZSBjYWxsZXJcclxuICAgICAqL1xyXG4gICAgcGFyZW50SWRIZWFkZXI6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXHJcbiAgICAvKipcclxuICAgICAqIExlZ2FjeSBIZWFkZXIgY29udGFpbmluZyB0aGUgY29ycmVsYXRpb24gaWQgdGhhdCBrZXB0IHRoZSBzYW1lIGZvciBldmVyeSB0ZWxlbWV0cnkgaXRlbVxyXG4gICAgICogYWNjcm9zcyB0cmFuc2FjdGlvbnNcclxuICAgICAqL1xyXG4gICAgcm9vdElkSGVhZGVyOiBcIngtbXMtcmVxdWVzdC1yb290LWlkXCIsXHJcbiAgICAvKipcclxuICAgICAqIENvcnJlbGF0aW9uLUNvbnRleHQgaGVhZGVyXHJcbiAgICAgKlxyXG4gICAgICogTm90IGN1cnJlbnRseSBhY3RpdmVseSB1c2VkLCBidXQgdGhlIGNvbnRlbnRzIHNob3VsZCBiZSBwYXNzZWQgZnJvbSBpbmNvbWluZyB0byBvdXRnb2luZyByZXF1ZXN0c1xyXG4gICAgICovXHJcbiAgICBjb3JyZWxhdGlvbkNvbnRleHRIZWFkZXI6IFwiY29ycmVsYXRpb24tY29udGV4dFwiXHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcXVlc3RSZXNwb25zZUhlYWRlcnMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/Sender.js":
/*!****************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/Sender.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nvar os = __webpack_require__(/*! os */ \"os\");\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\nvar child_process = __webpack_require__(/*! child_process */ \"child_process\");\r\nvar Logging = __webpack_require__(/*! ./Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar AutoCollectHttpDependencies = __webpack_require__(/*! ../AutoCollection/HttpDependencies */ \"./node_modules/applicationinsights/out/AutoCollection/HttpDependencies.js\");\r\nvar Util = __webpack_require__(/*! ./Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar Sender = (function () {\r\n    function Sender(config, onSuccess, onError) {\r\n        this._config = config;\r\n        this._onSuccess = onSuccess;\r\n        this._onError = onError;\r\n        this._enableDiskRetryMode = false;\r\n        this._resendInterval = Sender.WAIT_BETWEEN_RESEND;\r\n        this._maxBytesOnDisk = Sender.MAX_BYTES_ON_DISK;\r\n        this._numConsecutiveFailures = 0;\r\n        if (!Sender.OS_PROVIDES_FILE_PROTECTION) {\r\n            // Node's chmod levels do not appropriately restrict file access on Windows\r\n            // Use the built-in command line tool ICACLS on Windows to properly restrict\r\n            // access to the temporary directory used for disk retry mode.\r\n            if (Sender.USE_ICACLS) {\r\n                // This should be async - but it's currently safer to have this synchronous\r\n                // This guarantees we can immediately fail setDiskRetryMode if we need to\r\n                try {\r\n                    Sender.OS_PROVIDES_FILE_PROTECTION = fs.existsSync(Sender.ICACLS_PATH);\r\n                }\r\n                catch (e) { }\r\n                if (!Sender.OS_PROVIDES_FILE_PROTECTION) {\r\n                    Logging.warn(Sender.TAG, \"Could not find ICACLS in expected location! This is necessary to use disk retry mode on Windows.\");\r\n                }\r\n            }\r\n            else {\r\n                // chmod works everywhere else\r\n                Sender.OS_PROVIDES_FILE_PROTECTION = true;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n    * Enable or disable offline mode\r\n    */\r\n    Sender.prototype.setDiskRetryMode = function (value, resendInterval, maxBytesOnDisk) {\r\n        this._enableDiskRetryMode = Sender.OS_PROVIDES_FILE_PROTECTION && value;\r\n        if (typeof resendInterval === 'number' && resendInterval >= 0) {\r\n            this._resendInterval = Math.floor(resendInterval);\r\n        }\r\n        if (typeof maxBytesOnDisk === 'number' && maxBytesOnDisk >= 0) {\r\n            this._maxBytesOnDisk = Math.floor(maxBytesOnDisk);\r\n        }\r\n        if (value && !Sender.OS_PROVIDES_FILE_PROTECTION) {\r\n            this._enableDiskRetryMode = false;\r\n            Logging.warn(Sender.TAG, \"Ignoring request to enable disk retry mode. Sufficient file protection capabilities were not detected.\");\r\n        }\r\n    };\r\n    Sender.prototype.send = function (payload, callback) {\r\n        var _this = this;\r\n        var endpointUrl = this._config.endpointUrl;\r\n        // todo: investigate specifying an agent here: https://nodejs.org/api/http.html#http_class_http_agent\r\n        var options = {\r\n            method: \"POST\",\r\n            withCredentials: false,\r\n            headers: {\r\n                \"Content-Type\": \"application/x-json-stream\"\r\n            }\r\n        };\r\n        zlib.gzip(payload, function (err, buffer) {\r\n            var dataToSend = buffer;\r\n            if (err) {\r\n                Logging.warn(err);\r\n                dataToSend = payload; // something went wrong so send without gzip\r\n                options.headers[\"Content-Length\"] = payload.length.toString();\r\n            }\r\n            else {\r\n                options.headers[\"Content-Encoding\"] = \"gzip\";\r\n                options.headers[\"Content-Length\"] = buffer.length;\r\n            }\r\n            Logging.info(Sender.TAG, options);\r\n            // Ensure this request is not captured by auto-collection.\r\n            options[AutoCollectHttpDependencies.disableCollectionRequestOption] = true;\r\n            var requestCallback = function (res) {\r\n                res.setEncoding(\"utf-8\");\r\n                //returns empty if the data is accepted\r\n                var responseString = \"\";\r\n                res.on(\"data\", function (data) {\r\n                    responseString += data;\r\n                });\r\n                res.on(\"end\", function () {\r\n                    _this._numConsecutiveFailures = 0;\r\n                    Logging.info(Sender.TAG, responseString);\r\n                    if (typeof _this._onSuccess === \"function\") {\r\n                        _this._onSuccess(responseString);\r\n                    }\r\n                    if (typeof callback === \"function\") {\r\n                        callback(responseString);\r\n                    }\r\n                    if (_this._enableDiskRetryMode) {\r\n                        // try to send any cached events if the user is back online\r\n                        if (res.statusCode === 200) {\r\n                            setTimeout(function () { return _this._sendFirstFileOnDisk(); }, _this._resendInterval);\r\n                            // store to disk in case of burst throttling\r\n                        }\r\n                        else if (res.statusCode === 408 ||\r\n                            res.statusCode === 429 ||\r\n                            res.statusCode === 439 ||\r\n                            res.statusCode === 500 ||\r\n                            res.statusCode === 503) {\r\n                            // TODO: Do not support partial success (206) until _sendFirstFileOnDisk checks payload age\r\n                            _this._storeToDisk(payload);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n            var req = Util.makeRequest(_this._config, endpointUrl, options, requestCallback);\r\n            req.on(\"error\", function (error) {\r\n                // todo: handle error codes better (group to recoverable/non-recoverable and persist)\r\n                _this._numConsecutiveFailures++;\r\n                // Only use warn level if retries are disabled or we've had some number of consecutive failures sending data\r\n                // This is because warn level is printed in the console by default, and we don't want to be noisy for transient and self-recovering errors\r\n                // Continue informing on each failure if verbose logging is being used\r\n                if (!_this._enableDiskRetryMode || _this._numConsecutiveFailures > 0 && _this._numConsecutiveFailures % Sender.MAX_CONNECTION_FAILURES_BEFORE_WARN === 0) {\r\n                    var notice = \"Ingestion endpoint could not be reached. This batch of telemetry items has been lost. Use Disk Retry Caching to enable resending of failed telemetry. Error:\";\r\n                    if (_this._enableDiskRetryMode) {\r\n                        notice = \"Ingestion endpoint could not be reached \" + _this._numConsecutiveFailures + \" consecutive times. There may be resulting telemetry loss. Most recent error:\";\r\n                    }\r\n                    Logging.warn(Sender.TAG, notice, error);\r\n                }\r\n                else {\r\n                    var notice = \"Transient failure to reach ingestion endpoint. This batch of telemetry items will be retried. Error:\";\r\n                    Logging.info(Sender.TAG, notice, error);\r\n                }\r\n                _this._onErrorHelper(error);\r\n                if (typeof callback === \"function\") {\r\n                    var errorMessage = \"error sending telemetry\";\r\n                    if (error && (typeof error.toString === \"function\")) {\r\n                        errorMessage = error.toString();\r\n                    }\r\n                    callback(errorMessage);\r\n                }\r\n                if (_this._enableDiskRetryMode) {\r\n                    _this._storeToDisk(payload);\r\n                }\r\n            });\r\n            req.write(dataToSend);\r\n            req.end();\r\n        });\r\n    };\r\n    Sender.prototype.saveOnCrash = function (payload) {\r\n        if (this._enableDiskRetryMode) {\r\n            this._storeToDiskSync(payload);\r\n        }\r\n    };\r\n    Sender.prototype._runICACLS = function (args, callback) {\r\n        var aclProc = child_process.spawn(Sender.ICACLS_PATH, args, { windowsHide: true });\r\n        aclProc.on(\"error\", function (e) { return callback(e); });\r\n        aclProc.on(\"close\", function (code, signal) {\r\n            return callback(code === 0 ? null : new Error(\"Setting ACL restrictions did not succeed (ICACLS returned code \" + code + \")\"));\r\n        });\r\n    };\r\n    Sender.prototype._runICACLSSync = function (args) {\r\n        // Some very old versions of Node (< 0.11) don't have this\r\n        if (child_process.spawnSync) {\r\n            var aclProc = child_process.spawnSync(Sender.ICACLS_PATH, args, { windowsHide: true });\r\n            if (aclProc.error) {\r\n                throw aclProc.error;\r\n            }\r\n            else if (aclProc.status !== 0) {\r\n                throw new Error(\"Setting ACL restrictions did not succeed (ICACLS returned code \" + aclProc.status + \")\");\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Could not synchronously call ICACLS under current version of Node.js\");\r\n        }\r\n    };\r\n    Sender.prototype._getACLIdentity = function (callback) {\r\n        if (Sender.ACL_IDENTITY) {\r\n            return callback(null, Sender.ACL_IDENTITY);\r\n        }\r\n        var psProc = child_process.spawn(Sender.POWERSHELL_PATH, [\"-Command\", \"[System.Security.Principal.WindowsIdentity]::GetCurrent().Name\"], {\r\n            windowsHide: true,\r\n            stdio: ['ignore', 'pipe', 'pipe'] // Needed to prevent hanging on Win 7\r\n        });\r\n        var data = \"\";\r\n        psProc.stdout.on(\"data\", function (d) { return data += d; });\r\n        psProc.on(\"error\", function (e) { return callback(e, null); });\r\n        psProc.on(\"close\", function (code, signal) {\r\n            Sender.ACL_IDENTITY = data && data.trim();\r\n            return callback(code === 0 ? null : new Error(\"Getting ACL identity did not succeed (PS returned code \" + code + \")\"), Sender.ACL_IDENTITY);\r\n        });\r\n    };\r\n    Sender.prototype._getACLIdentitySync = function () {\r\n        if (Sender.ACL_IDENTITY) {\r\n            return Sender.ACL_IDENTITY;\r\n        }\r\n        // Some very old versions of Node (< 0.11) don't have this\r\n        if (child_process.spawnSync) {\r\n            var psProc = child_process.spawnSync(Sender.POWERSHELL_PATH, [\"-Command\", \"[System.Security.Principal.WindowsIdentity]::GetCurrent().Name\"], {\r\n                windowsHide: true,\r\n                stdio: ['ignore', 'pipe', 'pipe'] // Needed to prevent hanging on Win 7\r\n            });\r\n            if (psProc.error) {\r\n                throw psProc.error;\r\n            }\r\n            else if (psProc.status !== 0) {\r\n                throw new Error(\"Getting ACL identity did not succeed (PS returned code \" + psProc.status + \")\");\r\n            }\r\n            Sender.ACL_IDENTITY = psProc.stdout && psProc.stdout.toString().trim();\r\n            return Sender.ACL_IDENTITY;\r\n        }\r\n        else {\r\n            throw new Error(\"Could not synchronously get ACL identity under current version of Node.js\");\r\n        }\r\n    };\r\n    Sender.prototype._getACLArguments = function (directory, identity) {\r\n        return [directory,\r\n            \"/grant\", \"*S-1-5-32-544:(OI)(CI)F\",\r\n            \"/grant\", identity + \":(OI)(CI)F\",\r\n            \"/inheritance:r\"]; // Remove all inherited permissions\r\n    };\r\n    Sender.prototype._applyACLRules = function (directory, callback) {\r\n        var _this = this;\r\n        if (!Sender.USE_ICACLS) {\r\n            return callback(null);\r\n        }\r\n        // For performance, only run ACL rules if we haven't already during this session\r\n        if (Sender.ACLED_DIRECTORIES[directory] === undefined) {\r\n            // Avoid multiple calls race condition by setting ACLED_DIRECTORIES to false for this directory immediately\r\n            // If batches are being failed faster than the processes spawned below return, some data won't be stored to disk\r\n            // This is better than the alternative of potentially infinitely spawned processes\r\n            Sender.ACLED_DIRECTORIES[directory] = false;\r\n            // Restrict this directory to only current user and administrator access\r\n            this._getACLIdentity(function (err, identity) {\r\n                if (err) {\r\n                    Sender.ACLED_DIRECTORIES[directory] = false; // false is used to cache failed (vs undefined which is \"not yet tried\")\r\n                    return callback(err);\r\n                }\r\n                else {\r\n                    _this._runICACLS(_this._getACLArguments(directory, identity), function (err) {\r\n                        Sender.ACLED_DIRECTORIES[directory] = !err;\r\n                        return callback(err);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            return callback(Sender.ACLED_DIRECTORIES[directory] ? null :\r\n                new Error(\"Setting ACL restrictions did not succeed (cached result)\"));\r\n        }\r\n    };\r\n    Sender.prototype._applyACLRulesSync = function (directory) {\r\n        if (Sender.USE_ICACLS) {\r\n            // For performance, only run ACL rules if we haven't already during this session\r\n            if (Sender.ACLED_DIRECTORIES[directory] === undefined) {\r\n                this._runICACLSSync(this._getACLArguments(directory, this._getACLIdentitySync()));\r\n                Sender.ACLED_DIRECTORIES[directory] = true; // If we get here, it succeeded. _runIACLSSync will throw on failures\r\n                return;\r\n            }\r\n            else if (!Sender.ACLED_DIRECTORIES[directory]) {\r\n                throw new Error(\"Setting ACL restrictions did not succeed (cached result)\");\r\n            }\r\n        }\r\n    };\r\n    Sender.prototype._confirmDirExists = function (directory, callback) {\r\n        var _this = this;\r\n        fs.lstat(directory, function (err, stats) {\r\n            if (err && err.code === 'ENOENT') {\r\n                fs.mkdir(directory, function (err) {\r\n                    if (err && err.code !== 'EEXIST') {\r\n                        callback(err);\r\n                    }\r\n                    else {\r\n                        _this._applyACLRules(directory, callback);\r\n                    }\r\n                });\r\n            }\r\n            else if (!err && stats.isDirectory()) {\r\n                _this._applyACLRules(directory, callback);\r\n            }\r\n            else {\r\n                callback(err || new Error(\"Path existed but was not a directory\"));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Computes the size (in bytes) of all files in a directory at the root level. Asynchronously.\r\n     */\r\n    Sender.prototype._getShallowDirectorySize = function (directory, callback) {\r\n        // Get the directory listing\r\n        fs.readdir(directory, function (err, files) {\r\n            if (err) {\r\n                return callback(err, -1);\r\n            }\r\n            var error = null;\r\n            var totalSize = 0;\r\n            var count = 0;\r\n            if (files.length === 0) {\r\n                callback(null, 0);\r\n                return;\r\n            }\r\n            // Query all file sizes\r\n            for (var i = 0; i < files.length; i++) {\r\n                fs.stat(path.join(directory, files[i]), function (err, fileStats) {\r\n                    count++;\r\n                    if (err) {\r\n                        error = err;\r\n                    }\r\n                    else {\r\n                        if (fileStats.isFile()) {\r\n                            totalSize += fileStats.size;\r\n                        }\r\n                    }\r\n                    if (count === files.length) {\r\n                        // Did we get an error?\r\n                        if (error) {\r\n                            callback(error, -1);\r\n                        }\r\n                        else {\r\n                            callback(error, totalSize);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Computes the size (in bytes) of all files in a directory at the root level. Synchronously.\r\n     */\r\n    Sender.prototype._getShallowDirectorySizeSync = function (directory) {\r\n        var files = fs.readdirSync(directory);\r\n        var totalSize = 0;\r\n        for (var i = 0; i < files.length; i++) {\r\n            totalSize += fs.statSync(path.join(directory, files[i])).size;\r\n        }\r\n        return totalSize;\r\n    };\r\n    /**\r\n     * Stores the payload as a json file on disk in the temp directory\r\n     */\r\n    Sender.prototype._storeToDisk = function (payload) {\r\n        var _this = this;\r\n        // tmpdir is /tmp for *nix and USERDIR/AppData/Local/Temp for Windows\r\n        var directory = path.join(os.tmpdir(), Sender.TEMPDIR_PREFIX + this._config.instrumentationKey);\r\n        // This will create the dir if it does not exist\r\n        // Default permissions on *nix are directory listing from other users but no file creations\r\n        Logging.info(Sender.TAG, \"Checking existance of data storage directory: \" + directory);\r\n        this._confirmDirExists(directory, function (error) {\r\n            if (error) {\r\n                Logging.warn(Sender.TAG, \"Error while checking/creating directory: \" + (error && error.message));\r\n                _this._onErrorHelper(error);\r\n                return;\r\n            }\r\n            _this._getShallowDirectorySize(directory, function (err, size) {\r\n                if (err || size < 0) {\r\n                    Logging.warn(Sender.TAG, \"Error while checking directory size: \" + (err && err.message));\r\n                    _this._onErrorHelper(err);\r\n                    return;\r\n                }\r\n                else if (size > _this._maxBytesOnDisk) {\r\n                    Logging.warn(Sender.TAG, \"Not saving data due to max size limit being met. Directory size in bytes is: \" + size);\r\n                    return;\r\n                }\r\n                //create file - file name for now is the timestamp, a better approach would be a UUID but that\r\n                //would require an external dependency\r\n                var fileName = new Date().getTime() + \".ai.json\";\r\n                var fileFullPath = path.join(directory, fileName);\r\n                // Mode 600 is w/r for creator and no read access for others (only applies on *nix)\r\n                // For Windows, ACL rules are applied to the entire directory (see logic in _confirmDirExists and _applyACLRules)\r\n                Logging.info(Sender.TAG, \"saving data to disk at: \" + fileFullPath);\r\n                fs.writeFile(fileFullPath, payload, { mode: 384 }, function (error) { return _this._onErrorHelper(error); });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Stores the payload as a json file on disk using sync file operations\r\n     * this is used when storing data before crashes\r\n     */\r\n    Sender.prototype._storeToDiskSync = function (payload) {\r\n        // tmpdir is /tmp for *nix and USERDIR/AppData/Local/Temp for Windows\r\n        var directory = path.join(os.tmpdir(), Sender.TEMPDIR_PREFIX + this._config.instrumentationKey);\r\n        try {\r\n            Logging.info(Sender.TAG, \"Checking existance of data storage directory: \" + directory);\r\n            if (!fs.existsSync(directory)) {\r\n                fs.mkdirSync(directory);\r\n            }\r\n            // Make sure permissions are valid\r\n            this._applyACLRulesSync(directory);\r\n            var dirSize = this._getShallowDirectorySizeSync(directory);\r\n            if (dirSize > this._maxBytesOnDisk) {\r\n                Logging.info(Sender.TAG, \"Not saving data due to max size limit being met. Directory size in bytes is: \" + dirSize);\r\n                return;\r\n            }\r\n            //create file - file name for now is the timestamp, a better approach would be a UUID but that\r\n            //would require an external dependency\r\n            var fileName = new Date().getTime() + \".ai.json\";\r\n            var fileFullPath = path.join(directory, fileName);\r\n            // Mode 600 is w/r for creator and no access for anyone else (only applies on *nix)\r\n            Logging.info(Sender.TAG, \"saving data before crash to disk at: \" + fileFullPath);\r\n            fs.writeFileSync(fileFullPath, payload, { mode: 384 });\r\n        }\r\n        catch (error) {\r\n            Logging.warn(Sender.TAG, \"Error while saving data to disk: \" + (error && error.message));\r\n            this._onErrorHelper(error);\r\n        }\r\n    };\r\n    /**\r\n     * Check for temp telemetry files\r\n     * reads the first file if exist, deletes it and tries to send its load\r\n     */\r\n    Sender.prototype._sendFirstFileOnDisk = function () {\r\n        var _this = this;\r\n        var tempDir = path.join(os.tmpdir(), Sender.TEMPDIR_PREFIX + this._config.instrumentationKey);\r\n        fs.exists(tempDir, function (exists) {\r\n            if (exists) {\r\n                fs.readdir(tempDir, function (error, files) {\r\n                    if (!error) {\r\n                        files = files.filter(function (f) { return path.basename(f).indexOf(\".ai.json\") > -1; });\r\n                        if (files.length > 0) {\r\n                            var firstFile = files[0];\r\n                            var filePath = path.join(tempDir, firstFile);\r\n                            fs.readFile(filePath, function (error, payload) {\r\n                                if (!error) {\r\n                                    // delete the file first to prevent double sending\r\n                                    fs.unlink(filePath, function (error) {\r\n                                        if (!error) {\r\n                                            _this.send(payload);\r\n                                        }\r\n                                        else {\r\n                                            _this._onErrorHelper(error);\r\n                                        }\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    _this._onErrorHelper(error);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        _this._onErrorHelper(error);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n    Sender.prototype._onErrorHelper = function (error) {\r\n        if (typeof this._onError === \"function\") {\r\n            this._onError(error);\r\n        }\r\n    };\r\n    Sender.TAG = \"Sender\";\r\n    Sender.ICACLS_PATH = process.env.systemdrive + \"/windows/system32/icacls.exe\";\r\n    Sender.POWERSHELL_PATH = process.env.systemdrive + \"/windows/system32/windowspowershell/v1.0/powershell.exe\";\r\n    Sender.ACLED_DIRECTORIES = {};\r\n    Sender.ACL_IDENTITY = null;\r\n    // the amount of time the SDK will wait between resending cached data, this buffer is to avoid any throtelling from the service side\r\n    Sender.WAIT_BETWEEN_RESEND = 60 * 1000;\r\n    Sender.MAX_BYTES_ON_DISK = 50 * 1000 * 1000;\r\n    Sender.MAX_CONNECTION_FAILURES_BEFORE_WARN = 5;\r\n    Sender.TEMPDIR_PREFIX = \"appInsights-node\";\r\n    Sender.OS_PROVIDES_FILE_PROTECTION = false;\r\n    Sender.USE_ICACLS = os.type() === \"Windows_NT\";\r\n    return Sender;\r\n}());\r\nmodule.exports = Sender;\r\n//# sourceMappingURL=Sender.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvTGlicmFyeS9TZW5kZXIuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2FwcGxpY2F0aW9uaW5zaWdodHMvb3V0L0xpYnJhcnkvU2VuZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbnZhciBvcyA9IHJlcXVpcmUoXCJvc1wiKTtcclxudmFyIHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxudmFyIHpsaWIgPSByZXF1aXJlKFwiemxpYlwiKTtcclxudmFyIGNoaWxkX3Byb2Nlc3MgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcclxudmFyIExvZ2dpbmcgPSByZXF1aXJlKFwiLi9Mb2dnaW5nXCIpO1xyXG52YXIgQXV0b0NvbGxlY3RIdHRwRGVwZW5kZW5jaWVzID0gcmVxdWlyZShcIi4uL0F1dG9Db2xsZWN0aW9uL0h0dHBEZXBlbmRlbmNpZXNcIik7XHJcbnZhciBVdGlsID0gcmVxdWlyZShcIi4vVXRpbFwiKTtcclxudmFyIFNlbmRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTZW5kZXIoY29uZmlnLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5fb25TdWNjZXNzID0gb25TdWNjZXNzO1xyXG4gICAgICAgIHRoaXMuX29uRXJyb3IgPSBvbkVycm9yO1xyXG4gICAgICAgIHRoaXMuX2VuYWJsZURpc2tSZXRyeU1vZGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9yZXNlbmRJbnRlcnZhbCA9IFNlbmRlci5XQUlUX0JFVFdFRU5fUkVTRU5EO1xyXG4gICAgICAgIHRoaXMuX21heEJ5dGVzT25EaXNrID0gU2VuZGVyLk1BWF9CWVRFU19PTl9ESVNLO1xyXG4gICAgICAgIHRoaXMuX251bUNvbnNlY3V0aXZlRmFpbHVyZXMgPSAwO1xyXG4gICAgICAgIGlmICghU2VuZGVyLk9TX1BST1ZJREVTX0ZJTEVfUFJPVEVDVElPTikge1xyXG4gICAgICAgICAgICAvLyBOb2RlJ3MgY2htb2QgbGV2ZWxzIGRvIG5vdCBhcHByb3ByaWF0ZWx5IHJlc3RyaWN0IGZpbGUgYWNjZXNzIG9uIFdpbmRvd3NcclxuICAgICAgICAgICAgLy8gVXNlIHRoZSBidWlsdC1pbiBjb21tYW5kIGxpbmUgdG9vbCBJQ0FDTFMgb24gV2luZG93cyB0byBwcm9wZXJseSByZXN0cmljdFxyXG4gICAgICAgICAgICAvLyBhY2Nlc3MgdG8gdGhlIHRlbXBvcmFyeSBkaXJlY3RvcnkgdXNlZCBmb3IgZGlzayByZXRyeSBtb2RlLlxyXG4gICAgICAgICAgICBpZiAoU2VuZGVyLlVTRV9JQ0FDTFMpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIGFzeW5jIC0gYnV0IGl0J3MgY3VycmVudGx5IHNhZmVyIHRvIGhhdmUgdGhpcyBzeW5jaHJvbm91c1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBndWFyYW50ZWVzIHdlIGNhbiBpbW1lZGlhdGVseSBmYWlsIHNldERpc2tSZXRyeU1vZGUgaWYgd2UgbmVlZCB0b1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBTZW5kZXIuT1NfUFJPVklERVNfRklMRV9QUk9URUNUSU9OID0gZnMuZXhpc3RzU3luYyhTZW5kZXIuSUNBQ0xTX1BBVEgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFTZW5kZXIuT1NfUFJPVklERVNfRklMRV9QUk9URUNUSU9OKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2luZy53YXJuKFNlbmRlci5UQUcsIFwiQ291bGQgbm90IGZpbmQgSUNBQ0xTIGluIGV4cGVjdGVkIGxvY2F0aW9uISBUaGlzIGlzIG5lY2Vzc2FyeSB0byB1c2UgZGlzayByZXRyeSBtb2RlIG9uIFdpbmRvd3MuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY2htb2Qgd29ya3MgZXZlcnl3aGVyZSBlbHNlXHJcbiAgICAgICAgICAgICAgICBTZW5kZXIuT1NfUFJPVklERVNfRklMRV9QUk9URUNUSU9OID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgKiBFbmFibGUgb3IgZGlzYWJsZSBvZmZsaW5lIG1vZGVcclxuICAgICovXHJcbiAgICBTZW5kZXIucHJvdG90eXBlLnNldERpc2tSZXRyeU1vZGUgPSBmdW5jdGlvbiAodmFsdWUsIHJlc2VuZEludGVydmFsLCBtYXhCeXRlc09uRGlzaykge1xyXG4gICAgICAgIHRoaXMuX2VuYWJsZURpc2tSZXRyeU1vZGUgPSBTZW5kZXIuT1NfUFJPVklERVNfRklMRV9QUk9URUNUSU9OICYmIHZhbHVlO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmVzZW5kSW50ZXJ2YWwgPT09ICdudW1iZXInICYmIHJlc2VuZEludGVydmFsID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzZW5kSW50ZXJ2YWwgPSBNYXRoLmZsb29yKHJlc2VuZEludGVydmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtYXhCeXRlc09uRGlzayA9PT0gJ251bWJlcicgJiYgbWF4Qnl0ZXNPbkRpc2sgPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhCeXRlc09uRGlzayA9IE1hdGguZmxvb3IobWF4Qnl0ZXNPbkRpc2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgJiYgIVNlbmRlci5PU19QUk9WSURFU19GSUxFX1BST1RFQ1RJT04pIHtcclxuICAgICAgICAgICAgdGhpcy5fZW5hYmxlRGlza1JldHJ5TW9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBMb2dnaW5nLndhcm4oU2VuZGVyLlRBRywgXCJJZ25vcmluZyByZXF1ZXN0IHRvIGVuYWJsZSBkaXNrIHJldHJ5IG1vZGUuIFN1ZmZpY2llbnQgZmlsZSBwcm90ZWN0aW9uIGNhcGFiaWxpdGllcyB3ZXJlIG5vdCBkZXRlY3RlZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNlbmRlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYXlsb2FkLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGVuZHBvaW50VXJsID0gdGhpcy5fY29uZmlnLmVuZHBvaW50VXJsO1xyXG4gICAgICAgIC8vIHRvZG86IGludmVzdGlnYXRlIHNwZWNpZnlpbmcgYW4gYWdlbnQgaGVyZTogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9jbGFzc19odHRwX2FnZW50XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2UsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC1qc29uLXN0cmVhbVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHpsaWIuZ3ppcChwYXlsb2FkLCBmdW5jdGlvbiAoZXJyLCBidWZmZXIpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGFUb1NlbmQgPSBidWZmZXI7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIExvZ2dpbmcud2FybihlcnIpO1xyXG4gICAgICAgICAgICAgICAgZGF0YVRvU2VuZCA9IHBheWxvYWQ7IC8vIHNvbWV0aGluZyB3ZW50IHdyb25nIHNvIHNlbmQgd2l0aG91dCBnemlwXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnNbXCJDb250ZW50LUxlbmd0aFwiXSA9IHBheWxvYWQubGVuZ3RoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnNbXCJDb250ZW50LUVuY29kaW5nXCJdID0gXCJnemlwXCI7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnNbXCJDb250ZW50LUxlbmd0aFwiXSA9IGJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTG9nZ2luZy5pbmZvKFNlbmRlci5UQUcsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhpcyByZXF1ZXN0IGlzIG5vdCBjYXB0dXJlZCBieSBhdXRvLWNvbGxlY3Rpb24uXHJcbiAgICAgICAgICAgIG9wdGlvbnNbQXV0b0NvbGxlY3RIdHRwRGVwZW5kZW5jaWVzLmRpc2FibGVDb2xsZWN0aW9uUmVxdWVzdE9wdGlvbl0gPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdENhbGxiYWNrID0gZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICAgICAgICAgICAgcmVzLnNldEVuY29kaW5nKFwidXRmLThcIik7XHJcbiAgICAgICAgICAgICAgICAvL3JldHVybnMgZW1wdHkgaWYgdGhlIGRhdGEgaXMgYWNjZXB0ZWRcclxuICAgICAgICAgICAgICAgIHZhciByZXNwb25zZVN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXMub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VTdHJpbmcgKz0gZGF0YTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzLm9uKFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbnVtQ29uc2VjdXRpdmVGYWlsdXJlcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2luZy5pbmZvKFNlbmRlci5UQUcsIHJlc3BvbnNlU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLl9vblN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25TdWNjZXNzKHJlc3BvbnNlU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9lbmFibGVEaXNrUmV0cnlNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0byBzZW5kIGFueSBjYWNoZWQgZXZlbnRzIGlmIHRoZSB1c2VyIGlzIGJhY2sgb25saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9zZW5kRmlyc3RGaWxlT25EaXNrKCk7IH0sIF90aGlzLl9yZXNlbmRJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSB0byBkaXNrIGluIGNhc2Ugb2YgYnVyc3QgdGhyb3R0bGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcy5zdGF0dXNDb2RlID09PSA0MDggfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID09PSA0MjkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID09PSA0MzkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID09PSA1MDAgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID09PSA1MDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IERvIG5vdCBzdXBwb3J0IHBhcnRpYWwgc3VjY2VzcyAoMjA2KSB1bnRpbCBfc2VuZEZpcnN0RmlsZU9uRGlzayBjaGVja3MgcGF5bG9hZCBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdG9yZVRvRGlzayhwYXlsb2FkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgcmVxID0gVXRpbC5tYWtlUmVxdWVzdChfdGhpcy5fY29uZmlnLCBlbmRwb2ludFVybCwgb3B0aW9ucywgcmVxdWVzdENhbGxiYWNrKTtcclxuICAgICAgICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0b2RvOiBoYW5kbGUgZXJyb3IgY29kZXMgYmV0dGVyIChncm91cCB0byByZWNvdmVyYWJsZS9ub24tcmVjb3ZlcmFibGUgYW5kIHBlcnNpc3QpXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fbnVtQ29uc2VjdXRpdmVGYWlsdXJlcysrO1xyXG4gICAgICAgICAgICAgICAgLy8gT25seSB1c2Ugd2FybiBsZXZlbCBpZiByZXRyaWVzIGFyZSBkaXNhYmxlZCBvciB3ZSd2ZSBoYWQgc29tZSBudW1iZXIgb2YgY29uc2VjdXRpdmUgZmFpbHVyZXMgc2VuZGluZyBkYXRhXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2FybiBsZXZlbCBpcyBwcmludGVkIGluIHRoZSBjb25zb2xlIGJ5IGRlZmF1bHQsIGFuZCB3ZSBkb24ndCB3YW50IHRvIGJlIG5vaXN5IGZvciB0cmFuc2llbnQgYW5kIHNlbGYtcmVjb3ZlcmluZyBlcnJvcnNcclxuICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIGluZm9ybWluZyBvbiBlYWNoIGZhaWx1cmUgaWYgdmVyYm9zZSBsb2dnaW5nIGlzIGJlaW5nIHVzZWRcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX2VuYWJsZURpc2tSZXRyeU1vZGUgfHwgX3RoaXMuX251bUNvbnNlY3V0aXZlRmFpbHVyZXMgPiAwICYmIF90aGlzLl9udW1Db25zZWN1dGl2ZUZhaWx1cmVzICUgU2VuZGVyLk1BWF9DT05ORUNUSU9OX0ZBSUxVUkVTX0JFRk9SRV9XQVJOID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGljZSA9IFwiSW5nZXN0aW9uIGVuZHBvaW50IGNvdWxkIG5vdCBiZSByZWFjaGVkLiBUaGlzIGJhdGNoIG9mIHRlbGVtZXRyeSBpdGVtcyBoYXMgYmVlbiBsb3N0LiBVc2UgRGlzayBSZXRyeSBDYWNoaW5nIHRvIGVuYWJsZSByZXNlbmRpbmcgb2YgZmFpbGVkIHRlbGVtZXRyeS4gRXJyb3I6XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9lbmFibGVEaXNrUmV0cnlNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGljZSA9IFwiSW5nZXN0aW9uIGVuZHBvaW50IGNvdWxkIG5vdCBiZSByZWFjaGVkIFwiICsgX3RoaXMuX251bUNvbnNlY3V0aXZlRmFpbHVyZXMgKyBcIiBjb25zZWN1dGl2ZSB0aW1lcy4gVGhlcmUgbWF5IGJlIHJlc3VsdGluZyB0ZWxlbWV0cnkgbG9zcy4gTW9zdCByZWNlbnQgZXJyb3I6XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dpbmcud2FybihTZW5kZXIuVEFHLCBub3RpY2UsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBub3RpY2UgPSBcIlRyYW5zaWVudCBmYWlsdXJlIHRvIHJlYWNoIGluZ2VzdGlvbiBlbmRwb2ludC4gVGhpcyBiYXRjaCBvZiB0ZWxlbWV0cnkgaXRlbXMgd2lsbCBiZSByZXRyaWVkLiBFcnJvcjpcIjtcclxuICAgICAgICAgICAgICAgICAgICBMb2dnaW5nLmluZm8oU2VuZGVyLlRBRywgbm90aWNlLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fb25FcnJvckhlbHBlcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJlcnJvciBzZW5kaW5nIHRlbGVtZXRyeVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiAodHlwZW9mIGVycm9yLnRvU3RyaW5nID09PSBcImZ1bmN0aW9uXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2VuYWJsZURpc2tSZXRyeU1vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmVUb0Rpc2socGF5bG9hZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXEud3JpdGUoZGF0YVRvU2VuZCk7XHJcbiAgICAgICAgICAgIHJlcS5lbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZW5kZXIucHJvdG90eXBlLnNhdmVPbkNyYXNoID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcclxuICAgICAgICBpZiAodGhpcy5fZW5hYmxlRGlza1JldHJ5TW9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdG9yZVRvRGlza1N5bmMocGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNlbmRlci5wcm90b3R5cGUuX3J1bklDQUNMUyA9IGZ1bmN0aW9uIChhcmdzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBhY2xQcm9jID0gY2hpbGRfcHJvY2Vzcy5zcGF3bihTZW5kZXIuSUNBQ0xTX1BBVEgsIGFyZ3MsIHsgd2luZG93c0hpZGU6IHRydWUgfSk7XHJcbiAgICAgICAgYWNsUHJvYy5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBjYWxsYmFjayhlKTsgfSk7XHJcbiAgICAgICAgYWNsUHJvYy5vbihcImNsb3NlXCIsIGZ1bmN0aW9uIChjb2RlLCBzaWduYWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNvZGUgPT09IDAgPyBudWxsIDogbmV3IEVycm9yKFwiU2V0dGluZyBBQ0wgcmVzdHJpY3Rpb25zIGRpZCBub3Qgc3VjY2VlZCAoSUNBQ0xTIHJldHVybmVkIGNvZGUgXCIgKyBjb2RlICsgXCIpXCIpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZW5kZXIucHJvdG90eXBlLl9ydW5JQ0FDTFNTeW5jID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICAvLyBTb21lIHZlcnkgb2xkIHZlcnNpb25zIG9mIE5vZGUgKDwgMC4xMSkgZG9uJ3QgaGF2ZSB0aGlzXHJcbiAgICAgICAgaWYgKGNoaWxkX3Byb2Nlc3Muc3Bhd25TeW5jKSB7XHJcbiAgICAgICAgICAgIHZhciBhY2xQcm9jID0gY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoU2VuZGVyLklDQUNMU19QQVRILCBhcmdzLCB7IHdpbmRvd3NIaWRlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICBpZiAoYWNsUHJvYy5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgYWNsUHJvYy5lcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhY2xQcm9jLnN0YXR1cyAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0dGluZyBBQ0wgcmVzdHJpY3Rpb25zIGRpZCBub3Qgc3VjY2VlZCAoSUNBQ0xTIHJldHVybmVkIGNvZGUgXCIgKyBhY2xQcm9jLnN0YXR1cyArIFwiKVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHN5bmNocm9ub3VzbHkgY2FsbCBJQ0FDTFMgdW5kZXIgY3VycmVudCB2ZXJzaW9uIG9mIE5vZGUuanNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNlbmRlci5wcm90b3R5cGUuX2dldEFDTElkZW50aXR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKFNlbmRlci5BQ0xfSURFTlRJVFkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIFNlbmRlci5BQ0xfSURFTlRJVFkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcHNQcm9jID0gY2hpbGRfcHJvY2Vzcy5zcGF3bihTZW5kZXIuUE9XRVJTSEVMTF9QQVRILCBbXCItQ29tbWFuZFwiLCBcIltTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKS5OYW1lXCJdLCB7XHJcbiAgICAgICAgICAgIHdpbmRvd3NIaWRlOiB0cnVlLFxyXG4gICAgICAgICAgICBzdGRpbzogWydpZ25vcmUnLCAncGlwZScsICdwaXBlJ10gLy8gTmVlZGVkIHRvIHByZXZlbnQgaGFuZ2luZyBvbiBXaW4gN1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBkYXRhID0gXCJcIjtcclxuICAgICAgICBwc1Byb2Muc3Rkb3V0Lm9uKFwiZGF0YVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZGF0YSArPSBkOyB9KTtcclxuICAgICAgICBwc1Byb2Mub24oXCJlcnJvclwiLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gY2FsbGJhY2soZSwgbnVsbCk7IH0pO1xyXG4gICAgICAgIHBzUHJvYy5vbihcImNsb3NlXCIsIGZ1bmN0aW9uIChjb2RlLCBzaWduYWwpIHtcclxuICAgICAgICAgICAgU2VuZGVyLkFDTF9JREVOVElUWSA9IGRhdGEgJiYgZGF0YS50cmltKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjb2RlID09PSAwID8gbnVsbCA6IG5ldyBFcnJvcihcIkdldHRpbmcgQUNMIGlkZW50aXR5IGRpZCBub3Qgc3VjY2VlZCAoUFMgcmV0dXJuZWQgY29kZSBcIiArIGNvZGUgKyBcIilcIiksIFNlbmRlci5BQ0xfSURFTlRJVFkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNlbmRlci5wcm90b3R5cGUuX2dldEFDTElkZW50aXR5U3luYyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoU2VuZGVyLkFDTF9JREVOVElUWSkge1xyXG4gICAgICAgICAgICByZXR1cm4gU2VuZGVyLkFDTF9JREVOVElUWTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU29tZSB2ZXJ5IG9sZCB2ZXJzaW9ucyBvZiBOb2RlICg8IDAuMTEpIGRvbid0IGhhdmUgdGhpc1xyXG4gICAgICAgIGlmIChjaGlsZF9wcm9jZXNzLnNwYXduU3luYykge1xyXG4gICAgICAgICAgICB2YXIgcHNQcm9jID0gY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoU2VuZGVyLlBPV0VSU0hFTExfUEFUSCwgW1wiLUNvbW1hbmRcIiwgXCJbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkuTmFtZVwiXSwge1xyXG4gICAgICAgICAgICAgICAgd2luZG93c0hpZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzdGRpbzogWydpZ25vcmUnLCAncGlwZScsICdwaXBlJ10gLy8gTmVlZGVkIHRvIHByZXZlbnQgaGFuZ2luZyBvbiBXaW4gN1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHBzUHJvYy5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgcHNQcm9jLmVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBzUHJvYy5zdGF0dXMgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdldHRpbmcgQUNMIGlkZW50aXR5IGRpZCBub3Qgc3VjY2VlZCAoUFMgcmV0dXJuZWQgY29kZSBcIiArIHBzUHJvYy5zdGF0dXMgKyBcIilcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU2VuZGVyLkFDTF9JREVOVElUWSA9IHBzUHJvYy5zdGRvdXQgJiYgcHNQcm9jLnN0ZG91dC50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICAgICAgcmV0dXJuIFNlbmRlci5BQ0xfSURFTlRJVFk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3Qgc3luY2hyb25vdXNseSBnZXQgQUNMIGlkZW50aXR5IHVuZGVyIGN1cnJlbnQgdmVyc2lvbiBvZiBOb2RlLmpzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTZW5kZXIucHJvdG90eXBlLl9nZXRBQ0xBcmd1bWVudHMgPSBmdW5jdGlvbiAoZGlyZWN0b3J5LCBpZGVudGl0eSkge1xyXG4gICAgICAgIHJldHVybiBbZGlyZWN0b3J5LFxyXG4gICAgICAgICAgICBcIi9ncmFudFwiLCBcIipTLTEtNS0zMi01NDQ6KE9JKShDSSlGXCIsXHJcbiAgICAgICAgICAgIFwiL2dyYW50XCIsIGlkZW50aXR5ICsgXCI6KE9JKShDSSlGXCIsXHJcbiAgICAgICAgICAgIFwiL2luaGVyaXRhbmNlOnJcIl07IC8vIFJlbW92ZSBhbGwgaW5oZXJpdGVkIHBlcm1pc3Npb25zXHJcbiAgICB9O1xyXG4gICAgU2VuZGVyLnByb3RvdHlwZS5fYXBwbHlBQ0xSdWxlcyA9IGZ1bmN0aW9uIChkaXJlY3RvcnksIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIVNlbmRlci5VU0VfSUNBQ0xTKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRm9yIHBlcmZvcm1hbmNlLCBvbmx5IHJ1biBBQ0wgcnVsZXMgaWYgd2UgaGF2ZW4ndCBhbHJlYWR5IGR1cmluZyB0aGlzIHNlc3Npb25cclxuICAgICAgICBpZiAoU2VuZGVyLkFDTEVEX0RJUkVDVE9SSUVTW2RpcmVjdG9yeV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBBdm9pZCBtdWx0aXBsZSBjYWxscyByYWNlIGNvbmRpdGlvbiBieSBzZXR0aW5nIEFDTEVEX0RJUkVDVE9SSUVTIHRvIGZhbHNlIGZvciB0aGlzIGRpcmVjdG9yeSBpbW1lZGlhdGVseVxyXG4gICAgICAgICAgICAvLyBJZiBiYXRjaGVzIGFyZSBiZWluZyBmYWlsZWQgZmFzdGVyIHRoYW4gdGhlIHByb2Nlc3NlcyBzcGF3bmVkIGJlbG93IHJldHVybiwgc29tZSBkYXRhIHdvbid0IGJlIHN0b3JlZCB0byBkaXNrXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYmV0dGVyIHRoYW4gdGhlIGFsdGVybmF0aXZlIG9mIHBvdGVudGlhbGx5IGluZmluaXRlbHkgc3Bhd25lZCBwcm9jZXNzZXNcclxuICAgICAgICAgICAgU2VuZGVyLkFDTEVEX0RJUkVDVE9SSUVTW2RpcmVjdG9yeV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gUmVzdHJpY3QgdGhpcyBkaXJlY3RvcnkgdG8gb25seSBjdXJyZW50IHVzZXIgYW5kIGFkbWluaXN0cmF0b3IgYWNjZXNzXHJcbiAgICAgICAgICAgIHRoaXMuX2dldEFDTElkZW50aXR5KGZ1bmN0aW9uIChlcnIsIGlkZW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2VuZGVyLkFDTEVEX0RJUkVDVE9SSUVTW2RpcmVjdG9yeV0gPSBmYWxzZTsgLy8gZmFsc2UgaXMgdXNlZCB0byBjYWNoZSBmYWlsZWQgKHZzIHVuZGVmaW5lZCB3aGljaCBpcyBcIm5vdCB5ZXQgdHJpZWRcIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ydW5JQ0FDTFMoX3RoaXMuX2dldEFDTEFyZ3VtZW50cyhkaXJlY3RvcnksIGlkZW50aXR5KSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5kZXIuQUNMRURfRElSRUNUT1JJRVNbZGlyZWN0b3J5XSA9ICFlcnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhTZW5kZXIuQUNMRURfRElSRUNUT1JJRVNbZGlyZWN0b3J5XSA/IG51bGwgOlxyXG4gICAgICAgICAgICAgICAgbmV3IEVycm9yKFwiU2V0dGluZyBBQ0wgcmVzdHJpY3Rpb25zIGRpZCBub3Qgc3VjY2VlZCAoY2FjaGVkIHJlc3VsdClcIikpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTZW5kZXIucHJvdG90eXBlLl9hcHBseUFDTFJ1bGVzU3luYyA9IGZ1bmN0aW9uIChkaXJlY3RvcnkpIHtcclxuICAgICAgICBpZiAoU2VuZGVyLlVTRV9JQ0FDTFMpIHtcclxuICAgICAgICAgICAgLy8gRm9yIHBlcmZvcm1hbmNlLCBvbmx5IHJ1biBBQ0wgcnVsZXMgaWYgd2UgaGF2ZW4ndCBhbHJlYWR5IGR1cmluZyB0aGlzIHNlc3Npb25cclxuICAgICAgICAgICAgaWYgKFNlbmRlci5BQ0xFRF9ESVJFQ1RPUklFU1tkaXJlY3RvcnldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3J1bklDQUNMU1N5bmModGhpcy5fZ2V0QUNMQXJndW1lbnRzKGRpcmVjdG9yeSwgdGhpcy5fZ2V0QUNMSWRlbnRpdHlTeW5jKCkpKTtcclxuICAgICAgICAgICAgICAgIFNlbmRlci5BQ0xFRF9ESVJFQ1RPUklFU1tkaXJlY3RvcnldID0gdHJ1ZTsgLy8gSWYgd2UgZ2V0IGhlcmUsIGl0IHN1Y2NlZWRlZC4gX3J1bklBQ0xTU3luYyB3aWxsIHRocm93IG9uIGZhaWx1cmVzXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIVNlbmRlci5BQ0xFRF9ESVJFQ1RPUklFU1tkaXJlY3RvcnldKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZXR0aW5nIEFDTCByZXN0cmljdGlvbnMgZGlkIG5vdCBzdWNjZWVkIChjYWNoZWQgcmVzdWx0KVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTZW5kZXIucHJvdG90eXBlLl9jb25maXJtRGlyRXhpc3RzID0gZnVuY3Rpb24gKGRpcmVjdG9yeSwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGZzLmxzdGF0KGRpcmVjdG9yeSwgZnVuY3Rpb24gKGVyciwgc3RhdHMpIHtcclxuICAgICAgICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VOT0VOVCcpIHtcclxuICAgICAgICAgICAgICAgIGZzLm1rZGlyKGRpcmVjdG9yeSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09ICdFRVhJU1QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYXBwbHlBQ0xSdWxlcyhkaXJlY3RvcnksIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghZXJyICYmIHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9hcHBseUFDTFJ1bGVzKGRpcmVjdG9yeSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyIHx8IG5ldyBFcnJvcihcIlBhdGggZXhpc3RlZCBidXQgd2FzIG5vdCBhIGRpcmVjdG9yeVwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbXB1dGVzIHRoZSBzaXplIChpbiBieXRlcykgb2YgYWxsIGZpbGVzIGluIGEgZGlyZWN0b3J5IGF0IHRoZSByb290IGxldmVsLiBBc3luY2hyb25vdXNseS5cclxuICAgICAqL1xyXG4gICAgU2VuZGVyLnByb3RvdHlwZS5fZ2V0U2hhbGxvd0RpcmVjdG9yeVNpemUgPSBmdW5jdGlvbiAoZGlyZWN0b3J5LCBjYWxsYmFjaykge1xyXG4gICAgICAgIC8vIEdldCB0aGUgZGlyZWN0b3J5IGxpc3RpbmdcclxuICAgICAgICBmcy5yZWFkZGlyKGRpcmVjdG9yeSwgZnVuY3Rpb24gKGVyciwgZmlsZXMpIHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgLTEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBlcnJvciA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciB0b3RhbFNpemUgPSAwO1xyXG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBRdWVyeSBhbGwgZmlsZSBzaXplc1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmcy5zdGF0KHBhdGguam9pbihkaXJlY3RvcnksIGZpbGVzW2ldKSwgZnVuY3Rpb24gKGVyciwgZmlsZVN0YXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVTdGF0cy5pc0ZpbGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxTaXplICs9IGZpbGVTdGF0cy5zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gZmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpZCB3ZSBnZXQgYW4gZXJyb3I/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIC0xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCB0b3RhbFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbXB1dGVzIHRoZSBzaXplIChpbiBieXRlcykgb2YgYWxsIGZpbGVzIGluIGEgZGlyZWN0b3J5IGF0IHRoZSByb290IGxldmVsLiBTeW5jaHJvbm91c2x5LlxyXG4gICAgICovXHJcbiAgICBTZW5kZXIucHJvdG90eXBlLl9nZXRTaGFsbG93RGlyZWN0b3J5U2l6ZVN5bmMgPSBmdW5jdGlvbiAoZGlyZWN0b3J5KSB7XHJcbiAgICAgICAgdmFyIGZpbGVzID0gZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5KTtcclxuICAgICAgICB2YXIgdG90YWxTaXplID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRvdGFsU2l6ZSArPSBmcy5zdGF0U3luYyhwYXRoLmpvaW4oZGlyZWN0b3J5LCBmaWxlc1tpXSkpLnNpemU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0b3RhbFNpemU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZXMgdGhlIHBheWxvYWQgYXMgYSBqc29uIGZpbGUgb24gZGlzayBpbiB0aGUgdGVtcCBkaXJlY3RvcnlcclxuICAgICAqL1xyXG4gICAgU2VuZGVyLnByb3RvdHlwZS5fc3RvcmVUb0Rpc2sgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gdG1wZGlyIGlzIC90bXAgZm9yICpuaXggYW5kIFVTRVJESVIvQXBwRGF0YS9Mb2NhbC9UZW1wIGZvciBXaW5kb3dzXHJcbiAgICAgICAgdmFyIGRpcmVjdG9yeSA9IHBhdGguam9pbihvcy50bXBkaXIoKSwgU2VuZGVyLlRFTVBESVJfUFJFRklYICsgdGhpcy5fY29uZmlnLmluc3RydW1lbnRhdGlvbktleSk7XHJcbiAgICAgICAgLy8gVGhpcyB3aWxsIGNyZWF0ZSB0aGUgZGlyIGlmIGl0IGRvZXMgbm90IGV4aXN0XHJcbiAgICAgICAgLy8gRGVmYXVsdCBwZXJtaXNzaW9ucyBvbiAqbml4IGFyZSBkaXJlY3RvcnkgbGlzdGluZyBmcm9tIG90aGVyIHVzZXJzIGJ1dCBubyBmaWxlIGNyZWF0aW9uc1xyXG4gICAgICAgIExvZ2dpbmcuaW5mbyhTZW5kZXIuVEFHLCBcIkNoZWNraW5nIGV4aXN0YW5jZSBvZiBkYXRhIHN0b3JhZ2UgZGlyZWN0b3J5OiBcIiArIGRpcmVjdG9yeSk7XHJcbiAgICAgICAgdGhpcy5fY29uZmlybURpckV4aXN0cyhkaXJlY3RvcnksIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIExvZ2dpbmcud2FybihTZW5kZXIuVEFHLCBcIkVycm9yIHdoaWxlIGNoZWNraW5nL2NyZWF0aW5nIGRpcmVjdG9yeTogXCIgKyAoZXJyb3IgJiYgZXJyb3IubWVzc2FnZSkpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX29uRXJyb3JIZWxwZXIoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9nZXRTaGFsbG93RGlyZWN0b3J5U2l6ZShkaXJlY3RvcnksIGZ1bmN0aW9uIChlcnIsIHNpemUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIgfHwgc2l6ZSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dnaW5nLndhcm4oU2VuZGVyLlRBRywgXCJFcnJvciB3aGlsZSBjaGVja2luZyBkaXJlY3Rvcnkgc2l6ZTogXCIgKyAoZXJyICYmIGVyci5tZXNzYWdlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uRXJyb3JIZWxwZXIoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaXplID4gX3RoaXMuX21heEJ5dGVzT25EaXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2luZy53YXJuKFNlbmRlci5UQUcsIFwiTm90IHNhdmluZyBkYXRhIGR1ZSB0byBtYXggc2l6ZSBsaW1pdCBiZWluZyBtZXQuIERpcmVjdG9yeSBzaXplIGluIGJ5dGVzIGlzOiBcIiArIHNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY3JlYXRlIGZpbGUgLSBmaWxlIG5hbWUgZm9yIG5vdyBpcyB0aGUgdGltZXN0YW1wLCBhIGJldHRlciBhcHByb2FjaCB3b3VsZCBiZSBhIFVVSUQgYnV0IHRoYXRcclxuICAgICAgICAgICAgICAgIC8vd291bGQgcmVxdWlyZSBhbiBleHRlcm5hbCBkZXBlbmRlbmN5XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIFwiLmFpLmpzb25cIjtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlRnVsbFBhdGggPSBwYXRoLmpvaW4oZGlyZWN0b3J5LCBmaWxlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBNb2RlIDYwMCBpcyB3L3IgZm9yIGNyZWF0b3IgYW5kIG5vIHJlYWQgYWNjZXNzIGZvciBvdGhlcnMgKG9ubHkgYXBwbGllcyBvbiAqbml4KVxyXG4gICAgICAgICAgICAgICAgLy8gRm9yIFdpbmRvd3MsIEFDTCBydWxlcyBhcmUgYXBwbGllZCB0byB0aGUgZW50aXJlIGRpcmVjdG9yeSAoc2VlIGxvZ2ljIGluIF9jb25maXJtRGlyRXhpc3RzIGFuZCBfYXBwbHlBQ0xSdWxlcylcclxuICAgICAgICAgICAgICAgIExvZ2dpbmcuaW5mbyhTZW5kZXIuVEFHLCBcInNhdmluZyBkYXRhIHRvIGRpc2sgYXQ6IFwiICsgZmlsZUZ1bGxQYXRoKTtcclxuICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZShmaWxlRnVsbFBhdGgsIHBheWxvYWQsIHsgbW9kZTogMzg0IH0sIGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gX3RoaXMuX29uRXJyb3JIZWxwZXIoZXJyb3IpOyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZXMgdGhlIHBheWxvYWQgYXMgYSBqc29uIGZpbGUgb24gZGlzayB1c2luZyBzeW5jIGZpbGUgb3BlcmF0aW9uc1xyXG4gICAgICogdGhpcyBpcyB1c2VkIHdoZW4gc3RvcmluZyBkYXRhIGJlZm9yZSBjcmFzaGVzXHJcbiAgICAgKi9cclxuICAgIFNlbmRlci5wcm90b3R5cGUuX3N0b3JlVG9EaXNrU3luYyA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XHJcbiAgICAgICAgLy8gdG1wZGlyIGlzIC90bXAgZm9yICpuaXggYW5kIFVTRVJESVIvQXBwRGF0YS9Mb2NhbC9UZW1wIGZvciBXaW5kb3dzXHJcbiAgICAgICAgdmFyIGRpcmVjdG9yeSA9IHBhdGguam9pbihvcy50bXBkaXIoKSwgU2VuZGVyLlRFTVBESVJfUFJFRklYICsgdGhpcy5fY29uZmlnLmluc3RydW1lbnRhdGlvbktleSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgTG9nZ2luZy5pbmZvKFNlbmRlci5UQUcsIFwiQ2hlY2tpbmcgZXhpc3RhbmNlIG9mIGRhdGEgc3RvcmFnZSBkaXJlY3Rvcnk6IFwiICsgZGlyZWN0b3J5KTtcclxuICAgICAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcmVjdG9yeSkpIHtcclxuICAgICAgICAgICAgICAgIGZzLm1rZGlyU3luYyhkaXJlY3RvcnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBwZXJtaXNzaW9ucyBhcmUgdmFsaWRcclxuICAgICAgICAgICAgdGhpcy5fYXBwbHlBQ0xSdWxlc1N5bmMoZGlyZWN0b3J5KTtcclxuICAgICAgICAgICAgdmFyIGRpclNpemUgPSB0aGlzLl9nZXRTaGFsbG93RGlyZWN0b3J5U2l6ZVN5bmMoZGlyZWN0b3J5KTtcclxuICAgICAgICAgICAgaWYgKGRpclNpemUgPiB0aGlzLl9tYXhCeXRlc09uRGlzaykge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2luZy5pbmZvKFNlbmRlci5UQUcsIFwiTm90IHNhdmluZyBkYXRhIGR1ZSB0byBtYXggc2l6ZSBsaW1pdCBiZWluZyBtZXQuIERpcmVjdG9yeSBzaXplIGluIGJ5dGVzIGlzOiBcIiArIGRpclNpemUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vY3JlYXRlIGZpbGUgLSBmaWxlIG5hbWUgZm9yIG5vdyBpcyB0aGUgdGltZXN0YW1wLCBhIGJldHRlciBhcHByb2FjaCB3b3VsZCBiZSBhIFVVSUQgYnV0IHRoYXRcclxuICAgICAgICAgICAgLy93b3VsZCByZXF1aXJlIGFuIGV4dGVybmFsIGRlcGVuZGVuY3lcclxuICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBcIi5haS5qc29uXCI7XHJcbiAgICAgICAgICAgIHZhciBmaWxlRnVsbFBhdGggPSBwYXRoLmpvaW4oZGlyZWN0b3J5LCBmaWxlTmFtZSk7XHJcbiAgICAgICAgICAgIC8vIE1vZGUgNjAwIGlzIHcvciBmb3IgY3JlYXRvciBhbmQgbm8gYWNjZXNzIGZvciBhbnlvbmUgZWxzZSAob25seSBhcHBsaWVzIG9uICpuaXgpXHJcbiAgICAgICAgICAgIExvZ2dpbmcuaW5mbyhTZW5kZXIuVEFHLCBcInNhdmluZyBkYXRhIGJlZm9yZSBjcmFzaCB0byBkaXNrIGF0OiBcIiArIGZpbGVGdWxsUGF0aCk7XHJcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZUZ1bGxQYXRoLCBwYXlsb2FkLCB7IG1vZGU6IDM4NCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIExvZ2dpbmcud2FybihTZW5kZXIuVEFHLCBcIkVycm9yIHdoaWxlIHNhdmluZyBkYXRhIHRvIGRpc2s6IFwiICsgKGVycm9yICYmIGVycm9yLm1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgdGhpcy5fb25FcnJvckhlbHBlcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgZm9yIHRlbXAgdGVsZW1ldHJ5IGZpbGVzXHJcbiAgICAgKiByZWFkcyB0aGUgZmlyc3QgZmlsZSBpZiBleGlzdCwgZGVsZXRlcyBpdCBhbmQgdHJpZXMgdG8gc2VuZCBpdHMgbG9hZFxyXG4gICAgICovXHJcbiAgICBTZW5kZXIucHJvdG90eXBlLl9zZW5kRmlyc3RGaWxlT25EaXNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHRlbXBEaXIgPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksIFNlbmRlci5URU1QRElSX1BSRUZJWCArIHRoaXMuX2NvbmZpZy5pbnN0cnVtZW50YXRpb25LZXkpO1xyXG4gICAgICAgIGZzLmV4aXN0cyh0ZW1wRGlyLCBmdW5jdGlvbiAoZXhpc3RzKSB7XHJcbiAgICAgICAgICAgIGlmIChleGlzdHMpIHtcclxuICAgICAgICAgICAgICAgIGZzLnJlYWRkaXIodGVtcERpciwgZnVuY3Rpb24gKGVycm9yLCBmaWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBmaWxlcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHBhdGguYmFzZW5hbWUoZikuaW5kZXhPZihcIi5haS5qc29uXCIpID4gLTE7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0RmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXRoID0gcGF0aC5qb2luKHRlbXBEaXIsIGZpcnN0RmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZShmaWxlUGF0aCwgZnVuY3Rpb24gKGVycm9yLCBwYXlsb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgdGhlIGZpbGUgZmlyc3QgdG8gcHJldmVudCBkb3VibGUgc2VuZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcy51bmxpbmsoZmlsZVBhdGgsIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbmQocGF5bG9hZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25FcnJvckhlbHBlcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uRXJyb3JIZWxwZXIoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25FcnJvckhlbHBlcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZW5kZXIucHJvdG90eXBlLl9vbkVycm9ySGVscGVyID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vbkVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5fb25FcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNlbmRlci5UQUcgPSBcIlNlbmRlclwiO1xyXG4gICAgU2VuZGVyLklDQUNMU19QQVRIID0gcHJvY2Vzcy5lbnYuc3lzdGVtZHJpdmUgKyBcIi93aW5kb3dzL3N5c3RlbTMyL2ljYWNscy5leGVcIjtcclxuICAgIFNlbmRlci5QT1dFUlNIRUxMX1BBVEggPSBwcm9jZXNzLmVudi5zeXN0ZW1kcml2ZSArIFwiL3dpbmRvd3Mvc3lzdGVtMzIvd2luZG93c3Bvd2Vyc2hlbGwvdjEuMC9wb3dlcnNoZWxsLmV4ZVwiO1xyXG4gICAgU2VuZGVyLkFDTEVEX0RJUkVDVE9SSUVTID0ge307XHJcbiAgICBTZW5kZXIuQUNMX0lERU5USVRZID0gbnVsbDtcclxuICAgIC8vIHRoZSBhbW91bnQgb2YgdGltZSB0aGUgU0RLIHdpbGwgd2FpdCBiZXR3ZWVuIHJlc2VuZGluZyBjYWNoZWQgZGF0YSwgdGhpcyBidWZmZXIgaXMgdG8gYXZvaWQgYW55IHRocm90ZWxsaW5nIGZyb20gdGhlIHNlcnZpY2Ugc2lkZVxyXG4gICAgU2VuZGVyLldBSVRfQkVUV0VFTl9SRVNFTkQgPSA2MCAqIDEwMDA7XHJcbiAgICBTZW5kZXIuTUFYX0JZVEVTX09OX0RJU0sgPSA1MCAqIDEwMDAgKiAxMDAwO1xyXG4gICAgU2VuZGVyLk1BWF9DT05ORUNUSU9OX0ZBSUxVUkVTX0JFRk9SRV9XQVJOID0gNTtcclxuICAgIFNlbmRlci5URU1QRElSX1BSRUZJWCA9IFwiYXBwSW5zaWdodHMtbm9kZVwiO1xyXG4gICAgU2VuZGVyLk9TX1BST1ZJREVTX0ZJTEVfUFJPVEVDVElPTiA9IGZhbHNlO1xyXG4gICAgU2VuZGVyLlVTRV9JQ0FDTFMgPSBvcy50eXBlKCkgPT09IFwiV2luZG93c19OVFwiO1xyXG4gICAgcmV0dXJuIFNlbmRlcjtcclxufSgpKTtcclxubW9kdWxlLmV4cG9ydHMgPSBTZW5kZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlbmRlci5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/Sender.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/TelemetryClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/TelemetryClient.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar url = __webpack_require__(/*! url */ \"url\");\r\nvar Config = __webpack_require__(/*! ./Config */ \"./node_modules/applicationinsights/out/Library/Config.js\");\r\nvar Context = __webpack_require__(/*! ./Context */ \"./node_modules/applicationinsights/out/Library/Context.js\");\r\nvar Contracts = __webpack_require__(/*! ../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\nvar Channel = __webpack_require__(/*! ./Channel */ \"./node_modules/applicationinsights/out/Library/Channel.js\");\r\nvar TelemetryProcessors = __webpack_require__(/*! ../TelemetryProcessors */ \"./node_modules/applicationinsights/out/TelemetryProcessors/index.js\");\r\nvar CorrelationContextManager_1 = __webpack_require__(/*! ../AutoCollection/CorrelationContextManager */ \"./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js\");\r\nvar Sender = __webpack_require__(/*! ./Sender */ \"./node_modules/applicationinsights/out/Library/Sender.js\");\r\nvar Util = __webpack_require__(/*! ./Util */ \"./node_modules/applicationinsights/out/Library/Util.js\");\r\nvar Logging = __webpack_require__(/*! ./Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar EnvelopeFactory = __webpack_require__(/*! ./EnvelopeFactory */ \"./node_modules/applicationinsights/out/Library/EnvelopeFactory.js\");\r\n/**\r\n * Application Insights telemetry client provides interface to track telemetry items, register telemetry initializers and\r\n * and manually trigger immediate sending (flushing)\r\n */\r\nvar TelemetryClient = (function () {\r\n    /**\r\n     * Constructs a new client of the client\r\n     * @param iKey the instrumentation key to use (read from environment variable if not specified)\r\n     */\r\n    function TelemetryClient(iKey) {\r\n        this._telemetryProcessors = [];\r\n        var config = new Config(iKey);\r\n        this.config = config;\r\n        this.context = new Context();\r\n        this.commonProperties = {};\r\n        var sender = new Sender(this.config);\r\n        this.channel = new Channel(function () { return config.disableAppInsights; }, function () { return config.maxBatchSize; }, function () { return config.maxBatchIntervalMs; }, sender);\r\n    }\r\n    /**\r\n     * Log a trace message\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    TelemetryClient.prototype.trackTrace = function (telemetry) {\r\n        this.track(telemetry, Contracts.TelemetryType.Trace);\r\n    };\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.\r\n     * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the\r\n     * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    TelemetryClient.prototype.trackMetric = function (telemetry) {\r\n        this.track(telemetry, Contracts.TelemetryType.Metric);\r\n    };\r\n    /**\r\n     * Log an exception\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    TelemetryClient.prototype.trackException = function (telemetry) {\r\n        if (telemetry && telemetry.exception && !Util.isError(telemetry.exception)) {\r\n            telemetry.exception = new Error(telemetry.exception.toString());\r\n        }\r\n        this.track(telemetry, Contracts.TelemetryType.Exception);\r\n    };\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    TelemetryClient.prototype.trackEvent = function (telemetry) {\r\n        this.track(telemetry, Contracts.TelemetryType.Event);\r\n    };\r\n    /**\r\n     * Log a request. Note that the default client will attempt to collect HTTP requests automatically so only use this for requests\r\n     * that aren't automatically captured or if you've disabled automatic request collection.\r\n     *\r\n     * @param telemetry      Object encapsulating tracking options\r\n     */\r\n    TelemetryClient.prototype.trackRequest = function (telemetry) {\r\n        this.track(telemetry, Contracts.TelemetryType.Request);\r\n    };\r\n    /**\r\n     * Log a dependency. Note that the default client will attempt to collect dependencies automatically so only use this for dependencies\r\n     * that aren't automatically captured or if you've disabled automatic dependency collection.\r\n     *\r\n     * @param telemetry      Object encapsulating tracking option\r\n     * */\r\n    TelemetryClient.prototype.trackDependency = function (telemetry) {\r\n        if (telemetry && !telemetry.target && telemetry.data) {\r\n            // url.parse().host returns null for non-urls,\r\n            // making this essentially a no-op in those cases\r\n            // If this logic is moved, update jsdoc in DependencyTelemetry.target\r\n            telemetry.target = url.parse(telemetry.data).host;\r\n        }\r\n        this.track(telemetry, Contracts.TelemetryType.Dependency);\r\n    };\r\n    /**\r\n     * Immediately send all queued telemetry.\r\n     * @param options Flush options, including indicator whether app is crashing and callback\r\n     */\r\n    TelemetryClient.prototype.flush = function (options) {\r\n        this.channel.triggerSend(options ? !!options.isAppCrashing : false, options ? options.callback : undefined);\r\n    };\r\n    /**\r\n     * Generic track method for all telemetry types\r\n     * @param data the telemetry to send\r\n     * @param telemetryType specify the type of telemetry you are tracking from the list of Contracts.DataTypes\r\n     */\r\n    TelemetryClient.prototype.track = function (telemetry, telemetryType) {\r\n        if (telemetry && Contracts.telemetryTypeToBaseType(telemetryType)) {\r\n            var envelope = EnvelopeFactory.createEnvelope(telemetry, telemetryType, this.commonProperties, this.context, this.config);\r\n            // Set time on the envelope if it was set on the telemetry item\r\n            if (telemetry.time) {\r\n                envelope.time = telemetry.time.toISOString();\r\n            }\r\n            var accepted = this.runTelemetryProcessors(envelope, telemetry.contextObjects);\r\n            // Ideally we would have a central place for \"internal\" telemetry processors and users can configure which ones are in use.\r\n            // This will do for now. Otherwise clearTelemetryProcessors() would be problematic.\r\n            accepted = accepted && TelemetryProcessors.samplingTelemetryProcessor(envelope, { correlationContext: CorrelationContextManager_1.CorrelationContextManager.getCurrentContext() });\r\n            if (accepted) {\r\n                this.channel.send(envelope);\r\n            }\r\n        }\r\n        else {\r\n            Logging.warn(\"track() requires telemetry object and telemetryType to be specified.\");\r\n        }\r\n    };\r\n    /**\r\n     * Adds telemetry processor to the collection. Telemetry processors will be called one by one\r\n     * before telemetry item is pushed for sending and in the order they were added.\r\n     *\r\n     * @param telemetryProcessor function, takes Envelope, and optional context object and returns boolean\r\n     */\r\n    TelemetryClient.prototype.addTelemetryProcessor = function (telemetryProcessor) {\r\n        this._telemetryProcessors.push(telemetryProcessor);\r\n    };\r\n    /*\r\n     * Removes all telemetry processors\r\n     */\r\n    TelemetryClient.prototype.clearTelemetryProcessors = function () {\r\n        this._telemetryProcessors = [];\r\n    };\r\n    TelemetryClient.prototype.runTelemetryProcessors = function (envelope, contextObjects) {\r\n        var accepted = true;\r\n        var telemetryProcessorsCount = this._telemetryProcessors.length;\r\n        if (telemetryProcessorsCount === 0) {\r\n            return accepted;\r\n        }\r\n        contextObjects = contextObjects || {};\r\n        contextObjects['correlationContext'] = CorrelationContextManager_1.CorrelationContextManager.getCurrentContext();\r\n        for (var i = 0; i < telemetryProcessorsCount; ++i) {\r\n            try {\r\n                var processor = this._telemetryProcessors[i];\r\n                if (processor) {\r\n                    if (processor.apply(null, [envelope, contextObjects]) === false) {\r\n                        accepted = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                accepted = true;\r\n                Logging.warn(\"One of telemetry processors failed, telemetry item will be sent.\", error, envelope);\r\n            }\r\n        }\r\n        return accepted;\r\n    };\r\n    return TelemetryClient;\r\n}());\r\nmodule.exports = TelemetryClient;\r\n//# sourceMappingURL=TelemetryClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/TelemetryClient.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/Library/Util.js":
/*!**************************************************************!*\
  !*** ./node_modules/applicationinsights/out/Library/Util.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nvar http = __webpack_require__(/*! http */ \"http\");\r\nvar https = __webpack_require__(/*! https */ \"https\");\r\nvar url = __webpack_require__(/*! url */ \"url\");\r\nvar constants = __webpack_require__(/*! constants */ \"constants\");\r\nvar Logging = __webpack_require__(/*! ./Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\nvar RequestResponseHeaders = __webpack_require__(/*! ./RequestResponseHeaders */ \"./node_modules/applicationinsights/out/Library/RequestResponseHeaders.js\");\r\nvar Util = (function () {\r\n    function Util() {\r\n    }\r\n    /**\r\n     * helper method to access userId and sessionId cookie\r\n     */\r\n    Util.getCookie = function (name, cookie) {\r\n        var value = \"\";\r\n        if (name && name.length && typeof cookie === \"string\") {\r\n            var cookieName = name + \"=\";\r\n            var cookies = cookie.split(\";\");\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = cookies[i];\r\n                cookie = Util.trim(cookie);\r\n                if (cookie && cookie.indexOf(cookieName) === 0) {\r\n                    value = cookie.substring(cookieName.length, cookies[i].length);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n     */\r\n    Util.trim = function (str) {\r\n        if (typeof str === \"string\") {\r\n            return str.replace(/^\\s+|\\s+$/g, \"\");\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    };\r\n    /**\r\n     * Convert an array of int32 to Base64 (no '==' at the end).\r\n     * MSB first.\r\n     */\r\n    Util.int32ArrayToBase64 = function (array) {\r\n        var toChar = function (v, i) {\r\n            return String.fromCharCode((v >> i) & 0xFF);\r\n        };\r\n        var int32AsString = function (v) {\r\n            return toChar(v, 24) + toChar(v, 16) + toChar(v, 8) + toChar(v, 0);\r\n        };\r\n        var x = array.map(int32AsString).join(\"\");\r\n        var b = Buffer.from ? Buffer.from(x, \"binary\") : new Buffer(x, \"binary\");\r\n        var s = b.toString(\"base64\");\r\n        return s.substr(0, s.indexOf(\"=\"));\r\n    };\r\n    /**\r\n     * generate a random 32bit number (-0x80000000..0x7FFFFFFF).\r\n     */\r\n    Util.random32 = function () {\r\n        return (0x100000000 * Math.random()) | 0;\r\n    };\r\n    /**\r\n     * generate a random 32bit number (0x00000000..0xFFFFFFFF).\r\n     */\r\n    Util.randomu32 = function () {\r\n        return Util.random32() + 0x80000000;\r\n    };\r\n    /**\r\n     * generate W3C-compatible trace id\r\n     * https://github.com/w3c/distributed-tracing/blob/master/trace_context/HTTP_HEADER_FORMAT.md#trace-id\r\n     */\r\n    Util.w3cTraceId = function () {\r\n        var hexValues = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\r\n        // rfc4122 version 4 UUID without dashes and with lowercase letters\r\n        var oct = \"\", tmp;\r\n        for (var a = 0; a < 4; a++) {\r\n            tmp = Util.random32();\r\n            oct +=\r\n                hexValues[tmp & 0xF] +\r\n                    hexValues[tmp >> 4 & 0xF] +\r\n                    hexValues[tmp >> 8 & 0xF] +\r\n                    hexValues[tmp >> 12 & 0xF] +\r\n                    hexValues[tmp >> 16 & 0xF] +\r\n                    hexValues[tmp >> 20 & 0xF] +\r\n                    hexValues[tmp >> 24 & 0xF] +\r\n                    hexValues[tmp >> 28 & 0xF];\r\n        }\r\n        // \"Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively\"\r\n        var clockSequenceHi = hexValues[8 + (Math.random() * 4) | 0];\r\n        return oct.substr(0, 8) + oct.substr(9, 4) + \"4\" + oct.substr(13, 3) + clockSequenceHi + oct.substr(16, 3) + oct.substr(19, 12);\r\n    };\r\n    /**\r\n     * Check if an object is of type Array\r\n     */\r\n    Util.isArray = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n    };\r\n    /**\r\n     * Check if an object is of type Error\r\n     */\r\n    Util.isError = function (obj) {\r\n        return obj instanceof Error;\r\n    };\r\n    Util.isPrimitive = function (input) {\r\n        var propType = typeof input;\r\n        return propType === \"string\" || propType === \"number\" || propType === \"boolean\";\r\n    };\r\n    /**\r\n     * Check if an object is of type Date\r\n     */\r\n    Util.isDate = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Date]\";\r\n    };\r\n    /**\r\n     * Convert ms to c# time span format\r\n     */\r\n    Util.msToTimeSpan = function (totalms) {\r\n        if (isNaN(totalms) || totalms < 0) {\r\n            totalms = 0;\r\n        }\r\n        var sec = ((totalms / 1000) % 60).toFixed(7).replace(/0{0,4}$/, \"\");\r\n        var min = \"\" + Math.floor(totalms / (1000 * 60)) % 60;\r\n        var hour = \"\" + Math.floor(totalms / (1000 * 60 * 60)) % 24;\r\n        var days = Math.floor(totalms / (1000 * 60 * 60 * 24));\r\n        sec = sec.indexOf(\".\") < 2 ? \"0\" + sec : sec;\r\n        min = min.length < 2 ? \"0\" + min : min;\r\n        hour = hour.length < 2 ? \"0\" + hour : hour;\r\n        var daysText = days > 0 ? days + \".\" : \"\";\r\n        return daysText + hour + \":\" + min + \":\" + sec;\r\n    };\r\n    /**\r\n     * Using JSON.stringify, by default Errors do not serialize to something useful:\r\n     * Simplify a generic Node Error into a simpler map for customDimensions\r\n     * Custom errors can still implement toJSON to override this functionality\r\n     */\r\n    Util.extractError = function (err) {\r\n        // Error is often subclassed so may have code OR id properties:\r\n        // https://nodejs.org/api/errors.html#errors_error_code\r\n        var looseError = err;\r\n        return {\r\n            message: err.message,\r\n            code: looseError.code || looseError.id || \"\",\r\n        };\r\n    };\r\n    /**\r\n     * Manually call toJSON if available to pre-convert the value.\r\n     * If a primitive is returned, then the consumer of this function can skip JSON.stringify.\r\n     * This avoids double escaping of quotes for Date objects, for example.\r\n     */\r\n    Util.extractObject = function (origProperty) {\r\n        if (origProperty instanceof Error) {\r\n            return Util.extractError(origProperty);\r\n        }\r\n        if (typeof origProperty.toJSON === \"function\") {\r\n            return origProperty.toJSON();\r\n        }\r\n        return origProperty;\r\n    };\r\n    /**\r\n     * Validate that an object is of type { [key: string]: string }\r\n     */\r\n    Util.validateStringMap = function (obj) {\r\n        if (typeof obj !== \"object\") {\r\n            Logging.info(\"Invalid properties dropped from payload\");\r\n            return;\r\n        }\r\n        var map = {};\r\n        for (var field in obj) {\r\n            var property = '';\r\n            var origProperty = obj[field];\r\n            var propType = typeof origProperty;\r\n            if (Util.isPrimitive(origProperty)) {\r\n                property = origProperty.toString();\r\n            }\r\n            else if (origProperty === null || propType === \"undefined\") {\r\n                property = \"\";\r\n            }\r\n            else if (propType === \"function\") {\r\n                Logging.info(\"key: \" + field + \" was function; will not serialize\");\r\n                continue;\r\n            }\r\n            else {\r\n                var stringTarget = Util.isArray(origProperty) ? origProperty : Util.extractObject(origProperty);\r\n                try {\r\n                    if (Util.isPrimitive(stringTarget)) {\r\n                        property = stringTarget;\r\n                    }\r\n                    else {\r\n                        property = JSON.stringify(stringTarget);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    property = origProperty.constructor.name.toString() + \" (Error: \" + e.message + \")\";\r\n                    Logging.info(\"key: \" + field + \", could not be serialized\");\r\n                }\r\n            }\r\n            map[field] = property.substring(0, Util.MAX_PROPERTY_LENGTH);\r\n        }\r\n        return map;\r\n    };\r\n    /**\r\n     * Checks if a request url is not on a excluded domain list\r\n     * and if it is safe to add correlation headers\r\n     */\r\n    Util.canIncludeCorrelationHeader = function (client, requestUrl) {\r\n        var excludedDomains = client && client.config && client.config.correlationHeaderExcludedDomains;\r\n        if (!excludedDomains || excludedDomains.length == 0 || !requestUrl) {\r\n            return true;\r\n        }\r\n        for (var i = 0; i < excludedDomains.length; i++) {\r\n            var regex = new RegExp(excludedDomains[i].replace(/\\./g, \"\\.\").replace(/\\*/g, \".*\"));\r\n            if (regex.test(url.parse(requestUrl).hostname)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Util.getCorrelationContextTarget = function (response, key) {\r\n        var contextHeaders = response.headers && response.headers[RequestResponseHeaders.requestContextHeader];\r\n        if (contextHeaders) {\r\n            var keyValues = contextHeaders.split(\",\");\r\n            for (var i = 0; i < keyValues.length; ++i) {\r\n                var keyValue = keyValues[i].split(\"=\");\r\n                if (keyValue.length == 2 && keyValue[0] == key) {\r\n                    return keyValue[1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Generate request\r\n     *\r\n     * Proxify the request creation to handle proxy http\r\n     *\r\n     * @param {string} requestUrl url endpoint\r\n     * @param {Object} requestOptions Request option\r\n     * @param {Function} requestCallback callback on request\r\n     * @returns {http.ClientRequest} request object\r\n     */\r\n    Util.makeRequest = function (config, requestUrl, requestOptions, requestCallback) {\r\n        if (requestUrl && requestUrl.indexOf('//') === 0) {\r\n            requestUrl = 'https:' + requestUrl;\r\n        }\r\n        var requestUrlParsed = url.parse(requestUrl);\r\n        var options = __assign({}, requestOptions, { host: requestUrlParsed.hostname, port: requestUrlParsed.port, path: requestUrlParsed.pathname });\r\n        var proxyUrl = undefined;\r\n        if (requestUrlParsed.protocol === 'https:') {\r\n            proxyUrl = config.proxyHttpsUrl || undefined;\r\n        }\r\n        if (requestUrlParsed.protocol === 'http:') {\r\n            proxyUrl = config.proxyHttpUrl || undefined;\r\n        }\r\n        if (proxyUrl) {\r\n            if (proxyUrl.indexOf('//') === 0) {\r\n                proxyUrl = 'http:' + proxyUrl;\r\n            }\r\n            var proxyUrlParsed = url.parse(proxyUrl);\r\n            // https is not supported at the moment\r\n            if (proxyUrlParsed.protocol === 'https:') {\r\n                Logging.info(\"Proxies that use HTTPS are not supported\");\r\n                proxyUrl = undefined;\r\n            }\r\n            else {\r\n                options = __assign({}, options, { host: proxyUrlParsed.hostname, port: proxyUrlParsed.port || \"80\", path: requestUrl, headers: __assign({}, options.headers, { Host: requestUrlParsed.hostname }) });\r\n            }\r\n        }\r\n        var isHttps = requestUrlParsed.protocol === 'https:' && !proxyUrl;\r\n        if (isHttps && config.httpsAgent !== undefined) {\r\n            options.agent = config.httpsAgent;\r\n        }\r\n        else if (!isHttps && config.httpAgent !== undefined) {\r\n            options.agent = config.httpAgent;\r\n        }\r\n        else if (isHttps) {\r\n            // HTTPS without a passed in agent. Use one that enforces our TLS rules\r\n            options.agent = Util.tlsRestrictedAgent;\r\n        }\r\n        if (isHttps) {\r\n            return https.request(options, requestCallback);\r\n        }\r\n        else {\r\n            return http.request(options, requestCallback);\r\n        }\r\n    };\r\n    ;\r\n    Util.MAX_PROPERTY_LENGTH = 8192;\r\n    Util.tlsRestrictedAgent = new https.Agent({\r\n        secureOptions: constants.SSL_OP_NO_SSLv2 | constants.SSL_OP_NO_SSLv3 |\r\n            constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1\r\n    });\r\n    return Util;\r\n}());\r\nmodule.exports = Util;\r\n//# sourceMappingURL=Util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/Library/Util.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/TelemetryProcessors/SamplingTelemetryProcessor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/TelemetryProcessors/SamplingTelemetryProcessor.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Contracts = __webpack_require__(/*! ../Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\n/**\r\n *  A telemetry processor that handles sampling.\r\n */\r\nfunction samplingTelemetryProcessor(envelope, contextObjects) {\r\n    var samplingPercentage = envelope.sampleRate; // Set for us in Client.getEnvelope\r\n    var isSampledIn = false;\r\n    if (samplingPercentage === null || samplingPercentage === undefined || samplingPercentage >= 100) {\r\n        return true;\r\n    }\r\n    else if (envelope.data && Contracts.TelemetryType.Metric === Contracts.baseTypeToTelemetryType(envelope.data.baseType)) {\r\n        // Exclude MetricData telemetry from sampling\r\n        return true;\r\n    }\r\n    else if (contextObjects.correlationContext && contextObjects.correlationContext.operation) {\r\n        // If we're using dependency correlation, sampling should retain all telemetry from a given request \r\n        isSampledIn = getSamplingHashCode(contextObjects.correlationContext.operation.id) < samplingPercentage;\r\n    }\r\n    else {\r\n        // If we're not using dependency correlation, sampling should use a random distribution on each item\r\n        isSampledIn = (Math.random() * 100) < samplingPercentage;\r\n    }\r\n    return isSampledIn;\r\n}\r\nexports.samplingTelemetryProcessor = samplingTelemetryProcessor;\r\n/** Ported from AI .NET SDK */\r\nfunction getSamplingHashCode(input) {\r\n    var csharpMin = -2147483648;\r\n    var csharpMax = 2147483647;\r\n    var hash = 5381;\r\n    if (!input) {\r\n        return 0;\r\n    }\r\n    while (input.length < 8) {\r\n        input = input + input;\r\n    }\r\n    for (var i = 0; i < input.length; i++) {\r\n        // JS doesn't respond to integer overflow by wrapping around. Simulate it with bitwise operators ( | 0)\r\n        hash = ((((hash << 5) + hash) | 0) + input.charCodeAt(i) | 0);\r\n    }\r\n    hash = hash <= csharpMin ? csharpMax : Math.abs(hash);\r\n    return (hash / csharpMax) * 100;\r\n}\r\nexports.getSamplingHashCode = getSamplingHashCode;\r\n//# sourceMappingURL=SamplingTelemetryProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvVGVsZW1ldHJ5UHJvY2Vzc29ycy9TYW1wbGluZ1RlbGVtZXRyeVByb2Nlc3Nvci5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvVGVsZW1ldHJ5UHJvY2Vzc29ycy9TYW1wbGluZ1RlbGVtZXRyeVByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgQ29udHJhY3RzID0gcmVxdWlyZShcIi4uL0RlY2xhcmF0aW9ucy9Db250cmFjdHNcIik7XHJcbi8qKlxyXG4gKiAgQSB0ZWxlbWV0cnkgcHJvY2Vzc29yIHRoYXQgaGFuZGxlcyBzYW1wbGluZy5cclxuICovXHJcbmZ1bmN0aW9uIHNhbXBsaW5nVGVsZW1ldHJ5UHJvY2Vzc29yKGVudmVsb3BlLCBjb250ZXh0T2JqZWN0cykge1xyXG4gICAgdmFyIHNhbXBsaW5nUGVyY2VudGFnZSA9IGVudmVsb3BlLnNhbXBsZVJhdGU7IC8vIFNldCBmb3IgdXMgaW4gQ2xpZW50LmdldEVudmVsb3BlXHJcbiAgICB2YXIgaXNTYW1wbGVkSW4gPSBmYWxzZTtcclxuICAgIGlmIChzYW1wbGluZ1BlcmNlbnRhZ2UgPT09IG51bGwgfHwgc2FtcGxpbmdQZXJjZW50YWdlID09PSB1bmRlZmluZWQgfHwgc2FtcGxpbmdQZXJjZW50YWdlID49IDEwMCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZW52ZWxvcGUuZGF0YSAmJiBDb250cmFjdHMuVGVsZW1ldHJ5VHlwZS5NZXRyaWMgPT09IENvbnRyYWN0cy5iYXNlVHlwZVRvVGVsZW1ldHJ5VHlwZShlbnZlbG9wZS5kYXRhLmJhc2VUeXBlKSkge1xyXG4gICAgICAgIC8vIEV4Y2x1ZGUgTWV0cmljRGF0YSB0ZWxlbWV0cnkgZnJvbSBzYW1wbGluZ1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY29udGV4dE9iamVjdHMuY29ycmVsYXRpb25Db250ZXh0ICYmIGNvbnRleHRPYmplY3RzLmNvcnJlbGF0aW9uQ29udGV4dC5vcGVyYXRpb24pIHtcclxuICAgICAgICAvLyBJZiB3ZSdyZSB1c2luZyBkZXBlbmRlbmN5IGNvcnJlbGF0aW9uLCBzYW1wbGluZyBzaG91bGQgcmV0YWluIGFsbCB0ZWxlbWV0cnkgZnJvbSBhIGdpdmVuIHJlcXVlc3QgXHJcbiAgICAgICAgaXNTYW1wbGVkSW4gPSBnZXRTYW1wbGluZ0hhc2hDb2RlKGNvbnRleHRPYmplY3RzLmNvcnJlbGF0aW9uQ29udGV4dC5vcGVyYXRpb24uaWQpIDwgc2FtcGxpbmdQZXJjZW50YWdlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gSWYgd2UncmUgbm90IHVzaW5nIGRlcGVuZGVuY3kgY29ycmVsYXRpb24sIHNhbXBsaW5nIHNob3VsZCB1c2UgYSByYW5kb20gZGlzdHJpYnV0aW9uIG9uIGVhY2ggaXRlbVxyXG4gICAgICAgIGlzU2FtcGxlZEluID0gKE1hdGgucmFuZG9tKCkgKiAxMDApIDwgc2FtcGxpbmdQZXJjZW50YWdlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzU2FtcGxlZEluO1xyXG59XHJcbmV4cG9ydHMuc2FtcGxpbmdUZWxlbWV0cnlQcm9jZXNzb3IgPSBzYW1wbGluZ1RlbGVtZXRyeVByb2Nlc3NvcjtcclxuLyoqIFBvcnRlZCBmcm9tIEFJIC5ORVQgU0RLICovXHJcbmZ1bmN0aW9uIGdldFNhbXBsaW5nSGFzaENvZGUoaW5wdXQpIHtcclxuICAgIHZhciBjc2hhcnBNaW4gPSAtMjE0NzQ4MzY0ODtcclxuICAgIHZhciBjc2hhcnBNYXggPSAyMTQ3NDgzNjQ3O1xyXG4gICAgdmFyIGhhc2ggPSA1MzgxO1xyXG4gICAgaWYgKCFpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKGlucHV0Lmxlbmd0aCA8IDgpIHtcclxuICAgICAgICBpbnB1dCA9IGlucHV0ICsgaW5wdXQ7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gSlMgZG9lc24ndCByZXNwb25kIHRvIGludGVnZXIgb3ZlcmZsb3cgYnkgd3JhcHBpbmcgYXJvdW5kLiBTaW11bGF0ZSBpdCB3aXRoIGJpdHdpc2Ugb3BlcmF0b3JzICggfCAwKVxyXG4gICAgICAgIGhhc2ggPSAoKCgoaGFzaCA8PCA1KSArIGhhc2gpIHwgMCkgKyBpbnB1dC5jaGFyQ29kZUF0KGkpIHwgMCk7XHJcbiAgICB9XHJcbiAgICBoYXNoID0gaGFzaCA8PSBjc2hhcnBNaW4gPyBjc2hhcnBNYXggOiBNYXRoLmFicyhoYXNoKTtcclxuICAgIHJldHVybiAoaGFzaCAvIGNzaGFycE1heCkgKiAxMDA7XHJcbn1cclxuZXhwb3J0cy5nZXRTYW1wbGluZ0hhc2hDb2RlID0gZ2V0U2FtcGxpbmdIYXNoQ29kZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2FtcGxpbmdUZWxlbWV0cnlQcm9jZXNzb3IuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/TelemetryProcessors/SamplingTelemetryProcessor.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/TelemetryProcessors/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/applicationinsights/out/TelemetryProcessors/index.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(/*! ./SamplingTelemetryProcessor */ \"./node_modules/applicationinsights/out/TelemetryProcessors/SamplingTelemetryProcessor.js\"));\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvVGVsZW1ldHJ5UHJvY2Vzc29ycy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvYXBwbGljYXRpb25pbnNpZ2h0cy9vdXQvVGVsZW1ldHJ5UHJvY2Vzc29ycy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vU2FtcGxpbmdUZWxlbWV0cnlQcm9jZXNzb3JcIikpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/TelemetryProcessors/index.js\n");

/***/ }),

/***/ "./node_modules/applicationinsights/out/applicationinsights.js":
/*!*********************************************************************!*\
  !*** ./node_modules/applicationinsights/out/applicationinsights.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CorrelationContextManager = __webpack_require__(/*! ./AutoCollection/CorrelationContextManager */ \"./node_modules/applicationinsights/out/AutoCollection/CorrelationContextManager.js\"); // Keep this first\r\nvar AutoCollectConsole = __webpack_require__(/*! ./AutoCollection/Console */ \"./node_modules/applicationinsights/out/AutoCollection/Console.js\");\r\nvar AutoCollectExceptions = __webpack_require__(/*! ./AutoCollection/Exceptions */ \"./node_modules/applicationinsights/out/AutoCollection/Exceptions.js\");\r\nvar AutoCollectPerformance = __webpack_require__(/*! ./AutoCollection/Performance */ \"./node_modules/applicationinsights/out/AutoCollection/Performance.js\");\r\nvar AutoCollectHttpDependencies = __webpack_require__(/*! ./AutoCollection/HttpDependencies */ \"./node_modules/applicationinsights/out/AutoCollection/HttpDependencies.js\");\r\nvar AutoCollectHttpRequests = __webpack_require__(/*! ./AutoCollection/HttpRequests */ \"./node_modules/applicationinsights/out/AutoCollection/HttpRequests.js\");\r\nvar Logging = __webpack_require__(/*! ./Library/Logging */ \"./node_modules/applicationinsights/out/Library/Logging.js\");\r\n// We export these imports so that SDK users may use these classes directly.\r\n// They're exposed using \"export import\" so that types are passed along as expected\r\nexports.TelemetryClient = __webpack_require__(/*! ./Library/NodeClient */ \"./node_modules/applicationinsights/out/Library/NodeClient.js\");\r\nexports.Contracts = __webpack_require__(/*! ./Declarations/Contracts */ \"./node_modules/applicationinsights/out/Declarations/Contracts/index.js\");\r\n// Default autocollection configuration\r\nvar _isConsole = true;\r\nvar _isConsoleLog = false;\r\nvar _isExceptions = true;\r\nvar _isPerformance = true;\r\nvar _isRequests = true;\r\nvar _isDependencies = true;\r\nvar _isDiskRetry = true;\r\nvar _isCorrelating = true;\r\nvar _diskRetryInterval = undefined;\r\nvar _diskRetryMaxBytes = undefined;\r\nvar _console;\r\nvar _exceptions;\r\nvar _performance;\r\nvar _serverRequests;\r\nvar _clientRequests;\r\nvar _isStarted = false;\r\n/**\r\n * Initializes the default client. Should be called after setting\r\n * configuration options.\r\n *\r\n * @param instrumentationKey the instrumentation key to use. Optional, if\r\n * this is not specified, the value will be read from the environment\r\n * variable APPINSIGHTS_INSTRUMENTATIONKEY.\r\n * @returns {Configuration} the configuration class to initialize\r\n * and start the SDK.\r\n */\r\nfunction setup(instrumentationKey) {\r\n    if (!exports.defaultClient) {\r\n        exports.defaultClient = new exports.TelemetryClient(instrumentationKey);\r\n        _console = new AutoCollectConsole(exports.defaultClient);\r\n        _exceptions = new AutoCollectExceptions(exports.defaultClient);\r\n        _performance = new AutoCollectPerformance(exports.defaultClient);\r\n        _serverRequests = new AutoCollectHttpRequests(exports.defaultClient);\r\n        _clientRequests = new AutoCollectHttpDependencies(exports.defaultClient);\r\n    }\r\n    else {\r\n        Logging.info(\"The default client is already setup\");\r\n    }\r\n    if (exports.defaultClient && exports.defaultClient.channel) {\r\n        exports.defaultClient.channel.setUseDiskRetryCaching(_isDiskRetry, _diskRetryInterval, _diskRetryMaxBytes);\r\n    }\r\n    return Configuration;\r\n}\r\nexports.setup = setup;\r\n/**\r\n * Starts automatic collection of telemetry. Prior to calling start no\r\n * telemetry will be *automatically* collected, though manual collection\r\n * is enabled.\r\n * @returns {ApplicationInsights} this class\r\n */\r\nfunction start() {\r\n    if (!!exports.defaultClient) {\r\n        _isStarted = true;\r\n        _console.enable(_isConsole, _isConsoleLog);\r\n        _exceptions.enable(_isExceptions);\r\n        _performance.enable(_isPerformance);\r\n        _serverRequests.useAutoCorrelation(_isCorrelating);\r\n        _serverRequests.enable(_isRequests);\r\n        _clientRequests.enable(_isDependencies);\r\n    }\r\n    else {\r\n        Logging.warn(\"Start cannot be called before setup\");\r\n    }\r\n    return Configuration;\r\n}\r\nexports.start = start;\r\n/**\r\n * Returns an object that is shared across all code handling a given request.\r\n * This can be used similarly to thread-local storage in other languages.\r\n * Properties set on this object will be available to telemetry processors.\r\n *\r\n * Do not store sensitive information here.\r\n * Custom properties set on this object can be exposed in a future SDK\r\n * release via outgoing HTTP headers.\r\n * This is to allow for correlating data cross-component.\r\n *\r\n * This method will return null if automatic dependency correlation is disabled.\r\n * @returns A plain object for request storage or null if automatic dependency correlation is disabled.\r\n */\r\nfunction getCorrelationContext() {\r\n    if (_isCorrelating) {\r\n        return CorrelationContextManager.CorrelationContextManager.getCurrentContext();\r\n    }\r\n    return null;\r\n}\r\nexports.getCorrelationContext = getCorrelationContext;\r\n/**\r\n * Returns a function that will get the same correlation context within its\r\n * function body as the code executing this function.\r\n * Use this method if automatic dependency correlation is not propagating\r\n * correctly to an asynchronous callback.\r\n */\r\nfunction wrapWithCorrelationContext(fn) {\r\n    return CorrelationContextManager.CorrelationContextManager.wrapCallback(fn);\r\n}\r\nexports.wrapWithCorrelationContext = wrapWithCorrelationContext;\r\n/**\r\n * The active configuration for global SDK behaviors, such as autocollection.\r\n */\r\nvar Configuration = (function () {\r\n    function Configuration() {\r\n    }\r\n    /**\r\n     * Sets the state of console and logger tracking (enabled by default for third-party loggers only)\r\n     * @param value if true logger activity will be sent to Application Insights\r\n     * @param collectConsoleLog if true, logger autocollection will include console.log calls (default false)\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setAutoCollectConsole = function (value, collectConsoleLog) {\r\n        if (collectConsoleLog === void 0) { collectConsoleLog = false; }\r\n        _isConsole = value;\r\n        _isConsoleLog = collectConsoleLog;\r\n        if (_isStarted) {\r\n            _console.enable(value, collectConsoleLog);\r\n        }\r\n        return Configuration;\r\n    };\r\n    /**\r\n     * Sets the state of exception tracking (enabled by default)\r\n     * @param value if true uncaught exceptions will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setAutoCollectExceptions = function (value) {\r\n        _isExceptions = value;\r\n        if (_isStarted) {\r\n            _exceptions.enable(value);\r\n        }\r\n        return Configuration;\r\n    };\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * @param value if true performance counters will be collected every second and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setAutoCollectPerformance = function (value) {\r\n        _isPerformance = value;\r\n        if (_isStarted) {\r\n            _performance.enable(value);\r\n        }\r\n        return Configuration;\r\n    };\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * @param value if true requests will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setAutoCollectRequests = function (value) {\r\n        _isRequests = value;\r\n        if (_isStarted) {\r\n            _serverRequests.enable(value);\r\n        }\r\n        return Configuration;\r\n    };\r\n    /**\r\n     * Sets the state of dependency tracking (enabled by default)\r\n     * @param value if true dependencies will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setAutoCollectDependencies = function (value) {\r\n        _isDependencies = value;\r\n        if (_isStarted) {\r\n            _clientRequests.enable(value);\r\n        }\r\n        return Configuration;\r\n    };\r\n    /**\r\n     * Sets the state of automatic dependency correlation (enabled by default)\r\n     * @param value if true dependencies will be correlated with requests\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setAutoDependencyCorrelation = function (value) {\r\n        _isCorrelating = value;\r\n        if (_isStarted) {\r\n            _serverRequests.useAutoCorrelation(value);\r\n        }\r\n        return Configuration;\r\n    };\r\n    /**\r\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\r\n     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.\r\n     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).\r\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\r\n     * @param value if true events that occured while client is offline will be cached on disk\r\n     * @param resendInterval The wait interval for resending cached events.\r\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setUseDiskRetryCaching = function (value, resendInterval, maxBytesOnDisk) {\r\n        _isDiskRetry = value;\r\n        _diskRetryInterval = resendInterval;\r\n        _diskRetryMaxBytes = maxBytesOnDisk;\r\n        if (exports.defaultClient && exports.defaultClient.channel) {\r\n            exports.defaultClient.channel.setUseDiskRetryCaching(value, resendInterval, maxBytesOnDisk);\r\n        }\r\n        return Configuration;\r\n    };\r\n    /**\r\n     * Enables debug and warning logging for AppInsights itself.\r\n     * @param enableDebugLogging if true, enables debug logging\r\n     * @param enableWarningLogging if true, enables warning logging\r\n     * @returns {Configuration} this class\r\n     */\r\n    Configuration.setInternalLogging = function (enableDebugLogging, enableWarningLogging) {\r\n        if (enableDebugLogging === void 0) { enableDebugLogging = false; }\r\n        if (enableWarningLogging === void 0) { enableWarningLogging = true; }\r\n        Logging.enableDebug = enableDebugLogging;\r\n        Logging.disableWarnings = !enableWarningLogging;\r\n        return Configuration;\r\n    };\r\n    // Convenience shortcut to ApplicationInsights.start\r\n    Configuration.start = start;\r\n    return Configuration;\r\n}());\r\nexports.Configuration = Configuration;\r\n/**\r\n * Disposes the default client and all the auto collectors so they can be reinitialized with different configuration\r\n*/\r\nfunction dispose() {\r\n    exports.defaultClient = null;\r\n    _isStarted = false;\r\n    if (_console) {\r\n        _console.dispose();\r\n    }\r\n    if (_exceptions) {\r\n        _exceptions.dispose();\r\n    }\r\n    if (_performance) {\r\n        _performance.dispose();\r\n    }\r\n    if (_serverRequests) {\r\n        _serverRequests.dispose();\r\n    }\r\n    if (_clientRequests) {\r\n        _clientRequests.dispose();\r\n    }\r\n}\r\nexports.dispose = dispose;\r\n//# sourceMappingURL=applicationinsights.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/applicationinsights/out/applicationinsights.js\n");

/***/ }),

/***/ "./node_modules/balanced-match/index.js":
/*!**********************************************!*\
  !*** ./node_modules/balanced-match/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFsYW5jZWQtbWF0Y2gvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2JhbGFuY2VkLW1hdGNoL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gYmFsYW5jZWQ7XG5mdW5jdGlvbiBiYWxhbmNlZChhLCBiLCBzdHIpIHtcbiAgaWYgKGEgaW5zdGFuY2VvZiBSZWdFeHApIGEgPSBtYXliZU1hdGNoKGEsIHN0cik7XG4gIGlmIChiIGluc3RhbmNlb2YgUmVnRXhwKSBiID0gbWF5YmVNYXRjaChiLCBzdHIpO1xuXG4gIHZhciByID0gcmFuZ2UoYSwgYiwgc3RyKTtcblxuICByZXR1cm4gciAmJiB7XG4gICAgc3RhcnQ6IHJbMF0sXG4gICAgZW5kOiByWzFdLFxuICAgIHByZTogc3RyLnNsaWNlKDAsIHJbMF0pLFxuICAgIGJvZHk6IHN0ci5zbGljZShyWzBdICsgYS5sZW5ndGgsIHJbMV0pLFxuICAgIHBvc3Q6IHN0ci5zbGljZShyWzFdICsgYi5sZW5ndGgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1heWJlTWF0Y2gocmVnLCBzdHIpIHtcbiAgdmFyIG0gPSBzdHIubWF0Y2gocmVnKTtcbiAgcmV0dXJuIG0gPyBtWzBdIDogbnVsbDtcbn1cblxuYmFsYW5jZWQucmFuZ2UgPSByYW5nZTtcbmZ1bmN0aW9uIHJhbmdlKGEsIGIsIHN0cikge1xuICB2YXIgYmVncywgYmVnLCBsZWZ0LCByaWdodCwgcmVzdWx0O1xuICB2YXIgYWkgPSBzdHIuaW5kZXhPZihhKTtcbiAgdmFyIGJpID0gc3RyLmluZGV4T2YoYiwgYWkgKyAxKTtcbiAgdmFyIGkgPSBhaTtcblxuICBpZiAoYWkgPj0gMCAmJiBiaSA+IDApIHtcbiAgICBiZWdzID0gW107XG4gICAgbGVmdCA9IHN0ci5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA+PSAwICYmICFyZXN1bHQpIHtcbiAgICAgIGlmIChpID09IGFpKSB7XG4gICAgICAgIGJlZ3MucHVzaChpKTtcbiAgICAgICAgYWkgPSBzdHIuaW5kZXhPZihhLCBpICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKGJlZ3MubGVuZ3RoID09IDEpIHtcbiAgICAgICAgcmVzdWx0ID0gWyBiZWdzLnBvcCgpLCBiaSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVnID0gYmVncy5wb3AoKTtcbiAgICAgICAgaWYgKGJlZyA8IGxlZnQpIHtcbiAgICAgICAgICBsZWZ0ID0gYmVnO1xuICAgICAgICAgIHJpZ2h0ID0gYmk7XG4gICAgICAgIH1cblxuICAgICAgICBiaSA9IHN0ci5pbmRleE9mKGIsIGkgKyAxKTtcbiAgICAgIH1cblxuICAgICAgaSA9IGFpIDwgYmkgJiYgYWkgPj0gMCA/IGFpIDogYmk7XG4gICAgfVxuXG4gICAgaWYgKGJlZ3MubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgPSBbIGxlZnQsIHJpZ2h0IF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/balanced-match/index.js\n");

/***/ }),

/***/ "./node_modules/brace-expansion/index.js":
/*!***********************************************!*\
  !*** ./node_modules/brace-expansion/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var concatMap = __webpack_require__(/*! concat-map */ \"./node_modules/concat-map/index.js\");\nvar balanced = __webpack_require__(/*! balanced-match */ \"./node_modules/balanced-match/index.js\");\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/brace-expansion/index.js\n");

/***/ }),

/***/ "./node_modules/buffer-crc32/index.js":
/*!********************************************!*\
  !*** ./node_modules/buffer-crc32/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Buffer = __webpack_require__(/*! buffer */ \"buffer\").Buffer;\n\nvar CRC_TABLE = [\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,\n  0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,\n  0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,\n  0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n  0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n  0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n  0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n  0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n  0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n  0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n  0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,\n  0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,\n  0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n  0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n  0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n  0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n  0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n  0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n  0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n  0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n  0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,\n  0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\n  0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,\n  0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n  0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n  0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n  0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n  0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n  0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n  0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n  0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,\n  0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n  0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n  0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n  0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n  0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n  0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n  0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n  0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n  0x2d02ef8d\n];\n\nif (typeof Int32Array !== 'undefined') {\n  CRC_TABLE = new Int32Array(CRC_TABLE);\n}\n\nfunction ensureBuffer(input) {\n  if (Buffer.isBuffer(input)) {\n    return input;\n  }\n\n  var hasNewBufferAPI =\n      typeof Buffer.alloc === \"function\" &&\n      typeof Buffer.from === \"function\";\n\n  if (typeof input === \"number\") {\n    return hasNewBufferAPI ? Buffer.alloc(input) : new Buffer(input);\n  }\n  else if (typeof input === \"string\") {\n    return hasNewBufferAPI ? Buffer.from(input) : new Buffer(input);\n  }\n  else {\n    throw new Error(\"input must be buffer, number, or string, received \" +\n                    typeof input);\n  }\n}\n\nfunction bufferizeInt(num) {\n  var tmp = ensureBuffer(4);\n  tmp.writeInt32BE(num, 0);\n  return tmp;\n}\n\nfunction _crc32(buf, previous) {\n  buf = ensureBuffer(buf);\n  if (Buffer.isBuffer(previous)) {\n    previous = previous.readUInt32BE(0);\n  }\n  var crc = ~~previous ^ -1;\n  for (var n = 0; n < buf.length; n++) {\n    crc = CRC_TABLE[(crc ^ buf[n]) & 0xff] ^ (crc >>> 8);\n  }\n  return (crc ^ -1);\n}\n\nfunction crc32() {\n  return bufferizeInt(_crc32.apply(null, arguments));\n}\ncrc32.signed = function () {\n  return _crc32.apply(null, arguments);\n};\ncrc32.unsigned = function () {\n  return _crc32.apply(null, arguments) >>> 0;\n};\n\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYnVmZmVyLWNyYzMyL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9idWZmZXItY3JjMzIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIENSQ19UQUJMRSA9IFtcbiAgMHgwMDAwMDAwMCwgMHg3NzA3MzA5NiwgMHhlZTBlNjEyYywgMHg5OTA5NTFiYSwgMHgwNzZkYzQxOSxcbiAgMHg3MDZhZjQ4ZiwgMHhlOTYzYTUzNSwgMHg5ZTY0OTVhMywgMHgwZWRiODgzMiwgMHg3OWRjYjhhNCxcbiAgMHhlMGQ1ZTkxZSwgMHg5N2QyZDk4OCwgMHgwOWI2NGMyYiwgMHg3ZWIxN2NiZCwgMHhlN2I4MmQwNyxcbiAgMHg5MGJmMWQ5MSwgMHgxZGI3MTA2NCwgMHg2YWIwMjBmMiwgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSxcbiAgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNywgMHgxMzZjOTg1NixcbiAgMHg2NDZiYThjMCwgMHhmZDYyZjk3YSwgMHg4YTY1YzllYywgMHgxNDAxNWM0ZiwgMHg2MzA2NmNkOSxcbiAgMHhmYTBmM2Q2MywgMHg4ZDA4MGRmNSwgMHgzYjZlMjBjOCwgMHg0YzY5MTA1ZSwgMHhkNTYwNDFlNCxcbiAgMHhhMjY3NzE3MiwgMHgzYzAzZTRkMSwgMHg0YjA0ZDQ0NywgMHhkMjBkODVmZCwgMHhhNTBhYjU2YixcbiAgMHgzNWI1YThmYSwgMHg0MmIyOTg2YywgMHhkYmJiYzlkNiwgMHhhY2JjZjk0MCwgMHgzMmQ4NmNlMyxcbiAgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSwgMHgyNmQ5MzBhYywgMHg1MWRlMDAzYSxcbiAgMHhjOGQ3NTE4MCwgMHhiZmQwNjExNiwgMHgyMWI0ZjRiNSwgMHg1NmIzYzQyMywgMHhjZmJhOTU5OSxcbiAgMHhiOGJkYTUwZiwgMHgyODAyYjg5ZSwgMHg1ZjA1ODgwOCwgMHhjNjBjZDliMiwgMHhiMTBiZTkyNCxcbiAgMHgyZjZmN2M4NywgMHg1ODY4NGMxMSwgMHhjMTYxMWRhYiwgMHhiNjY2MmQzZCwgMHg3NmRjNDE5MCxcbiAgMHgwMWRiNzEwNiwgMHg5OGQyMjBiYywgMHhlZmQ1MTAyYSwgMHg3MWIxODU4OSwgMHgwNmI2YjUxZixcbiAgMHg5ZmJmZTRhNSwgMHhlOGI4ZDQzMywgMHg3ODA3YzlhMiwgMHgwZjAwZjkzNCwgMHg5NjA5YTg4ZSxcbiAgMHhlMTBlOTgxOCwgMHg3ZjZhMGRiYiwgMHgwODZkM2QyZCwgMHg5MTY0NmM5NywgMHhlNjYzNWMwMSxcbiAgMHg2YjZiNTFmNCwgMHgxYzZjNjE2MiwgMHg4NTY1MzBkOCwgMHhmMjYyMDA0ZSwgMHg2YzA2OTVlZCxcbiAgMHgxYjAxYTU3YiwgMHg4MjA4ZjRjMSwgMHhmNTBmYzQ1NywgMHg2NWIwZDljNiwgMHgxMmI3ZTk1MCxcbiAgMHg4YmJlYjhlYSwgMHhmY2I5ODg3YywgMHg2MmRkMWRkZiwgMHgxNWRhMmQ0OSwgMHg4Y2QzN2NmMyxcbiAgMHhmYmQ0NGM2NSwgMHg0ZGIyNjE1OCwgMHgzYWI1NTFjZSwgMHhhM2JjMDA3NCwgMHhkNGJiMzBlMixcbiAgMHg0YWRmYTU0MSwgMHgzZGQ4OTVkNywgMHhhNGQxYzQ2ZCwgMHhkM2Q2ZjRmYiwgMHg0MzY5ZTk2YSxcbiAgMHgzNDZlZDlmYywgMHhhZDY3ODg0NiwgMHhkYTYwYjhkMCwgMHg0NDA0MmQ3MywgMHgzMzAzMWRlNSxcbiAgMHhhYTBhNGM1ZiwgMHhkZDBkN2NjOSwgMHg1MDA1NzEzYywgMHgyNzAyNDFhYSwgMHhiZTBiMTAxMCxcbiAgMHhjOTBjMjA4NiwgMHg1NzY4YjUyNSwgMHgyMDZmODViMywgMHhiOTY2ZDQwOSwgMHhjZTYxZTQ5ZixcbiAgMHg1ZWRlZjkwZSwgMHgyOWQ5Yzk5OCwgMHhiMGQwOTgyMiwgMHhjN2Q3YThiNCwgMHg1OWIzM2QxNyxcbiAgMHgyZWI0MGQ4MSwgMHhiN2JkNWMzYiwgMHhjMGJhNmNhZCwgMHhlZGI4ODMyMCwgMHg5YWJmYjNiNixcbiAgMHgwM2I2ZTIwYywgMHg3NGIxZDI5YSwgMHhlYWQ1NDczOSwgMHg5ZGQyNzdhZiwgMHgwNGRiMjYxNSxcbiAgMHg3M2RjMTY4MywgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCwgMHgwZDZkNmEzZSwgMHg3YTZhNWFhOCxcbiAgMHhlNDBlY2YwYiwgMHg5MzA5ZmY5ZCwgMHgwYTAwYWUyNywgMHg3ZDA3OWViMSwgMHhmMDBmOTM0NCxcbiAgMHg4NzA4YTNkMiwgMHgxZTAxZjI2OCwgMHg2OTA2YzJmZSwgMHhmNzYyNTc1ZCwgMHg4MDY1NjdjYixcbiAgMHgxOTZjMzY3MSwgMHg2ZTZiMDZlNywgMHhmZWQ0MWI3NiwgMHg4OWQzMmJlMCwgMHgxMGRhN2E1YSxcbiAgMHg2N2RkNGFjYywgMHhmOWI5ZGY2ZiwgMHg4ZWJlZWZmOSwgMHgxN2I3YmU0MywgMHg2MGIwOGVkNSxcbiAgMHhkNmQ2YTNlOCwgMHhhMWQxOTM3ZSwgMHgzOGQ4YzJjNCwgMHg0ZmRmZjI1MiwgMHhkMWJiNjdmMSxcbiAgMHhhNmJjNTc2NywgMHgzZmI1MDZkZCwgMHg0OGIyMzY0YiwgMHhkODBkMmJkYSwgMHhhZjBhMWI0YyxcbiAgMHgzNjAzNGFmNiwgMHg0MTA0N2E2MCwgMHhkZjYwZWZjMywgMHhhODY3ZGY1NSwgMHgzMTZlOGVlZixcbiAgMHg0NjY5YmU3OSwgMHhjYjYxYjM4YywgMHhiYzY2ODMxYSwgMHgyNTZmZDJhMCwgMHg1MjY4ZTIzNixcbiAgMHhjYzBjNzc5NSwgMHhiYjBiNDcwMywgMHgyMjAyMTZiOSwgMHg1NTA1MjYyZiwgMHhjNWJhM2JiZSxcbiAgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSxcbiAgMHgyY2Q5OWU4YiwgMHg1YmRlYWUxZCwgMHg5YjY0YzJiMCwgMHhlYzYzZjIyNiwgMHg3NTZhYTM5YyxcbiAgMHgwMjZkOTMwYSwgMHg5YzA5MDZhOSwgMHhlYjBlMzYzZiwgMHg3MjA3Njc4NSwgMHgwNTAwNTcxMyxcbiAgMHg5NWJmNGE4MiwgMHhlMmI4N2ExNCwgMHg3YmIxMmJhZSwgMHgwY2I2MWIzOCwgMHg5MmQyOGU5YixcbiAgMHhlNWQ1YmUwZCwgMHg3Y2RjZWZiNywgMHgwYmRiZGYyMSwgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MixcbiAgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSxcbiAgMHgxOGI3NDc3NywgMHg4ODA4NWFlNiwgMHhmZjBmNmE3MCwgMHg2NjA2M2JjYSwgMHgxMTAxMGI1YyxcbiAgMHg4ZjY1OWVmZiwgMHhmODYyYWU2OSwgMHg2MTZiZmZkMywgMHgxNjZjY2Y0NSwgMHhhMDBhZTI3OCxcbiAgMHhkNzBkZDJlZSwgMHg0ZTA0ODM1NCwgMHgzOTAzYjNjMiwgMHhhNzY3MjY2MSwgMHhkMDYwMTZmNyxcbiAgMHg0OTY5NDc0ZCwgMHgzZTZlNzdkYiwgMHhhZWQxNmE0YSwgMHhkOWQ2NWFkYywgMHg0MGRmMGI2NixcbiAgMHgzN2Q4M2JmMCwgMHhhOWJjYWU1MywgMHhkZWJiOWVjNSwgMHg0N2IyY2Y3ZiwgMHgzMGI1ZmZlOSxcbiAgMHhiZGJkZjIxYywgMHhjYWJhYzI4YSwgMHg1M2IzOTMzMCwgMHgyNGI0YTNhNiwgMHhiYWQwMzYwNSxcbiAgMHhjZGQ3MDY5MywgMHg1NGRlNTcyOSwgMHgyM2Q5NjdiZiwgMHhiMzY2N2EyZSwgMHhjNDYxNGFiOCxcbiAgMHg1ZDY4MWIwMiwgMHgyYTZmMmI5NCwgMHhiNDBiYmUzNywgMHhjMzBjOGVhMSwgMHg1YTA1ZGYxYixcbiAgMHgyZDAyZWY4ZFxuXTtcblxuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICBDUkNfVEFCTEUgPSBuZXcgSW50MzJBcnJheShDUkNfVEFCTEUpO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVCdWZmZXIoaW5wdXQpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICB2YXIgaGFzTmV3QnVmZmVyQVBJID1cbiAgICAgIHR5cGVvZiBCdWZmZXIuYWxsb2MgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgdHlwZW9mIEJ1ZmZlci5mcm9tID09PSBcImZ1bmN0aW9uXCI7XG5cbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBoYXNOZXdCdWZmZXJBUEkgPyBCdWZmZXIuYWxsb2MoaW5wdXQpIDogbmV3IEJ1ZmZlcihpbnB1dCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGhhc05ld0J1ZmZlckFQSSA/IEJ1ZmZlci5mcm9tKGlucHV0KSA6IG5ldyBCdWZmZXIoaW5wdXQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcImlucHV0IG11c3QgYmUgYnVmZmVyLCBudW1iZXIsIG9yIHN0cmluZywgcmVjZWl2ZWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaW5wdXQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlcml6ZUludChudW0pIHtcbiAgdmFyIHRtcCA9IGVuc3VyZUJ1ZmZlcig0KTtcbiAgdG1wLndyaXRlSW50MzJCRShudW0sIDApO1xuICByZXR1cm4gdG1wO1xufVxuXG5mdW5jdGlvbiBfY3JjMzIoYnVmLCBwcmV2aW91cykge1xuICBidWYgPSBlbnN1cmVCdWZmZXIoYnVmKTtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihwcmV2aW91cykpIHtcbiAgICBwcmV2aW91cyA9IHByZXZpb3VzLnJlYWRVSW50MzJCRSgwKTtcbiAgfVxuICB2YXIgY3JjID0gfn5wcmV2aW91cyBeIC0xO1xuICBmb3IgKHZhciBuID0gMDsgbiA8IGJ1Zi5sZW5ndGg7IG4rKykge1xuICAgIGNyYyA9IENSQ19UQUJMRVsoY3JjIF4gYnVmW25dKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG4gIH1cbiAgcmV0dXJuIChjcmMgXiAtMSk7XG59XG5cbmZ1bmN0aW9uIGNyYzMyKCkge1xuICByZXR1cm4gYnVmZmVyaXplSW50KF9jcmMzMi5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbn1cbmNyYzMyLnNpZ25lZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmMzMi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcbmNyYzMyLnVuc2lnbmVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyYzMyLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgPj4+IDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyYzMyO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/buffer-crc32/index.js\n");

/***/ }),

/***/ "./node_modules/concat-map/index.js":
/*!******************************************!*\
  !*** ./node_modules/concat-map/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29uY2F0LW1hcC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvY29uY2F0LW1hcC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4cywgZm4pIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgeCA9IGZuKHhzW2ldLCBpKTtcbiAgICAgICAgaWYgKGlzQXJyYXkoeCkpIHJlcy5wdXNoLmFwcGx5KHJlcywgeCk7XG4gICAgICAgIGVsc2UgcmVzLnB1c2goeCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/concat-map/index.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src sync recursive ^.*\\/lib\\/Connection$":
/*!****************************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src sync ^.*\/lib\/Connection$ ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "./node_modules/diagnostic-channel-publishers/dist/src sync recursive ^.*\\/lib\\/Connection$";

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src sync recursive ^.*\\/lib\\/Pool$":
/*!**********************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src sync ^.*\/lib\/Pool$ ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "./node_modules/diagnostic-channel-publishers/dist/src sync recursive ^.*\\/lib\\/Pool$";

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/bunyan.pub.js":
/*!***************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/bunyan.pub.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar bunyanPatchFunction = function (originalBunyan) {\r\n    var originalEmit = originalBunyan.prototype._emit;\r\n    originalBunyan.prototype._emit = function (rec, noemit) {\r\n        var ret = originalEmit.apply(this, arguments);\r\n        if (!noemit) {\r\n            var str = ret;\r\n            if (!str) {\r\n                str = originalEmit.call(this, rec, true);\r\n            }\r\n            diagnostic_channel_1.channel.publish(\"bunyan\", { level: rec.level, result: str });\r\n        }\r\n        return ret;\r\n    };\r\n    return originalBunyan;\r\n};\r\nexports.bunyan = {\r\n    versionSpecifier: \">= 1.0.0 < 2.0.0\",\r\n    patch: bunyanPatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"bunyan\", exports.bunyan);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=bunyan.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvYnVueWFuLnB1Yi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvYnVueWFuLnB1Yi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGRldGFpbHMuXHJcbnZhciBkaWFnbm9zdGljX2NoYW5uZWxfMSA9IHJlcXVpcmUoXCJkaWFnbm9zdGljLWNoYW5uZWxcIik7XHJcbnZhciBidW55YW5QYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsQnVueWFuKSB7XHJcbiAgICB2YXIgb3JpZ2luYWxFbWl0ID0gb3JpZ2luYWxCdW55YW4ucHJvdG90eXBlLl9lbWl0O1xyXG4gICAgb3JpZ2luYWxCdW55YW4ucHJvdG90eXBlLl9lbWl0ID0gZnVuY3Rpb24gKHJlYywgbm9lbWl0KSB7XHJcbiAgICAgICAgdmFyIHJldCA9IG9yaWdpbmFsRW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIGlmICghbm9lbWl0KSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSByZXQ7XHJcbiAgICAgICAgICAgIGlmICghc3RyKSB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSBvcmlnaW5hbEVtaXQuY2FsbCh0aGlzLCByZWMsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwucHVibGlzaChcImJ1bnlhblwiLCB7IGxldmVsOiByZWMubGV2ZWwsIHJlc3VsdDogc3RyIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBvcmlnaW5hbEJ1bnlhbjtcclxufTtcclxuZXhwb3J0cy5idW55YW4gPSB7XHJcbiAgICB2ZXJzaW9uU3BlY2lmaWVyOiBcIj49IDEuMC4wIDwgMi4wLjBcIixcclxuICAgIHBhdGNoOiBidW55YW5QYXRjaEZ1bmN0aW9uLFxyXG59O1xyXG5mdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnJlZ2lzdGVyTW9ua2V5UGF0Y2goXCJidW55YW5cIiwgZXhwb3J0cy5idW55YW4pO1xyXG59XHJcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1idW55YW4ucHViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/bunyan.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/console.pub.js":
/*!****************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/console.pub.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nvar consolePatchFunction = function (originalConsole) {\r\n    var aiLoggingOutStream = new stream_1.Writable();\r\n    var aiLoggingErrStream = new stream_1.Writable();\r\n    // Default console is roughly equivalent to `new Console(process.stdout, process.stderr)`\r\n    // We create a version which publishes to the channel and also to stdout/stderr\r\n    aiLoggingOutStream.write = function (chunk) {\r\n        if (!chunk) {\r\n            return true;\r\n        }\r\n        var message = chunk.toString();\r\n        diagnostic_channel_1.channel.publish(\"console\", { message: message });\r\n        return true;\r\n    };\r\n    aiLoggingErrStream.write = function (chunk) {\r\n        if (!chunk) {\r\n            return true;\r\n        }\r\n        var message = chunk.toString();\r\n        diagnostic_channel_1.channel.publish(\"console\", { message: message, stderr: true });\r\n        return true;\r\n    };\r\n    var aiLoggingConsole = new originalConsole.Console(aiLoggingOutStream, aiLoggingErrStream);\r\n    var consoleMethods = [\"log\", \"info\", \"warn\", \"error\", \"dir\", \"time\", \"timeEnd\", \"trace\", \"assert\"];\r\n    var _loop_1 = function (method) {\r\n        var originalMethod = originalConsole[method];\r\n        if (originalMethod) {\r\n            originalConsole[method] = function () {\r\n                if (aiLoggingConsole[method]) {\r\n                    try {\r\n                        aiLoggingConsole[method].apply(aiLoggingConsole, arguments);\r\n                    }\r\n                    catch (e) {\r\n                        // Ignore errors; allow the original method to throw if necessary\r\n                    }\r\n                }\r\n                return originalMethod.apply(originalConsole, arguments);\r\n            };\r\n        }\r\n    };\r\n    for (var _i = 0, consoleMethods_1 = consoleMethods; _i < consoleMethods_1.length; _i++) {\r\n        var method = consoleMethods_1[_i];\r\n        _loop_1(method);\r\n    }\r\n    return originalConsole;\r\n};\r\nexports.console = {\r\n    versionSpecifier: \">= 4.0.0\",\r\n    patch: consolePatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"console\", exports.console);\r\n    // Force patching of console\r\n    /* tslint:disable-next-line:no-var-requires */\r\n    __webpack_require__(/*! console */ \"console\");\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=console.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvY29uc29sZS5wdWIuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2RpYWdub3N0aWMtY2hhbm5lbC1wdWJsaXNoZXJzL2Rpc3Qvc3JjL2NvbnNvbGUucHViLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZGV0YWlscy5cclxudmFyIGRpYWdub3N0aWNfY2hhbm5lbF8xID0gcmVxdWlyZShcImRpYWdub3N0aWMtY2hhbm5lbFwiKTtcclxudmFyIHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcclxudmFyIGNvbnNvbGVQYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsQ29uc29sZSkge1xyXG4gICAgdmFyIGFpTG9nZ2luZ091dFN0cmVhbSA9IG5ldyBzdHJlYW1fMS5Xcml0YWJsZSgpO1xyXG4gICAgdmFyIGFpTG9nZ2luZ0VyclN0cmVhbSA9IG5ldyBzdHJlYW1fMS5Xcml0YWJsZSgpO1xyXG4gICAgLy8gRGVmYXVsdCBjb25zb2xlIGlzIHJvdWdobHkgZXF1aXZhbGVudCB0byBgbmV3IENvbnNvbGUocHJvY2Vzcy5zdGRvdXQsIHByb2Nlc3Muc3RkZXJyKWBcclxuICAgIC8vIFdlIGNyZWF0ZSBhIHZlcnNpb24gd2hpY2ggcHVibGlzaGVzIHRvIHRoZSBjaGFubmVsIGFuZCBhbHNvIHRvIHN0ZG91dC9zdGRlcnJcclxuICAgIGFpTG9nZ2luZ091dFN0cmVhbS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xyXG4gICAgICAgIGlmICghY2h1bmspIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZXNzYWdlID0gY2h1bmsudG9TdHJpbmcoKTtcclxuICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnB1Ymxpc2goXCJjb25zb2xlXCIsIHsgbWVzc2FnZTogbWVzc2FnZSB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBhaUxvZ2dpbmdFcnJTdHJlYW0ud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcclxuICAgICAgICBpZiAoIWNodW5rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWVzc2FnZSA9IGNodW5rLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5wdWJsaXNoKFwiY29uc29sZVwiLCB7IG1lc3NhZ2U6IG1lc3NhZ2UsIHN0ZGVycjogdHJ1ZSB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICB2YXIgYWlMb2dnaW5nQ29uc29sZSA9IG5ldyBvcmlnaW5hbENvbnNvbGUuQ29uc29sZShhaUxvZ2dpbmdPdXRTdHJlYW0sIGFpTG9nZ2luZ0VyclN0cmVhbSk7XHJcbiAgICB2YXIgY29uc29sZU1ldGhvZHMgPSBbXCJsb2dcIiwgXCJpbmZvXCIsIFwid2FyblwiLCBcImVycm9yXCIsIFwiZGlyXCIsIFwidGltZVwiLCBcInRpbWVFbmRcIiwgXCJ0cmFjZVwiLCBcImFzc2VydFwiXTtcclxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbE1ldGhvZCA9IG9yaWdpbmFsQ29uc29sZVttZXRob2RdO1xyXG4gICAgICAgIGlmIChvcmlnaW5hbE1ldGhvZCkge1xyXG4gICAgICAgICAgICBvcmlnaW5hbENvbnNvbGVbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhaUxvZ2dpbmdDb25zb2xlW21ldGhvZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhaUxvZ2dpbmdDb25zb2xlW21ldGhvZF0uYXBwbHkoYWlMb2dnaW5nQ29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIGVycm9yczsgYWxsb3cgdGhlIG9yaWdpbmFsIG1ldGhvZCB0byB0aHJvdyBpZiBuZWNlc3NhcnlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkob3JpZ2luYWxDb25zb2xlLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGNvbnNvbGVNZXRob2RzXzEgPSBjb25zb2xlTWV0aG9kczsgX2kgPCBjb25zb2xlTWV0aG9kc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBtZXRob2QgPSBjb25zb2xlTWV0aG9kc18xW19pXTtcclxuICAgICAgICBfbG9vcF8xKG1ldGhvZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3JpZ2luYWxDb25zb2xlO1xyXG59O1xyXG5leHBvcnRzLmNvbnNvbGUgPSB7XHJcbiAgICB2ZXJzaW9uU3BlY2lmaWVyOiBcIj49IDQuMC4wXCIsXHJcbiAgICBwYXRjaDogY29uc29sZVBhdGNoRnVuY3Rpb24sXHJcbn07XHJcbmZ1bmN0aW9uIGVuYWJsZSgpIHtcclxuICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwucmVnaXN0ZXJNb25rZXlQYXRjaChcImNvbnNvbGVcIiwgZXhwb3J0cy5jb25zb2xlKTtcclxuICAgIC8vIEZvcmNlIHBhdGNoaW5nIG9mIGNvbnNvbGVcclxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby12YXItcmVxdWlyZXMgKi9cclxuICAgIHJlcXVpcmUoXCJjb25zb2xlXCIpO1xyXG59XHJcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLnB1Yi5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/console.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bunyan = __webpack_require__(/*! ./bunyan.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/bunyan.pub.js\");\r\nexports.bunyan = bunyan;\r\nvar consolePub = __webpack_require__(/*! ./console.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/console.pub.js\");\r\nexports.console = consolePub;\r\nvar mongodbCore = __webpack_require__(/*! ./mongodb-core.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/mongodb-core.pub.js\");\r\nexports.mongodbCore = mongodbCore;\r\nvar mongodb = __webpack_require__(/*! ./mongodb.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/mongodb.pub.js\");\r\nexports.mongodb = mongodb;\r\nvar mysql = __webpack_require__(/*! ./mysql.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/mysql.pub.js\");\r\nexports.mysql = mysql;\r\nvar pgPool = __webpack_require__(/*! ./pg-pool.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/pg-pool.pub.js\");\r\nexports.pgPool = pgPool;\r\nvar pg = __webpack_require__(/*! ./pg.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/pg.pub.js\");\r\nexports.pg = pg;\r\nvar redis = __webpack_require__(/*! ./redis.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/redis.pub.js\");\r\nexports.redis = redis;\r\nvar winston = __webpack_require__(/*! ./winston.pub */ \"./node_modules/diagnostic-channel-publishers/dist/src/winston.pub.js\");\r\nexports.winston = winston;\r\nfunction enable() {\r\n    bunyan.enable();\r\n    consolePub.enable();\r\n    mongodbCore.enable();\r\n    mongodb.enable();\r\n    mysql.enable();\r\n    pg.enable();\r\n    pgPool.enable();\r\n    redis.enable();\r\n    winston.enable();\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2RpYWdub3N0aWMtY2hhbm5lbC1wdWJsaXNoZXJzL2Rpc3Qvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGRldGFpbHMuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGJ1bnlhbiA9IHJlcXVpcmUoXCIuL2J1bnlhbi5wdWJcIik7XHJcbmV4cG9ydHMuYnVueWFuID0gYnVueWFuO1xyXG52YXIgY29uc29sZVB1YiA9IHJlcXVpcmUoXCIuL2NvbnNvbGUucHViXCIpO1xyXG5leHBvcnRzLmNvbnNvbGUgPSBjb25zb2xlUHViO1xyXG52YXIgbW9uZ29kYkNvcmUgPSByZXF1aXJlKFwiLi9tb25nb2RiLWNvcmUucHViXCIpO1xyXG5leHBvcnRzLm1vbmdvZGJDb3JlID0gbW9uZ29kYkNvcmU7XHJcbnZhciBtb25nb2RiID0gcmVxdWlyZShcIi4vbW9uZ29kYi5wdWJcIik7XHJcbmV4cG9ydHMubW9uZ29kYiA9IG1vbmdvZGI7XHJcbnZhciBteXNxbCA9IHJlcXVpcmUoXCIuL215c3FsLnB1YlwiKTtcclxuZXhwb3J0cy5teXNxbCA9IG15c3FsO1xyXG52YXIgcGdQb29sID0gcmVxdWlyZShcIi4vcGctcG9vbC5wdWJcIik7XHJcbmV4cG9ydHMucGdQb29sID0gcGdQb29sO1xyXG52YXIgcGcgPSByZXF1aXJlKFwiLi9wZy5wdWJcIik7XHJcbmV4cG9ydHMucGcgPSBwZztcclxudmFyIHJlZGlzID0gcmVxdWlyZShcIi4vcmVkaXMucHViXCIpO1xyXG5leHBvcnRzLnJlZGlzID0gcmVkaXM7XHJcbnZhciB3aW5zdG9uID0gcmVxdWlyZShcIi4vd2luc3Rvbi5wdWJcIik7XHJcbmV4cG9ydHMud2luc3RvbiA9IHdpbnN0b247XHJcbmZ1bmN0aW9uIGVuYWJsZSgpIHtcclxuICAgIGJ1bnlhbi5lbmFibGUoKTtcclxuICAgIGNvbnNvbGVQdWIuZW5hYmxlKCk7XHJcbiAgICBtb25nb2RiQ29yZS5lbmFibGUoKTtcclxuICAgIG1vbmdvZGIuZW5hYmxlKCk7XHJcbiAgICBteXNxbC5lbmFibGUoKTtcclxuICAgIHBnLmVuYWJsZSgpO1xyXG4gICAgcGdQb29sLmVuYWJsZSgpO1xyXG4gICAgcmVkaXMuZW5hYmxlKCk7XHJcbiAgICB3aW5zdG9uLmVuYWJsZSgpO1xyXG59XHJcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/index.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/mongodb-core.pub.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/mongodb-core.pub.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar mongodbcorePatchFunction = function (originalMongoCore) {\r\n    var originalConnect = originalMongoCore.Server.prototype.connect;\r\n    originalMongoCore.Server.prototype.connect = function contextPreservingConnect() {\r\n        var ret = originalConnect.apply(this, arguments);\r\n        // Messages sent to mongo progress through a pool\r\n        // This can result in context getting mixed between different responses\r\n        // so we wrap the callbacks to restore appropriate state\r\n        var originalWrite = this.s.pool.write;\r\n        this.s.pool.write = function contextPreservingWrite() {\r\n            var cbidx = typeof arguments[1] === \"function\" ? 1 : 2;\r\n            if (typeof arguments[cbidx] === \"function\") {\r\n                arguments[cbidx] = diagnostic_channel_1.channel.bindToContext(arguments[cbidx]);\r\n            }\r\n            return originalWrite.apply(this, arguments);\r\n        };\r\n        // Logout is a special case, it doesn't call the write function but instead\r\n        // directly calls into connection.write\r\n        var originalLogout = this.s.pool.logout;\r\n        this.s.pool.logout = function contextPreservingLogout() {\r\n            if (typeof arguments[1] === \"function\") {\r\n                arguments[1] = diagnostic_channel_1.channel.bindToContext(arguments[1]);\r\n            }\r\n            return originalLogout.apply(this, arguments);\r\n        };\r\n        return ret;\r\n    };\r\n    return originalMongoCore;\r\n};\r\nexports.mongoCore2 = {\r\n    versionSpecifier: \">= 2.0.0 < 2.2.0\",\r\n    patch: mongodbcorePatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"mongodb-core\", exports.mongoCore2);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=mongodb-core.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvbW9uZ29kYi1jb3JlLnB1Yi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvbW9uZ29kYi1jb3JlLnB1Yi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGRldGFpbHMuXHJcbnZhciBkaWFnbm9zdGljX2NoYW5uZWxfMSA9IHJlcXVpcmUoXCJkaWFnbm9zdGljLWNoYW5uZWxcIik7XHJcbnZhciBtb25nb2RiY29yZVBhdGNoRnVuY3Rpb24gPSBmdW5jdGlvbiAob3JpZ2luYWxNb25nb0NvcmUpIHtcclxuICAgIHZhciBvcmlnaW5hbENvbm5lY3QgPSBvcmlnaW5hbE1vbmdvQ29yZS5TZXJ2ZXIucHJvdG90eXBlLmNvbm5lY3Q7XHJcbiAgICBvcmlnaW5hbE1vbmdvQ29yZS5TZXJ2ZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb250ZXh0UHJlc2VydmluZ0Nvbm5lY3QoKSB7XHJcbiAgICAgICAgdmFyIHJldCA9IG9yaWdpbmFsQ29ubmVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIC8vIE1lc3NhZ2VzIHNlbnQgdG8gbW9uZ28gcHJvZ3Jlc3MgdGhyb3VnaCBhIHBvb2xcclxuICAgICAgICAvLyBUaGlzIGNhbiByZXN1bHQgaW4gY29udGV4dCBnZXR0aW5nIG1peGVkIGJldHdlZW4gZGlmZmVyZW50IHJlc3BvbnNlc1xyXG4gICAgICAgIC8vIHNvIHdlIHdyYXAgdGhlIGNhbGxiYWNrcyB0byByZXN0b3JlIGFwcHJvcHJpYXRlIHN0YXRlXHJcbiAgICAgICAgdmFyIG9yaWdpbmFsV3JpdGUgPSB0aGlzLnMucG9vbC53cml0ZTtcclxuICAgICAgICB0aGlzLnMucG9vbC53cml0ZSA9IGZ1bmN0aW9uIGNvbnRleHRQcmVzZXJ2aW5nV3JpdGUoKSB7XHJcbiAgICAgICAgICAgIHZhciBjYmlkeCA9IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09IFwiZnVuY3Rpb25cIiA/IDEgOiAyO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tjYmlkeF0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzW2NiaWR4XSA9IGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwuYmluZFRvQ29udGV4dChhcmd1bWVudHNbY2JpZHhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxXcml0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gTG9nb3V0IGlzIGEgc3BlY2lhbCBjYXNlLCBpdCBkb2Vzbid0IGNhbGwgdGhlIHdyaXRlIGZ1bmN0aW9uIGJ1dCBpbnN0ZWFkXHJcbiAgICAgICAgLy8gZGlyZWN0bHkgY2FsbHMgaW50byBjb25uZWN0aW9uLndyaXRlXHJcbiAgICAgICAgdmFyIG9yaWdpbmFsTG9nb3V0ID0gdGhpcy5zLnBvb2wubG9nb3V0O1xyXG4gICAgICAgIHRoaXMucy5wb29sLmxvZ291dCA9IGZ1bmN0aW9uIGNvbnRleHRQcmVzZXJ2aW5nTG9nb3V0KCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudHNbMV0gPSBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLmJpbmRUb0NvbnRleHQoYXJndW1lbnRzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxMb2dvdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG9yaWdpbmFsTW9uZ29Db3JlO1xyXG59O1xyXG5leHBvcnRzLm1vbmdvQ29yZTIgPSB7XHJcbiAgICB2ZXJzaW9uU3BlY2lmaWVyOiBcIj49IDIuMC4wIDwgMi4yLjBcIixcclxuICAgIHBhdGNoOiBtb25nb2RiY29yZVBhdGNoRnVuY3Rpb24sXHJcbn07XHJcbmZ1bmN0aW9uIGVuYWJsZSgpIHtcclxuICAgIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwucmVnaXN0ZXJNb25rZXlQYXRjaChcIm1vbmdvZGItY29yZVwiLCBleHBvcnRzLm1vbmdvQ29yZTIpO1xyXG59XHJcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb2RiLWNvcmUucHViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/mongodb-core.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/mongodb.pub.js":
/*!****************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/mongodb.pub.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar mongodbPatchFunction = function (originalMongo) {\r\n    var listener = originalMongo.instrument({\r\n        operationIdGenerator: {\r\n            next: function () {\r\n                return diagnostic_channel_1.channel.bindToContext(function (cb) { return cb(); });\r\n            },\r\n        },\r\n    });\r\n    var eventMap = {};\r\n    listener.on(\"started\", function (event) {\r\n        if (eventMap[event.requestId]) {\r\n            // Note: Mongo can generate 2 completely separate requests\r\n            // which share the same requestId, if a certain race condition is triggered.\r\n            // For now, we accept that this can happen and potentially miss or mislabel some events.\r\n            return;\r\n        }\r\n        eventMap[event.requestId] = event;\r\n    });\r\n    listener.on(\"succeeded\", function (event) {\r\n        var startedData = eventMap[event.requestId];\r\n        if (startedData) {\r\n            delete eventMap[event.requestId];\r\n        }\r\n        event.operationId(function () { return diagnostic_channel_1.channel.publish(\"mongodb\", { startedData: startedData, event: event, succeeded: true }); });\r\n    });\r\n    listener.on(\"failed\", function (event) {\r\n        var startedData = eventMap[event.requestId];\r\n        if (startedData) {\r\n            delete eventMap[event.requestId];\r\n        }\r\n        event.operationId(function () { return diagnostic_channel_1.channel.publish(\"mongodb\", { startedData: startedData, event: event, succeeded: false }); });\r\n    });\r\n    return originalMongo;\r\n};\r\nexports.mongo2 = {\r\n    versionSpecifier: \">= 2.0.0 <= 2.2.x\",\r\n    patch: mongodbPatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"mongodb\", exports.mongo2);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=mongodb.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvbW9uZ29kYi5wdWIuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2RpYWdub3N0aWMtY2hhbm5lbC1wdWJsaXNoZXJzL2Rpc3Qvc3JjL21vbmdvZGIucHViLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZGV0YWlscy5cclxudmFyIGRpYWdub3N0aWNfY2hhbm5lbF8xID0gcmVxdWlyZShcImRpYWdub3N0aWMtY2hhbm5lbFwiKTtcclxudmFyIG1vbmdvZGJQYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsTW9uZ28pIHtcclxuICAgIHZhciBsaXN0ZW5lciA9IG9yaWdpbmFsTW9uZ28uaW5zdHJ1bWVudCh7XHJcbiAgICAgICAgb3BlcmF0aW9uSWRHZW5lcmF0b3I6IHtcclxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpYWdub3N0aWNfY2hhbm5lbF8xLmNoYW5uZWwuYmluZFRvQ29udGV4dChmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIGNiKCk7IH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIHZhciBldmVudE1hcCA9IHt9O1xyXG4gICAgbGlzdGVuZXIub24oXCJzdGFydGVkXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGlmIChldmVudE1hcFtldmVudC5yZXF1ZXN0SWRdKSB7XHJcbiAgICAgICAgICAgIC8vIE5vdGU6IE1vbmdvIGNhbiBnZW5lcmF0ZSAyIGNvbXBsZXRlbHkgc2VwYXJhdGUgcmVxdWVzdHNcclxuICAgICAgICAgICAgLy8gd2hpY2ggc2hhcmUgdGhlIHNhbWUgcmVxdWVzdElkLCBpZiBhIGNlcnRhaW4gcmFjZSBjb25kaXRpb24gaXMgdHJpZ2dlcmVkLlxyXG4gICAgICAgICAgICAvLyBGb3Igbm93LCB3ZSBhY2NlcHQgdGhhdCB0aGlzIGNhbiBoYXBwZW4gYW5kIHBvdGVudGlhbGx5IG1pc3Mgb3IgbWlzbGFiZWwgc29tZSBldmVudHMuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnRNYXBbZXZlbnQucmVxdWVzdElkXSA9IGV2ZW50O1xyXG4gICAgfSk7XHJcbiAgICBsaXN0ZW5lci5vbihcInN1Y2NlZWRlZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgc3RhcnRlZERhdGEgPSBldmVudE1hcFtldmVudC5yZXF1ZXN0SWRdO1xyXG4gICAgICAgIGlmIChzdGFydGVkRGF0YSkge1xyXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRNYXBbZXZlbnQucmVxdWVzdElkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnQub3BlcmF0aW9uSWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5wdWJsaXNoKFwibW9uZ29kYlwiLCB7IHN0YXJ0ZWREYXRhOiBzdGFydGVkRGF0YSwgZXZlbnQ6IGV2ZW50LCBzdWNjZWVkZWQ6IHRydWUgfSk7IH0pO1xyXG4gICAgfSk7XHJcbiAgICBsaXN0ZW5lci5vbihcImZhaWxlZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgc3RhcnRlZERhdGEgPSBldmVudE1hcFtldmVudC5yZXF1ZXN0SWRdO1xyXG4gICAgICAgIGlmIChzdGFydGVkRGF0YSkge1xyXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRNYXBbZXZlbnQucmVxdWVzdElkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnQub3BlcmF0aW9uSWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5wdWJsaXNoKFwibW9uZ29kYlwiLCB7IHN0YXJ0ZWREYXRhOiBzdGFydGVkRGF0YSwgZXZlbnQ6IGV2ZW50LCBzdWNjZWVkZWQ6IGZhbHNlIH0pOyB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9yaWdpbmFsTW9uZ287XHJcbn07XHJcbmV4cG9ydHMubW9uZ28yID0ge1xyXG4gICAgdmVyc2lvblNwZWNpZmllcjogXCI+PSAyLjAuMCA8PSAyLjIueFwiLFxyXG4gICAgcGF0Y2g6IG1vbmdvZGJQYXRjaEZ1bmN0aW9uLFxyXG59O1xyXG5mdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnJlZ2lzdGVyTW9ua2V5UGF0Y2goXCJtb25nb2RiXCIsIGV4cG9ydHMubW9uZ28yKTtcclxufVxyXG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29kYi5wdWIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/mongodb.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/mysql.pub.js":
/*!**************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/mysql.pub.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar mysqlPatchFunction = function (originalMysql, originalMysqlPath) {\r\n    // The `name` passed in here is for debugging purposes,\r\n    // to help distinguish which object is being patched.\r\n    var patchObjectFunction = function (obj, name) {\r\n        return function (func, cbWrapper) {\r\n            var originalFunc = obj[func];\r\n            if (originalFunc) {\r\n                obj[func] = function mysqlContextPreserver() {\r\n                    // Find the callback, if there is one\r\n                    var cbidx = arguments.length - 1;\r\n                    for (var i = arguments.length - 1; i >= 0; --i) {\r\n                        if (typeof arguments[i] === \"function\") {\r\n                            cbidx = i;\r\n                            break;\r\n                        }\r\n                        else if (typeof arguments[i] !== \"undefined\") {\r\n                            break;\r\n                        }\r\n                    }\r\n                    var cb = arguments[cbidx];\r\n                    var resultContainer = { result: null, startTime: null };\r\n                    if (typeof cb === \"function\") {\r\n                        // Preserve context on the callback.\r\n                        // If this is one of the functions that we want to track,\r\n                        // then wrap the callback with the tracking wrapper\r\n                        if (cbWrapper) {\r\n                            resultContainer.startTime = process.hrtime();\r\n                            arguments[cbidx] = diagnostic_channel_1.channel.bindToContext(cbWrapper(resultContainer, cb));\r\n                        }\r\n                        else {\r\n                            arguments[cbidx] = diagnostic_channel_1.channel.bindToContext(cb);\r\n                        }\r\n                    }\r\n                    var result = originalFunc.apply(this, arguments);\r\n                    resultContainer.result = result;\r\n                    return result;\r\n                };\r\n            }\r\n        };\r\n    };\r\n    var patchClassMemberFunction = function (classObject, name) {\r\n        return patchObjectFunction(classObject.prototype, name + \".prototype\");\r\n    };\r\n    var connectionCallbackFunctions = [\r\n        \"connect\", \"changeUser\",\r\n        \"ping\", \"statistics\", \"end\",\r\n    ];\r\n    var connectionClass = __webpack_require__(\"./node_modules/diagnostic-channel-publishers/dist/src sync recursive ^.*\\\\/lib\\\\/Connection$\")(path.dirname(originalMysqlPath) + \"/lib/Connection\");\r\n    connectionCallbackFunctions.forEach(function (value) { return patchClassMemberFunction(connectionClass, \"Connection\")(value); });\r\n    // Connection.createQuery is a static method\r\n    patchObjectFunction(connectionClass, \"Connection\")(\"createQuery\", function (resultContainer, cb) {\r\n        return function (err) {\r\n            var hrDuration = process.hrtime(resultContainer.startTime);\r\n            /* tslint:disable-next-line:no-bitwise */\r\n            var duration = (hrDuration[0] * 1e3 + hrDuration[1] / 1e6) | 0;\r\n            diagnostic_channel_1.channel.publish(\"mysql\", { query: resultContainer.result, callbackArgs: arguments, err: err, duration: duration });\r\n            cb.apply(this, arguments);\r\n        };\r\n    });\r\n    var poolCallbackFunctions = [\r\n        \"_enqueueCallback\",\r\n    ];\r\n    var poolClass = __webpack_require__(\"./node_modules/diagnostic-channel-publishers/dist/src sync recursive ^.*\\\\/lib\\\\/Pool$\")(path.dirname(originalMysqlPath) + \"/lib/Pool\");\r\n    poolCallbackFunctions.forEach(function (value) { return patchClassMemberFunction(poolClass, \"Pool\")(value); });\r\n    return originalMysql;\r\n};\r\nexports.mysql = {\r\n    versionSpecifier: \">= 2.0.0 <= 2.14.x\",\r\n    patch: mysqlPatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"mysql\", exports.mysql);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=mysql.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvbXlzcWwucHViLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9kaWFnbm9zdGljLWNoYW5uZWwtcHVibGlzaGVycy9kaXN0L3NyYy9teXNxbC5wdWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBkZXRhaWxzLlxyXG52YXIgZGlhZ25vc3RpY19jaGFubmVsXzEgPSByZXF1aXJlKFwiZGlhZ25vc3RpYy1jaGFubmVsXCIpO1xyXG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG52YXIgbXlzcWxQYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsTXlzcWwsIG9yaWdpbmFsTXlzcWxQYXRoKSB7XHJcbiAgICAvLyBUaGUgYG5hbWVgIHBhc3NlZCBpbiBoZXJlIGlzIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMsXHJcbiAgICAvLyB0byBoZWxwIGRpc3Rpbmd1aXNoIHdoaWNoIG9iamVjdCBpcyBiZWluZyBwYXRjaGVkLlxyXG4gICAgdmFyIHBhdGNoT2JqZWN0RnVuY3Rpb24gPSBmdW5jdGlvbiAob2JqLCBuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmdW5jLCBjYldyYXBwZXIpIHtcclxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsRnVuYyA9IG9ialtmdW5jXTtcclxuICAgICAgICAgICAgaWYgKG9yaWdpbmFsRnVuYykge1xyXG4gICAgICAgICAgICAgICAgb2JqW2Z1bmNdID0gZnVuY3Rpb24gbXlzcWxDb250ZXh0UHJlc2VydmVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNhbGxiYWNrLCBpZiB0aGVyZSBpcyBvbmVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2JpZHggPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiaWR4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYiA9IGFyZ3VtZW50c1tjYmlkeF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdENvbnRhaW5lciA9IHsgcmVzdWx0OiBudWxsLCBzdGFydFRpbWU6IG51bGwgfTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJlc2VydmUgY29udGV4dCBvbiB0aGUgY2FsbGJhY2suXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgb25lIG9mIHRoZSBmdW5jdGlvbnMgdGhhdCB3ZSB3YW50IHRvIHRyYWNrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIHdyYXAgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHRyYWNraW5nIHdyYXBwZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNiV3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q29udGFpbmVyLnN0YXJ0VGltZSA9IHByb2Nlc3MuaHJ0aW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbY2JpZHhdID0gZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5iaW5kVG9Db250ZXh0KGNiV3JhcHBlcihyZXN1bHRDb250YWluZXIsIGNiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbY2JpZHhdID0gZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5iaW5kVG9Db250ZXh0KGNiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWxGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q29udGFpbmVyLnJlc3VsdCA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIHBhdGNoQ2xhc3NNZW1iZXJGdW5jdGlvbiA9IGZ1bmN0aW9uIChjbGFzc09iamVjdCwgbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBwYXRjaE9iamVjdEZ1bmN0aW9uKGNsYXNzT2JqZWN0LnByb3RvdHlwZSwgbmFtZSArIFwiLnByb3RvdHlwZVwiKTtcclxuICAgIH07XHJcbiAgICB2YXIgY29ubmVjdGlvbkNhbGxiYWNrRnVuY3Rpb25zID0gW1xyXG4gICAgICAgIFwiY29ubmVjdFwiLCBcImNoYW5nZVVzZXJcIixcclxuICAgICAgICBcInBpbmdcIiwgXCJzdGF0aXN0aWNzXCIsIFwiZW5kXCIsXHJcbiAgICBdO1xyXG4gICAgdmFyIGNvbm5lY3Rpb25DbGFzcyA9IHJlcXVpcmUocGF0aC5kaXJuYW1lKG9yaWdpbmFsTXlzcWxQYXRoKSArIFwiL2xpYi9Db25uZWN0aW9uXCIpO1xyXG4gICAgY29ubmVjdGlvbkNhbGxiYWNrRnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBwYXRjaENsYXNzTWVtYmVyRnVuY3Rpb24oY29ubmVjdGlvbkNsYXNzLCBcIkNvbm5lY3Rpb25cIikodmFsdWUpOyB9KTtcclxuICAgIC8vIENvbm5lY3Rpb24uY3JlYXRlUXVlcnkgaXMgYSBzdGF0aWMgbWV0aG9kXHJcbiAgICBwYXRjaE9iamVjdEZ1bmN0aW9uKGNvbm5lY3Rpb25DbGFzcywgXCJDb25uZWN0aW9uXCIpKFwiY3JlYXRlUXVlcnlcIiwgZnVuY3Rpb24gKHJlc3VsdENvbnRhaW5lciwgY2IpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICB2YXIgaHJEdXJhdGlvbiA9IHByb2Nlc3MuaHJ0aW1lKHJlc3VsdENvbnRhaW5lci5zdGFydFRpbWUpO1xyXG4gICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZSAqL1xyXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSAoaHJEdXJhdGlvblswXSAqIDFlMyArIGhyRHVyYXRpb25bMV0gLyAxZTYpIHwgMDtcclxuICAgICAgICAgICAgZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5wdWJsaXNoKFwibXlzcWxcIiwgeyBxdWVyeTogcmVzdWx0Q29udGFpbmVyLnJlc3VsdCwgY2FsbGJhY2tBcmdzOiBhcmd1bWVudHMsIGVycjogZXJyLCBkdXJhdGlvbjogZHVyYXRpb24gfSk7XHJcbiAgICAgICAgICAgIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgdmFyIHBvb2xDYWxsYmFja0Z1bmN0aW9ucyA9IFtcclxuICAgICAgICBcIl9lbnF1ZXVlQ2FsbGJhY2tcIixcclxuICAgIF07XHJcbiAgICB2YXIgcG9vbENsYXNzID0gcmVxdWlyZShwYXRoLmRpcm5hbWUob3JpZ2luYWxNeXNxbFBhdGgpICsgXCIvbGliL1Bvb2xcIik7XHJcbiAgICBwb29sQ2FsbGJhY2tGdW5jdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHBhdGNoQ2xhc3NNZW1iZXJGdW5jdGlvbihwb29sQ2xhc3MsIFwiUG9vbFwiKSh2YWx1ZSk7IH0pO1xyXG4gICAgcmV0dXJuIG9yaWdpbmFsTXlzcWw7XHJcbn07XHJcbmV4cG9ydHMubXlzcWwgPSB7XHJcbiAgICB2ZXJzaW9uU3BlY2lmaWVyOiBcIj49IDIuMC4wIDw9IDIuMTQueFwiLFxyXG4gICAgcGF0Y2g6IG15c3FsUGF0Y2hGdW5jdGlvbixcclxufTtcclxuZnVuY3Rpb24gZW5hYmxlKCkge1xyXG4gICAgZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5yZWdpc3Rlck1vbmtleVBhdGNoKFwibXlzcWxcIiwgZXhwb3J0cy5teXNxbCk7XHJcbn1cclxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsLnB1Yi5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/mysql.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/pg-pool.pub.js":
/*!****************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/pg-pool.pub.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nfunction postgresPool1PatchFunction(originalPgPool) {\r\n    var originalConnect = originalPgPool.prototype.connect;\r\n    originalPgPool.prototype.connect = function connect(callback) {\r\n        if (callback) {\r\n            arguments[0] = diagnostic_channel_1.channel.bindToContext(callback);\r\n        }\r\n        originalConnect.apply(this, arguments);\r\n    };\r\n    return originalPgPool;\r\n}\r\nexports.postgresPool1 = {\r\n    versionSpecifier: \"1.x\",\r\n    patch: postgresPool1PatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"pg-pool\", exports.postgresPool1);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=pg-pool.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvcGctcG9vbC5wdWIuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2RpYWdub3N0aWMtY2hhbm5lbC1wdWJsaXNoZXJzL2Rpc3Qvc3JjL3BnLXBvb2wucHViLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZGV0YWlscy5cclxudmFyIGRpYWdub3N0aWNfY2hhbm5lbF8xID0gcmVxdWlyZShcImRpYWdub3N0aWMtY2hhbm5lbFwiKTtcclxuZnVuY3Rpb24gcG9zdGdyZXNQb29sMVBhdGNoRnVuY3Rpb24ob3JpZ2luYWxQZ1Bvb2wpIHtcclxuICAgIHZhciBvcmlnaW5hbENvbm5lY3QgPSBvcmlnaW5hbFBnUG9vbC5wcm90b3R5cGUuY29ubmVjdDtcclxuICAgIG9yaWdpbmFsUGdQb29sLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChjYWxsYmFjaykge1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLmJpbmRUb0NvbnRleHQoY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvcmlnaW5hbENvbm5lY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gb3JpZ2luYWxQZ1Bvb2w7XHJcbn1cclxuZXhwb3J0cy5wb3N0Z3Jlc1Bvb2wxID0ge1xyXG4gICAgdmVyc2lvblNwZWNpZmllcjogXCIxLnhcIixcclxuICAgIHBhdGNoOiBwb3N0Z3Jlc1Bvb2wxUGF0Y2hGdW5jdGlvbixcclxufTtcclxuZnVuY3Rpb24gZW5hYmxlKCkge1xyXG4gICAgZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5yZWdpc3Rlck1vbmtleVBhdGNoKFwicGctcG9vbFwiLCBleHBvcnRzLnBvc3RncmVzUG9vbDEpO1xyXG59XHJcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZy1wb29sLnB1Yi5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/pg-pool.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/pg.pub.js":
/*!***********************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/pg.pub.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar events_1 = __webpack_require__(/*! events */ \"events\");\r\nfunction postgres6PatchFunction(originalPg, originalPgPath) {\r\n    var originalClientQuery = originalPg.Client.prototype.query;\r\n    var diagnosticOriginalFunc = \"__diagnosticOriginalFunc\";\r\n    // wherever the callback is passed, find it, save it, and remove it from the call\r\n    // to the the original .query() function\r\n    originalPg.Client.prototype.query = function query(config, values, callback) {\r\n        var data = {\r\n            query: {},\r\n            database: {\r\n                host: this.connectionParameters.host,\r\n                port: this.connectionParameters.port,\r\n            },\r\n            result: null,\r\n            error: null,\r\n            duration: 0,\r\n        };\r\n        var start = process.hrtime();\r\n        var queryResult;\r\n        function patchCallback(cb) {\r\n            if (cb && cb[diagnosticOriginalFunc]) {\r\n                cb = cb[diagnosticOriginalFunc];\r\n            }\r\n            var trackingCallback = diagnostic_channel_1.channel.bindToContext(function (err, res) {\r\n                var end = process.hrtime(start);\r\n                data.result = res && { rowCount: res.rowCount, command: res.command };\r\n                data.error = err;\r\n                data.duration = Math.ceil((end[0] * 1e3) + (end[1] / 1e6));\r\n                diagnostic_channel_1.channel.publish(\"postgres\", data);\r\n                // emulate weird internal behavior in pg@6\r\n                // on success, the callback is called *before* query events are emitted\r\n                // on failure, the callback is called *instead of* the query emitting events\r\n                // with no events, that means no promises (since the promise is resolved/rejected in an event handler)\r\n                // since we are always inserting ourselves as a callback, we have to restore the original\r\n                // behavior if the user didn't provide one themselves\r\n                if (err) {\r\n                    if (cb) {\r\n                        return cb.apply(this, arguments);\r\n                    }\r\n                    else if (queryResult && queryResult instanceof events_1.EventEmitter) {\r\n                        queryResult.emit(\"error\", err);\r\n                    }\r\n                }\r\n                else if (cb) {\r\n                    cb.apply(this, arguments);\r\n                }\r\n            });\r\n            try {\r\n                Object.defineProperty(trackingCallback, diagnosticOriginalFunc, { value: cb });\r\n                return trackingCallback;\r\n            }\r\n            catch (e) {\r\n                // this should never happen, but bailout in case it does\r\n                return cb;\r\n            }\r\n        }\r\n        // this function takes too many variations of arguments.\r\n        // this patches any provided callback or creates a new callback if one wasn't provided.\r\n        // since the callback is always called (if provided) in addition to always having a Promisified\r\n        // EventEmitter returned (well, sometimes -- see above), its safe to insert a callback if none was given\r\n        try {\r\n            if (typeof config === \"string\") {\r\n                if (values instanceof Array) {\r\n                    data.query.preparable = {\r\n                        text: config,\r\n                        args: values,\r\n                    };\r\n                    callback = patchCallback(callback);\r\n                }\r\n                else {\r\n                    data.query.text = config;\r\n                    // pg v6 will, for some reason, accept both\r\n                    // client.query(\"...\", undefined, () => {...})\r\n                    // **and**\r\n                    // client.query(\"...\", () => {...});\r\n                    // Internally, precedence is given to the callback argument\r\n                    if (callback) {\r\n                        callback = patchCallback(callback);\r\n                    }\r\n                    else {\r\n                        values = patchCallback(values);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (typeof config.name === \"string\") {\r\n                    data.query.plan = config.name;\r\n                }\r\n                else if (config.values instanceof Array) {\r\n                    data.query.preparable = {\r\n                        text: config.text,\r\n                        args: config.values,\r\n                    };\r\n                }\r\n                else {\r\n                    data.query.text = config.text;\r\n                }\r\n                if (callback) {\r\n                    callback = patchCallback(callback);\r\n                }\r\n                else if (values) {\r\n                    values = patchCallback(values);\r\n                }\r\n                else {\r\n                    config.callback = patchCallback(config.callback);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // if our logic here throws, bail out and just let pg do its thing\r\n            return originalClientQuery.apply(this, arguments);\r\n        }\r\n        arguments[0] = config;\r\n        arguments[1] = values;\r\n        arguments[2] = callback;\r\n        arguments.length = (arguments.length > 3) ? arguments.length : 3;\r\n        queryResult = originalClientQuery.apply(this, arguments);\r\n        return queryResult;\r\n    };\r\n    return originalPg;\r\n}\r\nexports.postgres6 = {\r\n    versionSpecifier: \"6.x\",\r\n    patch: postgres6PatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"pg\", exports.postgres6);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=pg.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/pg.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/redis.pub.js":
/*!**************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/redis.pub.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\nvar redisPatchFunction = function (originalRedis) {\r\n    var originalSend = originalRedis.RedisClient.prototype.internal_send_command;\r\n    // Note: This is mixing together both context tracking and dependency tracking\r\n    originalRedis.RedisClient.prototype.internal_send_command = function (commandObj) {\r\n        if (commandObj) {\r\n            var cb_1 = commandObj.callback;\r\n            if (!cb_1 || !cb_1.pubsubBound) {\r\n                var address_1 = this.address;\r\n                var startTime_1 = process.hrtime();\r\n                // Note: augmenting the callback on internal_send_command is correct for context\r\n                // tracking, but may be too low-level for dependency tracking. There are some 'errors'\r\n                // which higher levels expect in some cases\r\n                // However, the only other option is to intercept every individual command.\r\n                commandObj.callback = diagnostic_channel_1.channel.bindToContext(function (err, result) {\r\n                    var hrDuration = process.hrtime(startTime_1);\r\n                    /* tslint:disable-next-line:no-bitwise */\r\n                    var duration = (hrDuration[0] * 1e3 + hrDuration[1] / 1e6) | 0;\r\n                    diagnostic_channel_1.channel.publish(\"redis\", { duration: duration, address: address_1, commandObj: commandObj, err: err, result: result });\r\n                    if (typeof cb_1 === \"function\") {\r\n                        cb_1.apply(this, arguments);\r\n                    }\r\n                });\r\n                commandObj.callback.pubsubBound = true;\r\n            }\r\n        }\r\n        return originalSend.call(this, commandObj);\r\n    };\r\n    return originalRedis;\r\n};\r\nexports.redis = {\r\n    versionSpecifier: \">= 2.0.0 < 3.0.0\",\r\n    patch: redisPatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"redis\", exports.redis);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=redis.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvcmVkaXMucHViLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9kaWFnbm9zdGljLWNoYW5uZWwtcHVibGlzaGVycy9kaXN0L3NyYy9yZWRpcy5wdWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBkZXRhaWxzLlxyXG52YXIgZGlhZ25vc3RpY19jaGFubmVsXzEgPSByZXF1aXJlKFwiZGlhZ25vc3RpYy1jaGFubmVsXCIpO1xyXG52YXIgcmVkaXNQYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsUmVkaXMpIHtcclxuICAgIHZhciBvcmlnaW5hbFNlbmQgPSBvcmlnaW5hbFJlZGlzLlJlZGlzQ2xpZW50LnByb3RvdHlwZS5pbnRlcm5hbF9zZW5kX2NvbW1hbmQ7XHJcbiAgICAvLyBOb3RlOiBUaGlzIGlzIG1peGluZyB0b2dldGhlciBib3RoIGNvbnRleHQgdHJhY2tpbmcgYW5kIGRlcGVuZGVuY3kgdHJhY2tpbmdcclxuICAgIG9yaWdpbmFsUmVkaXMuUmVkaXNDbGllbnQucHJvdG90eXBlLmludGVybmFsX3NlbmRfY29tbWFuZCA9IGZ1bmN0aW9uIChjb21tYW5kT2JqKSB7XHJcbiAgICAgICAgaWYgKGNvbW1hbmRPYmopIHtcclxuICAgICAgICAgICAgdmFyIGNiXzEgPSBjb21tYW5kT2JqLmNhbGxiYWNrO1xyXG4gICAgICAgICAgICBpZiAoIWNiXzEgfHwgIWNiXzEucHVic3ViQm91bmQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzXzEgPSB0aGlzLmFkZHJlc3M7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRUaW1lXzEgPSBwcm9jZXNzLmhydGltZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogYXVnbWVudGluZyB0aGUgY2FsbGJhY2sgb24gaW50ZXJuYWxfc2VuZF9jb21tYW5kIGlzIGNvcnJlY3QgZm9yIGNvbnRleHRcclxuICAgICAgICAgICAgICAgIC8vIHRyYWNraW5nLCBidXQgbWF5IGJlIHRvbyBsb3ctbGV2ZWwgZm9yIGRlcGVuZGVuY3kgdHJhY2tpbmcuIFRoZXJlIGFyZSBzb21lICdlcnJvcnMnXHJcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBoaWdoZXIgbGV2ZWxzIGV4cGVjdCBpbiBzb21lIGNhc2VzXHJcbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB0aGUgb25seSBvdGhlciBvcHRpb24gaXMgdG8gaW50ZXJjZXB0IGV2ZXJ5IGluZGl2aWR1YWwgY29tbWFuZC5cclxuICAgICAgICAgICAgICAgIGNvbW1hbmRPYmouY2FsbGJhY2sgPSBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLmJpbmRUb0NvbnRleHQoZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhyRHVyYXRpb24gPSBwcm9jZXNzLmhydGltZShzdGFydFRpbWVfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2UgKi9cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSAoaHJEdXJhdGlvblswXSAqIDFlMyArIGhyRHVyYXRpb25bMV0gLyAxZTYpIHwgMDtcclxuICAgICAgICAgICAgICAgICAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnB1Ymxpc2goXCJyZWRpc1wiLCB7IGR1cmF0aW9uOiBkdXJhdGlvbiwgYWRkcmVzczogYWRkcmVzc18xLCBjb21tYW5kT2JqOiBjb21tYW5kT2JqLCBlcnI6IGVyciwgcmVzdWx0OiByZXN1bHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYl8xID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2JfMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZE9iai5jYWxsYmFjay5wdWJzdWJCb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsU2VuZC5jYWxsKHRoaXMsIGNvbW1hbmRPYmopO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBvcmlnaW5hbFJlZGlzO1xyXG59O1xyXG5leHBvcnRzLnJlZGlzID0ge1xyXG4gICAgdmVyc2lvblNwZWNpZmllcjogXCI+PSAyLjAuMCA8IDMuMC4wXCIsXHJcbiAgICBwYXRjaDogcmVkaXNQYXRjaEZ1bmN0aW9uLFxyXG59O1xyXG5mdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnJlZ2lzdGVyTW9ua2V5UGF0Y2goXCJyZWRpc1wiLCBleHBvcnRzLnJlZGlzKTtcclxufVxyXG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXMucHViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/redis.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel-publishers/dist/src/winston.pub.js":
/*!****************************************************************************!*\
  !*** ./node_modules/diagnostic-channel-publishers/dist/src/winston.pub.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nvar diagnostic_channel_1 = __webpack_require__(/*! diagnostic-channel */ \"./node_modules/diagnostic-channel/dist/src/channel.js\");\r\n// register a \"filter\" with each logger that publishes the data about to be logged\r\nvar winstonPatchFunction = function (originalWinston) {\r\n    var originalLog = originalWinston.Logger.prototype.log;\r\n    var curLevels;\r\n    var loggingFilter = function (level, message, meta) {\r\n        var levelKind;\r\n        if (curLevels === originalWinston.config.npm.levels) {\r\n            levelKind = \"npm\";\r\n        }\r\n        else if (curLevels === originalWinston.config.syslog.levels) {\r\n            levelKind = \"syslog\";\r\n        }\r\n        else {\r\n            levelKind = \"unknown\";\r\n        }\r\n        diagnostic_channel_1.channel.publish(\"winston\", { level: level, message: message, meta: meta, levelKind: levelKind });\r\n        return message;\r\n    };\r\n    // whenever someone logs, ensure our filter comes last\r\n    originalWinston.Logger.prototype.log = function log() {\r\n        curLevels = this.levels;\r\n        if (!this.filters || this.filters.length === 0) {\r\n            this.filters = [loggingFilter];\r\n        }\r\n        else if (this.filters[this.filters.length - 1] !== loggingFilter) {\r\n            this.filters = this.filters.filter(function (f) { return f !== loggingFilter; });\r\n            this.filters.push(loggingFilter);\r\n        }\r\n        return originalLog.apply(this, arguments);\r\n    };\r\n    return originalWinston;\r\n};\r\nexports.winston = {\r\n    versionSpecifier: \"2.x\",\r\n    patch: winstonPatchFunction,\r\n};\r\nfunction enable() {\r\n    diagnostic_channel_1.channel.registerMonkeyPatch(\"winston\", exports.winston);\r\n}\r\nexports.enable = enable;\r\n//# sourceMappingURL=winston.pub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsLXB1Ymxpc2hlcnMvZGlzdC9zcmMvd2luc3Rvbi5wdWIuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2RpYWdub3N0aWMtY2hhbm5lbC1wdWJsaXNoZXJzL2Rpc3Qvc3JjL3dpbnN0b24ucHViLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZGV0YWlscy5cclxudmFyIGRpYWdub3N0aWNfY2hhbm5lbF8xID0gcmVxdWlyZShcImRpYWdub3N0aWMtY2hhbm5lbFwiKTtcclxuLy8gcmVnaXN0ZXIgYSBcImZpbHRlclwiIHdpdGggZWFjaCBsb2dnZXIgdGhhdCBwdWJsaXNoZXMgdGhlIGRhdGEgYWJvdXQgdG8gYmUgbG9nZ2VkXHJcbnZhciB3aW5zdG9uUGF0Y2hGdW5jdGlvbiA9IGZ1bmN0aW9uIChvcmlnaW5hbFdpbnN0b24pIHtcclxuICAgIHZhciBvcmlnaW5hbExvZyA9IG9yaWdpbmFsV2luc3Rvbi5Mb2dnZXIucHJvdG90eXBlLmxvZztcclxuICAgIHZhciBjdXJMZXZlbHM7XHJcbiAgICB2YXIgbG9nZ2luZ0ZpbHRlciA9IGZ1bmN0aW9uIChsZXZlbCwgbWVzc2FnZSwgbWV0YSkge1xyXG4gICAgICAgIHZhciBsZXZlbEtpbmQ7XHJcbiAgICAgICAgaWYgKGN1ckxldmVscyA9PT0gb3JpZ2luYWxXaW5zdG9uLmNvbmZpZy5ucG0ubGV2ZWxzKSB7XHJcbiAgICAgICAgICAgIGxldmVsS2luZCA9IFwibnBtXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN1ckxldmVscyA9PT0gb3JpZ2luYWxXaW5zdG9uLmNvbmZpZy5zeXNsb2cubGV2ZWxzKSB7XHJcbiAgICAgICAgICAgIGxldmVsS2luZCA9IFwic3lzbG9nXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXZlbEtpbmQgPSBcInVua25vd25cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlhZ25vc3RpY19jaGFubmVsXzEuY2hhbm5lbC5wdWJsaXNoKFwid2luc3RvblwiLCB7IGxldmVsOiBsZXZlbCwgbWVzc2FnZTogbWVzc2FnZSwgbWV0YTogbWV0YSwgbGV2ZWxLaW5kOiBsZXZlbEtpbmQgfSk7XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9O1xyXG4gICAgLy8gd2hlbmV2ZXIgc29tZW9uZSBsb2dzLCBlbnN1cmUgb3VyIGZpbHRlciBjb21lcyBsYXN0XHJcbiAgICBvcmlnaW5hbFdpbnN0b24uTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiBsb2coKSB7XHJcbiAgICAgICAgY3VyTGV2ZWxzID0gdGhpcy5sZXZlbHM7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlcnMgfHwgdGhpcy5maWx0ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMgPSBbbG9nZ2luZ0ZpbHRlcl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZmlsdGVyc1t0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMV0gIT09IGxvZ2dpbmdGaWx0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJzID0gdGhpcy5maWx0ZXJzLmZpbHRlcihmdW5jdGlvbiAoZikgeyByZXR1cm4gZiAhPT0gbG9nZ2luZ0ZpbHRlcjsgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5wdXNoKGxvZ2dpbmdGaWx0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3JpZ2luYWxMb2cuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gb3JpZ2luYWxXaW5zdG9uO1xyXG59O1xyXG5leHBvcnRzLndpbnN0b24gPSB7XHJcbiAgICB2ZXJzaW9uU3BlY2lmaWVyOiBcIjIueFwiLFxyXG4gICAgcGF0Y2g6IHdpbnN0b25QYXRjaEZ1bmN0aW9uLFxyXG59O1xyXG5mdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICBkaWFnbm9zdGljX2NoYW5uZWxfMS5jaGFubmVsLnJlZ2lzdGVyTW9ua2V5UGF0Y2goXCJ3aW5zdG9uXCIsIGV4cG9ydHMud2luc3Rvbik7XHJcbn1cclxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbnN0b24ucHViLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel-publishers/dist/src/winston.pub.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel/dist/src/channel.js":
/*!*************************************************************!*\
  !*** ./node_modules/diagnostic-channel/dist/src/channel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar patchRequire_1 = __webpack_require__(/*! ./patchRequire */ \"./node_modules/diagnostic-channel/dist/src/patchRequire.js\");\r\nvar patchRequire_2 = __webpack_require__(/*! ./patchRequire */ \"./node_modules/diagnostic-channel/dist/src/patchRequire.js\");\r\nexports.makePatchingRequire = patchRequire_2.makePatchingRequire;\r\nvar trueFilter = function (publishing) { return true; };\r\nvar ContextPreservingEventEmitter = (function () {\r\n    function ContextPreservingEventEmitter() {\r\n        this.version = __webpack_require__(/*! ./../../package.json */ \"./node_modules/diagnostic-channel/package.json\").version; // Allow for future versions to replace things?\r\n        this.subscribers = {};\r\n        this.contextPreservationFunction = function (cb) { return cb; };\r\n        this.knownPatches = {};\r\n        this.currentlyPublishing = false;\r\n    }\r\n    ContextPreservingEventEmitter.prototype.shouldPublish = function (name) {\r\n        var listeners = this.subscribers[name];\r\n        if (listeners) {\r\n            return listeners.some(function (_a) {\r\n                var filter = _a.filter;\r\n                return !filter || filter(false);\r\n            });\r\n        }\r\n        return false;\r\n    };\r\n    ContextPreservingEventEmitter.prototype.publish = function (name, event) {\r\n        if (this.currentlyPublishing) {\r\n            return; // Avoid reentrancy\r\n        }\r\n        var listeners = this.subscribers[name];\r\n        // Note: Listeners called synchronously to preserve context\r\n        if (listeners) {\r\n            var standardEvent_1 = {\r\n                timestamp: Date.now(),\r\n                data: event,\r\n            };\r\n            this.currentlyPublishing = true;\r\n            listeners.forEach(function (_a) {\r\n                var listener = _a.listener, filter = _a.filter;\r\n                try {\r\n                    if (filter && filter(true)) {\r\n                        listener(standardEvent_1);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // Subscriber threw an error\r\n                }\r\n            });\r\n            this.currentlyPublishing = false;\r\n        }\r\n    };\r\n    ContextPreservingEventEmitter.prototype.subscribe = function (name, listener, filter) {\r\n        if (filter === void 0) { filter = trueFilter; }\r\n        if (!this.subscribers[name]) {\r\n            this.subscribers[name] = [];\r\n        }\r\n        this.subscribers[name].push({ listener: listener, filter: filter });\r\n    };\r\n    ContextPreservingEventEmitter.prototype.unsubscribe = function (name, listener, filter) {\r\n        if (filter === void 0) { filter = trueFilter; }\r\n        var listeners = this.subscribers[name];\r\n        if (listeners) {\r\n            for (var index = 0; index < listeners.length; ++index) {\r\n                if (listeners[index].listener === listener && listeners[index].filter === filter) {\r\n                    listeners.splice(index, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    // Used for tests\r\n    ContextPreservingEventEmitter.prototype.reset = function () {\r\n        var _this = this;\r\n        this.subscribers = {};\r\n        this.contextPreservationFunction = function (cb) { return cb; };\r\n        // Modify the knownPatches object rather than replace, since a reference will be used in the require patcher\r\n        Object.getOwnPropertyNames(this.knownPatches).forEach(function (prop) { return delete _this.knownPatches[prop]; });\r\n    };\r\n    ContextPreservingEventEmitter.prototype.bindToContext = function (cb) {\r\n        return this.contextPreservationFunction(cb);\r\n    };\r\n    ContextPreservingEventEmitter.prototype.addContextPreservation = function (preserver) {\r\n        var previousPreservationStack = this.contextPreservationFunction;\r\n        this.contextPreservationFunction = (function (cb) { return preserver(previousPreservationStack(cb)); });\r\n    };\r\n    ContextPreservingEventEmitter.prototype.registerMonkeyPatch = function (packageName, patcher) {\r\n        if (!this.knownPatches[packageName]) {\r\n            this.knownPatches[packageName] = [];\r\n        }\r\n        this.knownPatches[packageName].push(patcher);\r\n    };\r\n    ContextPreservingEventEmitter.prototype.getPatchesObject = function () {\r\n        return this.knownPatches;\r\n    };\r\n    return ContextPreservingEventEmitter;\r\n}());\r\nif (!global.diagnosticsSource) {\r\n    global.diagnosticsSource = new ContextPreservingEventEmitter();\r\n    // TODO: should this only patch require after at least one monkey patch is registered?\r\n    /* tslint:disable-next-line:no-var-requires */\r\n    var moduleModule = __webpack_require__(/*! module */ \"module\");\r\n    // Note: We pass in the object now before any patches are registered, but the object is passed by reference\r\n    // so any updates made to the object will be visible in the patcher.\r\n    moduleModule.prototype.require = patchRequire_1.makePatchingRequire(global.diagnosticsSource.getPatchesObject());\r\n}\r\nexports.channel = global.diagnosticsSource;\r\n//# sourceMappingURL=channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel/dist/src/channel.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel/dist/src/patchRequire.js":
/*!******************************************************************!*\
  !*** ./node_modules/diagnostic-channel/dist/src/patchRequire.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar semver = __webpack_require__(/*! semver */ \"./node_modules/semver/semver.js\");\r\n/* tslint:disable-next-line:no-var-requires */\r\nvar moduleModule = __webpack_require__(/*! module */ \"module\");\r\nvar nativeModules = Object.keys(process.binding(\"natives\"));\r\nvar originalRequire = moduleModule.prototype.require;\r\nfunction makePatchingRequire(knownPatches) {\r\n    var patchedModules = {};\r\n    return function patchedRequire(moduleId) {\r\n        var originalModule = originalRequire.apply(this, arguments);\r\n        if (knownPatches[moduleId]) {\r\n            // Fetch the specific path of the module\r\n            var modulePath = moduleModule._resolveFilename(moduleId, this);\r\n            if (patchedModules.hasOwnProperty(modulePath)) {\r\n                // This module has already been patched, no need to reapply\r\n                return patchedModules[modulePath];\r\n            }\r\n            var moduleVersion = void 0;\r\n            if (nativeModules.indexOf(moduleId) < 0) {\r\n                try {\r\n                    moduleVersion = originalRequire.call(this, path.join(moduleId, \"package.json\")).version;\r\n                }\r\n                catch (e) {\r\n                    // This should only happen if moduleId is actually a path rather than a module\r\n                    // This is not a supported scenario\r\n                    return originalModule;\r\n                }\r\n            }\r\n            else {\r\n                // This module is implemented natively so we cannot find a package.json\r\n                // Instead, take the version of node itself\r\n                moduleVersion = process.version.substring(1);\r\n            }\r\n            var prereleaseTagIndex = moduleVersion.indexOf(\"-\");\r\n            if (prereleaseTagIndex >= 0) {\r\n                // We ignore prerelease tags to avoid impossible to fix gaps in support\r\n                // e.g. supporting console in >= 4.0.0 would otherwise not include\r\n                // 8.0.0-pre\r\n                moduleVersion = moduleVersion.substring(0, prereleaseTagIndex);\r\n            }\r\n            var modifiedModule = originalModule;\r\n            for (var _i = 0, _a = knownPatches[moduleId]; _i < _a.length; _i++) {\r\n                var modulePatcher = _a[_i];\r\n                if (semver.satisfies(moduleVersion, modulePatcher.versionSpecifier)) {\r\n                    modifiedModule = modulePatcher.patch(modifiedModule, modulePath);\r\n                }\r\n            }\r\n            return patchedModules[modulePath] = modifiedModule;\r\n        }\r\n        return originalModule;\r\n    };\r\n}\r\nexports.makePatchingRequire = makePatchingRequire;\r\n//# sourceMappingURL=patchRequire.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsL2Rpc3Qvc3JjL3BhdGNoUmVxdWlyZS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsL2Rpc3Qvc3JjL3BhdGNoUmVxdWlyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBkZXRhaWxzLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbnZhciBzZW12ZXIgPSByZXF1aXJlKFwic2VtdmVyXCIpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdmFyLXJlcXVpcmVzICovXHJcbnZhciBtb2R1bGVNb2R1bGUgPSByZXF1aXJlKFwibW9kdWxlXCIpO1xyXG52YXIgbmF0aXZlTW9kdWxlcyA9IE9iamVjdC5rZXlzKHByb2Nlc3MuYmluZGluZyhcIm5hdGl2ZXNcIikpO1xyXG52YXIgb3JpZ2luYWxSZXF1aXJlID0gbW9kdWxlTW9kdWxlLnByb3RvdHlwZS5yZXF1aXJlO1xyXG5mdW5jdGlvbiBtYWtlUGF0Y2hpbmdSZXF1aXJlKGtub3duUGF0Y2hlcykge1xyXG4gICAgdmFyIHBhdGNoZWRNb2R1bGVzID0ge307XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gcGF0Y2hlZFJlcXVpcmUobW9kdWxlSWQpIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxNb2R1bGUgPSBvcmlnaW5hbFJlcXVpcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICBpZiAoa25vd25QYXRjaGVzW21vZHVsZUlkXSkge1xyXG4gICAgICAgICAgICAvLyBGZXRjaCB0aGUgc3BlY2lmaWMgcGF0aCBvZiB0aGUgbW9kdWxlXHJcbiAgICAgICAgICAgIHZhciBtb2R1bGVQYXRoID0gbW9kdWxlTW9kdWxlLl9yZXNvbHZlRmlsZW5hbWUobW9kdWxlSWQsIHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hlZE1vZHVsZXMuaGFzT3duUHJvcGVydHkobW9kdWxlUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbW9kdWxlIGhhcyBhbHJlYWR5IGJlZW4gcGF0Y2hlZCwgbm8gbmVlZCB0byByZWFwcGx5XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF0Y2hlZE1vZHVsZXNbbW9kdWxlUGF0aF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG1vZHVsZVZlcnNpb24gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIGlmIChuYXRpdmVNb2R1bGVzLmluZGV4T2YobW9kdWxlSWQpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVWZXJzaW9uID0gb3JpZ2luYWxSZXF1aXJlLmNhbGwodGhpcywgcGF0aC5qb2luKG1vZHVsZUlkLCBcInBhY2thZ2UuanNvblwiKSkudmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgb25seSBoYXBwZW4gaWYgbW9kdWxlSWQgaXMgYWN0dWFsbHkgYSBwYXRoIHJhdGhlciB0aGFuIGEgbW9kdWxlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBub3QgYSBzdXBwb3J0ZWQgc2NlbmFyaW9cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxNb2R1bGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG1vZHVsZSBpcyBpbXBsZW1lbnRlZCBuYXRpdmVseSBzbyB3ZSBjYW5ub3QgZmluZCBhIHBhY2thZ2UuanNvblxyXG4gICAgICAgICAgICAgICAgLy8gSW5zdGVhZCwgdGFrZSB0aGUgdmVyc2lvbiBvZiBub2RlIGl0c2VsZlxyXG4gICAgICAgICAgICAgICAgbW9kdWxlVmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvbi5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHByZXJlbGVhc2VUYWdJbmRleCA9IG1vZHVsZVZlcnNpb24uaW5kZXhPZihcIi1cIik7XHJcbiAgICAgICAgICAgIGlmIChwcmVyZWxlYXNlVGFnSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgaWdub3JlIHByZXJlbGVhc2UgdGFncyB0byBhdm9pZCBpbXBvc3NpYmxlIHRvIGZpeCBnYXBzIGluIHN1cHBvcnRcclxuICAgICAgICAgICAgICAgIC8vIGUuZy4gc3VwcG9ydGluZyBjb25zb2xlIGluID49IDQuMC4wIHdvdWxkIG90aGVyd2lzZSBub3QgaW5jbHVkZVxyXG4gICAgICAgICAgICAgICAgLy8gOC4wLjAtcHJlXHJcbiAgICAgICAgICAgICAgICBtb2R1bGVWZXJzaW9uID0gbW9kdWxlVmVyc2lvbi5zdWJzdHJpbmcoMCwgcHJlcmVsZWFzZVRhZ0luZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbW9kaWZpZWRNb2R1bGUgPSBvcmlnaW5hbE1vZHVsZTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGtub3duUGF0Y2hlc1ttb2R1bGVJZF07IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kdWxlUGF0Y2hlciA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGlmIChzZW12ZXIuc2F0aXNmaWVzKG1vZHVsZVZlcnNpb24sIG1vZHVsZVBhdGNoZXIudmVyc2lvblNwZWNpZmllcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZE1vZHVsZSA9IG1vZHVsZVBhdGNoZXIucGF0Y2gobW9kaWZpZWRNb2R1bGUsIG1vZHVsZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRjaGVkTW9kdWxlc1ttb2R1bGVQYXRoXSA9IG1vZGlmaWVkTW9kdWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3JpZ2luYWxNb2R1bGU7XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMubWFrZVBhdGNoaW5nUmVxdWlyZSA9IG1ha2VQYXRjaGluZ1JlcXVpcmU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGNoUmVxdWlyZS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel/dist/src/patchRequire.js\n");

/***/ }),

/***/ "./node_modules/diagnostic-channel/package.json":
/*!******************************************************!*\
  !*** ./node_modules/diagnostic-channel/package.json ***!
  \******************************************************/
/*! exports provided: _args, _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _spec, _where, bugs, dependencies, description, devDependencies, files, homepage, license, main, name, repository, scripts, types, version, default */
/***/ (function(module) {

eval("module.exports = {\"_args\":[[\"diagnostic-channel@0.2.0\",\"C:\\\\Users\\\\bobbr\\\\git\\\\vscode-cpptools\\\\Extension\"]],\"_from\":\"diagnostic-channel@0.2.0\",\"_id\":\"diagnostic-channel@0.2.0\",\"_inBundle\":false,\"_integrity\":\"sha1-zJmvlhLCP7H/8TYSxy8sv6qNWhc=\",\"_location\":\"/diagnostic-channel\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"version\",\"registry\":true,\"raw\":\"diagnostic-channel@0.2.0\",\"name\":\"diagnostic-channel\",\"escapedName\":\"diagnostic-channel\",\"rawSpec\":\"0.2.0\",\"saveSpec\":null,\"fetchSpec\":\"0.2.0\"},\"_requiredBy\":[\"/applicationinsights\"],\"_resolved\":\"https://registry.npmjs.org/diagnostic-channel/-/diagnostic-channel-0.2.0.tgz\",\"_spec\":\"0.2.0\",\"_where\":\"C:\\\\Users\\\\bobbr\\\\git\\\\vscode-cpptools\\\\Extension\",\"bugs\":{\"url\":\"https://github.com/Microsoft/node-diagnostic-channel/issues\"},\"dependencies\":{\"semver\":\"^5.3.0\"},\"description\":\"Provides a context-saving pub/sub channel to connect diagnostic event publishers and subscribers\",\"devDependencies\":{\"@types/mocha\":\"^2.2.40\",\"@types/node\":\"^7.0.12\",\"mocha\":\"^3.2.0\",\"rimraf\":\"^2.6.1\",\"tslint\":\"^5.0.0\",\"typescript\":\"^2.2.1\"},\"files\":[\"dist/src/**/*.d.ts\",\"dist/src/**/*.js\",\"LICENSE\",\"README.md\",\"package.json\"],\"homepage\":\"https://github.com/Microsoft/node-diagnostic-channel\",\"license\":\"MIT\",\"main\":\"./dist/src/channel.js\",\"name\":\"diagnostic-channel\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/Microsoft/node-diagnostic-channel.git\"},\"scripts\":{\"build\":\"tsc\",\"clean\":\"rimraf ./dist\",\"lint\":\"tslint -c tslint.json -p tsconfig.json\",\"test\":\"mocha ./dist/tests/**/*.js\"},\"types\":\"./dist/src/channel.d.ts\",\"version\":\"0.2.0\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ25vc3RpYy1jaGFubmVsL3BhY2thZ2UuanNvbi5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagnostic-channel/package.json\n");

/***/ }),

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/es6-promise/dist/es6-promise.js\n");

/***/ }),

/***/ "./node_modules/es6-promisify/dist/promise.js":
/*!****************************************************!*\
  !*** ./node_modules/es6-promisify/dist/promise.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global self, window, module, global, require */\nmodule.exports = function () {\n\n    \"use strict\";\n\n    var globalObject = void 0;\n\n    function isFunction(x) {\n        return typeof x === \"function\";\n    }\n\n    // Seek the global object\n    if (global !== undefined) {\n        globalObject = global;\n    } else if (window !== undefined && window.document) {\n        globalObject = window;\n    } else {\n        globalObject = self;\n    }\n\n    // Test for any native promise implementation, and if that\n    // implementation appears to conform to the specificaton.\n    // This code mostly nicked from the es6-promise module polyfill\n    // and then fooled with.\n    var hasPromiseSupport = function () {\n\n        // No promise object at all, and it's a non-starter\n        if (!globalObject.hasOwnProperty(\"Promise\")) {\n            return false;\n        }\n\n        // There is a Promise object. Does it conform to the spec?\n        var P = globalObject.Promise;\n\n        // Some of these methods are missing from\n        // Firefox/Chrome experimental implementations\n        if (!P.hasOwnProperty(\"resolve\") || !P.hasOwnProperty(\"reject\")) {\n            return false;\n        }\n\n        if (!P.hasOwnProperty(\"all\") || !P.hasOwnProperty(\"race\")) {\n            return false;\n        }\n\n        // Older version of the spec had a resolver object\n        // as the arg rather than a function\n        return function () {\n\n            var resolve = void 0;\n\n            var p = new globalObject.Promise(function (r) {\n                resolve = r;\n            });\n\n            if (p) {\n                return isFunction(resolve);\n            }\n\n            return false;\n        }();\n    }();\n\n    // Export the native Promise implementation if it\n    // looks like it matches the spec\n    if (hasPromiseSupport) {\n        return globalObject.Promise;\n    }\n\n    //  Otherwise, return the es6-promise polyfill by @jaffathecake.\n    return __webpack_require__(/*! es6-promise */ \"./node_modules/es6-promise/dist/es6-promise.js\").Promise;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2lmeS9kaXN0L3Byb21pc2UuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNpZnkvZGlzdC9wcm9taXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBnbG9iYWwgc2VsZiwgd2luZG93LCBtb2R1bGUsIGdsb2JhbCwgcmVxdWlyZSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBnbG9iYWxPYmplY3QgPSB2b2lkIDA7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuXG4gICAgLy8gU2VlayB0aGUgZ2xvYmFsIG9iamVjdFxuICAgIGlmIChnbG9iYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbG9iYWxPYmplY3QgPSBnbG9iYWw7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cgIT09IHVuZGVmaW5lZCAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgZ2xvYmFsT2JqZWN0ID0gd2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbE9iamVjdCA9IHNlbGY7XG4gICAgfVxuXG4gICAgLy8gVGVzdCBmb3IgYW55IG5hdGl2ZSBwcm9taXNlIGltcGxlbWVudGF0aW9uLCBhbmQgaWYgdGhhdFxuICAgIC8vIGltcGxlbWVudGF0aW9uIGFwcGVhcnMgdG8gY29uZm9ybSB0byB0aGUgc3BlY2lmaWNhdG9uLlxuICAgIC8vIFRoaXMgY29kZSBtb3N0bHkgbmlja2VkIGZyb20gdGhlIGVzNi1wcm9taXNlIG1vZHVsZSBwb2x5ZmlsbFxuICAgIC8vIGFuZCB0aGVuIGZvb2xlZCB3aXRoLlxuICAgIHZhciBoYXNQcm9taXNlU3VwcG9ydCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAvLyBObyBwcm9taXNlIG9iamVjdCBhdCBhbGwsIGFuZCBpdCdzIGEgbm9uLXN0YXJ0ZXJcbiAgICAgICAgaWYgKCFnbG9iYWxPYmplY3QuaGFzT3duUHJvcGVydHkoXCJQcm9taXNlXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGVyZSBpcyBhIFByb21pc2Ugb2JqZWN0LiBEb2VzIGl0IGNvbmZvcm0gdG8gdGhlIHNwZWM/XG4gICAgICAgIHZhciBQID0gZ2xvYmFsT2JqZWN0LlByb21pc2U7XG5cbiAgICAgICAgLy8gU29tZSBvZiB0aGVzZSBtZXRob2RzIGFyZSBtaXNzaW5nIGZyb21cbiAgICAgICAgLy8gRmlyZWZveC9DaHJvbWUgZXhwZXJpbWVudGFsIGltcGxlbWVudGF0aW9uc1xuICAgICAgICBpZiAoIVAuaGFzT3duUHJvcGVydHkoXCJyZXNvbHZlXCIpIHx8ICFQLmhhc093blByb3BlcnR5KFwicmVqZWN0XCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIVAuaGFzT3duUHJvcGVydHkoXCJhbGxcIikgfHwgIVAuaGFzT3duUHJvcGVydHkoXCJyYWNlXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPbGRlciB2ZXJzaW9uIG9mIHRoZSBzcGVjIGhhZCBhIHJlc29sdmVyIG9iamVjdFxuICAgICAgICAvLyBhcyB0aGUgYXJnIHJhdGhlciB0aGFuIGEgZnVuY3Rpb25cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHJlc29sdmUgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIHZhciBwID0gbmV3IGdsb2JhbE9iamVjdC5Qcm9taXNlKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSA9IHI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihyZXNvbHZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KCk7XG4gICAgfSgpO1xuXG4gICAgLy8gRXhwb3J0IHRoZSBuYXRpdmUgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBpZiBpdFxuICAgIC8vIGxvb2tzIGxpa2UgaXQgbWF0Y2hlcyB0aGUgc3BlY1xuICAgIGlmIChoYXNQcm9taXNlU3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsT2JqZWN0LlByb21pc2U7XG4gICAgfVxuXG4gICAgLy8gIE90aGVyd2lzZSwgcmV0dXJuIHRoZSBlczYtcHJvbWlzZSBwb2x5ZmlsbCBieSBAamFmZmF0aGVjYWtlLlxuICAgIHJldHVybiByZXF1aXJlKFwiZXM2LXByb21pc2VcIikuUHJvbWlzZTtcbn0oKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/es6-promisify/dist/promise.js\n");

/***/ }),

/***/ "./node_modules/es6-promisify/dist/promisify.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promisify/dist/promisify.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global module, require */\nmodule.exports = function () {\n\n    \"use strict\";\n\n    // Get a promise object. This may be native, or it may be polyfilled\n\n    var ES6Promise = __webpack_require__(/*! ./promise.js */ \"./node_modules/es6-promisify/dist/promise.js\");\n\n    /**\n     * thatLooksLikeAPromiseToMe()\n     *\n     * Duck-types a promise.\n     *\n     * @param {object} o\n     * @return {bool} True if this resembles a promise\n     */\n    function thatLooksLikeAPromiseToMe(o) {\n        return o && typeof o.then === \"function\" && typeof o.catch === \"function\";\n    }\n\n    /**\n     * promisify()\n     *\n     * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n     * an ES6-compatible Promise. Promisify provides a default callback of the form (error, result)\n     * and rejects when `error` is truthy. You can also supply settings object as the second argument.\n     *\n     * @param {function} original - The function to promisify\n     * @param {object} settings - Settings object\n     * @param {object} settings.thisArg - A `this` context to use. If not set, assume `settings` _is_ `thisArg`\n     * @param {bool} settings.multiArgs - Should multiple arguments be returned as an array?\n     * @return {function} A promisified version of `original`\n     */\n    return function promisify(original, settings) {\n\n        return function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var returnMultipleArguments = settings && settings.multiArgs;\n\n            var target = void 0;\n            if (settings && settings.thisArg) {\n                target = settings.thisArg;\n            } else if (settings) {\n                target = settings;\n            }\n\n            // Return the promisified function\n            return new ES6Promise(function (resolve, reject) {\n\n                // Append the callback bound to the context\n                args.push(function callback(err) {\n\n                    if (err) {\n                        return reject(err);\n                    }\n\n                    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                        values[_key2 - 1] = arguments[_key2];\n                    }\n\n                    if (false === !!returnMultipleArguments) {\n                        return resolve(values[0]);\n                    }\n\n                    resolve(values);\n                });\n\n                // Call the function\n                var response = original.apply(target, args);\n\n                // If it looks like original already returns a promise,\n                // then just resolve with that promise. Hopefully, the callback function we added will just be ignored.\n                if (thatLooksLikeAPromiseToMe(response)) {\n                    resolve(response);\n                }\n            });\n        };\n    };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2lmeS9kaXN0L3Byb21pc2lmeS5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2lmeS9kaXN0L3Byb21pc2lmeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogZ2xvYmFsIG1vZHVsZSwgcmVxdWlyZSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIEdldCBhIHByb21pc2Ugb2JqZWN0LiBUaGlzIG1heSBiZSBuYXRpdmUsIG9yIGl0IG1heSBiZSBwb2x5ZmlsbGVkXG5cbiAgICB2YXIgRVM2UHJvbWlzZSA9IHJlcXVpcmUoXCIuL3Byb21pc2UuanNcIik7XG5cbiAgICAvKipcbiAgICAgKiB0aGF0TG9va3NMaWtlQVByb21pc2VUb01lKClcbiAgICAgKlxuICAgICAqIER1Y2stdHlwZXMgYSBwcm9taXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICAgKiBAcmV0dXJuIHtib29sfSBUcnVlIGlmIHRoaXMgcmVzZW1ibGVzIGEgcHJvbWlzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRoYXRMb29rc0xpa2VBUHJvbWlzZVRvTWUobykge1xuICAgICAgICByZXR1cm4gbyAmJiB0eXBlb2Ygby50aGVuID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG8uY2F0Y2ggPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwcm9taXNpZnkoKVxuICAgICAqXG4gICAgICogVHJhbnNmb3JtcyBjYWxsYmFjay1iYXNlZCBmdW5jdGlvbiAtLSBmdW5jKGFyZzEsIGFyZzIgLi4gYXJnTiwgY2FsbGJhY2spIC0tIGludG9cbiAgICAgKiBhbiBFUzYtY29tcGF0aWJsZSBQcm9taXNlLiBQcm9taXNpZnkgcHJvdmlkZXMgYSBkZWZhdWx0IGNhbGxiYWNrIG9mIHRoZSBmb3JtIChlcnJvciwgcmVzdWx0KVxuICAgICAqIGFuZCByZWplY3RzIHdoZW4gYGVycm9yYCBpcyB0cnV0aHkuIFlvdSBjYW4gYWxzbyBzdXBwbHkgc2V0dGluZ3Mgb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcmlnaW5hbCAtIFRoZSBmdW5jdGlvbiB0byBwcm9taXNpZnlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSBTZXR0aW5ncyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MudGhpc0FyZyAtIEEgYHRoaXNgIGNvbnRleHQgdG8gdXNlLiBJZiBub3Qgc2V0LCBhc3N1bWUgYHNldHRpbmdzYCBfaXNfIGB0aGlzQXJnYFxuICAgICAqIEBwYXJhbSB7Ym9vbH0gc2V0dGluZ3MubXVsdGlBcmdzIC0gU2hvdWxkIG11bHRpcGxlIGFyZ3VtZW50cyBiZSByZXR1cm5lZCBhcyBhbiBhcnJheT9cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gQSBwcm9taXNpZmllZCB2ZXJzaW9uIG9mIGBvcmlnaW5hbGBcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gcHJvbWlzaWZ5KG9yaWdpbmFsLCBzZXR0aW5ncykge1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZXR1cm5NdWx0aXBsZUFyZ3VtZW50cyA9IHNldHRpbmdzICYmIHNldHRpbmdzLm11bHRpQXJncztcblxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncyAmJiBzZXR0aW5ncy50aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gc2V0dGluZ3MudGhpc0FyZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBzZXR0aW5ncztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBwcm9taXNpZmllZCBmdW5jdGlvblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFUzZQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgY2FsbGJhY2sgYm91bmQgdG8gdGhlIGNvbnRleHRcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goZnVuY3Rpb24gY2FsbGJhY2soZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09ICEhcmV0dXJuTXVsdGlwbGVBcmd1bWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHZhbHVlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IG9yaWdpbmFsLmFwcGx5KHRhcmdldCwgYXJncyk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBpdCBsb29rcyBsaWtlIG9yaWdpbmFsIGFscmVhZHkgcmV0dXJucyBhIHByb21pc2UsXG4gICAgICAgICAgICAgICAgLy8gdGhlbiBqdXN0IHJlc29sdmUgd2l0aCB0aGF0IHByb21pc2UuIEhvcGVmdWxseSwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdlIGFkZGVkIHdpbGwganVzdCBiZSBpZ25vcmVkLlxuICAgICAgICAgICAgICAgIGlmICh0aGF0TG9va3NMaWtlQVByb21pc2VUb01lKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xufSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/es6-promisify/dist/promisify.js\n");

/***/ }),

/***/ "./node_modules/fd-slicer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/fd-slicer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar PassThrough = stream.PassThrough;\nvar Pend = __webpack_require__(/*! pend */ \"./node_modules/pend/index.js\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\").EventEmitter;\n\nexports.createFromBuffer = createFromBuffer;\nexports.createFromFd = createFromFd;\nexports.BufferSlicer = BufferSlicer;\nexports.FdSlicer = FdSlicer;\n\nutil.inherits(FdSlicer, EventEmitter);\nfunction FdSlicer(fd, options) {\n  options = options || {};\n  EventEmitter.call(this);\n\n  this.fd = fd;\n  this.pend = new Pend();\n  this.pend.max = 1;\n  this.refCount = 0;\n  this.autoClose = !!options.autoClose;\n}\n\nFdSlicer.prototype.read = function(buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function(cb) {\n    fs.read(self.fd, buffer, offset, length, position, function(err, bytesRead, buffer) {\n      cb();\n      callback(err, bytesRead, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.write = function(buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function(cb) {\n    fs.write(self.fd, buffer, offset, length, position, function(err, written, buffer) {\n      cb();\n      callback(err, written, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.createReadStream = function(options) {\n  return new ReadStream(this, options);\n};\n\nFdSlicer.prototype.createWriteStream = function(options) {\n  return new WriteStream(this, options);\n};\n\nFdSlicer.prototype.ref = function() {\n  this.refCount += 1;\n};\n\nFdSlicer.prototype.unref = function() {\n  var self = this;\n  self.refCount -= 1;\n\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  if (self.autoClose) {\n    fs.close(self.fd, onCloseDone);\n  }\n\n  function onCloseDone(err) {\n    if (err) {\n      self.emit('error', err);\n    } else {\n      self.emit('close');\n    }\n  }\n};\n\nutil.inherits(ReadStream, Readable);\nfunction ReadStream(context, options) {\n  options = options || {};\n  Readable.call(this, options);\n\n  this.context = context;\n  this.context.ref();\n\n  this.start = options.start || 0;\n  this.endOffset = options.end;\n  this.pos = this.start;\n  this.destroyed = false;\n}\n\nReadStream.prototype._read = function(n) {\n  var self = this;\n  if (self.destroyed) return;\n\n  var toRead = Math.min(self._readableState.highWaterMark, n);\n  if (self.endOffset != null) {\n    toRead = Math.min(toRead, self.endOffset - self.pos);\n  }\n  if (toRead <= 0) {\n    self.destroyed = true;\n    self.push(null);\n    self.context.unref();\n    return;\n  }\n  self.context.pend.go(function(cb) {\n    if (self.destroyed) return cb();\n    var buffer = new Buffer(toRead);\n    fs.read(self.context.fd, buffer, 0, toRead, self.pos, function(err, bytesRead) {\n      if (err) {\n        self.destroy(err);\n      } else if (bytesRead === 0) {\n        self.destroyed = true;\n        self.push(null);\n        self.context.unref();\n      } else {\n        self.pos += bytesRead;\n        self.push(buffer.slice(0, bytesRead));\n      }\n      cb();\n    });\n  });\n};\n\nReadStream.prototype.destroy = function(err) {\n  if (this.destroyed) return;\n  err = err || new Error(\"stream destroyed\");\n  this.destroyed = true;\n  this.emit('error', err);\n  this.context.unref();\n};\n\nutil.inherits(WriteStream, Writable);\nfunction WriteStream(context, options) {\n  options = options || {};\n  Writable.call(this, options);\n\n  this.context = context;\n  this.context.ref();\n\n  this.start = options.start || 0;\n  this.endOffset = (options.end == null) ? Infinity : +options.end;\n  this.bytesWritten = 0;\n  this.pos = this.start;\n  this.destroyed = false;\n\n  this.on('finish', this.destroy.bind(this));\n}\n\nWriteStream.prototype._write = function(buffer, encoding, callback) {\n  var self = this;\n  if (self.destroyed) return;\n\n  if (self.pos + buffer.length > self.endOffset) {\n    var err = new Error(\"maximum file length exceeded\");\n    err.code = 'ETOOBIG';\n    self.destroy();\n    callback(err);\n    return;\n  }\n  self.context.pend.go(function(cb) {\n    if (self.destroyed) return cb();\n    fs.write(self.context.fd, buffer, 0, buffer.length, self.pos, function(err, bytes) {\n      if (err) {\n        self.destroy();\n        cb();\n        callback(err);\n      } else {\n        self.bytesWritten += bytes;\n        self.pos += bytes;\n        self.emit('progress');\n        cb();\n        callback();\n      }\n    });\n  });\n};\n\nWriteStream.prototype.destroy = function() {\n  if (this.destroyed) return;\n  this.destroyed = true;\n  this.context.unref();\n};\n\nutil.inherits(BufferSlicer, EventEmitter);\nfunction BufferSlicer(buffer, options) {\n  EventEmitter.call(this);\n\n  options = options || {};\n  this.refCount = 0;\n  this.buffer = buffer;\n  this.maxChunkSize = options.maxChunkSize || Number.MAX_SAFE_INTEGER;\n}\n\nBufferSlicer.prototype.read = function(buffer, offset, length, position, callback) {\n  var end = position + length;\n  var delta = end - this.buffer.length;\n  var written = (delta > 0) ? delta : length;\n  this.buffer.copy(buffer, offset, position, end);\n  setImmediate(function() {\n    callback(null, written);\n  });\n};\n\nBufferSlicer.prototype.write = function(buffer, offset, length, position, callback) {\n  buffer.copy(this.buffer, position, offset, offset + length);\n  setImmediate(function() {\n    callback(null, length, buffer);\n  });\n};\n\nBufferSlicer.prototype.createReadStream = function(options) {\n  options = options || {};\n  var readStream = new PassThrough(options);\n  readStream.destroyed = false;\n  readStream.start = options.start || 0;\n  readStream.endOffset = options.end;\n  // by the time this function returns, we'll be done.\n  readStream.pos = readStream.endOffset || this.buffer.length;\n\n  // respect the maxChunkSize option to slice up the chunk into smaller pieces.\n  var entireSlice = this.buffer.slice(readStream.start, readStream.pos);\n  var offset = 0;\n  while (true) {\n    var nextOffset = offset + this.maxChunkSize;\n    if (nextOffset >= entireSlice.length) {\n      // last chunk\n      if (offset < entireSlice.length) {\n        readStream.write(entireSlice.slice(offset, entireSlice.length));\n      }\n      break;\n    }\n    readStream.write(entireSlice.slice(offset, nextOffset));\n    offset = nextOffset;\n  }\n\n  readStream.end();\n  readStream.destroy = function() {\n    readStream.destroyed = true;\n  };\n  return readStream;\n};\n\nBufferSlicer.prototype.createWriteStream = function(options) {\n  var bufferSlicer = this;\n  options = options || {};\n  var writeStream = new Writable(options);\n  writeStream.start = options.start || 0;\n  writeStream.endOffset = (options.end == null) ? this.buffer.length : +options.end;\n  writeStream.bytesWritten = 0;\n  writeStream.pos = writeStream.start;\n  writeStream.destroyed = false;\n  writeStream._write = function(buffer, encoding, callback) {\n    if (writeStream.destroyed) return;\n\n    var end = writeStream.pos + buffer.length;\n    if (end > writeStream.endOffset) {\n      var err = new Error(\"maximum file length exceeded\");\n      err.code = 'ETOOBIG';\n      writeStream.destroyed = true;\n      callback(err);\n      return;\n    }\n    buffer.copy(bufferSlicer.buffer, writeStream.pos, 0, buffer.length);\n\n    writeStream.bytesWritten += buffer.length;\n    writeStream.pos = end;\n    writeStream.emit('progress');\n    callback();\n  };\n  writeStream.destroy = function() {\n    writeStream.destroyed = true;\n  };\n  return writeStream;\n};\n\nBufferSlicer.prototype.ref = function() {\n  this.refCount += 1;\n};\n\nBufferSlicer.prototype.unref = function() {\n  this.refCount -= 1;\n\n  if (this.refCount < 0) {\n    throw new Error(\"invalid unref\");\n  }\n};\n\nfunction createFromBuffer(buffer, options) {\n  return new BufferSlicer(buffer, options);\n}\n\nfunction createFromFd(fd, options) {\n  return new FdSlicer(fd, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fd-slicer/index.js\n");

/***/ }),

/***/ "./node_modules/has-flag/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-flag/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (flag, argv) {\n\targv = argv || process.argv;\n\n\tvar terminatorPos = argv.indexOf('--');\n\tvar prefix = /^-{1,2}/.test(flag) ? '' : '--';\n\tvar pos = argv.indexOf(prefix + flag);\n\n\treturn pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzLWZsYWcvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2hhcy1mbGFnL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZsYWcsIGFyZ3YpIHtcblx0YXJndiA9IGFyZ3YgfHwgcHJvY2Vzcy5hcmd2O1xuXG5cdHZhciB0ZXJtaW5hdG9yUG9zID0gYXJndi5pbmRleE9mKCctLScpO1xuXHR2YXIgcHJlZml4ID0gL14tezEsMn0vLnRlc3QoZmxhZykgPyAnJyA6ICctLSc7XG5cdHZhciBwb3MgPSBhcmd2LmluZGV4T2YocHJlZml4ICsgZmxhZyk7XG5cblx0cmV0dXJuIHBvcyAhPT0gLTEgJiYgKHRlcm1pbmF0b3JQb3MgPT09IC0xID8gdHJ1ZSA6IHBvcyA8IHRlcm1pbmF0b3JQb3MpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/has-flag/index.js\n");

/***/ }),

/***/ "./node_modules/https-proxy-agent/index.js":
/*!*************************************************!*\
  !*** ./node_modules/https-proxy-agent/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Module dependencies.\n */\n\nvar net = __webpack_require__(/*! net */ \"net\");\nvar tls = __webpack_require__(/*! tls */ \"tls\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar Agent = __webpack_require__(/*! agent-base */ \"./node_modules/agent-base/index.js\");\nvar inherits = __webpack_require__(/*! util */ \"util\").inherits;\nvar debug = __webpack_require__(/*! debug */ \"./node_modules/https-proxy-agent/node_modules/debug/src/index.js\")('https-proxy-agent');\n\n/**\n * Module exports.\n */\n\nmodule.exports = HttpsProxyAgent;\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to the\n * specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * @api public\n */\n\nfunction HttpsProxyAgent(opts) {\n  if (!(this instanceof HttpsProxyAgent)) return new HttpsProxyAgent(opts);\n  if ('string' == typeof opts) opts = url.parse(opts);\n  if (!opts)\n    throw new Error(\n      'an HTTP(S) proxy server `host` and `port` must be specified!'\n    );\n  debug('creating new HttpsProxyAgent instance: %o', opts);\n  Agent.call(this, opts);\n\n  var proxy = Object.assign({}, opts);\n\n  // if `true`, then connect to the proxy server over TLS. defaults to `false`.\n  this.secureProxy = proxy.protocol ? /^https:?$/i.test(proxy.protocol) : false;\n\n  // prefer `hostname` over `host`, and set the `port` if needed\n  proxy.host = proxy.hostname || proxy.host;\n  proxy.port = +proxy.port || (this.secureProxy ? 443 : 80);\n\n  // ALPN is supported by Node.js >= v5.\n  // attempt to negotiate http/1.1 for proxy servers that support http/2\n  if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n    proxy.ALPNProtocols = ['http 1.1']\n  }\n\n  if (proxy.host && proxy.path) {\n    // if both a `host` and `path` are specified then it's most likely the\n    // result of a `url.parse()` call... we need to remove the `path` portion so\n    // that `net.connect()` doesn't attempt to open that as a unix socket file.\n    delete proxy.path;\n    delete proxy.pathname;\n  }\n\n  this.proxy = proxy;\n  this.defaultPort = 443;\n}\ninherits(HttpsProxyAgent, Agent);\n\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nHttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\n  var proxy = this.proxy;\n\n  // create a socket connection to the proxy server\n  var socket;\n  if (this.secureProxy) {\n    socket = tls.connect(proxy);\n  } else {\n    socket = net.connect(proxy);\n  }\n\n  // we need to buffer any HTTP traffic that happens with the proxy before we get\n  // the CONNECT response, so that if the response is anything other than an \"200\"\n  // response code, then we can re-play the \"data\" events on the socket once the\n  // HTTP parser is hooked up...\n  var buffers = [];\n  var buffersLength = 0;\n\n  function read() {\n    var b = socket.read();\n    if (b) ondata(b);\n    else socket.once('readable', read);\n  }\n\n  function cleanup() {\n    socket.removeListener('data', ondata);\n    socket.removeListener('end', onend);\n    socket.removeListener('error', onerror);\n    socket.removeListener('close', onclose);\n    socket.removeListener('readable', read);\n  }\n\n  function onclose(err) {\n    debug('onclose had error %o', err);\n  }\n\n  function onend() {\n    debug('onend');\n  }\n\n  function onerror(err) {\n    cleanup();\n    fn(err);\n  }\n\n  function ondata(b) {\n    buffers.push(b);\n    buffersLength += b.length;\n    var buffered = Buffer.concat(buffers, buffersLength);\n    var str = buffered.toString('ascii');\n\n    if (!~str.indexOf('\\r\\n\\r\\n')) {\n      // keep buffering\n      debug('have not received end of HTTP headers yet...');\n      if (socket.read) {\n        read();\n      } else {\n        socket.once('data', ondata);\n      }\n      return;\n    }\n\n    var firstLine = str.substring(0, str.indexOf('\\r\\n'));\n    var statusCode = +firstLine.split(' ')[1];\n    debug('got proxy server response: %o', firstLine);\n\n    if (200 == statusCode) {\n      // 200 Connected status code!\n      var sock = socket;\n\n      // nullify the buffered data since we won't be needing it\n      buffers = buffered = null;\n\n      if (opts.secureEndpoint) {\n        // since the proxy is connecting to an SSL server, we have\n        // to upgrade this socket connection to an SSL connection\n        debug(\n          'upgrading proxy-connected socket to TLS connection: %o',\n          opts.host\n        );\n        opts.socket = socket;\n        opts.servername = opts.servername || opts.host;\n        opts.host = null;\n        opts.hostname = null;\n        opts.port = null;\n        sock = tls.connect(opts);\n      }\n\n      cleanup();\n      fn(null, sock);\n    } else {\n      // some other status code that's not 200... need to re-play the HTTP header\n      // \"data\" events onto the socket once the HTTP machinery is attached so that\n      // the user can parse and handle the error status code\n      cleanup();\n\n      // save a reference to the concat'd Buffer for the `onsocket` callback\n      buffers = buffered;\n\n      // need to wait for the \"socket\" event to re-play the \"data\" events\n      req.once('socket', onsocket);\n      fn(null, socket);\n    }\n  }\n\n  function onsocket(socket) {\n    // replay the \"buffers\" Buffer onto the `socket`, since at this point\n    // the HTTP module machinery has been hooked up for the user\n    if ('function' == typeof socket.ondata) {\n      // node <= v0.11.3, the `ondata` function is set on the socket\n      socket.ondata(buffers, 0, buffers.length);\n    } else if (socket.listeners('data').length > 0) {\n      // node > v0.11.3, the \"data\" event is listened for directly\n      socket.emit('data', buffers);\n    } else {\n      // never?\n      throw new Error('should not happen...');\n    }\n\n    // nullify the cached Buffer instance\n    buffers = null;\n  }\n\n  socket.on('error', onerror);\n  socket.on('close', onclose);\n  socket.on('end', onend);\n\n  if (socket.read) {\n    read();\n  } else {\n    socket.once('data', ondata);\n  }\n\n  var hostname = opts.host + ':' + opts.port;\n  var msg = 'CONNECT ' + hostname + ' HTTP/1.1\\r\\n';\n\n  var headers = Object.assign({}, proxy.headers);\n  if (proxy.auth) {\n    headers['Proxy-Authorization'] =\n      'Basic ' + Buffer.from(proxy.auth).toString('base64');\n  }\n\n  // the Host header should only include the port\n  // number when it is a non-standard port\n  var host = opts.host;\n  if (!isDefaultPort(opts.port, opts.secureEndpoint)) {\n    host += ':' + opts.port;\n  }\n  headers['Host'] = host;\n\n  headers['Connection'] = 'close';\n  Object.keys(headers).forEach(function(name) {\n    msg += name + ': ' + headers[name] + '\\r\\n';\n  });\n\n  socket.write(msg + '\\r\\n');\n};\n\nfunction isDefaultPort(port, secure) {\n  return Boolean((!secure && port === 80) || (secure && port === 443));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL2h0dHBzLXByb3h5LWFnZW50L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG52YXIgdGxzID0gcmVxdWlyZSgndGxzJyk7XG52YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG52YXIgQWdlbnQgPSByZXF1aXJlKCdhZ2VudC1iYXNlJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdodHRwcy1wcm94eS1hZ2VudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cHNQcm94eUFnZW50O1xuXG4vKipcbiAqIFRoZSBgSHR0cHNQcm94eUFnZW50YCBpbXBsZW1lbnRzIGFuIEhUVFAgQWdlbnQgc3ViY2xhc3MgdGhhdCBjb25uZWN0cyB0byB0aGVcbiAqIHNwZWNpZmllZCBcIkhUVFAocykgcHJveHkgc2VydmVyXCIgaW4gb3JkZXIgdG8gcHJveHkgSFRUUFMgcmVxdWVzdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBIdHRwc1Byb3h5QWdlbnQob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSHR0cHNQcm94eUFnZW50KSkgcmV0dXJuIG5ldyBIdHRwc1Byb3h5QWdlbnQob3B0cyk7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2Ygb3B0cykgb3B0cyA9IHVybC5wYXJzZShvcHRzKTtcbiAgaWYgKCFvcHRzKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdhbiBIVFRQKFMpIHByb3h5IHNlcnZlciBgaG9zdGAgYW5kIGBwb3J0YCBtdXN0IGJlIHNwZWNpZmllZCEnXG4gICAgKTtcbiAgZGVidWcoJ2NyZWF0aW5nIG5ldyBIdHRwc1Byb3h5QWdlbnQgaW5zdGFuY2U6ICVvJywgb3B0cyk7XG4gIEFnZW50LmNhbGwodGhpcywgb3B0cyk7XG5cbiAgdmFyIHByb3h5ID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XG5cbiAgLy8gaWYgYHRydWVgLCB0aGVuIGNvbm5lY3QgdG8gdGhlIHByb3h5IHNlcnZlciBvdmVyIFRMUy4gZGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgdGhpcy5zZWN1cmVQcm94eSA9IHByb3h5LnByb3RvY29sID8gL15odHRwczo/JC9pLnRlc3QocHJveHkucHJvdG9jb2wpIDogZmFsc2U7XG5cbiAgLy8gcHJlZmVyIGBob3N0bmFtZWAgb3ZlciBgaG9zdGAsIGFuZCBzZXQgdGhlIGBwb3J0YCBpZiBuZWVkZWRcbiAgcHJveHkuaG9zdCA9IHByb3h5Lmhvc3RuYW1lIHx8IHByb3h5Lmhvc3Q7XG4gIHByb3h5LnBvcnQgPSArcHJveHkucG9ydCB8fCAodGhpcy5zZWN1cmVQcm94eSA/IDQ0MyA6IDgwKTtcblxuICAvLyBBTFBOIGlzIHN1cHBvcnRlZCBieSBOb2RlLmpzID49IHY1LlxuICAvLyBhdHRlbXB0IHRvIG5lZ290aWF0ZSBodHRwLzEuMSBmb3IgcHJveHkgc2VydmVycyB0aGF0IHN1cHBvcnQgaHR0cC8yXG4gIGlmICh0aGlzLnNlY3VyZVByb3h5ICYmICEoJ0FMUE5Qcm90b2NvbHMnIGluIHByb3h5KSkge1xuICAgIHByb3h5LkFMUE5Qcm90b2NvbHMgPSBbJ2h0dHAgMS4xJ11cbiAgfVxuXG4gIGlmIChwcm94eS5ob3N0ICYmIHByb3h5LnBhdGgpIHtcbiAgICAvLyBpZiBib3RoIGEgYGhvc3RgIGFuZCBgcGF0aGAgYXJlIHNwZWNpZmllZCB0aGVuIGl0J3MgbW9zdCBsaWtlbHkgdGhlXG4gICAgLy8gcmVzdWx0IG9mIGEgYHVybC5wYXJzZSgpYCBjYWxsLi4uIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBgcGF0aGAgcG9ydGlvbiBzb1xuICAgIC8vIHRoYXQgYG5ldC5jb25uZWN0KClgIGRvZXNuJ3QgYXR0ZW1wdCB0byBvcGVuIHRoYXQgYXMgYSB1bml4IHNvY2tldCBmaWxlLlxuICAgIGRlbGV0ZSBwcm94eS5wYXRoO1xuICAgIGRlbGV0ZSBwcm94eS5wYXRobmFtZTtcbiAgfVxuXG4gIHRoaXMucHJveHkgPSBwcm94eTtcbiAgdGhpcy5kZWZhdWx0UG9ydCA9IDQ0Mztcbn1cbmluaGVyaXRzKEh0dHBzUHJveHlBZ2VudCwgQWdlbnQpO1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZSBub2RlLWNvcmUgSFRUUCBjbGllbnQgbGlicmFyeSBpcyBjcmVhdGluZyBhIG5ldyBIVFRQIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5IdHRwc1Byb3h5QWdlbnQucHJvdG90eXBlLmNhbGxiYWNrID0gZnVuY3Rpb24gY29ubmVjdChyZXEsIG9wdHMsIGZuKSB7XG4gIHZhciBwcm94eSA9IHRoaXMucHJveHk7XG5cbiAgLy8gY3JlYXRlIGEgc29ja2V0IGNvbm5lY3Rpb24gdG8gdGhlIHByb3h5IHNlcnZlclxuICB2YXIgc29ja2V0O1xuICBpZiAodGhpcy5zZWN1cmVQcm94eSkge1xuICAgIHNvY2tldCA9IHRscy5jb25uZWN0KHByb3h5KTtcbiAgfSBlbHNlIHtcbiAgICBzb2NrZXQgPSBuZXQuY29ubmVjdChwcm94eSk7XG4gIH1cblxuICAvLyB3ZSBuZWVkIHRvIGJ1ZmZlciBhbnkgSFRUUCB0cmFmZmljIHRoYXQgaGFwcGVucyB3aXRoIHRoZSBwcm94eSBiZWZvcmUgd2UgZ2V0XG4gIC8vIHRoZSBDT05ORUNUIHJlc3BvbnNlLCBzbyB0aGF0IGlmIHRoZSByZXNwb25zZSBpcyBhbnl0aGluZyBvdGhlciB0aGFuIGFuIFwiMjAwXCJcbiAgLy8gcmVzcG9uc2UgY29kZSwgdGhlbiB3ZSBjYW4gcmUtcGxheSB0aGUgXCJkYXRhXCIgZXZlbnRzIG9uIHRoZSBzb2NrZXQgb25jZSB0aGVcbiAgLy8gSFRUUCBwYXJzZXIgaXMgaG9va2VkIHVwLi4uXG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBidWZmZXJzTGVuZ3RoID0gMDtcblxuICBmdW5jdGlvbiByZWFkKCkge1xuICAgIHZhciBiID0gc29ja2V0LnJlYWQoKTtcbiAgICBpZiAoYikgb25kYXRhKGIpO1xuICAgIGVsc2Ugc29ja2V0Lm9uY2UoJ3JlYWRhYmxlJywgcmVhZCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgcmVhZCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbmNsb3NlKGVycikge1xuICAgIGRlYnVnKCdvbmNsb3NlIGhhZCBlcnJvciAlbycsIGVycik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXJyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGZuKGVycik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmRhdGEoYikge1xuICAgIGJ1ZmZlcnMucHVzaChiKTtcbiAgICBidWZmZXJzTGVuZ3RoICs9IGIubGVuZ3RoO1xuICAgIHZhciBidWZmZXJlZCA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgYnVmZmVyc0xlbmd0aCk7XG4gICAgdmFyIHN0ciA9IGJ1ZmZlcmVkLnRvU3RyaW5nKCdhc2NpaScpO1xuXG4gICAgaWYgKCF+c3RyLmluZGV4T2YoJ1xcclxcblxcclxcbicpKSB7XG4gICAgICAvLyBrZWVwIGJ1ZmZlcmluZ1xuICAgICAgZGVidWcoJ2hhdmUgbm90IHJlY2VpdmVkIGVuZCBvZiBIVFRQIGhlYWRlcnMgeWV0Li4uJyk7XG4gICAgICBpZiAoc29ja2V0LnJlYWQpIHtcbiAgICAgICAgcmVhZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc29ja2V0Lm9uY2UoJ2RhdGEnLCBvbmRhdGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmaXJzdExpbmUgPSBzdHIuc3Vic3RyaW5nKDAsIHN0ci5pbmRleE9mKCdcXHJcXG4nKSk7XG4gICAgdmFyIHN0YXR1c0NvZGUgPSArZmlyc3RMaW5lLnNwbGl0KCcgJylbMV07XG4gICAgZGVidWcoJ2dvdCBwcm94eSBzZXJ2ZXIgcmVzcG9uc2U6ICVvJywgZmlyc3RMaW5lKTtcblxuICAgIGlmICgyMDAgPT0gc3RhdHVzQ29kZSkge1xuICAgICAgLy8gMjAwIENvbm5lY3RlZCBzdGF0dXMgY29kZSFcbiAgICAgIHZhciBzb2NrID0gc29ja2V0O1xuXG4gICAgICAvLyBudWxsaWZ5IHRoZSBidWZmZXJlZCBkYXRhIHNpbmNlIHdlIHdvbid0IGJlIG5lZWRpbmcgaXRcbiAgICAgIGJ1ZmZlcnMgPSBidWZmZXJlZCA9IG51bGw7XG5cbiAgICAgIGlmIChvcHRzLnNlY3VyZUVuZHBvaW50KSB7XG4gICAgICAgIC8vIHNpbmNlIHRoZSBwcm94eSBpcyBjb25uZWN0aW5nIHRvIGFuIFNTTCBzZXJ2ZXIsIHdlIGhhdmVcbiAgICAgICAgLy8gdG8gdXBncmFkZSB0aGlzIHNvY2tldCBjb25uZWN0aW9uIHRvIGFuIFNTTCBjb25uZWN0aW9uXG4gICAgICAgIGRlYnVnKFxuICAgICAgICAgICd1cGdyYWRpbmcgcHJveHktY29ubmVjdGVkIHNvY2tldCB0byBUTFMgY29ubmVjdGlvbjogJW8nLFxuICAgICAgICAgIG9wdHMuaG9zdFxuICAgICAgICApO1xuICAgICAgICBvcHRzLnNvY2tldCA9IHNvY2tldDtcbiAgICAgICAgb3B0cy5zZXJ2ZXJuYW1lID0gb3B0cy5zZXJ2ZXJuYW1lIHx8IG9wdHMuaG9zdDtcbiAgICAgICAgb3B0cy5ob3N0ID0gbnVsbDtcbiAgICAgICAgb3B0cy5ob3N0bmFtZSA9IG51bGw7XG4gICAgICAgIG9wdHMucG9ydCA9IG51bGw7XG4gICAgICAgIHNvY2sgPSB0bHMuY29ubmVjdChvcHRzKTtcbiAgICAgIH1cblxuICAgICAgY2xlYW51cCgpO1xuICAgICAgZm4obnVsbCwgc29jayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNvbWUgb3RoZXIgc3RhdHVzIGNvZGUgdGhhdCdzIG5vdCAyMDAuLi4gbmVlZCB0byByZS1wbGF5IHRoZSBIVFRQIGhlYWRlclxuICAgICAgLy8gXCJkYXRhXCIgZXZlbnRzIG9udG8gdGhlIHNvY2tldCBvbmNlIHRoZSBIVFRQIG1hY2hpbmVyeSBpcyBhdHRhY2hlZCBzbyB0aGF0XG4gICAgICAvLyB0aGUgdXNlciBjYW4gcGFyc2UgYW5kIGhhbmRsZSB0aGUgZXJyb3Igc3RhdHVzIGNvZGVcbiAgICAgIGNsZWFudXAoKTtcblxuICAgICAgLy8gc2F2ZSBhIHJlZmVyZW5jZSB0byB0aGUgY29uY2F0J2QgQnVmZmVyIGZvciB0aGUgYG9uc29ja2V0YCBjYWxsYmFja1xuICAgICAgYnVmZmVycyA9IGJ1ZmZlcmVkO1xuXG4gICAgICAvLyBuZWVkIHRvIHdhaXQgZm9yIHRoZSBcInNvY2tldFwiIGV2ZW50IHRvIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50c1xuICAgICAgcmVxLm9uY2UoJ3NvY2tldCcsIG9uc29ja2V0KTtcbiAgICAgIGZuKG51bGwsIHNvY2tldCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25zb2NrZXQoc29ja2V0KSB7XG4gICAgLy8gcmVwbGF5IHRoZSBcImJ1ZmZlcnNcIiBCdWZmZXIgb250byB0aGUgYHNvY2tldGAsIHNpbmNlIGF0IHRoaXMgcG9pbnRcbiAgICAvLyB0aGUgSFRUUCBtb2R1bGUgbWFjaGluZXJ5IGhhcyBiZWVuIGhvb2tlZCB1cCBmb3IgdGhlIHVzZXJcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygc29ja2V0Lm9uZGF0YSkge1xuICAgICAgLy8gbm9kZSA8PSB2MC4xMS4zLCB0aGUgYG9uZGF0YWAgZnVuY3Rpb24gaXMgc2V0IG9uIHRoZSBzb2NrZXRcbiAgICAgIHNvY2tldC5vbmRhdGEoYnVmZmVycywgMCwgYnVmZmVycy5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAoc29ja2V0Lmxpc3RlbmVycygnZGF0YScpLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIG5vZGUgPiB2MC4xMS4zLCB0aGUgXCJkYXRhXCIgZXZlbnQgaXMgbGlzdGVuZWQgZm9yIGRpcmVjdGx5XG4gICAgICBzb2NrZXQuZW1pdCgnZGF0YScsIGJ1ZmZlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBuZXZlcj9cbiAgICAgIHRocm93IG5ldyBFcnJvcignc2hvdWxkIG5vdCBoYXBwZW4uLi4nKTtcbiAgICB9XG5cbiAgICAvLyBudWxsaWZ5IHRoZSBjYWNoZWQgQnVmZmVyIGluc3RhbmNlXG4gICAgYnVmZmVycyA9IG51bGw7XG4gIH1cblxuICBzb2NrZXQub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIHNvY2tldC5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgc29ja2V0Lm9uKCdlbmQnLCBvbmVuZCk7XG5cbiAgaWYgKHNvY2tldC5yZWFkKSB7XG4gICAgcmVhZCgpO1xuICB9IGVsc2Uge1xuICAgIHNvY2tldC5vbmNlKCdkYXRhJywgb25kYXRhKTtcbiAgfVxuXG4gIHZhciBob3N0bmFtZSA9IG9wdHMuaG9zdCArICc6JyArIG9wdHMucG9ydDtcbiAgdmFyIG1zZyA9ICdDT05ORUNUICcgKyBob3N0bmFtZSArICcgSFRUUC8xLjFcXHJcXG4nO1xuXG4gIHZhciBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgcHJveHkuaGVhZGVycyk7XG4gIGlmIChwcm94eS5hdXRoKSB7XG4gICAgaGVhZGVyc1snUHJveHktQXV0aG9yaXphdGlvbiddID1cbiAgICAgICdCYXNpYyAnICsgQnVmZmVyLmZyb20ocHJveHkuYXV0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9XG5cbiAgLy8gdGhlIEhvc3QgaGVhZGVyIHNob3VsZCBvbmx5IGluY2x1ZGUgdGhlIHBvcnRcbiAgLy8gbnVtYmVyIHdoZW4gaXQgaXMgYSBub24tc3RhbmRhcmQgcG9ydFxuICB2YXIgaG9zdCA9IG9wdHMuaG9zdDtcbiAgaWYgKCFpc0RlZmF1bHRQb3J0KG9wdHMucG9ydCwgb3B0cy5zZWN1cmVFbmRwb2ludCkpIHtcbiAgICBob3N0ICs9ICc6JyArIG9wdHMucG9ydDtcbiAgfVxuICBoZWFkZXJzWydIb3N0J10gPSBob3N0O1xuXG4gIGhlYWRlcnNbJ0Nvbm5lY3Rpb24nXSA9ICdjbG9zZSc7XG4gIE9iamVjdC5rZXlzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIG1zZyArPSBuYW1lICsgJzogJyArIGhlYWRlcnNbbmFtZV0gKyAnXFxyXFxuJztcbiAgfSk7XG5cbiAgc29ja2V0LndyaXRlKG1zZyArICdcXHJcXG4nKTtcbn07XG5cbmZ1bmN0aW9uIGlzRGVmYXVsdFBvcnQocG9ydCwgc2VjdXJlKSB7XG4gIHJldHVybiBCb29sZWFuKCghc2VjdXJlICYmIHBvcnQgPT09IDgwKSB8fCAoc2VjdXJlICYmIHBvcnQgPT09IDQ0MykpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/https-proxy-agent/index.js\n");

/***/ }),

/***/ "./node_modules/https-proxy-agent/node_modules/debug/src/browser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/https-proxy-agent/node_modules/debug/src/browser.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/https-proxy-agent/node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/https-proxy-agent/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "./node_modules/https-proxy-agent/node_modules/debug/src/common.js":
/*!*************************************************************************!*\
  !*** ./node_modules/https-proxy-agent/node_modules/debug/src/common.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/https-proxy-agent/node_modules/ms/index.js\");\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/https-proxy-agent/node_modules/debug/src/common.js\n");

/***/ }),

/***/ "./node_modules/https-proxy-agent/node_modules/debug/src/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/https-proxy-agent/node_modules/debug/src/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n  module.exports = __webpack_require__(/*! ./browser.js */ \"./node_modules/https-proxy-agent/node_modules/debug/src/browser.js\");\n} else {\n  module.exports = __webpack_require__(/*! ./node.js */ \"./node_modules/https-proxy-agent/node_modules/debug/src/node.js\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBEZXRlY3QgRWxlY3Ryb24gcmVuZGVyZXIgLyBud2pzIHByb2Nlc3MsIHdoaWNoIGlzIG5vZGUsIGJ1dCB3ZSBzaG91bGRcbiAqIHRyZWF0IGFzIGEgYnJvd3Nlci5cbiAqL1xuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCBwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgcHJvY2Vzcy5icm93c2VyID09PSB0cnVlIHx8IHByb2Nlc3MuX19ud2pzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS5qcycpO1xufVxuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/https-proxy-agent/node_modules/debug/src/index.js\n");

/***/ }),

/***/ "./node_modules/https-proxy-agent/node_modules/debug/src/node.js":
/*!***********************************************************************!*\
  !*** ./node_modules/https-proxy-agent/node_modules/debug/src/node.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Module dependencies.\n */\nvar tty = __webpack_require__(/*! tty */ \"tty\");\n\nvar util = __webpack_require__(/*! util */ \"util\");\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  var supportsColor = __webpack_require__(/*! supports-color */ \"./node_modules/supports-color/index.js\");\n\n  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];\n  }\n} catch (error) {} // Swallow - we only care if `supports-color` is available; it doesn't have to be.\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // Camel-case\n  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {\n    return k.toUpperCase();\n  }); // Coerce string value into JS value\n\n  var val = process.env[key];\n\n  if (/^(yes|on|true|enabled)$/i.test(val)) {\n    val = true;\n  } else if (/^(no|off|false|disabled)$/i.test(val)) {\n    val = false;\n  } else if (val === 'null') {\n    val = null;\n  } else {\n    val = Number(val);\n  }\n\n  obj[prop] = val;\n  return obj;\n}, {});\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);\n}\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  var name = this.namespace,\n      useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var colorCode = \"\\x1B[3\" + (c < 8 ? c : '8;5;' + c);\n    var prefix = \"  \".concat(colorCode, \";1m\").concat(name, \" \\x1B[0m\");\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + \"\\x1B[0m\");\n  } else {\n    args[0] = getDate() + name + ' ' + args[0];\n  }\n}\n\nfunction getDate() {\n  if (exports.inspectOpts.hideDate) {\n    return '';\n  }\n\n  return new Date().toISOString() + ' ';\n}\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\n\nfunction log() {\n  return process.stderr.write(util.format.apply(util, arguments) + '\\n');\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  if (namespaces) {\n    process.env.DEBUG = namespaces;\n  } else {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  return process.env.DEBUG;\n}\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\n\nfunction init(debug) {\n  debug.inspectOpts = {};\n  var keys = Object.keys(exports.inspectOpts);\n\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/https-proxy-agent/node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts).replace(/\\s*\\n\\s*/g, ' ');\n};\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\n\nformatters.O = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9ub2RlLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9odHRwcy1wcm94eS1hZ2VudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL25vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xudmFyIHR0eSA9IHJlcXVpcmUoJ3R0eScpO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbi8qKlxuICogVGhpcyBpcyB0aGUgTm9kZS5qcyBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuXG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWzYsIDIsIDMsIDQsIDUsIDFdO1xuXG50cnkge1xuICAvLyBPcHRpb25hbCBkZXBlbmRlbmN5IChhcyBpbiwgZG9lc24ndCBuZWVkIHRvIGJlIGluc3RhbGxlZCwgTk9UIGxpa2Ugb3B0aW9uYWxEZXBlbmRlbmNpZXMgaW4gcGFja2FnZS5qc29uKVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG4gIHZhciBzdXBwb3J0c0NvbG9yID0gcmVxdWlyZSgnc3VwcG9ydHMtY29sb3InKTtcblxuICBpZiAoc3VwcG9ydHNDb2xvciAmJiAoc3VwcG9ydHNDb2xvci5zdGRlcnIgfHwgc3VwcG9ydHNDb2xvcikubGV2ZWwgPj0gMikge1xuICAgIGV4cG9ydHMuY29sb3JzID0gWzIwLCAyMSwgMjYsIDI3LCAzMiwgMzMsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNTYsIDU3LCA2MiwgNjMsIDY4LCA2OSwgNzQsIDc1LCA3NiwgNzcsIDc4LCA3OSwgODAsIDgxLCA5MiwgOTMsIDk4LCA5OSwgMTEyLCAxMTMsIDEyOCwgMTI5LCAxMzQsIDEzNSwgMTQ4LCAxNDksIDE2MCwgMTYxLCAxNjIsIDE2MywgMTY0LCAxNjUsIDE2NiwgMTY3LCAxNjgsIDE2OSwgMTcwLCAxNzEsIDE3MiwgMTczLCAxNzgsIDE3OSwgMTg0LCAxODUsIDE5NiwgMTk3LCAxOTgsIDE5OSwgMjAwLCAyMDEsIDIwMiwgMjAzLCAyMDQsIDIwNSwgMjA2LCAyMDcsIDIwOCwgMjA5LCAyMTQsIDIxNSwgMjIwLCAyMjFdO1xuICB9XG59IGNhdGNoIChlcnJvcikge30gLy8gU3dhbGxvdyAtIHdlIG9ubHkgY2FyZSBpZiBgc3VwcG9ydHMtY29sb3JgIGlzIGF2YWlsYWJsZTsgaXQgZG9lc24ndCBoYXZlIHRvIGJlLlxuXG4vKipcbiAqIEJ1aWxkIHVwIHRoZSBkZWZhdWx0IGBpbnNwZWN0T3B0c2Agb2JqZWN0IGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqXG4gKiAgICQgREVCVUdfQ09MT1JTPW5vIERFQlVHX0RFUFRIPTEwIERFQlVHX1NIT1dfSElEREVOPWVuYWJsZWQgbm9kZSBzY3JpcHQuanNcbiAqL1xuXG5cbmV4cG9ydHMuaW5zcGVjdE9wdHMgPSBPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIC9eZGVidWdfL2kudGVzdChrZXkpO1xufSkucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAvLyBDYW1lbC1jYXNlXG4gIHZhciBwcm9wID0ga2V5LnN1YnN0cmluZyg2KS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL18oW2Etel0pL2csIGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsudG9VcHBlckNhc2UoKTtcbiAgfSk7IC8vIENvZXJjZSBzdHJpbmcgdmFsdWUgaW50byBKUyB2YWx1ZVxuXG4gIHZhciB2YWwgPSBwcm9jZXNzLmVudltrZXldO1xuXG4gIGlmICgvXih5ZXN8b258dHJ1ZXxlbmFibGVkKSQvaS50ZXN0KHZhbCkpIHtcbiAgICB2YWwgPSB0cnVlO1xuICB9IGVsc2UgaWYgKC9eKG5vfG9mZnxmYWxzZXxkaXNhYmxlZCkkL2kudGVzdCh2YWwpKSB7XG4gICAgdmFsID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAodmFsID09PSAnbnVsbCcpIHtcbiAgICB2YWwgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHZhbCA9IE51bWJlcih2YWwpO1xuICB9XG5cbiAgb2JqW3Byb3BdID0gdmFsO1xuICByZXR1cm4gb2JqO1xufSwge30pO1xuLyoqXG4gKiBJcyBzdGRvdXQgYSBUVFk/IENvbG9yZWQgb3V0cHV0IGlzIGVuYWJsZWQgd2hlbiBgdHJ1ZWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICByZXR1cm4gJ2NvbG9ycycgaW4gZXhwb3J0cy5pbnNwZWN0T3B0cyA/IEJvb2xlYW4oZXhwb3J0cy5pbnNwZWN0T3B0cy5jb2xvcnMpIDogdHR5LmlzYXR0eShwcm9jZXNzLnN0ZGVyci5mZCk7XG59XG4vKipcbiAqIEFkZHMgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciBuYW1lID0gdGhpcy5uYW1lc3BhY2UsXG4gICAgICB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBpZiAodXNlQ29sb3JzKSB7XG4gICAgdmFyIGMgPSB0aGlzLmNvbG9yO1xuICAgIHZhciBjb2xvckNvZGUgPSBcIlxceDFCWzNcIiArIChjIDwgOCA/IGMgOiAnODs1OycgKyBjKTtcbiAgICB2YXIgcHJlZml4ID0gXCIgIFwiLmNvbmNhdChjb2xvckNvZGUsIFwiOzFtXCIpLmNvbmNhdChuYW1lLCBcIiBcXHgxQlswbVwiKTtcbiAgICBhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG4gICAgYXJncy5wdXNoKGNvbG9yQ29kZSArICdtKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpICsgXCJcXHgxQlswbVwiKTtcbiAgfSBlbHNlIHtcbiAgICBhcmdzWzBdID0gZ2V0RGF0ZSgpICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcbiAgaWYgKGV4cG9ydHMuaW5zcGVjdE9wdHMuaGlkZURhdGUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgJyAnO1xufVxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gc3RkZXJyLlxuICovXG5cblxuZnVuY3Rpb24gbG9nKCkge1xuICByZXR1cm4gcHJvY2Vzcy5zdGRlcnIud3JpdGUodXRpbC5mb3JtYXQuYXBwbHkodXRpbCwgYXJndW1lbnRzKSArICdcXG4nKTtcbn1cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIGlmIChuYW1lc3BhY2VzKSB7XG4gICAgcHJvY2Vzcy5lbnYuREVCVUcgPSBuYW1lc3BhY2VzO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHlvdSBzZXQgYSBwcm9jZXNzLmVudiBmaWVsZCB0byBudWxsIG9yIHVuZGVmaW5lZCwgaXQgZ2V0cyBjYXN0IHRvIHRoZVxuICAgIC8vIHN0cmluZyAnbnVsbCcgb3IgJ3VuZGVmaW5lZCcuIEp1c3QgZGVsZXRlIGluc3RlYWQuXG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG59XG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52LkRFQlVHO1xufVxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGluaXQoZGVidWcpIHtcbiAgZGVidWcuaW5zcGVjdE9wdHMgPSB7fTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhleHBvcnRzLmluc3BlY3RPcHRzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWJ1Zy5pbnNwZWN0T3B0c1trZXlzW2ldXSA9IGV4cG9ydHMuaW5zcGVjdE9wdHNba2V5c1tpXV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xudmFyIGZvcm1hdHRlcnMgPSBtb2R1bGUuZXhwb3J0cy5mb3JtYXR0ZXJzO1xuLyoqXG4gKiBNYXAgJW8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsIG9uIGEgc2luZ2xlIGxpbmUuXG4gKi9cblxuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24gKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKS5yZXBsYWNlKC9cXHMqXFxuXFxzKi9nLCAnICcpO1xufTtcbi8qKlxuICogTWFwICVPIHRvIGB1dGlsLmluc3BlY3QoKWAsIGFsbG93aW5nIG11bHRpcGxlIGxpbmVzIGlmIG5lZWRlZC5cbiAqL1xuXG5cbmZvcm1hdHRlcnMuTyA9IGZ1bmN0aW9uICh2KSB7XG4gIHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG4gIHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cyk7XG59O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/https-proxy-agent/node_modules/debug/src/node.js\n");

/***/ }),

/***/ "./node_modules/https-proxy-agent/node_modules/ms/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/https-proxy-agent/node_modules/ms/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\-?\\d?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9odHRwcy1wcm94eS1hZ2VudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC0/XFxkP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/https-proxy-agent/node_modules/ms/index.js\n");

/***/ }),

/***/ "./node_modules/jsonc-parser/lib/esm/edit.js":
/*!***************************************************!*\
  !*** ./node_modules/jsonc-parser/lib/esm/edit.js ***!
  \***************************************************/
/*! exports provided: removeProperty, setProperty, applyEdit, isWS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeProperty\", function() { return removeProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setProperty\", function() { return setProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyEdit\", function() { return applyEdit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isWS\", function() { return isWS; });\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main */ \"./node_modules/jsonc-parser/lib/esm/main.js\");\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./format */ \"./node_modules/jsonc-parser/lib/esm/format.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nfunction setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = Object(_main__WEBPACK_IMPORTED_MODULE_0__[\"parseTree\"])(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = Object(_main__WEBPACK_IMPORTED_MODULE_0__[\"findNodeAtLocation\"])(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) {\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = Object(_main__WEBPACK_IMPORTED_MODULE_0__[\"findNodeAtLocation\"])(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) {\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) {\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) {\n        while (begin > 0 && !Object(_format__WEBPACK_IMPORTED_MODULE_1__[\"isEOL\"])(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !Object(_format__WEBPACK_IMPORTED_MODULE_1__[\"isEOL\"])(newText, end)) {\n            end++;\n        }\n    }\n    var edits = Object(_format__WEBPACK_IMPORTED_MODULE_1__[\"format\"])(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nfunction applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nfunction isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsonc-parser/lib/esm/edit.js\n");

/***/ }),

/***/ "./node_modules/jsonc-parser/lib/esm/format.js":
/*!*****************************************************!*\
  !*** ./node_modules/jsonc-parser/lib/esm/format.js ***!
  \*****************************************************/
/*! exports provided: format, isEOL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"format\", function() { return format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isEOL\", function() { return isEOL; });\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main */ \"./node_modules/jsonc-parser/lib/esm/main.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nfunction format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = _main__WEBPACK_IMPORTED_MODULE_0__[\"createScanner\"](formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].Trivia || token === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].LineBreakTrivia) {\n            lineBreak = lineBreak || (token === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].LineBreakTrivia);\n            token = scanner.scan();\n        }\n        hasError = token === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].Unknown || scanner.getTokenError() !== _main__WEBPACK_IMPORTED_MODULE_0__[\"ScanError\"].None;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].EOF) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].EOF) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].LineCommentTrivia || secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].BlockCommentTrivia)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].LineCommentTrivia ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].CloseBraceToken) {\n            if (firstToken !== _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].OpenBraceToken) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].CloseBracketToken) {\n            if (firstToken !== _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].OpenBracketToken) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].OpenBracketToken:\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].OpenBraceToken:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].CommaToken:\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].LineCommentTrivia:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].BlockCommentTrivia:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].ColonToken:\n                    replaceContent = ' ';\n                    break;\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].StringLiteral:\n                    if (secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].ColonToken) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].NullKeyword:\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].TrueKeyword:\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].FalseKeyword:\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].NumericLiteral:\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].CloseBraceToken:\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].CloseBracketToken:\n                    if (secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].LineCommentTrivia || secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].BlockCommentTrivia) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].CommaToken && secondToken !== _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].EOF) {\n                        hasError = true;\n                    }\n                    break;\n                case _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].Unknown:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].LineCommentTrivia || secondToken === _main__WEBPACK_IMPORTED_MODULE_0__[\"SyntaxKind\"].BlockCommentTrivia)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nfunction isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsonc-parser/lib/esm/format.js\n");

/***/ }),

/***/ "./node_modules/jsonc-parser/lib/esm/main.js":
/*!***************************************************!*\
  !*** ./node_modules/jsonc-parser/lib/esm/main.js ***!
  \***************************************************/
/*! exports provided: ScanError, SyntaxKind, createScanner, stripComments, ParseErrorCode, getLocation, parse, parseTree, findNodeAtLocation, getNodeValue, visit, format, modify, applyEdits */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScanError\", function() { return ScanError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SyntaxKind\", function() { return SyntaxKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createScanner\", function() { return createScanner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stripComments\", function() { return stripComments; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParseErrorCode\", function() { return ParseErrorCode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLocation\", function() { return getLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseTree\", function() { return parseTree; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findNodeAtLocation\", function() { return findNodeAtLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNodeValue\", function() { return getNodeValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"visit\", function() { return visit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"format\", function() { return format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"modify\", function() { return modify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyEdits\", function() { return applyEdits; });\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format */ \"./node_modules/jsonc-parser/lib/esm/format.js\");\n/* harmony import */ var _edit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./edit */ \"./node_modules/jsonc-parser/lib/esm/edit.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nvar ScanError;\n(function (ScanError) {\n    ScanError[ScanError[\"None\"] = 0] = \"None\";\n    ScanError[ScanError[\"UnexpectedEndOfComment\"] = 1] = \"UnexpectedEndOfComment\";\n    ScanError[ScanError[\"UnexpectedEndOfString\"] = 2] = \"UnexpectedEndOfString\";\n    ScanError[ScanError[\"UnexpectedEndOfNumber\"] = 3] = \"UnexpectedEndOfNumber\";\n    ScanError[ScanError[\"InvalidUnicode\"] = 4] = \"InvalidUnicode\";\n    ScanError[ScanError[\"InvalidEscapeCharacter\"] = 5] = \"InvalidEscapeCharacter\";\n    ScanError[ScanError[\"InvalidCharacter\"] = 6] = \"InvalidCharacter\";\n})(ScanError || (ScanError = {}));\nvar SyntaxKind;\n(function (SyntaxKind) {\n    SyntaxKind[SyntaxKind[\"Unknown\"] = 0] = \"Unknown\";\n    SyntaxKind[SyntaxKind[\"OpenBraceToken\"] = 1] = \"OpenBraceToken\";\n    SyntaxKind[SyntaxKind[\"CloseBraceToken\"] = 2] = \"CloseBraceToken\";\n    SyntaxKind[SyntaxKind[\"OpenBracketToken\"] = 3] = \"OpenBracketToken\";\n    SyntaxKind[SyntaxKind[\"CloseBracketToken\"] = 4] = \"CloseBracketToken\";\n    SyntaxKind[SyntaxKind[\"CommaToken\"] = 5] = \"CommaToken\";\n    SyntaxKind[SyntaxKind[\"ColonToken\"] = 6] = \"ColonToken\";\n    SyntaxKind[SyntaxKind[\"NullKeyword\"] = 7] = \"NullKeyword\";\n    SyntaxKind[SyntaxKind[\"TrueKeyword\"] = 8] = \"TrueKeyword\";\n    SyntaxKind[SyntaxKind[\"FalseKeyword\"] = 9] = \"FalseKeyword\";\n    SyntaxKind[SyntaxKind[\"StringLiteral\"] = 10] = \"StringLiteral\";\n    SyntaxKind[SyntaxKind[\"NumericLiteral\"] = 11] = \"NumericLiteral\";\n    SyntaxKind[SyntaxKind[\"LineCommentTrivia\"] = 12] = \"LineCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"BlockCommentTrivia\"] = 13] = \"BlockCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"LineBreakTrivia\"] = 14] = \"LineBreakTrivia\";\n    SyntaxKind[SyntaxKind[\"Trivia\"] = 15] = \"Trivia\";\n    SyntaxKind[SyntaxKind[\"EOF\"] = 16] = \"EOF\";\n})(SyntaxKind || (SyntaxKind = {}));\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nfunction createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = SyntaxKind.Unknown, scanError = ScanError.None;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = SyntaxKind.Unknown;\n        scanError = ScanError.None;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = ScanError.UnexpectedEndOfNumber;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = ScanError.UnexpectedEndOfNumber;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = ScanError.UnexpectedEndOfString;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = ScanError.UnexpectedEndOfString;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = ScanError.InvalidUnicode;\n                        }\n                        break;\n                    default:\n                        scanError = ScanError.InvalidEscapeCharacter;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = ScanError.UnexpectedEndOfString;\n                    break;\n                }\n                else {\n                    scanError = ScanError.InvalidCharacter;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = ScanError.None;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = SyntaxKind.EOF;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = SyntaxKind.Trivia;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = SyntaxKind.LineBreakTrivia;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = SyntaxKind.OpenBraceToken;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = SyntaxKind.CloseBraceToken;\n            case 91 /* openBracket */:\n                pos++;\n                return token = SyntaxKind.OpenBracketToken;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = SyntaxKind.CloseBracketToken;\n            case 58 /* colon */:\n                pos++;\n                return token = SyntaxKind.ColonToken;\n            case 44 /* comma */:\n                pos++;\n                return token = SyntaxKind.CommaToken;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = SyntaxKind.StringLiteral;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = SyntaxKind.LineCommentTrivia;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = ScanError.UnexpectedEndOfComment;\n                    }\n                    value = text.substring(start, pos);\n                    return token = SyntaxKind.BlockCommentTrivia;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = SyntaxKind.Unknown;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = SyntaxKind.Unknown;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = SyntaxKind.NumericLiteral;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = SyntaxKind.TrueKeyword;\n                        case 'false': return token = SyntaxKind.FalseKeyword;\n                        case 'null': return token = SyntaxKind.NullKeyword;\n                    }\n                    return token = SyntaxKind.Unknown;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = SyntaxKind.Unknown;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= SyntaxKind.LineCommentTrivia && result <= SyntaxKind.Trivia);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nfunction stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case SyntaxKind.LineCommentTrivia:\n            case SyntaxKind.BlockCommentTrivia:\n            case SyntaxKind.EOF:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== SyntaxKind.EOF);\n    return parts.join('');\n}\nvar ParseErrorCode;\n(function (ParseErrorCode) {\n    ParseErrorCode[ParseErrorCode[\"InvalidSymbol\"] = 0] = \"InvalidSymbol\";\n    ParseErrorCode[ParseErrorCode[\"InvalidNumberFormat\"] = 1] = \"InvalidNumberFormat\";\n    ParseErrorCode[ParseErrorCode[\"PropertyNameExpected\"] = 2] = \"PropertyNameExpected\";\n    ParseErrorCode[ParseErrorCode[\"ValueExpected\"] = 3] = \"ValueExpected\";\n    ParseErrorCode[ParseErrorCode[\"ColonExpected\"] = 4] = \"ColonExpected\";\n    ParseErrorCode[ParseErrorCode[\"CommaExpected\"] = 5] = \"CommaExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBraceExpected\"] = 6] = \"CloseBraceExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBracketExpected\"] = 7] = \"CloseBracketExpected\";\n    ParseErrorCode[ParseErrorCode[\"EndOfFileExpected\"] = 8] = \"EndOfFileExpected\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCommentToken\"] = 9] = \"InvalidCommentToken\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfComment\"] = 10] = \"UnexpectedEndOfComment\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfString\"] = 11] = \"UnexpectedEndOfString\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfNumber\"] = 12] = \"UnexpectedEndOfNumber\";\n    ParseErrorCode[ParseErrorCode[\"InvalidUnicode\"] = 13] = \"InvalidUnicode\";\n    ParseErrorCode[ParseErrorCode[\"InvalidEscapeCharacter\"] = 14] = \"InvalidEscapeCharacter\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCharacter\"] = 15] = \"InvalidCharacter\";\n})(ParseErrorCode || (ParseErrorCode = {}));\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nfunction getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nfunction parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nfunction parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nfunction findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nfunction getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nfunction visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case ScanError.InvalidUnicode:\n                    handleError(ParseErrorCode.InvalidUnicode);\n                    break;\n                case ScanError.InvalidEscapeCharacter:\n                    handleError(ParseErrorCode.InvalidEscapeCharacter);\n                    break;\n                case ScanError.UnexpectedEndOfNumber:\n                    handleError(ParseErrorCode.UnexpectedEndOfNumber);\n                    break;\n                case ScanError.UnexpectedEndOfComment:\n                    if (!disallowComments) {\n                        handleError(ParseErrorCode.UnexpectedEndOfComment);\n                    }\n                    break;\n                case ScanError.UnexpectedEndOfString:\n                    handleError(ParseErrorCode.UnexpectedEndOfString);\n                    break;\n                case ScanError.InvalidCharacter:\n                    handleError(ParseErrorCode.InvalidCharacter);\n                    break;\n            }\n            switch (token) {\n                case SyntaxKind.LineCommentTrivia:\n                case SyntaxKind.BlockCommentTrivia:\n                    if (disallowComments) {\n                        handleError(ParseErrorCode.InvalidCommentToken);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case SyntaxKind.Unknown:\n                    handleError(ParseErrorCode.InvalidSymbol);\n                    break;\n                case SyntaxKind.Trivia:\n                case SyntaxKind.LineBreakTrivia:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== SyntaxKind.EOF) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case SyntaxKind.NumericLiteral:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(ParseErrorCode.InvalidNumberFormat);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(ParseErrorCode.InvalidNumberFormat);\n                }\n                onLiteralValue(value);\n                break;\n            case SyntaxKind.NullKeyword:\n                onLiteralValue(null);\n                break;\n            case SyntaxKind.TrueKeyword:\n                onLiteralValue(true);\n                break;\n            case SyntaxKind.FalseKeyword:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== SyntaxKind.StringLiteral) {\n            handleError(ParseErrorCode.PropertyNameExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === SyntaxKind.ColonToken) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);\n            }\n        }\n        else {\n            handleError(ParseErrorCode.ColonExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== SyntaxKind.CloseBraceToken && _scanner.getToken() !== SyntaxKind.EOF) {\n            if (_scanner.getToken() === SyntaxKind.CommaToken) {\n                if (!needsComma) {\n                    handleError(ParseErrorCode.ValueExpected, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === SyntaxKind.CloseBraceToken && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(ParseErrorCode.CommaExpected, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== SyntaxKind.CloseBraceToken) {\n            handleError(ParseErrorCode.CloseBraceExpected, [SyntaxKind.CloseBraceToken], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== SyntaxKind.CloseBracketToken && _scanner.getToken() !== SyntaxKind.EOF) {\n            if (_scanner.getToken() === SyntaxKind.CommaToken) {\n                if (!needsComma) {\n                    handleError(ParseErrorCode.ValueExpected, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === SyntaxKind.CloseBracketToken && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(ParseErrorCode.CommaExpected, [], []);\n            }\n            if (!parseValue()) {\n                handleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBracketToken, SyntaxKind.CommaToken]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== SyntaxKind.CloseBracketToken) {\n            handleError(ParseErrorCode.CloseBracketExpected, [SyntaxKind.CloseBracketToken], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case SyntaxKind.OpenBracketToken:\n                return parseArray();\n            case SyntaxKind.OpenBraceToken:\n                return parseObject();\n            case SyntaxKind.StringLiteral:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === SyntaxKind.EOF) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(ParseErrorCode.ValueExpected, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== SyntaxKind.EOF) {\n        handleError(ParseErrorCode.EndOfFileExpected, [], []);\n    }\n    return true;\n}\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nfunction format(documentText, range, options) {\n    return Object(_format__WEBPACK_IMPORTED_MODULE_0__[\"format\"])(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nfunction modify(text, path, value, options) {\n    return Object(_edit__WEBPACK_IMPORTED_MODULE_1__[\"setProperty\"])(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nfunction applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = Object(_edit__WEBPACK_IMPORTED_MODULE_1__[\"applyEdit\"])(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsonc-parser/lib/esm/main.js\n");

/***/ }),

/***/ "./node_modules/minimatch/minimatch.js":
/*!*********************************************!*\
  !*** ./node_modules/minimatch/minimatch.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = __webpack_require__(/*! path */ \"path\")\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = __webpack_require__(/*! brace-expansion */ \"./node_modules/brace-expansion/index.js\")\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long')\n  }\n\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/minimatch/minimatch.js\n");

/***/ }),

/***/ "./node_modules/mkdirp/index.js":
/*!**************************************!*\
  !*** ./node_modules/mkdirp/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar _0777 = parseInt('0777', 8);\n\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;\n\nfunction mkdirP (p, opts, f, made) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n    \n    var cb = f || function () {};\n    p = path.resolve(p);\n    \n    xfs.mkdir(p, mode, function (er) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirP(path.dirname(p), opts, function (er, made) {\n                    if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function (er2, stat) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made)\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nmkdirP.sync = function sync (p, opts, made) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT' :\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWtkaXJwL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9ta2RpcnAvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIF8wNzc3ID0gcGFyc2VJbnQoJzA3NzcnLCA4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBta2RpclAubWtkaXJwID0gbWtkaXJQLm1rZGlyUCA9IG1rZGlyUDtcblxuZnVuY3Rpb24gbWtkaXJQIChwLCBvcHRzLCBmLCBtYWRlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGYgPSBvcHRzO1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRzID0geyBtb2RlOiBvcHRzIH07XG4gICAgfVxuICAgIFxuICAgIHZhciBtb2RlID0gb3B0cy5tb2RlO1xuICAgIHZhciB4ZnMgPSBvcHRzLmZzIHx8IGZzO1xuICAgIFxuICAgIGlmIChtb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbW9kZSA9IF8wNzc3ICYgKH5wcm9jZXNzLnVtYXNrKCkpO1xuICAgIH1cbiAgICBpZiAoIW1hZGUpIG1hZGUgPSBudWxsO1xuICAgIFxuICAgIHZhciBjYiA9IGYgfHwgZnVuY3Rpb24gKCkge307XG4gICAgcCA9IHBhdGgucmVzb2x2ZShwKTtcbiAgICBcbiAgICB4ZnMubWtkaXIocCwgbW9kZSwgZnVuY3Rpb24gKGVyKSB7XG4gICAgICAgIGlmICghZXIpIHtcbiAgICAgICAgICAgIG1hZGUgPSBtYWRlIHx8IHA7XG4gICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgbWFkZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChlci5jb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdFTk9FTlQnOlxuICAgICAgICAgICAgICAgIG1rZGlyUChwYXRoLmRpcm5hbWUocCksIG9wdHMsIGZ1bmN0aW9uIChlciwgbWFkZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXIpIGNiKGVyLCBtYWRlKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBta2RpclAocCwgb3B0cywgY2IsIG1hZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiBhbnkgb3RoZXIgZXJyb3IsIGp1c3Qgc2VlIGlmIHRoZXJlJ3MgYSBkaXJcbiAgICAgICAgICAgIC8vIHRoZXJlIGFscmVhZHkuICBJZiBzbywgdGhlbiBob29yYXkhICBJZiBub3QsIHRoZW4gc29tZXRoaW5nXG4gICAgICAgICAgICAvLyBpcyBib3JrZWQuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHhmcy5zdGF0KHAsIGZ1bmN0aW9uIChlcjIsIHN0YXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN0YXQgZmFpbHMsIHRoZW4gdGhhdCdzIHN1cGVyIHdlaXJkLlxuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgdGhlIG9yaWdpbmFsIGVycm9yIGJlIHRoZSBmYWlsdXJlIHJlYXNvbi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyMiB8fCAhc3RhdC5pc0RpcmVjdG9yeSgpKSBjYihlciwgbWFkZSlcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBjYihudWxsLCBtYWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5ta2RpclAuc3luYyA9IGZ1bmN0aW9uIHN5bmMgKHAsIG9wdHMsIG1hZGUpIHtcbiAgICBpZiAoIW9wdHMgfHwgdHlwZW9mIG9wdHMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdHMgPSB7IG1vZGU6IG9wdHMgfTtcbiAgICB9XG4gICAgXG4gICAgdmFyIG1vZGUgPSBvcHRzLm1vZGU7XG4gICAgdmFyIHhmcyA9IG9wdHMuZnMgfHwgZnM7XG4gICAgXG4gICAgaWYgKG1vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtb2RlID0gXzA3NzcgJiAofnByb2Nlc3MudW1hc2soKSk7XG4gICAgfVxuICAgIGlmICghbWFkZSkgbWFkZSA9IG51bGw7XG5cbiAgICBwID0gcGF0aC5yZXNvbHZlKHApO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgeGZzLm1rZGlyU3luYyhwLCBtb2RlKTtcbiAgICAgICAgbWFkZSA9IG1hZGUgfHwgcDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycjApIHtcbiAgICAgICAgc3dpdGNoIChlcnIwLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VOT0VOVCcgOlxuICAgICAgICAgICAgICAgIG1hZGUgPSBzeW5jKHBhdGguZGlybmFtZShwKSwgb3B0cywgbWFkZSk7XG4gICAgICAgICAgICAgICAgc3luYyhwLCBvcHRzLCBtYWRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgYW55IG90aGVyIGVycm9yLCBqdXN0IHNlZSBpZiB0aGVyZSdzIGEgZGlyXG4gICAgICAgICAgICAvLyB0aGVyZSBhbHJlYWR5LiAgSWYgc28sIHRoZW4gaG9vcmF5ISAgSWYgbm90LCB0aGVuIHNvbWV0aGluZ1xuICAgICAgICAgICAgLy8gaXMgYm9ya2VkLlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB2YXIgc3RhdDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ID0geGZzLnN0YXRTeW5jKHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnIwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN0YXQuaXNEaXJlY3RvcnkoKSkgdGhyb3cgZXJyMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYWRlO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mkdirp/index.js\n");

/***/ }),

/***/ "./node_modules/os-tmpdir/index.js":
/*!*****************************************!*\
  !*** ./node_modules/os-tmpdir/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isWindows = process.platform === 'win32';\nvar trailingSlashRe = isWindows ? /[^:]\\\\$/ : /.\\/$/;\n\n// https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43\nmodule.exports = function () {\n\tvar path;\n\n\tif (isWindows) {\n\t\tpath = process.env.TEMP ||\n\t\t\tprocess.env.TMP ||\n\t\t\t(process.env.SystemRoot || process.env.windir) + '\\\\temp';\n\t} else {\n\t\tpath = process.env.TMPDIR ||\n\t\t\tprocess.env.TMP ||\n\t\t\tprocess.env.TEMP ||\n\t\t\t'/tmp';\n\t}\n\n\tif (trailingSlashRe.test(path)) {\n\t\tpath = path.slice(0, -1);\n\t}\n\n\treturn path;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvb3MtdG1wZGlyL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy9vcy10bXBkaXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGlzV2luZG93cyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG52YXIgdHJhaWxpbmdTbGFzaFJlID0gaXNXaW5kb3dzID8gL1teOl1cXFxcJC8gOiAvLlxcLyQvO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi8zZTdhMTQzODE0OTdhM2I3M2RkYTY4ZDA1YjUxMzA1NjNjZGFiNDIwL2xpYi9vcy5qcyNMMjUtTDQzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHBhdGg7XG5cblx0aWYgKGlzV2luZG93cykge1xuXHRcdHBhdGggPSBwcm9jZXNzLmVudi5URU1QIHx8XG5cdFx0XHRwcm9jZXNzLmVudi5UTVAgfHxcblx0XHRcdChwcm9jZXNzLmVudi5TeXN0ZW1Sb290IHx8IHByb2Nlc3MuZW52LndpbmRpcikgKyAnXFxcXHRlbXAnO1xuXHR9IGVsc2Uge1xuXHRcdHBhdGggPSBwcm9jZXNzLmVudi5UTVBESVIgfHxcblx0XHRcdHByb2Nlc3MuZW52LlRNUCB8fFxuXHRcdFx0cHJvY2Vzcy5lbnYuVEVNUCB8fFxuXHRcdFx0Jy90bXAnO1xuXHR9XG5cblx0aWYgKHRyYWlsaW5nU2xhc2hSZS50ZXN0KHBhdGgpKSB7XG5cdFx0cGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xuXHR9XG5cblx0cmV0dXJuIHBhdGg7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/os-tmpdir/index.js\n");

/***/ }),

/***/ "./node_modules/pend/index.js":
/*!************************************!*\
  !*** ./node_modules/pend/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = Pend;\n\nfunction Pend() {\n  this.pending = 0;\n  this.max = Infinity;\n  this.listeners = [];\n  this.waiting = [];\n  this.error = null;\n}\n\nPend.prototype.go = function(fn) {\n  if (this.pending < this.max) {\n    pendGo(this, fn);\n  } else {\n    this.waiting.push(fn);\n  }\n};\n\nPend.prototype.wait = function(cb) {\n  if (this.pending === 0) {\n    cb(this.error);\n  } else {\n    this.listeners.push(cb);\n  }\n};\n\nPend.prototype.hold = function() {\n  return pendHold(this);\n};\n\nfunction pendHold(self) {\n  self.pending += 1;\n  var called = false;\n  return onCb;\n  function onCb(err) {\n    if (called) throw new Error(\"callback called twice\");\n    called = true;\n    self.error = self.error || err;\n    self.pending -= 1;\n    if (self.waiting.length > 0 && self.pending < self.max) {\n      pendGo(self, self.waiting.shift());\n    } else if (self.pending === 0) {\n      var listeners = self.listeners;\n      self.listeners = [];\n      listeners.forEach(cbListener);\n    }\n  }\n  function cbListener(listener) {\n    listener(self.error);\n  }\n}\n\nfunction pendGo(self, fn) {\n  fn(pendHold(self));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGVuZC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvcGVuZC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFBlbmQ7XG5cbmZ1bmN0aW9uIFBlbmQoKSB7XG4gIHRoaXMucGVuZGluZyA9IDA7XG4gIHRoaXMubWF4ID0gSW5maW5pdHk7XG4gIHRoaXMubGlzdGVuZXJzID0gW107XG4gIHRoaXMud2FpdGluZyA9IFtdO1xuICB0aGlzLmVycm9yID0gbnVsbDtcbn1cblxuUGVuZC5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbihmbikge1xuICBpZiAodGhpcy5wZW5kaW5nIDwgdGhpcy5tYXgpIHtcbiAgICBwZW5kR28odGhpcywgZm4pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2FpdGluZy5wdXNoKGZuKTtcbiAgfVxufTtcblxuUGVuZC5wcm90b3R5cGUud2FpdCA9IGZ1bmN0aW9uKGNiKSB7XG4gIGlmICh0aGlzLnBlbmRpbmcgPT09IDApIHtcbiAgICBjYih0aGlzLmVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGNiKTtcbiAgfVxufTtcblxuUGVuZC5wcm90b3R5cGUuaG9sZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcGVuZEhvbGQodGhpcyk7XG59O1xuXG5mdW5jdGlvbiBwZW5kSG9sZChzZWxmKSB7XG4gIHNlbGYucGVuZGluZyArPSAxO1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBvbkNiO1xuICBmdW5jdGlvbiBvbkNiKGVycikge1xuICAgIGlmIChjYWxsZWQpIHRocm93IG5ldyBFcnJvcihcImNhbGxiYWNrIGNhbGxlZCB0d2ljZVwiKTtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHNlbGYuZXJyb3IgPSBzZWxmLmVycm9yIHx8IGVycjtcbiAgICBzZWxmLnBlbmRpbmcgLT0gMTtcbiAgICBpZiAoc2VsZi53YWl0aW5nLmxlbmd0aCA+IDAgJiYgc2VsZi5wZW5kaW5nIDwgc2VsZi5tYXgpIHtcbiAgICAgIHBlbmRHbyhzZWxmLCBzZWxmLndhaXRpbmcuc2hpZnQoKSk7XG4gICAgfSBlbHNlIGlmIChzZWxmLnBlbmRpbmcgPT09IDApIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBzZWxmLmxpc3RlbmVycztcbiAgICAgIHNlbGYubGlzdGVuZXJzID0gW107XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaChjYkxpc3RlbmVyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2JMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIGxpc3RlbmVyKHNlbGYuZXJyb3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBlbmRHbyhzZWxmLCBmbikge1xuICBmbihwZW5kSG9sZChzZWxmKSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pend/index.js\n");

/***/ }),

/***/ "./node_modules/semver/semver.js":
/*!***************************************!*\
  !*** ./node_modules/semver/semver.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n/* nomin */ var debug;\n/* nomin */ if (typeof process === 'object' &&\n    /* nomin */ process.env &&\n    /* nomin */ process.env.NODE_DEBUG &&\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))\n  /* nomin */ debug = function() {\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);\n    /* nomin */ args.unshift('SEMVER');\n    /* nomin */ console.log.apply(console, args);\n    /* nomin */ };\n/* nomin */ else\n  /* nomin */ debug = function() {};\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\nvar MAX_LENGTH = 256;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i]);\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, loose) {\n  if (version instanceof SemVer)\n    return version;\n\n  if (typeof version !== 'string')\n    return null;\n\n  if (version.length > MAX_LENGTH)\n    return null;\n\n  var r = loose ? re[LOOSE] : re[FULL];\n  if (!r.test(version))\n    return null;\n\n  try {\n    return new SemVer(version, loose);\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.valid = valid;\nfunction valid(version, loose) {\n  var v = parse(version, loose);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, loose) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, loose) {\n  if (version instanceof SemVer) {\n    if (version.loose === loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (version.length > MAX_LENGTH)\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, loose);\n\n  debug('SemVer', version, loose);\n  this.loose = loose;\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0)\n    throw new TypeError('Invalid major version')\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)\n    throw new TypeError('Invalid minor version')\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)\n    throw new TypeError('Invalid patch version')\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id;\n        if (num >= 0 && num < MAX_SAFE_INTEGER)\n          return num;\n      }\n      return id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  debug('SemVer.compare', this.version, this.loose, other);\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    debug('prerelease compare', i, a, b);\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  this.raw = this.version;\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose));\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, loose) {\n  if (comp instanceof Comparator) {\n    if (comp.loose === loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, loose);\n\n  debug('comparator', comp, loose);\n  this.loose = loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  debug('comp', this);\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.loose);\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  debug('Comparator.test', version, this.loose);\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  return cmp(version, this.operator, this.semver, this.loose);\n};\n\nComparator.prototype.intersects = function(comp, loose) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required');\n  }\n\n  var rangeTmp;\n\n  if (this.operator === '') {\n    rangeTmp = new Range(comp.value, loose);\n    return satisfies(this.value, rangeTmp, loose);\n  } else if (comp.operator === '') {\n    rangeTmp = new Range(this.value, loose);\n    return satisfies(comp.semver, rangeTmp, loose);\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>');\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<');\n  var sameSemVer = this.semver.version === comp.semver.version;\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=');\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, loose) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'));\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, loose) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'));\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;\n};\n\n\nexports.Range = Range;\nfunction Range(range, loose) {\n  if (range instanceof Range) {\n    if (range.loose === loose) {\n      return range;\n    } else {\n      return new Range(range.raw, loose);\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, loose);\n  }\n\n  if (!(this instanceof Range))\n    return new Range(range, loose);\n\n  this.loose = loose;\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.loose;\n  range = range.trim();\n  debug('range', range, loose);\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  debug('hyphen replace', range);\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  debug('comparator trim', range, re[COMPARATORTRIM]);\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, loose);\n  }).join(' ').split(/\\s+/);\n  if (this.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, loose);\n  });\n\n  return set;\n};\n\nRange.prototype.intersects = function(range, loose) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required');\n  }\n\n  return this.set.some(function(thisComparators) {\n    return thisComparators.every(function(thisComparator) {\n      return range.set.some(function(rangeComparators) {\n        return rangeComparators.every(function(rangeComparator) {\n          return thisComparator.intersects(rangeComparator, loose);\n        });\n      });\n    });\n  });\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, loose) {\n  return new Range(range, loose).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, loose) {\n  debug('comp', comp);\n  comp = replaceCarets(comp, loose);\n  debug('caret', comp);\n  comp = replaceTildes(comp, loose);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, loose);\n  debug('xrange', comp);\n  comp = replaceStars(comp, loose);\n  debug('stars', comp);\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, loose) {\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      debug('replaceTilde pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, loose) {\n  debug('caret', comp, loose);\n  var r = loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      debug('no pr');\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, loose) {\n  debug('replaceXRanges', comp, loose);\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, loose) {\n  comp = comp.trim();\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n        if (xm)\n          M = +M + 1;\n        else\n          m = +m + 1;\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    debug('xRange return', ret);\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, loose) {\n  debug('replaceStars', comp, loose);\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (version.prerelease.length) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n      if (set[i].semver === ANY)\n        continue;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, loose) {\n  try {\n    range = new Range(range, loose);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, loose) {\n  var max = null;\n  var maxSV = null;\n  try {\n    var rangeObj = new Range(range, loose);\n  } catch (er) {\n    return null;\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) { // satisfies(v, range, loose)\n      if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)\n        max = v;\n        maxSV = new SemVer(max, loose);\n      }\n    }\n  })\n  return max;\n}\n\nexports.minSatisfying = minSatisfying;\nfunction minSatisfying(versions, range, loose) {\n  var min = null;\n  var minSV = null;\n  try {\n    var rangeObj = new Range(range, loose);\n  } catch (er) {\n    return null;\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) { // satisfies(v, range, loose)\n      if (!min || minSV.compare(v) === 1) { // compare(min, v, true)\n        min = v;\n        minSV = new SemVer(min, loose);\n      }\n    }\n  })\n  return min;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, loose) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, loose).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, loose) {\n  return outside(version, range, '<', loose);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, loose) {\n  return outside(version, range, '>', loose);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, loose) {\n  version = new SemVer(version, loose);\n  range = new Range(range, loose);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, loose)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, loose)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, loose)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexports.prerelease = prerelease;\nfunction prerelease(version, loose) {\n  var parsed = parse(version, loose);\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;\n}\n\nexports.intersects = intersects;\nfunction intersects(r1, r2, loose) {\n  r1 = new Range(r1, loose)\n  r2 = new Range(r2, loose)\n  return r1.intersects(r2)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/semver/semver.js\n");

/***/ }),

/***/ "./node_modules/supports-color/index.js":
/*!**********************************************!*\
  !*** ./node_modules/supports-color/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst hasFlag = __webpack_require__(/*! has-flag */ \"./node_modules/has-flag/index.js\");\n\nconst env = process.env;\n\nconst support = level => {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n};\n\nlet supportLevel = (() => {\n\tif (hasFlag('no-color') ||\n\t\thasFlag('no-colors') ||\n\t\thasFlag('color=false')) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (hasFlag('color') ||\n\t\thasFlag('colors') ||\n\t\thasFlag('color=true') ||\n\t\thasFlag('color=always')) {\n\t\treturn 1;\n\t}\n\n\tif (process.stdout && !process.stdout.isTTY) {\n\t\treturn 0;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Node.js 7.5.0 is the first version of Node.js to include a patch to\n\t\t// libuv that enables 256 color output on Windows. Anything earlier and it\n\t\t// won't work. However, here we target Node.js 8 at minimum as it is an LTS\n\t\t// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\n\t\t// release that supports 256 colors.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(process.versions.node.split('.')[0]) >= 8 &&\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Hyper':\n\t\t\t\treturn 3;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\tif (env.TERM === 'dumb') {\n\t\treturn 0;\n\t}\n\n\treturn 0;\n})();\n\nif ('FORCE_COLOR' in env) {\n\tsupportLevel = parseInt(env.FORCE_COLOR, 10) === 0 ? 0 : (supportLevel || 1);\n}\n\nmodule.exports = process && support(supportLevel);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL3N1cHBvcnRzLWNvbG9yL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IGhhc0ZsYWcgPSByZXF1aXJlKCdoYXMtZmxhZycpO1xuXG5jb25zdCBlbnYgPSBwcm9jZXNzLmVudjtcblxuY29uc3Qgc3VwcG9ydCA9IGxldmVsID0+IHtcblx0aWYgKGxldmVsID09PSAwKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZXZlbCxcblx0XHRoYXNCYXNpYzogdHJ1ZSxcblx0XHRoYXMyNTY6IGxldmVsID49IDIsXG5cdFx0aGFzMTZtOiBsZXZlbCA+PSAzXG5cdH07XG59O1xuXG5sZXQgc3VwcG9ydExldmVsID0gKCgpID0+IHtcblx0aWYgKGhhc0ZsYWcoJ25vLWNvbG9yJykgfHxcblx0XHRoYXNGbGFnKCduby1jb2xvcnMnKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcj0xNm0nKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPWZ1bGwnKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPXRydWVjb2xvcicpKSB7XG5cdFx0cmV0dXJuIDM7XG5cdH1cblxuXHRpZiAoaGFzRmxhZygnY29sb3I9MjU2JykpIHtcblx0XHRyZXR1cm4gMjtcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcicpIHx8XG5cdFx0aGFzRmxhZygnY29sb3JzJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj10cnVlJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj1hbHdheXMnKSkge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKHByb2Nlc3Muc3Rkb3V0ICYmICFwcm9jZXNzLnN0ZG91dC5pc1RUWSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0aWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcblx0XHQvLyBOb2RlLmpzIDcuNS4wIGlzIHRoZSBmaXJzdCB2ZXJzaW9uIG9mIE5vZGUuanMgdG8gaW5jbHVkZSBhIHBhdGNoIHRvXG5cdFx0Ly8gbGlidXYgdGhhdCBlbmFibGVzIDI1NiBjb2xvciBvdXRwdXQgb24gV2luZG93cy4gQW55dGhpbmcgZWFybGllciBhbmQgaXRcblx0XHQvLyB3b24ndCB3b3JrLiBIb3dldmVyLCBoZXJlIHdlIHRhcmdldCBOb2RlLmpzIDggYXQgbWluaW11bSBhcyBpdCBpcyBhbiBMVFNcblx0XHQvLyByZWxlYXNlLCBhbmQgTm9kZS5qcyA3IGlzIG5vdC4gV2luZG93cyAxMCBidWlsZCAxMDU4NiBpcyB0aGUgZmlyc3QgV2luZG93c1xuXHRcdC8vIHJlbGVhc2UgdGhhdCBzdXBwb3J0cyAyNTYgY29sb3JzLlxuXHRcdGNvbnN0IG9zUmVsZWFzZSA9IG9zLnJlbGVhc2UoKS5zcGxpdCgnLicpO1xuXHRcdGlmIChcblx0XHRcdE51bWJlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKVswXSkgPj0gOCAmJlxuXHRcdFx0TnVtYmVyKG9zUmVsZWFzZVswXSkgPj0gMTAgJiZcblx0XHRcdE51bWJlcihvc1JlbGVhc2VbMl0pID49IDEwNTg2XG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4gMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmICgnQ0knIGluIGVudikge1xuXHRcdGlmIChbJ1RSQVZJUycsICdDSVJDTEVDSScsICdBUFBWRVlPUicsICdHSVRMQUJfQ0knXS5zb21lKHNpZ24gPT4gc2lnbiBpbiBlbnYpIHx8IGVudi5DSV9OQU1FID09PSAnY29kZXNoaXAnKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGlmICgnVEVBTUNJVFlfVkVSU0lPTicgaW4gZW52KSB7XG5cdFx0cmV0dXJuIC9eKDlcXC4oMCpbMS05XVxcZCopXFwufFxcZHsyLH1cXC4pLy50ZXN0KGVudi5URUFNQ0lUWV9WRVJTSU9OKSA/IDEgOiAwO1xuXHR9XG5cblx0aWYgKCdURVJNX1BST0dSQU0nIGluIGVudikge1xuXHRcdGNvbnN0IHZlcnNpb24gPSBwYXJzZUludCgoZW52LlRFUk1fUFJPR1JBTV9WRVJTSU9OIHx8ICcnKS5zcGxpdCgnLicpWzBdLCAxMCk7XG5cblx0XHRzd2l0Y2ggKGVudi5URVJNX1BST0dSQU0pIHtcblx0XHRcdGNhc2UgJ2lUZXJtLmFwcCc6XG5cdFx0XHRcdHJldHVybiB2ZXJzaW9uID49IDMgPyAzIDogMjtcblx0XHRcdGNhc2UgJ0h5cGVyJzpcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHRjYXNlICdBcHBsZV9UZXJtaW5hbCc6XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0Ly8gTm8gZGVmYXVsdFxuXHRcdH1cblx0fVxuXG5cdGlmICgvLTI1Nihjb2xvcik/JC9pLnRlc3QoZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDI7XG5cdH1cblxuXHRpZiAoL15zY3JlZW58Xnh0ZXJtfF52dDEwMHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoJ0NPTE9SVEVSTScgaW4gZW52KSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoZW52LlRFUk0gPT09ICdkdW1iJykge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0cmV0dXJuIDA7XG59KSgpO1xuXG5pZiAoJ0ZPUkNFX0NPTE9SJyBpbiBlbnYpIHtcblx0c3VwcG9ydExldmVsID0gcGFyc2VJbnQoZW52LkZPUkNFX0NPTE9SLCAxMCkgPT09IDAgPyAwIDogKHN1cHBvcnRMZXZlbCB8fCAxKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzICYmIHN1cHBvcnQoc3VwcG9ydExldmVsKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/supports-color/index.js\n");

/***/ }),

/***/ "./node_modules/tmp/lib/tmp.js":
/*!*************************************!*\
  !*** ./node_modules/tmp/lib/tmp.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * Tmp\n *\n * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>\n *\n * MIT Licensed\n */\n\n/*\n * Module dependencies.\n */\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst osTmpDir = __webpack_require__(/*! os-tmpdir */ \"./node_modules/os-tmpdir/index.js\");\nconst _c = process.binding('constants');\n\n/*\n * The working inner variables.\n */\nconst\n  /**\n   * The temporary directory.\n   * @type {string}\n   */\n  tmpDir = osTmpDir(),\n\n  // the random characters to choose from\n  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\n  TEMPLATE_PATTERN = /XXXXXX/,\n\n  DEFAULT_TRIES = 3,\n\n  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),\n\n  EBADF = _c.EBADF || _c.os.errno.EBADF,\n  ENOENT = _c.ENOENT || _c.os.errno.ENOENT,\n\n  DIR_MODE = 448 /* 0o700 */,\n  FILE_MODE = 384 /* 0o600 */,\n\n  // this will hold the objects need to be removed on exit\n  _removeObjects = [];\n\nvar\n  _gracefulCleanup = false,\n  _uncaughtException = false;\n\n/**\n * Random name generator based on crypto.\n * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript\n *\n * @param {number} howMany\n * @returns {string} the generated random name\n * @private\n */\nfunction _randomChars(howMany) {\n  var\n    value = [],\n    rnd = null;\n\n  // make sure that we do not fail because we ran out of entropy\n  try {\n    rnd = crypto.randomBytes(howMany);\n  } catch (e) {\n    rnd = crypto.pseudoRandomBytes(howMany);\n  }\n\n  for (var i = 0; i < howMany; i++) {\n    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);\n  }\n\n  return value.join('');\n}\n\n/**\n * Checks whether the `obj` parameter is defined or not.\n *\n * @param {Object} obj\n * @returns {boolean} true if the object is undefined\n * @private\n */\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\n/**\n * Parses the function arguments.\n *\n * This function helps to have optional arguments.\n *\n * @param {(Options|Function)} options\n * @param {Function} callback\n * @returns {Array} parsed arguments\n * @private\n */\nfunction _parseArguments(options, callback) {\n  if (typeof options == 'function') {\n    return [callback || {}, options];\n  }\n\n  if (_isUndefined(options)) {\n    return [{}, callback];\n  }\n\n  return [options, callback];\n}\n\n/**\n * Generates a new temporary name.\n *\n * @param {Object} opts\n * @returns {string} the new random name according to opts\n * @private\n */\nfunction _generateTmpName(opts) {\n  if (opts.name) {\n    return path.join(opts.dir || tmpDir, opts.name);\n  }\n\n  // mkstemps like template\n  if (opts.template) {\n    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));\n  }\n\n  // prefix and postfix\n  const name = [\n    opts.prefix || 'tmp-',\n    process.pid,\n    _randomChars(12),\n    opts.postfix || ''\n  ].join('');\n\n  return path.join(opts.dir || tmpDir, name);\n}\n\n/**\n * Gets a temporary file name.\n *\n * @param {(Options|tmpNameCallback)} options options or callback\n * @param {?tmpNameCallback} callback the callback function\n */\nfunction tmpName(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    return cb(new Error('Invalid tries'));\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    return cb(new Error('Invalid template provided'));\n\n  (function _getUniqueName() {\n    const name = _generateTmpName(opts);\n\n    // check whether the path exists then retry if needed\n    fs.stat(name, function (err) {\n      if (!err) {\n        if (tries-- > 0) return _getUniqueName();\n\n        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));\n      }\n\n      cb(null, name);\n    });\n  }());\n}\n\n/**\n * Synchronous version of tmpName.\n *\n * @param {Object} options\n * @returns {string} the generated random name\n * @throws {Error} if the options are invalid or could not generate a filename\n */\nfunction tmpNameSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    throw new Error('Invalid tries');\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    throw new Error('Invalid template provided');\n\n  do {\n    const name = _generateTmpName(opts);\n    try {\n      fs.statSync(name);\n    } catch (e) {\n      return name;\n    }\n  } while (tries-- > 0);\n\n  throw new Error('Could not get a unique tmp filename, max tries reached');\n}\n\n/**\n * Creates and opens a temporary file.\n *\n * @param {(Options|fileCallback)} options the config options or the callback function\n * @param {?fileCallback} callback\n */\nfunction file(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create and open the file\n    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {\n      if (err) return cb(err);\n\n      if (opts.discardDescriptor) {\n        return fs.close(fd, function _discardCallback(err) {\n          if (err) {\n            // Low probability, and the file exists, so this could be\n            // ignored.  If it isn't we certainly need to unlink the\n            // file, and if that fails too its error is more\n            // important.\n            try {\n              fs.unlinkSync(name);\n            } catch (e) {\n              if (!isENOENT(e)) {\n                err = e;\n              }\n            }\n            return cb(err);\n          }\n          cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));\n        });\n      }\n      if (opts.detachDescriptor) {\n        return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));\n      }\n      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of file.\n *\n * @param {Options} options\n * @returns {FileSyncObject} object consists of name, fd and removeCallback\n * @throws {Error} if cannot create a file\n */\nfunction fileSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  opts.postfix = opts.postfix || '.tmp';\n\n  const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;\n  const name = tmpNameSync(opts);\n  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);\n  if (opts.discardDescriptor) {\n    fs.closeSync(fd); \n    fd = undefined;\n  }\n\n  return {\n    name: name,\n    fd: fd,\n    removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts)\n  };\n}\n\n/**\n * Removes files and folders in a directory recursively.\n *\n * @param {string} root\n * @private\n */\nfunction _rmdirRecursiveSync(root) {\n  const dirs = [root];\n\n  do {\n    var\n      dir = dirs.pop(),\n      deferred = false,\n      files = fs.readdirSync(dir);\n\n    for (var i = 0, length = files.length; i < length; i++) {\n      var\n        file = path.join(dir, files[i]),\n        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories\n\n      if (stat.isDirectory()) {\n        if (!deferred) {\n          deferred = true;\n          dirs.push(dir);\n        }\n        dirs.push(file);\n      } else {\n        fs.unlinkSync(file);\n      }\n    }\n\n    if (!deferred) {\n      fs.rmdirSync(dir);\n    }\n  } while (dirs.length !== 0);\n}\n\n/**\n * Creates a temporary directory.\n *\n * @param {(Options|dirCallback)} options the options or the callback function\n * @param {?dirCallback} callback\n */\nfunction dir(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create the directory\n    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {\n      if (err) return cb(err);\n\n      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of dir.\n *\n * @param {Options} options\n * @returns {DirSyncObject} object consists of name and removeCallback\n * @throws {Error} if it cannot create a directory\n */\nfunction dirSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  const name = tmpNameSync(opts);\n  fs.mkdirSync(name, opts.mode || DIR_MODE);\n\n  return {\n    name: name,\n    removeCallback: _prepareTmpDirRemoveCallback(name, opts)\n  };\n}\n\n/**\n * Prepares the callback for removal of the temporary file.\n *\n * @param {string} name the path of the file\n * @param {number} fd file descriptor\n * @param {Object} opts\n * @returns {fileCallback}\n * @private\n */\nfunction _prepareTmpFileRemoveCallback(name, fd, opts) {\n  const removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {\n    try {\n      if (0 <= fdPath[0]) {\n        fs.closeSync(fdPath[0]);\n      }\n    }\n    catch (e) {\n      // under some node/windows related circumstances, a temporary file\n      // may have not be created as expected or the file was already closed\n      // by the user, in which case we will simply ignore the error\n      if (!isEBADF(e) && !isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n    try {\n      fs.unlinkSync(fdPath[1]);\n    }\n    catch (e) {\n      if (!isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n  }, [fd, name]);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Prepares the callback for removal of the temporary directory.\n *\n * @param {string} name\n * @param {Object} opts\n * @returns {Function} the callback\n * @private\n */\nfunction _prepareTmpDirRemoveCallback(name, opts) {\n  const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);\n  const removeCallback = _prepareRemoveCallback(removeFunction, name);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Creates a guarded function wrapping the removeFunction call.\n *\n * @param {Function} removeFunction\n * @param {Object} arg\n * @returns {Function}\n * @private\n */\nfunction _prepareRemoveCallback(removeFunction, arg) {\n  var called = false;\n\n  return function _cleanupCallback(next) {\n    if (!called) {\n      const index = _removeObjects.indexOf(_cleanupCallback);\n      if (index >= 0) {\n        _removeObjects.splice(index, 1);\n      }\n\n      called = true;\n      removeFunction(arg);\n    }\n\n    if (next) next(null);\n  };\n}\n\n/**\n * The garbage collector.\n *\n * @private\n */\nfunction _garbageCollector() {\n  if (_uncaughtException && !_gracefulCleanup) {\n    return;\n  }\n\n  // the function being called removes itself from _removeObjects,\n  // loop until _removeObjects is empty\n  while (_removeObjects.length) {\n    try {\n      _removeObjects[0].call(null);\n    } catch (e) {\n      // already removed?\n    }\n  }\n}\n\n/**\n * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.\n */\nfunction isEBADF(error) {\n  return isExpectedError(error, -EBADF, 'EBADF');\n}\n\n/**\n * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.\n */\nfunction isENOENT(error) {\n  return isExpectedError(error, -ENOENT, 'ENOENT');\n}\n\n/**\n * Helper to determine whether the expected error code matches the actual code and errno,\n * which will differ between the supported node versions.\n *\n * - Node >= 7.0:\n *   error.code {String}\n *   error.errno {String|Number} any numerical value will be negated\n *\n * - Node >= 6.0 < 7.0:\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 4.0 < 6.0: introduces SystemError\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 0.10 < 4.0:\n *   error.code {Number} negated\n *   error.errno n/a\n */\nfunction isExpectedError(error, code, errno) {\n  return error.code == code || error.code == errno;\n}\n\n/**\n * Sets the graceful cleanup.\n *\n * Also removes the created files and directories when an uncaught exception occurs.\n */\nfunction setGracefulCleanup() {\n  _gracefulCleanup = true;\n}\n\nconst version = process.versions.node.split('.').map(function (value) {\n  return parseInt(value, 10);\n});\n\nif (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {\n  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {\n    _uncaughtException = true;\n    _garbageCollector();\n\n    throw err;\n  });\n}\n\nprocess.addListener('exit', function _exit(code) {\n  if (code) _uncaughtException = true;\n  _garbageCollector();\n});\n\n/**\n * Configuration options.\n *\n * @typedef {Object} Options\n * @property {?number} tries the number of tries before give up the name generation\n * @property {?string} template the \"mkstemp\" like filename template\n * @property {?string} name fix name\n * @property {?string} dir the tmp directory to use\n * @property {?string} prefix prefix for the generated name\n * @property {?string} postfix postfix for the generated name\n */\n\n/**\n * @typedef {Object} FileSyncObject\n * @property {string} name the name of the file\n * @property {string} fd the file descriptor\n * @property {fileCallback} removeCallback the callback function to remove the file\n */\n\n/**\n * @typedef {Object} DirSyncObject\n * @property {string} name the name of the directory\n * @property {fileCallback} removeCallback the callback function to remove the directory\n */\n\n/**\n * @callback tmpNameCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n */\n\n/**\n * @callback fileCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {number} fd the file descriptor\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * @callback dirCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * Removes the temporary created file or directory.\n *\n * @callback cleanupCallback\n * @param {simpleCallback} [next] function to call after entry was removed\n */\n\n/**\n * Callback function for function composition.\n * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}\n *\n * @callback simpleCallback\n */\n\n// exporting all the needed methods\nmodule.exports.tmpdir = tmpDir;\n\nmodule.exports.dir = dir;\nmodule.exports.dirSync = dirSync;\n\nmodule.exports.file = file;\nmodule.exports.fileSync = fileSync;\n\nmodule.exports.tmpName = tmpName;\nmodule.exports.tmpNameSync = tmpNameSync;\n\nmodule.exports.setGracefulCleanup = setGracefulCleanup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tmp/lib/tmp.js\n");

/***/ }),

/***/ "./node_modules/vscode-cpptools/out/api.js":
/*!*************************************************!*\
  !*** ./node_modules/vscode-cpptools/out/api.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\n/**\r\n * API version information.\r\n */\r\nvar Version;\r\n(function (Version) {\r\n    Version[Version[\"v0\"] = 0] = \"v0\";\r\n    Version[Version[\"v1\"] = 1] = \"v1\";\r\n    Version[Version[\"v2\"] = 2] = \"v2\";\r\n    Version[Version[\"latest\"] = 2] = \"latest\";\r\n})(Version = exports.Version || (exports.Version = {}));\r\nfunction isCppToolsExtension(extension) {\r\n    return extension.getApi !== undefined;\r\n}\r\n/**\r\n * Helper function to get the CppToolsApi from the cpptools extension.\r\n * @param version The desired API version\r\n * @example\r\n```\r\n    import {CppToolsApi, Version, CustomConfigurationProvider, getCppToolsApi} from 'vscode-cpptools';\r\n\r\n    let api: CppToolsApi|undefined = await getCppToolsApi(Version.v1);\r\n    if (api) {\r\n        // Inform cpptools that a custom config provider\r\n        // will be able to service the current workspace.\r\n        api.registerCustomConfigurationProvider(provider);\r\n\r\n        // Do any required setup that the provider needs.\r\n\r\n        // Notify cpptools that the provider is ready to\r\n        // provide IntelliSense configurations.\r\n        api.notifyReady(provider);\r\n    }\r\n    // Dispose of the 'api' in your extension's\r\n    // deactivate() method, or whenever you want to\r\n    // unregister the provider.\r\n```\r\n */\r\nfunction getCppToolsApi(version) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let cpptools = vscode.extensions.getExtension(\"ms-vscode.cpptools\");\r\n        let extension;\r\n        let api;\r\n        if (cpptools) {\r\n            if (!cpptools.isActive) {\r\n                extension = yield cpptools.activate();\r\n            }\r\n            else {\r\n                extension = cpptools.exports;\r\n            }\r\n            if (isCppToolsExtension(extension)) {\r\n                // ms-vscode.cpptools > 0.17.5\r\n                try {\r\n                    api = extension.getApi(version);\r\n                }\r\n                catch (err) {\r\n                    // Unfortunately, ms-vscode.cpptools [0.17.6, 0.18.1] throws a RangeError if you specify a version greater than v1.\r\n                    // These versions of the extension will not be able to act on the newer interface and v2 is a superset of v1, so we can safely fall back to v1.\r\n                    let e = err;\r\n                    if (e.message && e.message.startsWith(\"Invalid version\")) {\r\n                        api = extension.getApi(Version.v1);\r\n                    }\r\n                }\r\n                if (version !== Version.v1) {\r\n                    if (!api.getVersion) {\r\n                        console.warn(`vscode-cpptools-api version ${version} requested, but is not available in the current version of the cpptools extension. Using version 1 instead.`);\r\n                    }\r\n                    else if (version !== api.getVersion()) {\r\n                        console.warn(`vscode-cpptools-api version ${version} requested, but is not available in the current version of the cpptools extension. Using version ${api.getVersion()} instead.`);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // ms-vscode.cpptools version 0.17.5\r\n                api = extension;\r\n                if (version !== Version.v0) {\r\n                    console.warn(`vscode-cpptools-api version ${version} requested, but is not available in version 0.17.5 of the cpptools extension. Using version 0 instead.`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"C/C++ extension is not installed\");\r\n        }\r\n        return api;\r\n    });\r\n}\r\nexports.getCppToolsApi = getCppToolsApi;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWNwcHRvb2xzL291dC9hcGkuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL3ZzY29kZS1jcHB0b29scy9vdXQvYXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuLyoqXHJcbiAqIEFQSSB2ZXJzaW9uIGluZm9ybWF0aW9uLlxyXG4gKi9cclxudmFyIFZlcnNpb247XHJcbihmdW5jdGlvbiAoVmVyc2lvbikge1xyXG4gICAgVmVyc2lvbltWZXJzaW9uW1widjBcIl0gPSAwXSA9IFwidjBcIjtcclxuICAgIFZlcnNpb25bVmVyc2lvbltcInYxXCJdID0gMV0gPSBcInYxXCI7XHJcbiAgICBWZXJzaW9uW1ZlcnNpb25bXCJ2MlwiXSA9IDJdID0gXCJ2MlwiO1xyXG4gICAgVmVyc2lvbltWZXJzaW9uW1wibGF0ZXN0XCJdID0gMl0gPSBcImxhdGVzdFwiO1xyXG59KShWZXJzaW9uID0gZXhwb3J0cy5WZXJzaW9uIHx8IChleHBvcnRzLlZlcnNpb24gPSB7fSkpO1xyXG5mdW5jdGlvbiBpc0NwcFRvb2xzRXh0ZW5zaW9uKGV4dGVuc2lvbikge1xyXG4gICAgcmV0dXJuIGV4dGVuc2lvbi5nZXRBcGkgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB0aGUgQ3BwVG9vbHNBcGkgZnJvbSB0aGUgY3BwdG9vbHMgZXh0ZW5zaW9uLlxyXG4gKiBAcGFyYW0gdmVyc2lvbiBUaGUgZGVzaXJlZCBBUEkgdmVyc2lvblxyXG4gKiBAZXhhbXBsZVxyXG5gYGBcclxuICAgIGltcG9ydCB7Q3BwVG9vbHNBcGksIFZlcnNpb24sIEN1c3RvbUNvbmZpZ3VyYXRpb25Qcm92aWRlciwgZ2V0Q3BwVG9vbHNBcGl9IGZyb20gJ3ZzY29kZS1jcHB0b29scyc7XHJcblxyXG4gICAgbGV0IGFwaTogQ3BwVG9vbHNBcGl8dW5kZWZpbmVkID0gYXdhaXQgZ2V0Q3BwVG9vbHNBcGkoVmVyc2lvbi52MSk7XHJcbiAgICBpZiAoYXBpKSB7XHJcbiAgICAgICAgLy8gSW5mb3JtIGNwcHRvb2xzIHRoYXQgYSBjdXN0b20gY29uZmlnIHByb3ZpZGVyXHJcbiAgICAgICAgLy8gd2lsbCBiZSBhYmxlIHRvIHNlcnZpY2UgdGhlIGN1cnJlbnQgd29ya3NwYWNlLlxyXG4gICAgICAgIGFwaS5yZWdpc3RlckN1c3RvbUNvbmZpZ3VyYXRpb25Qcm92aWRlcihwcm92aWRlcik7XHJcblxyXG4gICAgICAgIC8vIERvIGFueSByZXF1aXJlZCBzZXR1cCB0aGF0IHRoZSBwcm92aWRlciBuZWVkcy5cclxuXHJcbiAgICAgICAgLy8gTm90aWZ5IGNwcHRvb2xzIHRoYXQgdGhlIHByb3ZpZGVyIGlzIHJlYWR5IHRvXHJcbiAgICAgICAgLy8gcHJvdmlkZSBJbnRlbGxpU2Vuc2UgY29uZmlndXJhdGlvbnMuXHJcbiAgICAgICAgYXBpLm5vdGlmeVJlYWR5KHByb3ZpZGVyKTtcclxuICAgIH1cclxuICAgIC8vIERpc3Bvc2Ugb2YgdGhlICdhcGknIGluIHlvdXIgZXh0ZW5zaW9uJ3NcclxuICAgIC8vIGRlYWN0aXZhdGUoKSBtZXRob2QsIG9yIHdoZW5ldmVyIHlvdSB3YW50IHRvXHJcbiAgICAvLyB1bnJlZ2lzdGVyIHRoZSBwcm92aWRlci5cclxuYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDcHBUb29sc0FwaSh2ZXJzaW9uKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGxldCBjcHB0b29scyA9IHZzY29kZS5leHRlbnNpb25zLmdldEV4dGVuc2lvbihcIm1zLXZzY29kZS5jcHB0b29sc1wiKTtcclxuICAgICAgICBsZXQgZXh0ZW5zaW9uO1xyXG4gICAgICAgIGxldCBhcGk7XHJcbiAgICAgICAgaWYgKGNwcHRvb2xzKSB7XHJcbiAgICAgICAgICAgIGlmICghY3BwdG9vbHMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbiA9IHlpZWxkIGNwcHRvb2xzLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBjcHB0b29scy5leHBvcnRzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc0NwcFRvb2xzRXh0ZW5zaW9uKGV4dGVuc2lvbikpIHtcclxuICAgICAgICAgICAgICAgIC8vIG1zLXZzY29kZS5jcHB0b29scyA+IDAuMTcuNVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBhcGkgPSBleHRlbnNpb24uZ2V0QXBpKHZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIG1zLXZzY29kZS5jcHB0b29scyBbMC4xNy42LCAwLjE4LjFdIHRocm93cyBhIFJhbmdlRXJyb3IgaWYgeW91IHNwZWNpZnkgYSB2ZXJzaW9uIGdyZWF0ZXIgdGhhbiB2MS5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSB2ZXJzaW9ucyBvZiB0aGUgZXh0ZW5zaW9uIHdpbGwgbm90IGJlIGFibGUgdG8gYWN0IG9uIHRoZSBuZXdlciBpbnRlcmZhY2UgYW5kIHYyIGlzIGEgc3VwZXJzZXQgb2YgdjEsIHNvIHdlIGNhbiBzYWZlbHkgZmFsbCBiYWNrIHRvIHYxLlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlID0gZXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5tZXNzYWdlLnN0YXJ0c1dpdGgoXCJJbnZhbGlkIHZlcnNpb25cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gZXh0ZW5zaW9uLmdldEFwaShWZXJzaW9uLnYxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiAhPT0gVmVyc2lvbi52MSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXBpLmdldFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGB2c2NvZGUtY3BwdG9vbHMtYXBpIHZlcnNpb24gJHt2ZXJzaW9ufSByZXF1ZXN0ZWQsIGJ1dCBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIGNwcHRvb2xzIGV4dGVuc2lvbi4gVXNpbmcgdmVyc2lvbiAxIGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZlcnNpb24gIT09IGFwaS5nZXRWZXJzaW9uKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGB2c2NvZGUtY3BwdG9vbHMtYXBpIHZlcnNpb24gJHt2ZXJzaW9ufSByZXF1ZXN0ZWQsIGJ1dCBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIGNwcHRvb2xzIGV4dGVuc2lvbi4gVXNpbmcgdmVyc2lvbiAke2FwaS5nZXRWZXJzaW9uKCl9IGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gbXMtdnNjb2RlLmNwcHRvb2xzIHZlcnNpb24gMC4xNy41XHJcbiAgICAgICAgICAgICAgICBhcGkgPSBleHRlbnNpb247XHJcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiAhPT0gVmVyc2lvbi52MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgdnNjb2RlLWNwcHRvb2xzLWFwaSB2ZXJzaW9uICR7dmVyc2lvbn0gcmVxdWVzdGVkLCBidXQgaXMgbm90IGF2YWlsYWJsZSBpbiB2ZXJzaW9uIDAuMTcuNSBvZiB0aGUgY3BwdG9vbHMgZXh0ZW5zaW9uLiBVc2luZyB2ZXJzaW9uIDAgaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQy9DKysgZXh0ZW5zaW9uIGlzIG5vdCBpbnN0YWxsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcGk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmdldENwcFRvb2xzQXBpID0gZ2V0Q3BwVG9vbHNBcGk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-cpptools/out/api.js\n");

/***/ }),

/***/ "./node_modules/vscode-cpptools/out/testApi.js":
/*!*****************************************************!*\
  !*** ./node_modules/vscode-cpptools/out/testApi.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT license.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst api_1 = __webpack_require__(/*! ./api */ \"./node_modules/vscode-cpptools/out/api.js\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\n/**\r\n * Status codes.\r\n */\r\nvar Status;\r\n(function (Status) {\r\n    Status[Status[\"TagParsingBegun\"] = 1] = \"TagParsingBegun\";\r\n    Status[Status[\"TagParsingDone\"] = 2] = \"TagParsingDone\";\r\n    Status[Status[\"IntelliSenseCompiling\"] = 3] = \"IntelliSenseCompiling\";\r\n    Status[Status[\"IntelliSenseReady\"] = 4] = \"IntelliSenseReady\";\r\n})(Status = exports.Status || (exports.Status = {}));\r\nfunction isCppToolsTestExtension(extension) {\r\n    return extension.getTestApi !== undefined;\r\n}\r\nfunction getCppToolsTestApi(version) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let cpptools = vscode.extensions.getExtension(\"ms-vscode.cpptools\");\r\n        let extension;\r\n        let api;\r\n        if (cpptools) {\r\n            if (!cpptools.isActive) {\r\n                extension = yield cpptools.activate();\r\n            }\r\n            else {\r\n                extension = cpptools.exports;\r\n            }\r\n            if (isCppToolsTestExtension(extension)) {\r\n                // ms-vscode.cpptools > 0.17.5\r\n                try {\r\n                    api = extension.getTestApi(version);\r\n                }\r\n                catch (err) {\r\n                    // Unfortunately, ms-vscode.cpptools [0.17.6, 0.18.1] throws a RangeError if you specify a version greater than v1.\r\n                    // These versions of the extension will not be able to act on the newer interface and v2 is a superset of v1, so we can safely fall back to v1.\r\n                    let e = err;\r\n                    if (e.message && e.message.startsWith(\"Invalid version\")) {\r\n                        api = extension.getTestApi(api_1.Version.v1);\r\n                    }\r\n                }\r\n                if (version !== api_1.Version.v1) {\r\n                    if (!api.getVersion) {\r\n                        console.warn(`vscode-cpptools-api version ${version} requested, but is not available in the current version of the cpptools extension. Using version 1 instead.`);\r\n                    }\r\n                    else if (version !== api.getVersion()) {\r\n                        console.warn(`vscode-cpptools-api version ${version} requested, but is not available in the current version of the cpptools extension. Using version ${api.getVersion()} instead.`);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // ms-vscode.cpptools version 0.17.5\r\n                api = extension;\r\n                if (version !== api_1.Version.v0) {\r\n                    console.warn(`vscode-cpptools-api version ${version} requested, but is not available in version 0.17.5 of the cpptools extension. Using version 0 instead.`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"C/C++ extension is not installed\");\r\n        }\r\n        return api;\r\n    });\r\n}\r\nexports.getCppToolsTestApi = getCppToolsTestApi;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWNwcHRvb2xzL291dC90ZXN0QXBpLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtY3BwdG9vbHMvb3V0L3Rlc3RBcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCIuL2FwaVwiKTtcclxuY29uc3QgdnNjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuLyoqXHJcbiAqIFN0YXR1cyBjb2Rlcy5cclxuICovXHJcbnZhciBTdGF0dXM7XHJcbihmdW5jdGlvbiAoU3RhdHVzKSB7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiVGFnUGFyc2luZ0JlZ3VuXCJdID0gMV0gPSBcIlRhZ1BhcnNpbmdCZWd1blwiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIlRhZ1BhcnNpbmdEb25lXCJdID0gMl0gPSBcIlRhZ1BhcnNpbmdEb25lXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiSW50ZWxsaVNlbnNlQ29tcGlsaW5nXCJdID0gM10gPSBcIkludGVsbGlTZW5zZUNvbXBpbGluZ1wiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIkludGVsbGlTZW5zZVJlYWR5XCJdID0gNF0gPSBcIkludGVsbGlTZW5zZVJlYWR5XCI7XHJcbn0pKFN0YXR1cyA9IGV4cG9ydHMuU3RhdHVzIHx8IChleHBvcnRzLlN0YXR1cyA9IHt9KSk7XHJcbmZ1bmN0aW9uIGlzQ3BwVG9vbHNUZXN0RXh0ZW5zaW9uKGV4dGVuc2lvbikge1xyXG4gICAgcmV0dXJuIGV4dGVuc2lvbi5nZXRUZXN0QXBpICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuZnVuY3Rpb24gZ2V0Q3BwVG9vbHNUZXN0QXBpKHZlcnNpb24pIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgbGV0IGNwcHRvb2xzID0gdnNjb2RlLmV4dGVuc2lvbnMuZ2V0RXh0ZW5zaW9uKFwibXMtdnNjb2RlLmNwcHRvb2xzXCIpO1xyXG4gICAgICAgIGxldCBleHRlbnNpb247XHJcbiAgICAgICAgbGV0IGFwaTtcclxuICAgICAgICBpZiAoY3BwdG9vbHMpIHtcclxuICAgICAgICAgICAgaWYgKCFjcHB0b29scy5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uID0geWllbGQgY3BwdG9vbHMuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbiA9IGNwcHRvb2xzLmV4cG9ydHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzQ3BwVG9vbHNUZXN0RXh0ZW5zaW9uKGV4dGVuc2lvbikpIHtcclxuICAgICAgICAgICAgICAgIC8vIG1zLXZzY29kZS5jcHB0b29scyA+IDAuMTcuNVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBhcGkgPSBleHRlbnNpb24uZ2V0VGVzdEFwaSh2ZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBtcy12c2NvZGUuY3BwdG9vbHMgWzAuMTcuNiwgMC4xOC4xXSB0aHJvd3MgYSBSYW5nZUVycm9yIGlmIHlvdSBzcGVjaWZ5IGEgdmVyc2lvbiBncmVhdGVyIHRoYW4gdjEuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgdmVyc2lvbnMgb2YgdGhlIGV4dGVuc2lvbiB3aWxsIG5vdCBiZSBhYmxlIHRvIGFjdCBvbiB0aGUgbmV3ZXIgaW50ZXJmYWNlIGFuZCB2MiBpcyBhIHN1cGVyc2V0IG9mIHYxLCBzbyB3ZSBjYW4gc2FmZWx5IGZhbGwgYmFjayB0byB2MS5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZSA9IGVycjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5tZXNzYWdlICYmIGUubWVzc2FnZS5zdGFydHNXaXRoKFwiSW52YWxpZCB2ZXJzaW9uXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IGV4dGVuc2lvbi5nZXRUZXN0QXBpKGFwaV8xLlZlcnNpb24udjEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uICE9PSBhcGlfMS5WZXJzaW9uLnYxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhcGkuZ2V0VmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHZzY29kZS1jcHB0b29scy1hcGkgdmVyc2lvbiAke3ZlcnNpb259IHJlcXVlc3RlZCwgYnV0IGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgY3BwdG9vbHMgZXh0ZW5zaW9uLiBVc2luZyB2ZXJzaW9uIDEgaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmVyc2lvbiAhPT0gYXBpLmdldFZlcnNpb24oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHZzY29kZS1jcHB0b29scy1hcGkgdmVyc2lvbiAke3ZlcnNpb259IHJlcXVlc3RlZCwgYnV0IGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgY3BwdG9vbHMgZXh0ZW5zaW9uLiBVc2luZyB2ZXJzaW9uICR7YXBpLmdldFZlcnNpb24oKX0gaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtcy12c2NvZGUuY3BwdG9vbHMgdmVyc2lvbiAwLjE3LjVcclxuICAgICAgICAgICAgICAgIGFwaSA9IGV4dGVuc2lvbjtcclxuICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uICE9PSBhcGlfMS5WZXJzaW9uLnYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGB2c2NvZGUtY3BwdG9vbHMtYXBpIHZlcnNpb24gJHt2ZXJzaW9ufSByZXF1ZXN0ZWQsIGJ1dCBpcyBub3QgYXZhaWxhYmxlIGluIHZlcnNpb24gMC4xNy41IG9mIHRoZSBjcHB0b29scyBleHRlbnNpb24uIFVzaW5nIHZlcnNpb24gMCBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDL0MrKyBleHRlbnNpb24gaXMgbm90IGluc3RhbGxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFwaTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZ2V0Q3BwVG9vbHNUZXN0QXBpID0gZ2V0Q3BwVG9vbHNUZXN0QXBpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-cpptools/out/testApi.js\n");

/***/ }),

/***/ "./node_modules/vscode-extension-telemetry/lib/telemetryReporter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vscode-extension-telemetry/lib/telemetryReporter.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nprocess.env['APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL'] = true;\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar vscode = __webpack_require__(/*! vscode */ \"vscode\");\nvar appInsights = __webpack_require__(/*! applicationinsights */ \"./node_modules/applicationinsights/out/applicationinsights.js\");\nvar TelemetryReporter = /** @class */ (function () {\n    // tslint:disable-next-line\n    function TelemetryReporter(extensionId, extensionVersion, key) {\n        var _this = this;\n        this.extensionId = extensionId;\n        this.extensionVersion = extensionVersion;\n        this.userOptIn = false;\n        var logFilePath = process.env['VSCODE_LOGS'] || '';\n        if (logFilePath && extensionId && process.env['VSCODE_LOG_LEVEL'] === 'trace') {\n            logFilePath = path.join(logFilePath, extensionId + \".txt\");\n            this.logStream = fs.createWriteStream(logFilePath, { flags: 'a', encoding: 'utf8', autoClose: true });\n        }\n        this.updateUserOptIn(key);\n        this.configListener = vscode.workspace.onDidChangeConfiguration(function () { return _this.updateUserOptIn(key); });\n    }\n    TelemetryReporter.prototype.updateUserOptIn = function (key) {\n        var config = vscode.workspace.getConfiguration(TelemetryReporter.TELEMETRY_CONFIG_ID);\n        if (this.userOptIn !== config.get(TelemetryReporter.TELEMETRY_CONFIG_ENABLED_ID, true)) {\n            this.userOptIn = config.get(TelemetryReporter.TELEMETRY_CONFIG_ENABLED_ID, true);\n            if (this.userOptIn) {\n                this.createAppInsightsClient(key);\n            }\n            else {\n                this.dispose();\n            }\n        }\n    };\n    TelemetryReporter.prototype.createAppInsightsClient = function (key) {\n        //check if another instance is already initialized\n        if (appInsights.defaultClient) {\n            this.appInsightsClient = new appInsights.TelemetryClient(key);\n            // no other way to enable offline mode\n            this.appInsightsClient.channel.setUseDiskRetryCaching(true);\n        }\n        else {\n            appInsights.setup(key)\n                .setAutoCollectRequests(false)\n                .setAutoCollectPerformance(false)\n                .setAutoCollectExceptions(false)\n                .setAutoCollectDependencies(false)\n                .setAutoDependencyCorrelation(false)\n                .setAutoCollectConsole(false)\n                .setUseDiskRetryCaching(true)\n                .start();\n            this.appInsightsClient = appInsights.defaultClient;\n        }\n        this.appInsightsClient.commonProperties = this.getCommonProperties();\n        if (vscode && vscode.env) {\n            this.appInsightsClient.context.tags[this.appInsightsClient.context.keys.userId] = vscode.env.machineId;\n            this.appInsightsClient.context.tags[this.appInsightsClient.context.keys.sessionId] = vscode.env.sessionId;\n        }\n        //check if it's an Asimov key to change the endpoint\n        if (key && key.indexOf('AIF-') === 0) {\n            this.appInsightsClient.config.endpointUrl = \"https://vortex.data.microsoft.com/collect/v1\";\n        }\n    };\n    // __GDPR__COMMON__ \"common.os\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n    // __GDPR__COMMON__ \"common.platformversion\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n    // __GDPR__COMMON__ \"common.extname\" : { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n    // __GDPR__COMMON__ \"common.extversion\" : { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n    // __GDPR__COMMON__ \"common.vscodemachineid\" : { \"endPoint\": \"MacAddressHash\", \"classification\": \"EndUserPseudonymizedInformation\", \"purpose\": \"FeatureInsight\" }\n    // __GDPR__COMMON__ \"common.vscodesessionid\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n    // __GDPR__COMMON__ \"common.vscodeversion\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n    TelemetryReporter.prototype.getCommonProperties = function () {\n        var commonProperties = Object.create(null);\n        commonProperties['common.os'] = os.platform();\n        commonProperties['common.platformversion'] = (os.release() || '').replace(/^(\\d+)(\\.\\d+)?(\\.\\d+)?(.*)/, '$1$2$3');\n        commonProperties['common.extname'] = this.extensionId;\n        commonProperties['common.extversion'] = this.extensionVersion;\n        if (vscode && vscode.env) {\n            commonProperties['common.vscodemachineid'] = vscode.env.machineId;\n            commonProperties['common.vscodesessionid'] = vscode.env.sessionId;\n            commonProperties['common.vscodeversion'] = vscode.version;\n        }\n        return commonProperties;\n    };\n    TelemetryReporter.prototype.sendTelemetryEvent = function (eventName, properties, measurements) {\n        if (this.userOptIn && eventName && this.appInsightsClient) {\n            this.appInsightsClient.trackEvent({\n                name: this.extensionId + \"/\" + eventName,\n                properties: properties,\n                measurements: measurements\n            });\n            if (this.logStream) {\n                this.logStream.write(\"telemetry/\" + eventName + \" \" + JSON.stringify({ properties: properties, measurements: measurements }) + \"\\n\");\n            }\n        }\n    };\n    TelemetryReporter.prototype.dispose = function () {\n        var _this = this;\n        this.configListener.dispose();\n        var flushEventsToLogger = new Promise(function (resolve) {\n            if (!_this.logStream) {\n                return resolve(void 0);\n            }\n            _this.logStream.on('finish', resolve);\n            _this.logStream.end();\n        });\n        var flushEventsToAI = new Promise(function (resolve) {\n            if (_this.appInsightsClient) {\n                _this.appInsightsClient.flush({\n                    callback: function () {\n                        // all data flushed\n                        _this.appInsightsClient = undefined;\n                        resolve(void 0);\n                    }\n                });\n            }\n            else {\n                resolve(void 0);\n            }\n        });\n        return Promise.all([flushEventsToAI, flushEventsToLogger]);\n    };\n    TelemetryReporter.TELEMETRY_CONFIG_ID = 'telemetry';\n    TelemetryReporter.TELEMETRY_CONFIG_ENABLED_ID = 'enableTelemetry';\n    return TelemetryReporter;\n}());\nexports.default = TelemetryReporter;\n//# sourceMappingURL=telemetryReporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-extension-telemetry/lib/telemetryReporter.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/cancellation.js":
/*!*********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/cancellation.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst events_1 = __webpack_require__(/*! ./events */ \"./node_modules/vscode-jsonrpc/lib/events.js\");\r\nconst Is = __webpack_require__(/*! ./is */ \"./node_modules/vscode-jsonrpc/lib/is.js\");\r\nvar CancellationToken;\r\n(function (CancellationToken) {\r\n    CancellationToken.None = Object.freeze({\r\n        isCancellationRequested: false,\r\n        onCancellationRequested: events_1.Event.None\r\n    });\r\n    CancellationToken.Cancelled = Object.freeze({\r\n        isCancellationRequested: true,\r\n        onCancellationRequested: events_1.Event.None\r\n    });\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && (candidate === CancellationToken.None\r\n            || candidate === CancellationToken.Cancelled\r\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\r\n    }\r\n    CancellationToken.is = is;\r\n})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));\r\nconst shortcutEvent = Object.freeze(function (callback, context) {\r\n    let handle = setTimeout(callback.bind(context), 0);\r\n    return { dispose() { clearTimeout(handle); } };\r\n});\r\nclass MutableToken {\r\n    constructor() {\r\n        this._isCancelled = false;\r\n    }\r\n    cancel() {\r\n        if (!this._isCancelled) {\r\n            this._isCancelled = true;\r\n            if (this._emitter) {\r\n                this._emitter.fire(undefined);\r\n                this._emitter = undefined;\r\n            }\r\n        }\r\n    }\r\n    get isCancellationRequested() {\r\n        return this._isCancelled;\r\n    }\r\n    get onCancellationRequested() {\r\n        if (this._isCancelled) {\r\n            return shortcutEvent;\r\n        }\r\n        if (!this._emitter) {\r\n            this._emitter = new events_1.Emitter();\r\n        }\r\n        return this._emitter.event;\r\n    }\r\n}\r\nclass CancellationTokenSource {\r\n    get token() {\r\n        if (!this._token) {\r\n            // be lazy and create the token only when\r\n            // actually needed\r\n            this._token = new MutableToken();\r\n        }\r\n        return this._token;\r\n    }\r\n    cancel() {\r\n        if (!this._token) {\r\n            // save an object by returning the default\r\n            // cancelled token when cancellation happens\r\n            // before someone asks for the token\r\n            this._token = CancellationToken.Cancelled;\r\n        }\r\n        else {\r\n            this._token.cancel();\r\n        }\r\n    }\r\n    dispose() {\r\n        this.cancel();\r\n    }\r\n}\r\nexports.CancellationTokenSource = CancellationTokenSource;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWpzb25ycGMvbGliL2NhbmNlbGxhdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWpzb25ycGMvbGliL2NhbmNlbGxhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcIi4vZXZlbnRzXCIpO1xyXG5jb25zdCBJcyA9IHJlcXVpcmUoXCIuL2lzXCIpO1xyXG52YXIgQ2FuY2VsbGF0aW9uVG9rZW47XHJcbihmdW5jdGlvbiAoQ2FuY2VsbGF0aW9uVG9rZW4pIHtcclxuICAgIENhbmNlbGxhdGlvblRva2VuLk5vbmUgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogZmFsc2UsXHJcbiAgICAgICAgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGV2ZW50c18xLkV2ZW50Lk5vbmVcclxuICAgIH0pO1xyXG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IHRydWUsXHJcbiAgICAgICAgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGV2ZW50c18xLkV2ZW50Lk5vbmVcclxuICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiAoY2FuZGlkYXRlID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lXHJcbiAgICAgICAgICAgIHx8IGNhbmRpZGF0ZSA9PT0gQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkXHJcbiAgICAgICAgICAgIHx8IChJcy5ib29sZWFuKGNhbmRpZGF0ZS5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCkgJiYgISFjYW5kaWRhdGUub25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQpKTtcclxuICAgIH1cclxuICAgIENhbmNlbGxhdGlvblRva2VuLmlzID0gaXM7XHJcbn0pKENhbmNlbGxhdGlvblRva2VuID0gZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiB8fCAoZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IHt9KSk7XHJcbmNvbnN0IHNob3J0Y3V0RXZlbnQgPSBPYmplY3QuZnJlZXplKGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xyXG4gICAgbGV0IGhhbmRsZSA9IHNldFRpbWVvdXQoY2FsbGJhY2suYmluZChjb250ZXh0KSwgMCk7XHJcbiAgICByZXR1cm4geyBkaXNwb3NlKCkgeyBjbGVhclRpbWVvdXQoaGFuZGxlKTsgfSB9O1xyXG59KTtcclxuY2xhc3MgTXV0YWJsZVRva2VuIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0NhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmZpcmUodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQ2FuY2VsbGVkO1xyXG4gICAgfVxyXG4gICAgZ2V0IG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0NhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2hvcnRjdXRFdmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9lbWl0dGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5ldmVudDtcclxuICAgIH1cclxufVxyXG5jbGFzcyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB7XHJcbiAgICBnZXQgdG9rZW4oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xyXG4gICAgICAgICAgICAvLyBiZSBsYXp5IGFuZCBjcmVhdGUgdGhlIHRva2VuIG9ubHkgd2hlblxyXG4gICAgICAgICAgICAvLyBhY3R1YWxseSBuZWVkZWRcclxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBuZXcgTXV0YWJsZVRva2VuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbjtcclxuICAgIH1cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuKSB7XHJcbiAgICAgICAgICAgIC8vIHNhdmUgYW4gb2JqZWN0IGJ5IHJldHVybmluZyB0aGUgZGVmYXVsdFxyXG4gICAgICAgICAgICAvLyBjYW5jZWxsZWQgdG9rZW4gd2hlbiBjYW5jZWxsYXRpb24gaGFwcGVuc1xyXG4gICAgICAgICAgICAvLyBiZWZvcmUgc29tZW9uZSBhc2tzIGZvciB0aGUgdG9rZW5cclxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl90b2tlbi5jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlblNvdXJjZSA9IENhbmNlbGxhdGlvblRva2VuU291cmNlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/cancellation.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/events.js":
/*!***************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/events.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Disposable;\r\n(function (Disposable) {\r\n    function create(func) {\r\n        return {\r\n            dispose: func\r\n        };\r\n    }\r\n    Disposable.create = create;\r\n})(Disposable = exports.Disposable || (exports.Disposable = {}));\r\nvar Event;\r\n(function (Event) {\r\n    const _disposable = { dispose() { } };\r\n    Event.None = function () { return _disposable; };\r\n})(Event = exports.Event || (exports.Event = {}));\r\nclass CallbackList {\r\n    add(callback, context = null, bucket) {\r\n        if (!this._callbacks) {\r\n            this._callbacks = [];\r\n            this._contexts = [];\r\n        }\r\n        this._callbacks.push(callback);\r\n        this._contexts.push(context);\r\n        if (Array.isArray(bucket)) {\r\n            bucket.push({ dispose: () => this.remove(callback, context) });\r\n        }\r\n    }\r\n    remove(callback, context = null) {\r\n        if (!this._callbacks) {\r\n            return;\r\n        }\r\n        var foundCallbackWithDifferentContext = false;\r\n        for (var i = 0, len = this._callbacks.length; i < len; i++) {\r\n            if (this._callbacks[i] === callback) {\r\n                if (this._contexts[i] === context) {\r\n                    // callback & context match => remove it\r\n                    this._callbacks.splice(i, 1);\r\n                    this._contexts.splice(i, 1);\r\n                    return;\r\n                }\r\n                else {\r\n                    foundCallbackWithDifferentContext = true;\r\n                }\r\n            }\r\n        }\r\n        if (foundCallbackWithDifferentContext) {\r\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\r\n        }\r\n    }\r\n    invoke(...args) {\r\n        if (!this._callbacks) {\r\n            return [];\r\n        }\r\n        var ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\r\n        for (var i = 0, len = callbacks.length; i < len; i++) {\r\n            try {\r\n                ret.push(callbacks[i].apply(contexts[i], args));\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    isEmpty() {\r\n        return !this._callbacks || this._callbacks.length === 0;\r\n    }\r\n    dispose() {\r\n        this._callbacks = undefined;\r\n        this._contexts = undefined;\r\n    }\r\n}\r\nclass Emitter {\r\n    constructor(_options) {\r\n        this._options = _options;\r\n    }\r\n    /**\r\n     * For the public to allow to subscribe\r\n     * to events from this Emitter\r\n     */\r\n    get event() {\r\n        if (!this._event) {\r\n            this._event = (listener, thisArgs, disposables) => {\r\n                if (!this._callbacks) {\r\n                    this._callbacks = new CallbackList();\r\n                }\r\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\r\n                    this._options.onFirstListenerAdd(this);\r\n                }\r\n                this._callbacks.add(listener, thisArgs);\r\n                let result;\r\n                result = {\r\n                    dispose: () => {\r\n                        this._callbacks.remove(listener, thisArgs);\r\n                        result.dispose = Emitter._noop;\r\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\r\n                            this._options.onLastListenerRemove(this);\r\n                        }\r\n                    }\r\n                };\r\n                if (Array.isArray(disposables)) {\r\n                    disposables.push(result);\r\n                }\r\n                return result;\r\n            };\r\n        }\r\n        return this._event;\r\n    }\r\n    /**\r\n     * To be kept private to fire an event to\r\n     * subscribers\r\n     */\r\n    fire(event) {\r\n        if (this._callbacks) {\r\n            this._callbacks.invoke.call(this._callbacks, event);\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._callbacks) {\r\n            this._callbacks.dispose();\r\n            this._callbacks = undefined;\r\n        }\r\n    }\r\n}\r\nEmitter._noop = function () { };\r\nexports.Emitter = Emitter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWpzb25ycGMvbGliL2V2ZW50cy5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWpzb25ycGMvbGliL2V2ZW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRGlzcG9zYWJsZTtcclxuKGZ1bmN0aW9uIChEaXNwb3NhYmxlKSB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGUoZnVuYykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgRGlzcG9zYWJsZS5jcmVhdGUgPSBjcmVhdGU7XHJcbn0pKERpc3Bvc2FibGUgPSBleHBvcnRzLkRpc3Bvc2FibGUgfHwgKGV4cG9ydHMuRGlzcG9zYWJsZSA9IHt9KSk7XHJcbnZhciBFdmVudDtcclxuKGZ1bmN0aW9uIChFdmVudCkge1xyXG4gICAgY29uc3QgX2Rpc3Bvc2FibGUgPSB7IGRpc3Bvc2UoKSB7IH0gfTtcclxuICAgIEV2ZW50Lk5vbmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfZGlzcG9zYWJsZTsgfTtcclxufSkoRXZlbnQgPSBleHBvcnRzLkV2ZW50IHx8IChleHBvcnRzLkV2ZW50ID0ge30pKTtcclxuY2xhc3MgQ2FsbGJhY2tMaXN0IHtcclxuICAgIGFkZChjYWxsYmFjaywgY29udGV4dCA9IG51bGwsIGJ1Y2tldCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0cyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShidWNrZXQpKSB7XHJcbiAgICAgICAgICAgIGJ1Y2tldC5wdXNoKHsgZGlzcG9zZTogKCkgPT4gdGhpcy5yZW1vdmUoY2FsbGJhY2ssIGNvbnRleHQpIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbW92ZShjYWxsYmFjaywgY29udGV4dCA9IG51bGwpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBmb3VuZENhbGxiYWNrV2l0aERpZmZlcmVudENvbnRleHQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWxsYmFja3NbaV0gPT09IGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29udGV4dHNbaV0gPT09IGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsYmFjayAmIGNvbnRleHQgbWF0Y2ggPT4gcmVtb3ZlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmRDYWxsYmFja1dpdGhEaWZmZXJlbnRDb250ZXh0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZm91bmRDYWxsYmFja1dpdGhEaWZmZXJlbnRDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2hlbiBhZGRpbmcgYSBsaXN0ZW5lciB3aXRoIGEgY29udGV4dCwgeW91IHNob3VsZCByZW1vdmUgaXQgd2l0aCB0aGUgc2FtZSBjb250ZXh0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW52b2tlKC4uLmFyZ3MpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXQgPSBbXSwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzLnNsaWNlKDApLCBjb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzLnNsaWNlKDApO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldC5wdXNoKGNhbGxiYWNrc1tpXS5hcHBseShjb250ZXh0c1tpXSwgYXJncykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbiAgICBpc0VtcHR5KCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5fY2FsbGJhY2tzIHx8IHRoaXMuX2NhbGxiYWNrcy5sZW5ndGggPT09IDA7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9jb250ZXh0cyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5jbGFzcyBFbWl0dGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9vcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9vcHRpb25zO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3IgdGhlIHB1YmxpYyB0byBhbGxvdyB0byBzdWJzY3JpYmVcclxuICAgICAqIHRvIGV2ZW50cyBmcm9tIHRoaXMgRW1pdHRlclxyXG4gICAgICovXHJcbiAgICBnZXQgZXZlbnQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudCA9IChsaXN0ZW5lciwgdGhpc0FyZ3MsIGRpc3Bvc2FibGVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG5ldyBDYWxsYmFja0xpc3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMub25GaXJzdExpc3RlbmVyQWRkICYmIHRoaXMuX2NhbGxiYWNrcy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9uRmlyc3RMaXN0ZW5lckFkZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5hZGQobGlzdGVuZXIsIHRoaXNBcmdzKTtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MucmVtb3ZlKGxpc3RlbmVyLCB0aGlzQXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kaXNwb3NlID0gRW1pdHRlci5fbm9vcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMgJiYgdGhpcy5fb3B0aW9ucy5vbkxhc3RMaXN0ZW5lclJlbW92ZSAmJiB0aGlzLl9jYWxsYmFja3MuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9uTGFzdExpc3RlbmVyUmVtb3ZlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRpc3Bvc2FibGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLnB1c2gocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVG8gYmUga2VwdCBwcml2YXRlIHRvIGZpcmUgYW4gZXZlbnQgdG9cclxuICAgICAqIHN1YnNjcmliZXJzXHJcbiAgICAgKi9cclxuICAgIGZpcmUoZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5pbnZva2UuY2FsbCh0aGlzLl9jYWxsYmFja3MsIGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5FbWl0dGVyLl9ub29wID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5leHBvcnRzLkVtaXR0ZXIgPSBFbWl0dGVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/events.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/is.js":
/*!***********************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/is.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction boolean(value) {\r\n    return value === true || value === false;\r\n}\r\nexports.boolean = boolean;\r\nfunction string(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\nexports.string = string;\r\nfunction number(value) {\r\n    return typeof value === 'number' || value instanceof Number;\r\n}\r\nexports.number = number;\r\nfunction error(value) {\r\n    return value instanceof Error;\r\n}\r\nexports.error = error;\r\nfunction func(value) {\r\n    return typeof value === 'function';\r\n}\r\nexports.func = func;\r\nfunction array(value) {\r\n    return Array.isArray(value);\r\n}\r\nexports.array = array;\r\nfunction stringArray(value) {\r\n    return array(value) && value.every(elem => string(elem));\r\n}\r\nexports.stringArray = stringArray;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWpzb25ycGMvbGliL2lzLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtanNvbnJwYy9saWIvaXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gYm9vbGVhbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcclxufVxyXG5leHBvcnRzLmJvb2xlYW4gPSBib29sZWFuO1xyXG5mdW5jdGlvbiBzdHJpbmcodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xyXG59XHJcbmV4cG9ydHMuc3RyaW5nID0gc3RyaW5nO1xyXG5mdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyO1xyXG59XHJcbmV4cG9ydHMubnVtYmVyID0gbnVtYmVyO1xyXG5mdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRXJyb3I7XHJcbn1cclxuZXhwb3J0cy5lcnJvciA9IGVycm9yO1xyXG5mdW5jdGlvbiBmdW5jKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xyXG59XHJcbmV4cG9ydHMuZnVuYyA9IGZ1bmM7XHJcbmZ1bmN0aW9uIGFycmF5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XHJcbn1cclxuZXhwb3J0cy5hcnJheSA9IGFycmF5O1xyXG5mdW5jdGlvbiBzdHJpbmdBcnJheSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGFycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShlbGVtID0+IHN0cmluZyhlbGVtKSk7XHJcbn1cclxuZXhwb3J0cy5zdHJpbmdBcnJheSA9IHN0cmluZ0FycmF5O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/is.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/linkedMap.js":
/*!******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/linkedMap.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Touch;\r\n(function (Touch) {\r\n    Touch.None = 0;\r\n    Touch.First = 1;\r\n    Touch.Last = 2;\r\n})(Touch = exports.Touch || (exports.Touch = {}));\r\nclass LinkedMap {\r\n    constructor() {\r\n        this._map = new Map();\r\n        this._head = undefined;\r\n        this._tail = undefined;\r\n        this._size = 0;\r\n    }\r\n    clear() {\r\n        this._map.clear();\r\n        this._head = undefined;\r\n        this._tail = undefined;\r\n        this._size = 0;\r\n    }\r\n    isEmpty() {\r\n        return !this._head && !this._tail;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    has(key) {\r\n        return this._map.has(key);\r\n    }\r\n    get(key) {\r\n        const item = this._map.get(key);\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        return item.value;\r\n    }\r\n    set(key, value, touch = Touch.None) {\r\n        let item = this._map.get(key);\r\n        if (item) {\r\n            item.value = value;\r\n            if (touch !== Touch.None) {\r\n                this.touch(item, touch);\r\n            }\r\n        }\r\n        else {\r\n            item = { key, value, next: undefined, previous: undefined };\r\n            switch (touch) {\r\n                case Touch.None:\r\n                    this.addItemLast(item);\r\n                    break;\r\n                case Touch.First:\r\n                    this.addItemFirst(item);\r\n                    break;\r\n                case Touch.Last:\r\n                    this.addItemLast(item);\r\n                    break;\r\n                default:\r\n                    this.addItemLast(item);\r\n                    break;\r\n            }\r\n            this._map.set(key, item);\r\n            this._size++;\r\n        }\r\n    }\r\n    delete(key) {\r\n        const item = this._map.get(key);\r\n        if (!item) {\r\n            return false;\r\n        }\r\n        this._map.delete(key);\r\n        this.removeItem(item);\r\n        this._size--;\r\n        return true;\r\n    }\r\n    shift() {\r\n        if (!this._head && !this._tail) {\r\n            return undefined;\r\n        }\r\n        if (!this._head || !this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        const item = this._head;\r\n        this._map.delete(item.key);\r\n        this.removeItem(item);\r\n        this._size--;\r\n        return item.value;\r\n    }\r\n    forEach(callbackfn, thisArg) {\r\n        let current = this._head;\r\n        while (current) {\r\n            if (thisArg) {\r\n                callbackfn.bind(thisArg)(current.value, current.key, this);\r\n            }\r\n            else {\r\n                callbackfn(current.value, current.key, this);\r\n            }\r\n            current = current.next;\r\n        }\r\n    }\r\n    forEachReverse(callbackfn, thisArg) {\r\n        let current = this._tail;\r\n        while (current) {\r\n            if (thisArg) {\r\n                callbackfn.bind(thisArg)(current.value, current.key, this);\r\n            }\r\n            else {\r\n                callbackfn(current.value, current.key, this);\r\n            }\r\n            current = current.previous;\r\n        }\r\n    }\r\n    values() {\r\n        let result = [];\r\n        let current = this._head;\r\n        while (current) {\r\n            result.push(current.value);\r\n            current = current.next;\r\n        }\r\n        return result;\r\n    }\r\n    keys() {\r\n        let result = [];\r\n        let current = this._head;\r\n        while (current) {\r\n            result.push(current.key);\r\n            current = current.next;\r\n        }\r\n        return result;\r\n    }\r\n    /* JSON RPC run on es5 which has no Symbol.iterator\r\n    public keys(): IterableIterator<K> {\r\n        let current = this._head;\r\n        let iterator: IterableIterator<K> = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next():IteratorResult<K> {\r\n                if (current) {\r\n                    let result = { value: current.key, done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                } else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n\r\n    public values(): IterableIterator<V> {\r\n        let current = this._head;\r\n        let iterator: IterableIterator<V> = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next():IteratorResult<V> {\r\n                if (current) {\r\n                    let result = { value: current.value, done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                } else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n    */\r\n    addItemFirst(item) {\r\n        // First time Insert\r\n        if (!this._head && !this._tail) {\r\n            this._tail = item;\r\n        }\r\n        else if (!this._head) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        else {\r\n            item.next = this._head;\r\n            this._head.previous = item;\r\n        }\r\n        this._head = item;\r\n    }\r\n    addItemLast(item) {\r\n        // First time Insert\r\n        if (!this._head && !this._tail) {\r\n            this._head = item;\r\n        }\r\n        else if (!this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        else {\r\n            item.previous = this._tail;\r\n            this._tail.next = item;\r\n        }\r\n        this._tail = item;\r\n    }\r\n    removeItem(item) {\r\n        if (item === this._head && item === this._tail) {\r\n            this._head = undefined;\r\n            this._tail = undefined;\r\n        }\r\n        else if (item === this._head) {\r\n            this._head = item.next;\r\n        }\r\n        else if (item === this._tail) {\r\n            this._tail = item.previous;\r\n        }\r\n        else {\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            if (!next || !previous) {\r\n                throw new Error('Invalid list');\r\n            }\r\n            next.previous = previous;\r\n            previous.next = next;\r\n        }\r\n    }\r\n    touch(item, touch) {\r\n        if (!this._head || !this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        if ((touch !== Touch.First && touch !== Touch.Last)) {\r\n            return;\r\n        }\r\n        if (touch === Touch.First) {\r\n            if (item === this._head) {\r\n                return;\r\n            }\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            // Unlink the item\r\n            if (item === this._tail) {\r\n                // previous must be defined since item was not head but is tail\r\n                // So there are more than on item in the map\r\n                previous.next = undefined;\r\n                this._tail = previous;\r\n            }\r\n            else {\r\n                // Both next and previous are not undefined since item was neither head nor tail.\r\n                next.previous = previous;\r\n                previous.next = next;\r\n            }\r\n            // Insert the node at head\r\n            item.previous = undefined;\r\n            item.next = this._head;\r\n            this._head.previous = item;\r\n            this._head = item;\r\n        }\r\n        else if (touch === Touch.Last) {\r\n            if (item === this._tail) {\r\n                return;\r\n            }\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            // Unlink the item.\r\n            if (item === this._head) {\r\n                // next must be defined since item was not tail but is head\r\n                // So there are more than on item in the map\r\n                next.previous = undefined;\r\n                this._head = next;\r\n            }\r\n            else {\r\n                // Both next and previous are not undefined since item was neither head nor tail.\r\n                next.previous = previous;\r\n                previous.next = next;\r\n            }\r\n            item.next = undefined;\r\n            item.previous = this._tail;\r\n            this._tail.next = item;\r\n            this._tail = item;\r\n        }\r\n    }\r\n}\r\nexports.LinkedMap = LinkedMap;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/linkedMap.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/main.js":
/*!*************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/main.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n/// <reference path=\"./thenable.ts\" />\r\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Is = __webpack_require__(/*! ./is */ \"./node_modules/vscode-jsonrpc/lib/is.js\");\r\nconst messages_1 = __webpack_require__(/*! ./messages */ \"./node_modules/vscode-jsonrpc/lib/messages.js\");\r\nexports.RequestType = messages_1.RequestType;\r\nexports.RequestType0 = messages_1.RequestType0;\r\nexports.RequestType1 = messages_1.RequestType1;\r\nexports.RequestType2 = messages_1.RequestType2;\r\nexports.RequestType3 = messages_1.RequestType3;\r\nexports.RequestType4 = messages_1.RequestType4;\r\nexports.RequestType5 = messages_1.RequestType5;\r\nexports.RequestType6 = messages_1.RequestType6;\r\nexports.RequestType7 = messages_1.RequestType7;\r\nexports.RequestType8 = messages_1.RequestType8;\r\nexports.RequestType9 = messages_1.RequestType9;\r\nexports.ResponseError = messages_1.ResponseError;\r\nexports.ErrorCodes = messages_1.ErrorCodes;\r\nexports.NotificationType = messages_1.NotificationType;\r\nexports.NotificationType0 = messages_1.NotificationType0;\r\nexports.NotificationType1 = messages_1.NotificationType1;\r\nexports.NotificationType2 = messages_1.NotificationType2;\r\nexports.NotificationType3 = messages_1.NotificationType3;\r\nexports.NotificationType4 = messages_1.NotificationType4;\r\nexports.NotificationType5 = messages_1.NotificationType5;\r\nexports.NotificationType6 = messages_1.NotificationType6;\r\nexports.NotificationType7 = messages_1.NotificationType7;\r\nexports.NotificationType8 = messages_1.NotificationType8;\r\nexports.NotificationType9 = messages_1.NotificationType9;\r\nconst messageReader_1 = __webpack_require__(/*! ./messageReader */ \"./node_modules/vscode-jsonrpc/lib/messageReader.js\");\r\nexports.MessageReader = messageReader_1.MessageReader;\r\nexports.StreamMessageReader = messageReader_1.StreamMessageReader;\r\nexports.IPCMessageReader = messageReader_1.IPCMessageReader;\r\nexports.SocketMessageReader = messageReader_1.SocketMessageReader;\r\nconst messageWriter_1 = __webpack_require__(/*! ./messageWriter */ \"./node_modules/vscode-jsonrpc/lib/messageWriter.js\");\r\nexports.MessageWriter = messageWriter_1.MessageWriter;\r\nexports.StreamMessageWriter = messageWriter_1.StreamMessageWriter;\r\nexports.IPCMessageWriter = messageWriter_1.IPCMessageWriter;\r\nexports.SocketMessageWriter = messageWriter_1.SocketMessageWriter;\r\nconst events_1 = __webpack_require__(/*! ./events */ \"./node_modules/vscode-jsonrpc/lib/events.js\");\r\nexports.Disposable = events_1.Disposable;\r\nexports.Event = events_1.Event;\r\nexports.Emitter = events_1.Emitter;\r\nconst cancellation_1 = __webpack_require__(/*! ./cancellation */ \"./node_modules/vscode-jsonrpc/lib/cancellation.js\");\r\nexports.CancellationTokenSource = cancellation_1.CancellationTokenSource;\r\nexports.CancellationToken = cancellation_1.CancellationToken;\r\nconst linkedMap_1 = __webpack_require__(/*! ./linkedMap */ \"./node_modules/vscode-jsonrpc/lib/linkedMap.js\");\r\n__export(__webpack_require__(/*! ./pipeSupport */ \"./node_modules/vscode-jsonrpc/lib/pipeSupport.js\"));\r\n__export(__webpack_require__(/*! ./socketSupport */ \"./node_modules/vscode-jsonrpc/lib/socketSupport.js\"));\r\nvar CancelNotification;\r\n(function (CancelNotification) {\r\n    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');\r\n})(CancelNotification || (CancelNotification = {}));\r\nexports.NullLogger = Object.freeze({\r\n    error: () => { },\r\n    warn: () => { },\r\n    info: () => { },\r\n    log: () => { }\r\n});\r\nvar Trace;\r\n(function (Trace) {\r\n    Trace[Trace[\"Off\"] = 0] = \"Off\";\r\n    Trace[Trace[\"Messages\"] = 1] = \"Messages\";\r\n    Trace[Trace[\"Verbose\"] = 2] = \"Verbose\";\r\n})(Trace = exports.Trace || (exports.Trace = {}));\r\n(function (Trace) {\r\n    function fromString(value) {\r\n        value = value.toLowerCase();\r\n        switch (value) {\r\n            case 'off':\r\n                return Trace.Off;\r\n            case 'messages':\r\n                return Trace.Messages;\r\n            case 'verbose':\r\n                return Trace.Verbose;\r\n            default:\r\n                return Trace.Off;\r\n        }\r\n    }\r\n    Trace.fromString = fromString;\r\n    function toString(value) {\r\n        switch (value) {\r\n            case Trace.Off:\r\n                return 'off';\r\n            case Trace.Messages:\r\n                return 'messages';\r\n            case Trace.Verbose:\r\n                return 'verbose';\r\n            default:\r\n                return 'off';\r\n        }\r\n    }\r\n    Trace.toString = toString;\r\n})(Trace = exports.Trace || (exports.Trace = {}));\r\nvar TraceFormat;\r\n(function (TraceFormat) {\r\n    TraceFormat[\"Text\"] = \"text\";\r\n    TraceFormat[\"JSON\"] = \"json\";\r\n})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));\r\n(function (TraceFormat) {\r\n    function fromString(value) {\r\n        value = value.toLowerCase();\r\n        if (value === 'json') {\r\n            return TraceFormat.JSON;\r\n        }\r\n        else {\r\n            return TraceFormat.Text;\r\n        }\r\n    }\r\n    TraceFormat.fromString = fromString;\r\n})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));\r\nvar SetTraceNotification;\r\n(function (SetTraceNotification) {\r\n    SetTraceNotification.type = new messages_1.NotificationType('$/setTraceNotification');\r\n})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));\r\nvar LogTraceNotification;\r\n(function (LogTraceNotification) {\r\n    LogTraceNotification.type = new messages_1.NotificationType('$/logTraceNotification');\r\n})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));\r\nvar ConnectionErrors;\r\n(function (ConnectionErrors) {\r\n    /**\r\n     * The connection is closed.\r\n     */\r\n    ConnectionErrors[ConnectionErrors[\"Closed\"] = 1] = \"Closed\";\r\n    /**\r\n     * The connection got disposed.\r\n     */\r\n    ConnectionErrors[ConnectionErrors[\"Disposed\"] = 2] = \"Disposed\";\r\n    /**\r\n     * The connection is already in listening mode.\r\n     */\r\n    ConnectionErrors[ConnectionErrors[\"AlreadyListening\"] = 3] = \"AlreadyListening\";\r\n})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));\r\nclass ConnectionError extends Error {\r\n    constructor(code, message) {\r\n        super(message);\r\n        this.code = code;\r\n        Object.setPrototypeOf(this, ConnectionError.prototype);\r\n    }\r\n}\r\nexports.ConnectionError = ConnectionError;\r\nvar ConnectionStrategy;\r\n(function (ConnectionStrategy) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && Is.func(candidate.cancelUndispatched);\r\n    }\r\n    ConnectionStrategy.is = is;\r\n})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));\r\nvar ConnectionState;\r\n(function (ConnectionState) {\r\n    ConnectionState[ConnectionState[\"New\"] = 1] = \"New\";\r\n    ConnectionState[ConnectionState[\"Listening\"] = 2] = \"Listening\";\r\n    ConnectionState[ConnectionState[\"Closed\"] = 3] = \"Closed\";\r\n    ConnectionState[ConnectionState[\"Disposed\"] = 4] = \"Disposed\";\r\n})(ConnectionState || (ConnectionState = {}));\r\nfunction _createMessageConnection(messageReader, messageWriter, logger, strategy) {\r\n    let sequenceNumber = 0;\r\n    let notificationSquenceNumber = 0;\r\n    let unknownResponseSquenceNumber = 0;\r\n    const version = '2.0';\r\n    let starRequestHandler = undefined;\r\n    let requestHandlers = Object.create(null);\r\n    let starNotificationHandler = undefined;\r\n    let notificationHandlers = Object.create(null);\r\n    let timer;\r\n    let messageQueue = new linkedMap_1.LinkedMap();\r\n    let responsePromises = Object.create(null);\r\n    let requestTokens = Object.create(null);\r\n    let trace = Trace.Off;\r\n    let traceFormat = TraceFormat.Text;\r\n    let tracer;\r\n    let state = ConnectionState.New;\r\n    let errorEmitter = new events_1.Emitter();\r\n    let closeEmitter = new events_1.Emitter();\r\n    let unhandledNotificationEmitter = new events_1.Emitter();\r\n    let disposeEmitter = new events_1.Emitter();\r\n    function createRequestQueueKey(id) {\r\n        return 'req-' + id.toString();\r\n    }\r\n    function createResponseQueueKey(id) {\r\n        if (id === null) {\r\n            return 'res-unknown-' + (++unknownResponseSquenceNumber).toString();\r\n        }\r\n        else {\r\n            return 'res-' + id.toString();\r\n        }\r\n    }\r\n    function createNotificationQueueKey() {\r\n        return 'not-' + (++notificationSquenceNumber).toString();\r\n    }\r\n    function addMessageToQueue(queue, message) {\r\n        if (messages_1.isRequestMessage(message)) {\r\n            queue.set(createRequestQueueKey(message.id), message);\r\n        }\r\n        else if (messages_1.isResponseMessage(message)) {\r\n            queue.set(createResponseQueueKey(message.id), message);\r\n        }\r\n        else {\r\n            queue.set(createNotificationQueueKey(), message);\r\n        }\r\n    }\r\n    function cancelUndispatched(_message) {\r\n        return undefined;\r\n    }\r\n    function isListening() {\r\n        return state === ConnectionState.Listening;\r\n    }\r\n    function isClosed() {\r\n        return state === ConnectionState.Closed;\r\n    }\r\n    function isDisposed() {\r\n        return state === ConnectionState.Disposed;\r\n    }\r\n    function closeHandler() {\r\n        if (state === ConnectionState.New || state === ConnectionState.Listening) {\r\n            state = ConnectionState.Closed;\r\n            closeEmitter.fire(undefined);\r\n        }\r\n        // If the connection is disposed don't sent close events.\r\n    }\r\n    ;\r\n    function readErrorHandler(error) {\r\n        errorEmitter.fire([error, undefined, undefined]);\r\n    }\r\n    function writeErrorHandler(data) {\r\n        errorEmitter.fire(data);\r\n    }\r\n    messageReader.onClose(closeHandler);\r\n    messageReader.onError(readErrorHandler);\r\n    messageWriter.onClose(closeHandler);\r\n    messageWriter.onError(writeErrorHandler);\r\n    function triggerMessageQueue() {\r\n        if (timer || messageQueue.size === 0) {\r\n            return;\r\n        }\r\n        timer = setImmediate(() => {\r\n            timer = undefined;\r\n            processMessageQueue();\r\n        });\r\n    }\r\n    function processMessageQueue() {\r\n        if (messageQueue.size === 0) {\r\n            return;\r\n        }\r\n        let message = messageQueue.shift();\r\n        try {\r\n            if (messages_1.isRequestMessage(message)) {\r\n                handleRequest(message);\r\n            }\r\n            else if (messages_1.isNotificationMessage(message)) {\r\n                handleNotification(message);\r\n            }\r\n            else if (messages_1.isResponseMessage(message)) {\r\n                handleResponse(message);\r\n            }\r\n            else {\r\n                handleInvalidMessage(message);\r\n            }\r\n        }\r\n        finally {\r\n            triggerMessageQueue();\r\n        }\r\n    }\r\n    let callback = (message) => {\r\n        try {\r\n            // We have received a cancellation message. Check if the message is still in the queue\r\n            // and cancel it if allowed to do so.\r\n            if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {\r\n                let key = createRequestQueueKey(message.params.id);\r\n                let toCancel = messageQueue.get(key);\r\n                if (messages_1.isRequestMessage(toCancel)) {\r\n                    let response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);\r\n                    if (response && (response.error !== void 0 || response.result !== void 0)) {\r\n                        messageQueue.delete(key);\r\n                        response.id = toCancel.id;\r\n                        traceSendingResponse(response, message.method, Date.now());\r\n                        messageWriter.write(response);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            addMessageToQueue(messageQueue, message);\r\n        }\r\n        finally {\r\n            triggerMessageQueue();\r\n        }\r\n    };\r\n    function handleRequest(requestMessage) {\r\n        if (isDisposed()) {\r\n            // we return here silently since we fired an event when the\r\n            // connection got disposed.\r\n            return;\r\n        }\r\n        function reply(resultOrError, method, startTime) {\r\n            let message = {\r\n                jsonrpc: version,\r\n                id: requestMessage.id\r\n            };\r\n            if (resultOrError instanceof messages_1.ResponseError) {\r\n                message.error = resultOrError.toJson();\r\n            }\r\n            else {\r\n                message.result = resultOrError === void 0 ? null : resultOrError;\r\n            }\r\n            traceSendingResponse(message, method, startTime);\r\n            messageWriter.write(message);\r\n        }\r\n        function replyError(error, method, startTime) {\r\n            let message = {\r\n                jsonrpc: version,\r\n                id: requestMessage.id,\r\n                error: error.toJson()\r\n            };\r\n            traceSendingResponse(message, method, startTime);\r\n            messageWriter.write(message);\r\n        }\r\n        function replySuccess(result, method, startTime) {\r\n            // The JSON RPC defines that a response must either have a result or an error\r\n            // So we can't treat undefined as a valid response result.\r\n            if (result === void 0) {\r\n                result = null;\r\n            }\r\n            let message = {\r\n                jsonrpc: version,\r\n                id: requestMessage.id,\r\n                result: result\r\n            };\r\n            traceSendingResponse(message, method, startTime);\r\n            messageWriter.write(message);\r\n        }\r\n        traceReceivedRequest(requestMessage);\r\n        let element = requestHandlers[requestMessage.method];\r\n        let type;\r\n        let requestHandler;\r\n        if (element) {\r\n            type = element.type;\r\n            requestHandler = element.handler;\r\n        }\r\n        let startTime = Date.now();\r\n        if (requestHandler || starRequestHandler) {\r\n            let cancellationSource = new cancellation_1.CancellationTokenSource();\r\n            let tokenKey = String(requestMessage.id);\r\n            requestTokens[tokenKey] = cancellationSource;\r\n            try {\r\n                let handlerResult;\r\n                if (requestMessage.params === void 0 || (type !== void 0 && type.numberOfParams === 0)) {\r\n                    handlerResult = requestHandler\r\n                        ? requestHandler(cancellationSource.token)\r\n                        : starRequestHandler(requestMessage.method, cancellationSource.token);\r\n                }\r\n                else if (Is.array(requestMessage.params) && (type === void 0 || type.numberOfParams > 1)) {\r\n                    handlerResult = requestHandler\r\n                        ? requestHandler(...requestMessage.params, cancellationSource.token)\r\n                        : starRequestHandler(requestMessage.method, ...requestMessage.params, cancellationSource.token);\r\n                }\r\n                else {\r\n                    handlerResult = requestHandler\r\n                        ? requestHandler(requestMessage.params, cancellationSource.token)\r\n                        : starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);\r\n                }\r\n                let promise = handlerResult;\r\n                if (!handlerResult) {\r\n                    delete requestTokens[tokenKey];\r\n                    replySuccess(handlerResult, requestMessage.method, startTime);\r\n                }\r\n                else if (promise.then) {\r\n                    promise.then((resultOrError) => {\r\n                        delete requestTokens[tokenKey];\r\n                        reply(resultOrError, requestMessage.method, startTime);\r\n                    }, error => {\r\n                        delete requestTokens[tokenKey];\r\n                        if (error instanceof messages_1.ResponseError) {\r\n                            replyError(error, requestMessage.method, startTime);\r\n                        }\r\n                        else if (error && Is.string(error.message)) {\r\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\r\n                        }\r\n                        else {\r\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    delete requestTokens[tokenKey];\r\n                    reply(handlerResult, requestMessage.method, startTime);\r\n                }\r\n            }\r\n            catch (error) {\r\n                delete requestTokens[tokenKey];\r\n                if (error instanceof messages_1.ResponseError) {\r\n                    reply(error, requestMessage.method, startTime);\r\n                }\r\n                else if (error && Is.string(error.message)) {\r\n                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\r\n                }\r\n                else {\r\n                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);\r\n        }\r\n    }\r\n    function handleResponse(responseMessage) {\r\n        if (isDisposed()) {\r\n            // See handle request.\r\n            return;\r\n        }\r\n        if (responseMessage.id === null) {\r\n            if (responseMessage.error) {\r\n                logger.error(`Received response message without id: Error is: \\n${JSON.stringify(responseMessage.error, undefined, 4)}`);\r\n            }\r\n            else {\r\n                logger.error(`Received response message without id. No further error information provided.`);\r\n            }\r\n        }\r\n        else {\r\n            let key = String(responseMessage.id);\r\n            let responsePromise = responsePromises[key];\r\n            traceReceivedResponse(responseMessage, responsePromise);\r\n            if (responsePromise) {\r\n                delete responsePromises[key];\r\n                try {\r\n                    if (responseMessage.error) {\r\n                        let error = responseMessage.error;\r\n                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));\r\n                    }\r\n                    else if (responseMessage.result !== void 0) {\r\n                        responsePromise.resolve(responseMessage.result);\r\n                    }\r\n                    else {\r\n                        throw new Error('Should never happen.');\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    if (error.message) {\r\n                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);\r\n                    }\r\n                    else {\r\n                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function handleNotification(message) {\r\n        if (isDisposed()) {\r\n            // See handle request.\r\n            return;\r\n        }\r\n        let type = undefined;\r\n        let notificationHandler;\r\n        if (message.method === CancelNotification.type.method) {\r\n            notificationHandler = (params) => {\r\n                let id = params.id;\r\n                let source = requestTokens[String(id)];\r\n                if (source) {\r\n                    source.cancel();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            let element = notificationHandlers[message.method];\r\n            if (element) {\r\n                notificationHandler = element.handler;\r\n                type = element.type;\r\n            }\r\n        }\r\n        if (notificationHandler || starNotificationHandler) {\r\n            try {\r\n                traceReceivedNotification(message);\r\n                if (message.params === void 0 || (type !== void 0 && type.numberOfParams === 0)) {\r\n                    notificationHandler ? notificationHandler() : starNotificationHandler(message.method);\r\n                }\r\n                else if (Is.array(message.params) && (type === void 0 || type.numberOfParams > 1)) {\r\n                    notificationHandler ? notificationHandler(...message.params) : starNotificationHandler(message.method, ...message.params);\r\n                }\r\n                else {\r\n                    notificationHandler ? notificationHandler(message.params) : starNotificationHandler(message.method, message.params);\r\n                }\r\n            }\r\n            catch (error) {\r\n                if (error.message) {\r\n                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);\r\n                }\r\n                else {\r\n                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            unhandledNotificationEmitter.fire(message);\r\n        }\r\n    }\r\n    function handleInvalidMessage(message) {\r\n        if (!message) {\r\n            logger.error('Received empty message.');\r\n            return;\r\n        }\r\n        logger.error(`Received message which is neither a response nor a notification message:\\n${JSON.stringify(message, null, 4)}`);\r\n        // Test whether we find an id to reject the promise\r\n        let responseMessage = message;\r\n        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {\r\n            let key = String(responseMessage.id);\r\n            let responseHandler = responsePromises[key];\r\n            if (responseHandler) {\r\n                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));\r\n            }\r\n        }\r\n    }\r\n    function traceSendingRequest(message) {\r\n        if (trace === Trace.Off || !tracer) {\r\n            return;\r\n        }\r\n        if (traceFormat === TraceFormat.Text) {\r\n            let data = undefined;\r\n            if (trace === Trace.Verbose && message.params) {\r\n                data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\r\n            }\r\n            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);\r\n        }\r\n        else {\r\n            logLSPMessage('send-request', message);\r\n        }\r\n    }\r\n    function traceSendingNotification(message) {\r\n        if (trace === Trace.Off || !tracer) {\r\n            return;\r\n        }\r\n        if (traceFormat === TraceFormat.Text) {\r\n            let data = undefined;\r\n            if (trace === Trace.Verbose) {\r\n                if (message.params) {\r\n                    data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\r\n                }\r\n                else {\r\n                    data = 'No parameters provided.\\n\\n';\r\n                }\r\n            }\r\n            tracer.log(`Sending notification '${message.method}'.`, data);\r\n        }\r\n        else {\r\n            logLSPMessage('send-notification', message);\r\n        }\r\n    }\r\n    function traceSendingResponse(message, method, startTime) {\r\n        if (trace === Trace.Off || !tracer) {\r\n            return;\r\n        }\r\n        if (traceFormat === TraceFormat.Text) {\r\n            let data = undefined;\r\n            if (trace === Trace.Verbose) {\r\n                if (message.error && message.error.data) {\r\n                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\\n\\n`;\r\n                }\r\n                else {\r\n                    if (message.result) {\r\n                        data = `Result: ${JSON.stringify(message.result, null, 4)}\\n\\n`;\r\n                    }\r\n                    else if (message.error === void 0) {\r\n                        data = 'No result returned.\\n\\n';\r\n                    }\r\n                }\r\n            }\r\n            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);\r\n        }\r\n        else {\r\n            logLSPMessage('send-response', message);\r\n        }\r\n    }\r\n    function traceReceivedRequest(message) {\r\n        if (trace === Trace.Off || !tracer) {\r\n            return;\r\n        }\r\n        if (traceFormat === TraceFormat.Text) {\r\n            let data = undefined;\r\n            if (trace === Trace.Verbose && message.params) {\r\n                data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\r\n            }\r\n            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);\r\n        }\r\n        else {\r\n            logLSPMessage('receive-request', message);\r\n        }\r\n    }\r\n    function traceReceivedNotification(message) {\r\n        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {\r\n            return;\r\n        }\r\n        if (traceFormat === TraceFormat.Text) {\r\n            let data = undefined;\r\n            if (trace === Trace.Verbose) {\r\n                if (message.params) {\r\n                    data = `Params: ${JSON.stringify(message.params, null, 4)}\\n\\n`;\r\n                }\r\n                else {\r\n                    data = 'No parameters provided.\\n\\n';\r\n                }\r\n            }\r\n            tracer.log(`Received notification '${message.method}'.`, data);\r\n        }\r\n        else {\r\n            logLSPMessage('receive-notification', message);\r\n        }\r\n    }\r\n    function traceReceivedResponse(message, responsePromise) {\r\n        if (trace === Trace.Off || !tracer) {\r\n            return;\r\n        }\r\n        if (traceFormat === TraceFormat.Text) {\r\n            let data = undefined;\r\n            if (trace === Trace.Verbose) {\r\n                if (message.error && message.error.data) {\r\n                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\\n\\n`;\r\n                }\r\n                else {\r\n                    if (message.result) {\r\n                        data = `Result: ${JSON.stringify(message.result, null, 4)}\\n\\n`;\r\n                    }\r\n                    else if (message.error === void 0) {\r\n                        data = 'No result returned.\\n\\n';\r\n                    }\r\n                }\r\n            }\r\n            if (responsePromise) {\r\n                let error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';\r\n                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);\r\n            }\r\n            else {\r\n                tracer.log(`Received response ${message.id} without active response promise.`, data);\r\n            }\r\n        }\r\n        else {\r\n            logLSPMessage('receive-response', message);\r\n        }\r\n    }\r\n    function logLSPMessage(type, message) {\r\n        if (!tracer || trace === Trace.Off) {\r\n            return;\r\n        }\r\n        const lspMessage = {\r\n            isLSPMessage: true,\r\n            type,\r\n            message,\r\n            timestamp: Date.now()\r\n        };\r\n        tracer.log(lspMessage);\r\n    }\r\n    function throwIfClosedOrDisposed() {\r\n        if (isClosed()) {\r\n            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');\r\n        }\r\n        if (isDisposed()) {\r\n            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');\r\n        }\r\n    }\r\n    function throwIfListening() {\r\n        if (isListening()) {\r\n            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');\r\n        }\r\n    }\r\n    function throwIfNotListening() {\r\n        if (!isListening()) {\r\n            throw new Error('Call listen() first.');\r\n        }\r\n    }\r\n    function undefinedToNull(param) {\r\n        if (param === void 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return param;\r\n        }\r\n    }\r\n    function computeMessageParams(type, params) {\r\n        let result;\r\n        let numberOfParams = type.numberOfParams;\r\n        switch (numberOfParams) {\r\n            case 0:\r\n                result = null;\r\n                break;\r\n            case 1:\r\n                result = undefinedToNull(params[0]);\r\n                break;\r\n            default:\r\n                result = [];\r\n                for (let i = 0; i < params.length && i < numberOfParams; i++) {\r\n                    result.push(undefinedToNull(params[i]));\r\n                }\r\n                if (params.length < numberOfParams) {\r\n                    for (let i = params.length; i < numberOfParams; i++) {\r\n                        result.push(null);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n    let connection = {\r\n        sendNotification: (type, ...params) => {\r\n            throwIfClosedOrDisposed();\r\n            let method;\r\n            let messageParams;\r\n            if (Is.string(type)) {\r\n                method = type;\r\n                switch (params.length) {\r\n                    case 0:\r\n                        messageParams = null;\r\n                        break;\r\n                    case 1:\r\n                        messageParams = params[0];\r\n                        break;\r\n                    default:\r\n                        messageParams = params;\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                method = type.method;\r\n                messageParams = computeMessageParams(type, params);\r\n            }\r\n            let notificationMessage = {\r\n                jsonrpc: version,\r\n                method: method,\r\n                params: messageParams\r\n            };\r\n            traceSendingNotification(notificationMessage);\r\n            messageWriter.write(notificationMessage);\r\n        },\r\n        onNotification: (type, handler) => {\r\n            throwIfClosedOrDisposed();\r\n            if (Is.func(type)) {\r\n                starNotificationHandler = type;\r\n            }\r\n            else if (handler) {\r\n                if (Is.string(type)) {\r\n                    notificationHandlers[type] = { type: undefined, handler };\r\n                }\r\n                else {\r\n                    notificationHandlers[type.method] = { type, handler };\r\n                }\r\n            }\r\n        },\r\n        sendRequest: (type, ...params) => {\r\n            throwIfClosedOrDisposed();\r\n            throwIfNotListening();\r\n            let method;\r\n            let messageParams;\r\n            let token = undefined;\r\n            if (Is.string(type)) {\r\n                method = type;\r\n                switch (params.length) {\r\n                    case 0:\r\n                        messageParams = null;\r\n                        break;\r\n                    case 1:\r\n                        // The cancellation token is optional so it can also be undefined.\r\n                        if (cancellation_1.CancellationToken.is(params[0])) {\r\n                            messageParams = null;\r\n                            token = params[0];\r\n                        }\r\n                        else {\r\n                            messageParams = undefinedToNull(params[0]);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        const last = params.length - 1;\r\n                        if (cancellation_1.CancellationToken.is(params[last])) {\r\n                            token = params[last];\r\n                            if (params.length === 2) {\r\n                                messageParams = undefinedToNull(params[0]);\r\n                            }\r\n                            else {\r\n                                messageParams = params.slice(0, last).map(value => undefinedToNull(value));\r\n                            }\r\n                        }\r\n                        else {\r\n                            messageParams = params.map(value => undefinedToNull(value));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                method = type.method;\r\n                messageParams = computeMessageParams(type, params);\r\n                let numberOfParams = type.numberOfParams;\r\n                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;\r\n            }\r\n            let id = sequenceNumber++;\r\n            let result = new Promise((resolve, reject) => {\r\n                let requestMessage = {\r\n                    jsonrpc: version,\r\n                    id: id,\r\n                    method: method,\r\n                    params: messageParams\r\n                };\r\n                let responsePromise = { method: method, timerStart: Date.now(), resolve, reject };\r\n                traceSendingRequest(requestMessage);\r\n                try {\r\n                    messageWriter.write(requestMessage);\r\n                }\r\n                catch (e) {\r\n                    // Writing the message failed. So we need to reject the promise.\r\n                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));\r\n                    responsePromise = null;\r\n                }\r\n                if (responsePromise) {\r\n                    responsePromises[String(id)] = responsePromise;\r\n                }\r\n            });\r\n            if (token) {\r\n                token.onCancellationRequested(() => {\r\n                    connection.sendNotification(CancelNotification.type, { id });\r\n                });\r\n            }\r\n            return result;\r\n        },\r\n        onRequest: (type, handler) => {\r\n            throwIfClosedOrDisposed();\r\n            if (Is.func(type)) {\r\n                starRequestHandler = type;\r\n            }\r\n            else if (handler) {\r\n                if (Is.string(type)) {\r\n                    requestHandlers[type] = { type: undefined, handler };\r\n                }\r\n                else {\r\n                    requestHandlers[type.method] = { type, handler };\r\n                }\r\n            }\r\n        },\r\n        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {\r\n            let _sendNotification = false;\r\n            let _traceFormat = TraceFormat.Text;\r\n            if (sendNotificationOrTraceOptions !== void 0) {\r\n                if (Is.boolean(sendNotificationOrTraceOptions)) {\r\n                    _sendNotification = sendNotificationOrTraceOptions;\r\n                }\r\n                else {\r\n                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;\r\n                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;\r\n                }\r\n            }\r\n            trace = _value;\r\n            traceFormat = _traceFormat;\r\n            if (trace === Trace.Off) {\r\n                tracer = undefined;\r\n            }\r\n            else {\r\n                tracer = _tracer;\r\n            }\r\n            if (_sendNotification && !isClosed() && !isDisposed()) {\r\n                connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });\r\n            }\r\n        },\r\n        onError: errorEmitter.event,\r\n        onClose: closeEmitter.event,\r\n        onUnhandledNotification: unhandledNotificationEmitter.event,\r\n        onDispose: disposeEmitter.event,\r\n        dispose: () => {\r\n            if (isDisposed()) {\r\n                return;\r\n            }\r\n            state = ConnectionState.Disposed;\r\n            disposeEmitter.fire(undefined);\r\n            let error = new Error('Connection got disposed.');\r\n            Object.keys(responsePromises).forEach((key) => {\r\n                responsePromises[key].reject(error);\r\n            });\r\n            responsePromises = Object.create(null);\r\n            requestTokens = Object.create(null);\r\n            messageQueue = new linkedMap_1.LinkedMap();\r\n            // Test for backwards compatibility\r\n            if (Is.func(messageWriter.dispose)) {\r\n                messageWriter.dispose();\r\n            }\r\n            if (Is.func(messageReader.dispose)) {\r\n                messageReader.dispose();\r\n            }\r\n        },\r\n        listen: () => {\r\n            throwIfClosedOrDisposed();\r\n            throwIfListening();\r\n            state = ConnectionState.Listening;\r\n            messageReader.listen(callback);\r\n        },\r\n        inspect: () => {\r\n            console.log(\"inspect\");\r\n        }\r\n    };\r\n    connection.onNotification(LogTraceNotification.type, (params) => {\r\n        if (trace === Trace.Off || !tracer) {\r\n            return;\r\n        }\r\n        tracer.log(params.message, trace === Trace.Verbose ? params.verbose : undefined);\r\n    });\r\n    return connection;\r\n}\r\nfunction isMessageReader(value) {\r\n    return value.listen !== void 0 && value.read === void 0;\r\n}\r\nfunction isMessageWriter(value) {\r\n    return value.write !== void 0 && value.end === void 0;\r\n}\r\nfunction createMessageConnection(input, output, logger, strategy) {\r\n    if (!logger) {\r\n        logger = exports.NullLogger;\r\n    }\r\n    let reader = isMessageReader(input) ? input : new messageReader_1.StreamMessageReader(input);\r\n    let writer = isMessageWriter(output) ? output : new messageWriter_1.StreamMessageWriter(output);\r\n    return _createMessageConnection(reader, writer, logger, strategy);\r\n}\r\nexports.createMessageConnection = createMessageConnection;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/main.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/messageReader.js":
/*!**********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/messageReader.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst events_1 = __webpack_require__(/*! ./events */ \"./node_modules/vscode-jsonrpc/lib/events.js\");\r\nconst Is = __webpack_require__(/*! ./is */ \"./node_modules/vscode-jsonrpc/lib/is.js\");\r\nlet DefaultSize = 8192;\r\nlet CR = Buffer.from('\\r', 'ascii')[0];\r\nlet LF = Buffer.from('\\n', 'ascii')[0];\r\nlet CRLF = '\\r\\n';\r\nclass MessageBuffer {\r\n    constructor(encoding = 'utf8') {\r\n        this.encoding = encoding;\r\n        this.index = 0;\r\n        this.buffer = Buffer.allocUnsafe(DefaultSize);\r\n    }\r\n    append(chunk) {\r\n        var toAppend = chunk;\r\n        if (typeof (chunk) === 'string') {\r\n            var str = chunk;\r\n            var bufferLen = Buffer.byteLength(str, this.encoding);\r\n            toAppend = Buffer.allocUnsafe(bufferLen);\r\n            toAppend.write(str, 0, bufferLen, this.encoding);\r\n        }\r\n        if (this.buffer.length - this.index >= toAppend.length) {\r\n            toAppend.copy(this.buffer, this.index, 0, toAppend.length);\r\n        }\r\n        else {\r\n            var newSize = (Math.ceil((this.index + toAppend.length) / DefaultSize) + 1) * DefaultSize;\r\n            if (this.index === 0) {\r\n                this.buffer = Buffer.allocUnsafe(newSize);\r\n                toAppend.copy(this.buffer, 0, 0, toAppend.length);\r\n            }\r\n            else {\r\n                this.buffer = Buffer.concat([this.buffer.slice(0, this.index), toAppend], newSize);\r\n            }\r\n        }\r\n        this.index += toAppend.length;\r\n    }\r\n    tryReadHeaders() {\r\n        let result = undefined;\r\n        let current = 0;\r\n        while (current + 3 < this.index && (this.buffer[current] !== CR || this.buffer[current + 1] !== LF || this.buffer[current + 2] !== CR || this.buffer[current + 3] !== LF)) {\r\n            current++;\r\n        }\r\n        // No header / body separator found (e.g CRLFCRLF)\r\n        if (current + 3 >= this.index) {\r\n            return result;\r\n        }\r\n        result = Object.create(null);\r\n        let headers = this.buffer.toString('ascii', 0, current).split(CRLF);\r\n        headers.forEach((header) => {\r\n            let index = header.indexOf(':');\r\n            if (index === -1) {\r\n                throw new Error('Message header must separate key and value using :');\r\n            }\r\n            let key = header.substr(0, index);\r\n            let value = header.substr(index + 1).trim();\r\n            result[key] = value;\r\n        });\r\n        let nextStart = current + 4;\r\n        this.buffer = this.buffer.slice(nextStart);\r\n        this.index = this.index - nextStart;\r\n        return result;\r\n    }\r\n    tryReadContent(length) {\r\n        if (this.index < length) {\r\n            return null;\r\n        }\r\n        let result = this.buffer.toString(this.encoding, 0, length);\r\n        let nextStart = length;\r\n        this.buffer.copy(this.buffer, 0, nextStart);\r\n        this.index = this.index - nextStart;\r\n        return result;\r\n    }\r\n    get numberOfBytes() {\r\n        return this.index;\r\n    }\r\n}\r\nvar MessageReader;\r\n(function (MessageReader) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&\r\n            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);\r\n    }\r\n    MessageReader.is = is;\r\n})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));\r\nclass AbstractMessageReader {\r\n    constructor() {\r\n        this.errorEmitter = new events_1.Emitter();\r\n        this.closeEmitter = new events_1.Emitter();\r\n        this.partialMessageEmitter = new events_1.Emitter();\r\n    }\r\n    dispose() {\r\n        this.errorEmitter.dispose();\r\n        this.closeEmitter.dispose();\r\n    }\r\n    get onError() {\r\n        return this.errorEmitter.event;\r\n    }\r\n    fireError(error) {\r\n        this.errorEmitter.fire(this.asError(error));\r\n    }\r\n    get onClose() {\r\n        return this.closeEmitter.event;\r\n    }\r\n    fireClose() {\r\n        this.closeEmitter.fire(undefined);\r\n    }\r\n    get onPartialMessage() {\r\n        return this.partialMessageEmitter.event;\r\n    }\r\n    firePartialMessage(info) {\r\n        this.partialMessageEmitter.fire(info);\r\n    }\r\n    asError(error) {\r\n        if (error instanceof Error) {\r\n            return error;\r\n        }\r\n        else {\r\n            return new Error(`Reader recevied error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);\r\n        }\r\n    }\r\n}\r\nexports.AbstractMessageReader = AbstractMessageReader;\r\nclass StreamMessageReader extends AbstractMessageReader {\r\n    constructor(readable, encoding = 'utf8') {\r\n        super();\r\n        this.readable = readable;\r\n        this.buffer = new MessageBuffer(encoding);\r\n        this._partialMessageTimeout = 10000;\r\n    }\r\n    set partialMessageTimeout(timeout) {\r\n        this._partialMessageTimeout = timeout;\r\n    }\r\n    get partialMessageTimeout() {\r\n        return this._partialMessageTimeout;\r\n    }\r\n    listen(callback) {\r\n        this.nextMessageLength = -1;\r\n        this.messageToken = 0;\r\n        this.partialMessageTimer = undefined;\r\n        this.callback = callback;\r\n        this.readable.on('data', (data) => {\r\n            this.onData(data);\r\n        });\r\n        this.readable.on('error', (error) => this.fireError(error));\r\n        this.readable.on('close', () => this.fireClose());\r\n    }\r\n    onData(data) {\r\n        this.buffer.append(data);\r\n        while (true) {\r\n            if (this.nextMessageLength === -1) {\r\n                let headers = this.buffer.tryReadHeaders();\r\n                if (!headers) {\r\n                    return;\r\n                }\r\n                let contentLength = headers['Content-Length'];\r\n                if (!contentLength) {\r\n                    throw new Error('Header must provide a Content-Length property.');\r\n                }\r\n                let length = parseInt(contentLength);\r\n                if (isNaN(length)) {\r\n                    throw new Error('Content-Length value must be a number.');\r\n                }\r\n                this.nextMessageLength = length;\r\n                // Take the encoding form the header. For compatibility\r\n                // treat both utf-8 and utf8 as node utf8\r\n            }\r\n            var msg = this.buffer.tryReadContent(this.nextMessageLength);\r\n            if (msg === null) {\r\n                /** We haven't recevied the full message yet. */\r\n                this.setPartialMessageTimer();\r\n                return;\r\n            }\r\n            this.clearPartialMessageTimer();\r\n            this.nextMessageLength = -1;\r\n            this.messageToken++;\r\n            var json = JSON.parse(msg);\r\n            this.callback(json);\r\n        }\r\n    }\r\n    clearPartialMessageTimer() {\r\n        if (this.partialMessageTimer) {\r\n            clearTimeout(this.partialMessageTimer);\r\n            this.partialMessageTimer = undefined;\r\n        }\r\n    }\r\n    setPartialMessageTimer() {\r\n        this.clearPartialMessageTimer();\r\n        if (this._partialMessageTimeout <= 0) {\r\n            return;\r\n        }\r\n        this.partialMessageTimer = setTimeout((token, timeout) => {\r\n            this.partialMessageTimer = undefined;\r\n            if (token === this.messageToken) {\r\n                this.firePartialMessage({ messageToken: token, waitingTime: timeout });\r\n                this.setPartialMessageTimer();\r\n            }\r\n        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);\r\n    }\r\n}\r\nexports.StreamMessageReader = StreamMessageReader;\r\nclass IPCMessageReader extends AbstractMessageReader {\r\n    constructor(process) {\r\n        super();\r\n        this.process = process;\r\n        let eventEmitter = this.process;\r\n        eventEmitter.on('error', (error) => this.fireError(error));\r\n        eventEmitter.on('close', () => this.fireClose());\r\n    }\r\n    listen(callback) {\r\n        this.process.on('message', callback);\r\n    }\r\n}\r\nexports.IPCMessageReader = IPCMessageReader;\r\nclass SocketMessageReader extends StreamMessageReader {\r\n    constructor(socket, encoding = 'utf-8') {\r\n        super(socket, encoding);\r\n    }\r\n}\r\nexports.SocketMessageReader = SocketMessageReader;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/messageReader.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/messageWriter.js":
/*!**********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/messageWriter.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst events_1 = __webpack_require__(/*! ./events */ \"./node_modules/vscode-jsonrpc/lib/events.js\");\r\nconst Is = __webpack_require__(/*! ./is */ \"./node_modules/vscode-jsonrpc/lib/is.js\");\r\nlet ContentLength = 'Content-Length: ';\r\nlet CRLF = '\\r\\n';\r\nvar MessageWriter;\r\n(function (MessageWriter) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&\r\n            Is.func(candidate.onError) && Is.func(candidate.write);\r\n    }\r\n    MessageWriter.is = is;\r\n})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));\r\nclass AbstractMessageWriter {\r\n    constructor() {\r\n        this.errorEmitter = new events_1.Emitter();\r\n        this.closeEmitter = new events_1.Emitter();\r\n    }\r\n    dispose() {\r\n        this.errorEmitter.dispose();\r\n        this.closeEmitter.dispose();\r\n    }\r\n    get onError() {\r\n        return this.errorEmitter.event;\r\n    }\r\n    fireError(error, message, count) {\r\n        this.errorEmitter.fire([this.asError(error), message, count]);\r\n    }\r\n    get onClose() {\r\n        return this.closeEmitter.event;\r\n    }\r\n    fireClose() {\r\n        this.closeEmitter.fire(undefined);\r\n    }\r\n    asError(error) {\r\n        if (error instanceof Error) {\r\n            return error;\r\n        }\r\n        else {\r\n            return new Error(`Writer recevied error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);\r\n        }\r\n    }\r\n}\r\nexports.AbstractMessageWriter = AbstractMessageWriter;\r\nclass StreamMessageWriter extends AbstractMessageWriter {\r\n    constructor(writable, encoding = 'utf8') {\r\n        super();\r\n        this.writable = writable;\r\n        this.encoding = encoding;\r\n        this.errorCount = 0;\r\n        this.writable.on('error', (error) => this.fireError(error));\r\n        this.writable.on('close', () => this.fireClose());\r\n    }\r\n    write(msg) {\r\n        let json = JSON.stringify(msg);\r\n        let contentLength = Buffer.byteLength(json, this.encoding);\r\n        let headers = [\r\n            ContentLength, contentLength.toString(), CRLF,\r\n            CRLF\r\n        ];\r\n        try {\r\n            // Header must be written in ASCII encoding\r\n            this.writable.write(headers.join(''), 'ascii');\r\n            // Now write the content. This can be written in any encoding\r\n            this.writable.write(json, this.encoding);\r\n            this.errorCount = 0;\r\n        }\r\n        catch (error) {\r\n            this.errorCount++;\r\n            this.fireError(error, msg, this.errorCount);\r\n        }\r\n    }\r\n}\r\nexports.StreamMessageWriter = StreamMessageWriter;\r\nclass IPCMessageWriter extends AbstractMessageWriter {\r\n    constructor(process) {\r\n        super();\r\n        this.process = process;\r\n        this.errorCount = 0;\r\n        this.queue = [];\r\n        this.sending = false;\r\n        let eventEmitter = this.process;\r\n        eventEmitter.on('error', (error) => this.fireError(error));\r\n        eventEmitter.on('close', () => this.fireClose);\r\n    }\r\n    write(msg) {\r\n        if (!this.sending && this.queue.length === 0) {\r\n            // See https://github.com/nodejs/node/issues/7657\r\n            this.doWriteMessage(msg);\r\n        }\r\n        else {\r\n            this.queue.push(msg);\r\n        }\r\n    }\r\n    doWriteMessage(msg) {\r\n        try {\r\n            if (this.process.send) {\r\n                this.sending = true;\r\n                this.process.send(msg, undefined, undefined, (error) => {\r\n                    this.sending = false;\r\n                    if (error) {\r\n                        this.errorCount++;\r\n                        this.fireError(error, msg, this.errorCount);\r\n                    }\r\n                    else {\r\n                        this.errorCount = 0;\r\n                    }\r\n                    if (this.queue.length > 0) {\r\n                        this.doWriteMessage(this.queue.shift());\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.errorCount++;\r\n            this.fireError(error, msg, this.errorCount);\r\n        }\r\n    }\r\n}\r\nexports.IPCMessageWriter = IPCMessageWriter;\r\nclass SocketMessageWriter extends AbstractMessageWriter {\r\n    constructor(socket, encoding = 'utf8') {\r\n        super();\r\n        this.socket = socket;\r\n        this.queue = [];\r\n        this.sending = false;\r\n        this.encoding = encoding;\r\n        this.errorCount = 0;\r\n        this.socket.on('error', (error) => this.fireError(error));\r\n        this.socket.on('close', () => this.fireClose());\r\n    }\r\n    write(msg) {\r\n        if (!this.sending && this.queue.length === 0) {\r\n            // See https://github.com/nodejs/node/issues/7657\r\n            this.doWriteMessage(msg);\r\n        }\r\n        else {\r\n            this.queue.push(msg);\r\n        }\r\n    }\r\n    doWriteMessage(msg) {\r\n        let json = JSON.stringify(msg);\r\n        let contentLength = Buffer.byteLength(json, this.encoding);\r\n        let headers = [\r\n            ContentLength, contentLength.toString(), CRLF,\r\n            CRLF\r\n        ];\r\n        try {\r\n            // Header must be written in ASCII encoding\r\n            this.sending = true;\r\n            this.socket.write(headers.join(''), 'ascii', (error) => {\r\n                if (error) {\r\n                    this.handleError(error, msg);\r\n                }\r\n                try {\r\n                    // Now write the content. This can be written in any encoding\r\n                    this.socket.write(json, this.encoding, (error) => {\r\n                        this.sending = false;\r\n                        if (error) {\r\n                            this.handleError(error, msg);\r\n                        }\r\n                        else {\r\n                            this.errorCount = 0;\r\n                        }\r\n                        if (this.queue.length > 0) {\r\n                            this.doWriteMessage(this.queue.shift());\r\n                        }\r\n                    });\r\n                }\r\n                catch (error) {\r\n                    this.handleError(error, msg);\r\n                }\r\n            });\r\n        }\r\n        catch (error) {\r\n            this.handleError(error, msg);\r\n        }\r\n    }\r\n    handleError(error, msg) {\r\n        this.errorCount++;\r\n        this.fireError(error, msg, this.errorCount);\r\n    }\r\n}\r\nexports.SocketMessageWriter = SocketMessageWriter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/messageWriter.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/messages.js":
/*!*****************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/messages.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst is = __webpack_require__(/*! ./is */ \"./node_modules/vscode-jsonrpc/lib/is.js\");\r\n/**\r\n * Predefined error codes.\r\n */\r\nvar ErrorCodes;\r\n(function (ErrorCodes) {\r\n    // Defined by JSON RPC\r\n    ErrorCodes.ParseError = -32700;\r\n    ErrorCodes.InvalidRequest = -32600;\r\n    ErrorCodes.MethodNotFound = -32601;\r\n    ErrorCodes.InvalidParams = -32602;\r\n    ErrorCodes.InternalError = -32603;\r\n    ErrorCodes.serverErrorStart = -32099;\r\n    ErrorCodes.serverErrorEnd = -32000;\r\n    ErrorCodes.ServerNotInitialized = -32002;\r\n    ErrorCodes.UnknownErrorCode = -32001;\r\n    // Defined by the protocol.\r\n    ErrorCodes.RequestCancelled = -32800;\r\n    // Defined by VSCode library.\r\n    ErrorCodes.MessageWriteError = 1;\r\n    ErrorCodes.MessageReadError = 2;\r\n})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));\r\n/**\r\n * An error object return in a response in case a request\r\n * has failed.\r\n */\r\nclass ResponseError extends Error {\r\n    constructor(code, message, data) {\r\n        super(message);\r\n        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;\r\n        this.data = data;\r\n        Object.setPrototypeOf(this, ResponseError.prototype);\r\n    }\r\n    toJson() {\r\n        return {\r\n            code: this.code,\r\n            message: this.message,\r\n            data: this.data,\r\n        };\r\n    }\r\n}\r\nexports.ResponseError = ResponseError;\r\n/**\r\n * An abstract implementation of a MessageType.\r\n */\r\nclass AbstractMessageType {\r\n    constructor(_method, _numberOfParams) {\r\n        this._method = _method;\r\n        this._numberOfParams = _numberOfParams;\r\n    }\r\n    get method() {\r\n        return this._method;\r\n    }\r\n    get numberOfParams() {\r\n        return this._numberOfParams;\r\n    }\r\n}\r\nexports.AbstractMessageType = AbstractMessageType;\r\n/**\r\n * Classes to type request response pairs\r\n */\r\nclass RequestType0 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 0);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType0 = RequestType0;\r\nclass RequestType extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 1);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType = RequestType;\r\nclass RequestType1 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 1);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType1 = RequestType1;\r\nclass RequestType2 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 2);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType2 = RequestType2;\r\nclass RequestType3 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 3);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType3 = RequestType3;\r\nclass RequestType4 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 4);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType4 = RequestType4;\r\nclass RequestType5 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 5);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType5 = RequestType5;\r\nclass RequestType6 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 6);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType6 = RequestType6;\r\nclass RequestType7 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 7);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType7 = RequestType7;\r\nclass RequestType8 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 8);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType8 = RequestType8;\r\nclass RequestType9 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 9);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.RequestType9 = RequestType9;\r\nclass NotificationType extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 1);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType = NotificationType;\r\nclass NotificationType0 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 0);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType0 = NotificationType0;\r\nclass NotificationType1 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 1);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType1 = NotificationType1;\r\nclass NotificationType2 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 2);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType2 = NotificationType2;\r\nclass NotificationType3 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 3);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType3 = NotificationType3;\r\nclass NotificationType4 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 4);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType4 = NotificationType4;\r\nclass NotificationType5 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 5);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType5 = NotificationType5;\r\nclass NotificationType6 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 6);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType6 = NotificationType6;\r\nclass NotificationType7 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 7);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType7 = NotificationType7;\r\nclass NotificationType8 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 8);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType8 = NotificationType8;\r\nclass NotificationType9 extends AbstractMessageType {\r\n    constructor(method) {\r\n        super(method, 9);\r\n        this._ = undefined;\r\n    }\r\n}\r\nexports.NotificationType9 = NotificationType9;\r\n/**\r\n * Tests if the given message is a request message\r\n */\r\nfunction isRequestMessage(message) {\r\n    let candidate = message;\r\n    return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));\r\n}\r\nexports.isRequestMessage = isRequestMessage;\r\n/**\r\n * Tests if the given message is a notification message\r\n */\r\nfunction isNotificationMessage(message) {\r\n    let candidate = message;\r\n    return candidate && is.string(candidate.method) && message.id === void 0;\r\n}\r\nexports.isNotificationMessage = isNotificationMessage;\r\n/**\r\n * Tests if the given message is a response message\r\n */\r\nfunction isResponseMessage(message) {\r\n    let candidate = message;\r\n    return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);\r\n}\r\nexports.isResponseMessage = isResponseMessage;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/messages.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/pipeSupport.js":
/*!********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/pipeSupport.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path_1 = __webpack_require__(/*! path */ \"path\");\r\nconst os_1 = __webpack_require__(/*! os */ \"os\");\r\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst messageReader_1 = __webpack_require__(/*! ./messageReader */ \"./node_modules/vscode-jsonrpc/lib/messageReader.js\");\r\nconst messageWriter_1 = __webpack_require__(/*! ./messageWriter */ \"./node_modules/vscode-jsonrpc/lib/messageWriter.js\");\r\nfunction generateRandomPipeName() {\r\n    const randomSuffix = crypto_1.randomBytes(21).toString('hex');\r\n    if (process.platform === 'win32') {\r\n        return `\\\\\\\\.\\\\pipe\\\\vscode-jsonrpc-${randomSuffix}-sock`;\r\n    }\r\n    else {\r\n        // Mac/Unix: use socket file\r\n        return path_1.join(os_1.tmpdir(), `vscode-${randomSuffix}.sock`);\r\n    }\r\n}\r\nexports.generateRandomPipeName = generateRandomPipeName;\r\nfunction createClientPipeTransport(pipeName, encoding = 'utf-8') {\r\n    let connectResolve;\r\n    let connected = new Promise((resolve, _reject) => {\r\n        connectResolve = resolve;\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        let server = net_1.createServer((socket) => {\r\n            server.close();\r\n            connectResolve([\r\n                new messageReader_1.SocketMessageReader(socket, encoding),\r\n                new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n            ]);\r\n        });\r\n        server.on('error', reject);\r\n        server.listen(pipeName, () => {\r\n            server.removeListener('error', reject);\r\n            resolve({\r\n                onConnected: () => { return connected; }\r\n            });\r\n        });\r\n    });\r\n}\r\nexports.createClientPipeTransport = createClientPipeTransport;\r\nfunction createServerPipeTransport(pipeName, encoding = 'utf-8') {\r\n    const socket = net_1.createConnection(pipeName);\r\n    return [\r\n        new messageReader_1.SocketMessageReader(socket, encoding),\r\n        new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n    ];\r\n}\r\nexports.createServerPipeTransport = createServerPipeTransport;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWpzb25ycGMvbGliL3BpcGVTdXBwb3J0LmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtanNvbnJwYy9saWIvcGlwZVN1cHBvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IG9zXzEgPSByZXF1aXJlKFwib3NcIik7XHJcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcclxuY29uc3QgbmV0XzEgPSByZXF1aXJlKFwibmV0XCIpO1xyXG5jb25zdCBtZXNzYWdlUmVhZGVyXzEgPSByZXF1aXJlKFwiLi9tZXNzYWdlUmVhZGVyXCIpO1xyXG5jb25zdCBtZXNzYWdlV3JpdGVyXzEgPSByZXF1aXJlKFwiLi9tZXNzYWdlV3JpdGVyXCIpO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbVBpcGVOYW1lKCkge1xyXG4gICAgY29uc3QgcmFuZG9tU3VmZml4ID0gY3J5cHRvXzEucmFuZG9tQnl0ZXMoMjEpLnRvU3RyaW5nKCdoZXgnKTtcclxuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcXFxcXFxcXC5cXFxccGlwZVxcXFx2c2NvZGUtanNvbnJwYy0ke3JhbmRvbVN1ZmZpeH0tc29ja2A7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBNYWMvVW5peDogdXNlIHNvY2tldCBmaWxlXHJcbiAgICAgICAgcmV0dXJuIHBhdGhfMS5qb2luKG9zXzEudG1wZGlyKCksIGB2c2NvZGUtJHtyYW5kb21TdWZmaXh9LnNvY2tgKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdlbmVyYXRlUmFuZG9tUGlwZU5hbWUgPSBnZW5lcmF0ZVJhbmRvbVBpcGVOYW1lO1xyXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRQaXBlVHJhbnNwb3J0KHBpcGVOYW1lLCBlbmNvZGluZyA9ICd1dGYtOCcpIHtcclxuICAgIGxldCBjb25uZWN0UmVzb2x2ZTtcclxuICAgIGxldCBjb25uZWN0ZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbm5lY3RSZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBsZXQgc2VydmVyID0gbmV0XzEuY3JlYXRlU2VydmVyKChzb2NrZXQpID0+IHtcclxuICAgICAgICAgICAgc2VydmVyLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIGNvbm5lY3RSZXNvbHZlKFtcclxuICAgICAgICAgICAgICAgIG5ldyBtZXNzYWdlUmVhZGVyXzEuU29ja2V0TWVzc2FnZVJlYWRlcihzb2NrZXQsIGVuY29kaW5nKSxcclxuICAgICAgICAgICAgICAgIG5ldyBtZXNzYWdlV3JpdGVyXzEuU29ja2V0TWVzc2FnZVdyaXRlcihzb2NrZXQsIGVuY29kaW5nKVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzZXJ2ZXIub24oJ2Vycm9yJywgcmVqZWN0KTtcclxuICAgICAgICBzZXJ2ZXIubGlzdGVuKHBpcGVOYW1lLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHNlcnZlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCByZWplY3QpO1xyXG4gICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgIG9uQ29ubmVjdGVkOiAoKSA9PiB7IHJldHVybiBjb25uZWN0ZWQ7IH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUNsaWVudFBpcGVUcmFuc3BvcnQgPSBjcmVhdGVDbGllbnRQaXBlVHJhbnNwb3J0O1xyXG5mdW5jdGlvbiBjcmVhdGVTZXJ2ZXJQaXBlVHJhbnNwb3J0KHBpcGVOYW1lLCBlbmNvZGluZyA9ICd1dGYtOCcpIHtcclxuICAgIGNvbnN0IHNvY2tldCA9IG5ldF8xLmNyZWF0ZUNvbm5lY3Rpb24ocGlwZU5hbWUpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBuZXcgbWVzc2FnZVJlYWRlcl8xLlNvY2tldE1lc3NhZ2VSZWFkZXIoc29ja2V0LCBlbmNvZGluZyksXHJcbiAgICAgICAgbmV3IG1lc3NhZ2VXcml0ZXJfMS5Tb2NrZXRNZXNzYWdlV3JpdGVyKHNvY2tldCwgZW5jb2RpbmcpXHJcbiAgICBdO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlU2VydmVyUGlwZVRyYW5zcG9ydCA9IGNyZWF0ZVNlcnZlclBpcGVUcmFuc3BvcnQ7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/pipeSupport.js\n");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/socketSupport.js":
/*!**********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/socketSupport.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst messageReader_1 = __webpack_require__(/*! ./messageReader */ \"./node_modules/vscode-jsonrpc/lib/messageReader.js\");\r\nconst messageWriter_1 = __webpack_require__(/*! ./messageWriter */ \"./node_modules/vscode-jsonrpc/lib/messageWriter.js\");\r\nfunction createClientSocketTransport(port, encoding = 'utf-8') {\r\n    let connectResolve;\r\n    let connected = new Promise((resolve, _reject) => {\r\n        connectResolve = resolve;\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        let server = net_1.createServer((socket) => {\r\n            server.close();\r\n            connectResolve([\r\n                new messageReader_1.SocketMessageReader(socket, encoding),\r\n                new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n            ]);\r\n        });\r\n        server.on('error', reject);\r\n        server.listen(port, '127.0.0.1', () => {\r\n            server.removeListener('error', reject);\r\n            resolve({\r\n                onConnected: () => { return connected; }\r\n            });\r\n        });\r\n    });\r\n}\r\nexports.createClientSocketTransport = createClientSocketTransport;\r\nfunction createServerSocketTransport(port, encoding = 'utf-8') {\r\n    const socket = net_1.createConnection(port, '127.0.0.1');\r\n    return [\r\n        new messageReader_1.SocketMessageReader(socket, encoding),\r\n        new messageWriter_1.SocketMessageWriter(socket, encoding)\r\n    ];\r\n}\r\nexports.createServerSocketTransport = createServerSocketTransport;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWpzb25ycGMvbGliL3NvY2tldFN1cHBvcnQuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL3ZzY29kZS1qc29ucnBjL2xpYi9zb2NrZXRTdXBwb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG5ldF8xID0gcmVxdWlyZShcIm5ldFwiKTtcclxuY29uc3QgbWVzc2FnZVJlYWRlcl8xID0gcmVxdWlyZShcIi4vbWVzc2FnZVJlYWRlclwiKTtcclxuY29uc3QgbWVzc2FnZVdyaXRlcl8xID0gcmVxdWlyZShcIi4vbWVzc2FnZVdyaXRlclwiKTtcclxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U29ja2V0VHJhbnNwb3J0KHBvcnQsIGVuY29kaW5nID0gJ3V0Zi04Jykge1xyXG4gICAgbGV0IGNvbm5lY3RSZXNvbHZlO1xyXG4gICAgbGV0IGNvbm5lY3RlZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCBfcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29ubmVjdFJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGxldCBzZXJ2ZXIgPSBuZXRfMS5jcmVhdGVTZXJ2ZXIoKHNvY2tldCkgPT4ge1xyXG4gICAgICAgICAgICBzZXJ2ZXIuY2xvc2UoKTtcclxuICAgICAgICAgICAgY29ubmVjdFJlc29sdmUoW1xyXG4gICAgICAgICAgICAgICAgbmV3IG1lc3NhZ2VSZWFkZXJfMS5Tb2NrZXRNZXNzYWdlUmVhZGVyKHNvY2tldCwgZW5jb2RpbmcpLFxyXG4gICAgICAgICAgICAgICAgbmV3IG1lc3NhZ2VXcml0ZXJfMS5Tb2NrZXRNZXNzYWdlV3JpdGVyKHNvY2tldCwgZW5jb2RpbmcpXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNlcnZlci5vbignZXJyb3InLCByZWplY3QpO1xyXG4gICAgICAgIHNlcnZlci5saXN0ZW4ocG9ydCwgJzEyNy4wLjAuMScsICgpID0+IHtcclxuICAgICAgICAgICAgc2VydmVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHJlamVjdCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgb25Db25uZWN0ZWQ6ICgpID0+IHsgcmV0dXJuIGNvbm5lY3RlZDsgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlQ2xpZW50U29ja2V0VHJhbnNwb3J0ID0gY3JlYXRlQ2xpZW50U29ja2V0VHJhbnNwb3J0O1xyXG5mdW5jdGlvbiBjcmVhdGVTZXJ2ZXJTb2NrZXRUcmFuc3BvcnQocG9ydCwgZW5jb2RpbmcgPSAndXRmLTgnKSB7XHJcbiAgICBjb25zdCBzb2NrZXQgPSBuZXRfMS5jcmVhdGVDb25uZWN0aW9uKHBvcnQsICcxMjcuMC4wLjEnKTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgbmV3IG1lc3NhZ2VSZWFkZXJfMS5Tb2NrZXRNZXNzYWdlUmVhZGVyKHNvY2tldCwgZW5jb2RpbmcpLFxyXG4gICAgICAgIG5ldyBtZXNzYWdlV3JpdGVyXzEuU29ja2V0TWVzc2FnZVdyaXRlcihzb2NrZXQsIGVuY29kaW5nKVxyXG4gICAgXTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZVNlcnZlclNvY2tldFRyYW5zcG9ydCA9IGNyZWF0ZVNlcnZlclNvY2tldFRyYW5zcG9ydDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-jsonrpc/lib/socketSupport.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/client.js":
/*!**********************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/client.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst c2p = __webpack_require__(/*! ./codeConverter */ \"./node_modules/vscode-languageclient/lib/codeConverter.js\");\r\nconst p2c = __webpack_require__(/*! ./protocolConverter */ \"./node_modules/vscode-languageclient/lib/protocolConverter.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst async_1 = __webpack_require__(/*! ./utils/async */ \"./node_modules/vscode-languageclient/lib/utils/async.js\");\r\nconst UUID = __webpack_require__(/*! ./utils/uuid */ \"./node_modules/vscode-languageclient/lib/utils/uuid.js\");\r\n__export(__webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\"));\r\nclass ConsoleLogger {\r\n    error(message) {\r\n        console.error(message);\r\n    }\r\n    warn(message) {\r\n        console.warn(message);\r\n    }\r\n    info(message) {\r\n        console.info(message);\r\n    }\r\n    log(message) {\r\n        console.log(message);\r\n    }\r\n}\r\nfunction createConnection(input, output, errorHandler, closeHandler) {\r\n    let logger = new ConsoleLogger();\r\n    let connection = vscode_languageserver_protocol_1.createProtocolConnection(input, output, logger);\r\n    connection.onError((data) => { errorHandler(data[0], data[1], data[2]); });\r\n    connection.onClose(closeHandler);\r\n    let result = {\r\n        listen: () => connection.listen(),\r\n        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),\r\n        onRequest: (type, handler) => connection.onRequest(Is.string(type) ? type : type.method, handler),\r\n        sendNotification: (type, params) => connection.sendNotification(Is.string(type) ? type : type.method, params),\r\n        onNotification: (type, handler) => connection.onNotification(Is.string(type) ? type : type.method, handler),\r\n        trace: (value, tracer, sendNotificationOrTraceOptions) => {\r\n            const defaultTraceOptions = {\r\n                sendNotification: false,\r\n                traceFormat: vscode_languageserver_protocol_1.TraceFormat.Text\r\n            };\r\n            if (sendNotificationOrTraceOptions === void 0) {\r\n                connection.trace(value, tracer, defaultTraceOptions);\r\n            }\r\n            else if (Is.boolean(sendNotificationOrTraceOptions)) {\r\n                connection.trace(value, tracer, sendNotificationOrTraceOptions);\r\n            }\r\n            else {\r\n                connection.trace(value, tracer, sendNotificationOrTraceOptions);\r\n            }\r\n        },\r\n        initialize: (params) => connection.sendRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params),\r\n        shutdown: () => connection.sendRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, undefined),\r\n        exit: () => connection.sendNotification(vscode_languageserver_protocol_1.ExitNotification.type),\r\n        onLogMessage: (handler) => connection.onNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, handler),\r\n        onShowMessage: (handler) => connection.onNotification(vscode_languageserver_protocol_1.ShowMessageNotification.type, handler),\r\n        onTelemetry: (handler) => connection.onNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, handler),\r\n        didChangeConfiguration: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, params),\r\n        didChangeWatchedFiles: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, params),\r\n        didOpenTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, params),\r\n        didChangeTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params),\r\n        didCloseTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, params),\r\n        didSaveTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, params),\r\n        onDiagnostics: (handler) => connection.onNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, handler),\r\n        dispose: () => connection.dispose()\r\n    };\r\n    return result;\r\n}\r\n/**\r\n * An action to be performed when the connection is producing errors.\r\n */\r\nvar ErrorAction;\r\n(function (ErrorAction) {\r\n    /**\r\n     * Continue running the server.\r\n     */\r\n    ErrorAction[ErrorAction[\"Continue\"] = 1] = \"Continue\";\r\n    /**\r\n     * Shutdown the server.\r\n     */\r\n    ErrorAction[ErrorAction[\"Shutdown\"] = 2] = \"Shutdown\";\r\n})(ErrorAction = exports.ErrorAction || (exports.ErrorAction = {}));\r\n/**\r\n * An action to be performed when the connection to a server got closed.\r\n */\r\nvar CloseAction;\r\n(function (CloseAction) {\r\n    /**\r\n     * Don't restart the server. The connection stays closed.\r\n     */\r\n    CloseAction[CloseAction[\"DoNotRestart\"] = 1] = \"DoNotRestart\";\r\n    /**\r\n     * Restart the server.\r\n     */\r\n    CloseAction[CloseAction[\"Restart\"] = 2] = \"Restart\";\r\n})(CloseAction = exports.CloseAction || (exports.CloseAction = {}));\r\nclass DefaultErrorHandler {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.restarts = [];\r\n    }\r\n    error(_error, _message, count) {\r\n        if (count && count <= 3) {\r\n            return ErrorAction.Continue;\r\n        }\r\n        return ErrorAction.Shutdown;\r\n    }\r\n    closed() {\r\n        this.restarts.push(Date.now());\r\n        if (this.restarts.length < 5) {\r\n            return CloseAction.Restart;\r\n        }\r\n        else {\r\n            let diff = this.restarts[this.restarts.length - 1] - this.restarts[0];\r\n            if (diff <= 3 * 60 * 1000) {\r\n                vscode_1.window.showErrorMessage(`The ${this.name} server crashed 5 times in the last 3 minutes. The server will not be restarted.`);\r\n                return CloseAction.DoNotRestart;\r\n            }\r\n            else {\r\n                this.restarts.shift();\r\n                return CloseAction.Restart;\r\n            }\r\n        }\r\n    }\r\n}\r\nvar RevealOutputChannelOn;\r\n(function (RevealOutputChannelOn) {\r\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Info\"] = 1] = \"Info\";\r\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Warn\"] = 2] = \"Warn\";\r\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Error\"] = 3] = \"Error\";\r\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Never\"] = 4] = \"Never\";\r\n})(RevealOutputChannelOn = exports.RevealOutputChannelOn || (exports.RevealOutputChannelOn = {}));\r\nvar State;\r\n(function (State) {\r\n    State[State[\"Stopped\"] = 1] = \"Stopped\";\r\n    State[State[\"Starting\"] = 3] = \"Starting\";\r\n    State[State[\"Running\"] = 2] = \"Running\";\r\n})(State = exports.State || (exports.State = {}));\r\nvar ClientState;\r\n(function (ClientState) {\r\n    ClientState[ClientState[\"Initial\"] = 0] = \"Initial\";\r\n    ClientState[ClientState[\"Starting\"] = 1] = \"Starting\";\r\n    ClientState[ClientState[\"StartFailed\"] = 2] = \"StartFailed\";\r\n    ClientState[ClientState[\"Running\"] = 3] = \"Running\";\r\n    ClientState[ClientState[\"Stopping\"] = 4] = \"Stopping\";\r\n    ClientState[ClientState[\"Stopped\"] = 5] = \"Stopped\";\r\n})(ClientState || (ClientState = {}));\r\nconst SupporedSymbolKinds = [\r\n    vscode_languageserver_protocol_1.SymbolKind.File,\r\n    vscode_languageserver_protocol_1.SymbolKind.Module,\r\n    vscode_languageserver_protocol_1.SymbolKind.Namespace,\r\n    vscode_languageserver_protocol_1.SymbolKind.Package,\r\n    vscode_languageserver_protocol_1.SymbolKind.Class,\r\n    vscode_languageserver_protocol_1.SymbolKind.Method,\r\n    vscode_languageserver_protocol_1.SymbolKind.Property,\r\n    vscode_languageserver_protocol_1.SymbolKind.Field,\r\n    vscode_languageserver_protocol_1.SymbolKind.Constructor,\r\n    vscode_languageserver_protocol_1.SymbolKind.Enum,\r\n    vscode_languageserver_protocol_1.SymbolKind.Interface,\r\n    vscode_languageserver_protocol_1.SymbolKind.Function,\r\n    vscode_languageserver_protocol_1.SymbolKind.Variable,\r\n    vscode_languageserver_protocol_1.SymbolKind.Constant,\r\n    vscode_languageserver_protocol_1.SymbolKind.String,\r\n    vscode_languageserver_protocol_1.SymbolKind.Number,\r\n    vscode_languageserver_protocol_1.SymbolKind.Boolean,\r\n    vscode_languageserver_protocol_1.SymbolKind.Array,\r\n    vscode_languageserver_protocol_1.SymbolKind.Object,\r\n    vscode_languageserver_protocol_1.SymbolKind.Key,\r\n    vscode_languageserver_protocol_1.SymbolKind.Null,\r\n    vscode_languageserver_protocol_1.SymbolKind.EnumMember,\r\n    vscode_languageserver_protocol_1.SymbolKind.Struct,\r\n    vscode_languageserver_protocol_1.SymbolKind.Event,\r\n    vscode_languageserver_protocol_1.SymbolKind.Operator,\r\n    vscode_languageserver_protocol_1.SymbolKind.TypeParameter\r\n];\r\nconst SupportedCompletionItemKinds = [\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Text,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Method,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Function,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Constructor,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Field,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Variable,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Class,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Interface,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Module,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Property,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Unit,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Value,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Enum,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Keyword,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Snippet,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Color,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.File,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Reference,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Folder,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.EnumMember,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Constant,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Struct,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Event,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.Operator,\r\n    vscode_languageserver_protocol_1.CompletionItemKind.TypeParameter\r\n];\r\nfunction ensure(target, key) {\r\n    if (target[key] === void 0) {\r\n        target[key] = {};\r\n    }\r\n    return target[key];\r\n}\r\nvar DynamicFeature;\r\n(function (DynamicFeature) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && Is.func(candidate.register) && Is.func(candidate.unregister) && Is.func(candidate.dispose) && candidate.messages !== void 0;\r\n    }\r\n    DynamicFeature.is = is;\r\n})(DynamicFeature || (DynamicFeature = {}));\r\nclass DocumentNotifiactions {\r\n    constructor(_client, _event, _type, _middleware, _createParams, _selectorFilter) {\r\n        this._client = _client;\r\n        this._event = _event;\r\n        this._type = _type;\r\n        this._middleware = _middleware;\r\n        this._createParams = _createParams;\r\n        this._selectorFilter = _selectorFilter;\r\n        this._selectors = new Map();\r\n    }\r\n    static textDocumentFilter(selectors, textDocument) {\r\n        for (const selector of selectors) {\r\n            if (vscode_1.languages.match(selector, textDocument)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    register(_message, data) {\r\n        if (!data.registerOptions.documentSelector) {\r\n            return;\r\n        }\r\n        if (!this._listener) {\r\n            this._listener = this._event(this.callback, this);\r\n        }\r\n        this._selectors.set(data.id, data.registerOptions.documentSelector);\r\n    }\r\n    callback(data) {\r\n        if (!this._selectorFilter || this._selectorFilter(this._selectors.values(), data)) {\r\n            if (this._middleware) {\r\n                this._middleware(data, (data) => this._client.sendNotification(this._type, this._createParams(data)));\r\n            }\r\n            else {\r\n                this._client.sendNotification(this._type, this._createParams(data));\r\n            }\r\n            this.notificationSent(data);\r\n        }\r\n    }\r\n    notificationSent(_data) {\r\n    }\r\n    unregister(id) {\r\n        this._selectors.delete(id);\r\n        if (this._selectors.size === 0 && this._listener) {\r\n            this._listener.dispose();\r\n            this._listener = undefined;\r\n        }\r\n    }\r\n    dispose() {\r\n        this._selectors.clear();\r\n        if (this._listener) {\r\n            this._listener.dispose();\r\n            this._listener = undefined;\r\n        }\r\n    }\r\n}\r\nclass DidOpenTextDocumentFeature extends DocumentNotifiactions {\r\n    constructor(client, _syncedDocuments) {\r\n        super(client, vscode_1.workspace.onDidOpenTextDocument, vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, client.clientOptions.middleware.didOpen, (textDocument) => client.code2ProtocolConverter.asOpenTextDocumentParams(textDocument), DocumentNotifiactions.textDocumentFilter);\r\n        this._syncedDocuments = _syncedDocuments;\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        ensure(ensure(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\r\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {\r\n            this.register(this.messages, { id: UUID.generateUuid(), registerOptions: { documentSelector: documentSelector } });\r\n        }\r\n    }\r\n    register(message, data) {\r\n        super.register(message, data);\r\n        if (!data.registerOptions.documentSelector) {\r\n            return;\r\n        }\r\n        let documentSelector = data.registerOptions.documentSelector;\r\n        vscode_1.workspace.textDocuments.forEach((textDocument) => {\r\n            let uri = textDocument.uri.toString();\r\n            if (this._syncedDocuments.has(uri)) {\r\n                return;\r\n            }\r\n            if (vscode_1.languages.match(documentSelector, textDocument)) {\r\n                let middleware = this._client.clientOptions.middleware;\r\n                let didOpen = (textDocument) => {\r\n                    this._client.sendNotification(this._type, this._createParams(textDocument));\r\n                };\r\n                if (middleware.didOpen) {\r\n                    middleware.didOpen(textDocument, didOpen);\r\n                }\r\n                else {\r\n                    didOpen(textDocument);\r\n                }\r\n                this._syncedDocuments.set(uri, textDocument);\r\n            }\r\n        });\r\n    }\r\n    notificationSent(textDocument) {\r\n        super.notificationSent(textDocument);\r\n        this._syncedDocuments.set(textDocument.uri.toString(), textDocument);\r\n    }\r\n}\r\nclass DidCloseTextDocumentFeature extends DocumentNotifiactions {\r\n    constructor(client, _syncedDocuments) {\r\n        super(client, vscode_1.workspace.onDidCloseTextDocument, vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, client.clientOptions.middleware.didClose, (textDocument) => client.code2ProtocolConverter.asCloseTextDocumentParams(textDocument), DocumentNotifiactions.textDocumentFilter);\r\n        this._syncedDocuments = _syncedDocuments;\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        ensure(ensure(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\r\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {\r\n            this.register(this.messages, { id: UUID.generateUuid(), registerOptions: { documentSelector: documentSelector } });\r\n        }\r\n    }\r\n    notificationSent(textDocument) {\r\n        super.notificationSent(textDocument);\r\n        this._syncedDocuments.delete(textDocument.uri.toString());\r\n    }\r\n    unregister(id) {\r\n        let selector = this._selectors.get(id);\r\n        // The super call removed the selector from the map\r\n        // of selectors.\r\n        super.unregister(id);\r\n        let selectors = this._selectors.values();\r\n        this._syncedDocuments.forEach((textDocument) => {\r\n            if (vscode_1.languages.match(selector, textDocument) && !this._selectorFilter(selectors, textDocument)) {\r\n                let middleware = this._client.clientOptions.middleware;\r\n                let didClose = (textDocument) => {\r\n                    this._client.sendNotification(this._type, this._createParams(textDocument));\r\n                };\r\n                this._syncedDocuments.delete(textDocument.uri.toString());\r\n                if (middleware.didClose) {\r\n                    middleware.didClose(textDocument, didClose);\r\n                }\r\n                else {\r\n                    didClose(textDocument);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nclass DidChangeTextDocumentFeature {\r\n    constructor(_client) {\r\n        this._client = _client;\r\n        this._changeData = new Map();\r\n        this._forcingDelivery = false;\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        ensure(ensure(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\r\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.change !== void 0 && textDocumentSyncOptions.change !== vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\r\n            this.register(this.messages, {\r\n                id: UUID.generateUuid(),\r\n                registerOptions: Object.assign({}, { documentSelector: documentSelector }, { syncKind: textDocumentSyncOptions.change })\r\n            });\r\n        }\r\n    }\r\n    register(_message, data) {\r\n        if (!data.registerOptions.documentSelector) {\r\n            return;\r\n        }\r\n        if (!this._listener) {\r\n            this._listener = vscode_1.workspace.onDidChangeTextDocument(this.callback, this);\r\n        }\r\n        this._changeData.set(data.id, {\r\n            documentSelector: data.registerOptions.documentSelector,\r\n            syncKind: data.registerOptions.syncKind\r\n        });\r\n    }\r\n    callback(event) {\r\n        // Text document changes are send for dirty changes as well. We don't\r\n        // have dirty / undirty events in the LSP so we ignore content changes\r\n        // with length zero.\r\n        if (event.contentChanges.length === 0) {\r\n            return;\r\n        }\r\n        for (const changeData of this._changeData.values()) {\r\n            if (vscode_1.languages.match(changeData.documentSelector, event.document)) {\r\n                let middleware = this._client.clientOptions.middleware;\r\n                if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental) {\r\n                    let params = this._client.code2ProtocolConverter.asChangeTextDocumentParams(event);\r\n                    if (middleware.didChange) {\r\n                        middleware.didChange(event, () => this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params));\r\n                    }\r\n                    else {\r\n                        this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\r\n                    }\r\n                }\r\n                else if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\r\n                    let didChange = (event) => {\r\n                        if (this._changeDelayer) {\r\n                            if (this._changeDelayer.uri !== event.document.uri.toString()) {\r\n                                // Use this force delivery to track boolean state. Otherwise we might call two times.\r\n                                this.forceDelivery();\r\n                                this._changeDelayer.uri = event.document.uri.toString();\r\n                            }\r\n                            this._changeDelayer.delayer.trigger(() => {\r\n                                this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, this._client.code2ProtocolConverter.asChangeTextDocumentParams(event.document));\r\n                            });\r\n                        }\r\n                        else {\r\n                            this._changeDelayer = {\r\n                                uri: event.document.uri.toString(),\r\n                                delayer: new async_1.Delayer(200)\r\n                            };\r\n                            this._changeDelayer.delayer.trigger(() => {\r\n                                this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, this._client.code2ProtocolConverter.asChangeTextDocumentParams(event.document));\r\n                            }, -1);\r\n                        }\r\n                    };\r\n                    if (middleware.didChange) {\r\n                        middleware.didChange(event, didChange);\r\n                    }\r\n                    else {\r\n                        didChange(event);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    unregister(id) {\r\n        this._changeData.delete(id);\r\n        if (this._changeData.size === 0 && this._listener) {\r\n            this._listener.dispose();\r\n            this._listener = undefined;\r\n        }\r\n    }\r\n    dispose() {\r\n        this._changeDelayer = undefined;\r\n        this._forcingDelivery = false;\r\n        this._changeData.clear();\r\n        if (this._listener) {\r\n            this._listener.dispose();\r\n            this._listener = undefined;\r\n        }\r\n    }\r\n    forceDelivery() {\r\n        if (this._forcingDelivery || !this._changeDelayer) {\r\n            return;\r\n        }\r\n        try {\r\n            this._forcingDelivery = true;\r\n            this._changeDelayer.delayer.forceDelivery();\r\n        }\r\n        finally {\r\n            this._forcingDelivery = false;\r\n        }\r\n    }\r\n}\r\nclass WillSaveFeature extends DocumentNotifiactions {\r\n    constructor(client) {\r\n        super(client, vscode_1.workspace.onWillSaveTextDocument, vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, client.clientOptions.middleware.willSave, (willSaveEvent) => client.code2ProtocolConverter.asWillSaveTextDocumentParams(willSaveEvent), (selectors, willSaveEvent) => DocumentNotifiactions.textDocumentFilter(selectors, willSaveEvent.document));\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        let value = ensure(ensure(capabilities, 'textDocument'), 'synchronization');\r\n        value.willSave = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\r\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSave) {\r\n            this.register(this.messages, {\r\n                id: UUID.generateUuid(),\r\n                registerOptions: { documentSelector: documentSelector }\r\n            });\r\n        }\r\n    }\r\n}\r\nclass WillSaveWaitUntilFeature {\r\n    constructor(_client) {\r\n        this._client = _client;\r\n        this._selectors = new Map();\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        let value = ensure(ensure(capabilities, 'textDocument'), 'synchronization');\r\n        value.willSaveWaitUntil = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\r\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSaveWaitUntil) {\r\n            this.register(this.messages, {\r\n                id: UUID.generateUuid(),\r\n                registerOptions: { documentSelector: documentSelector }\r\n            });\r\n        }\r\n    }\r\n    register(_message, data) {\r\n        if (!data.registerOptions.documentSelector) {\r\n            return;\r\n        }\r\n        if (!this._listener) {\r\n            this._listener = vscode_1.workspace.onWillSaveTextDocument(this.callback, this);\r\n        }\r\n        this._selectors.set(data.id, data.registerOptions.documentSelector);\r\n    }\r\n    callback(event) {\r\n        if (DocumentNotifiactions.textDocumentFilter(this._selectors.values(), event.document)) {\r\n            let middleware = this._client.clientOptions.middleware;\r\n            let willSaveWaitUntil = (event) => {\r\n                return this._client.sendRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, this._client.code2ProtocolConverter.asWillSaveTextDocumentParams(event)).then((edits) => {\r\n                    let vEdits = this._client.protocol2CodeConverter.asTextEdits(edits);\r\n                    return vEdits === void 0 ? [] : vEdits;\r\n                });\r\n            };\r\n            event.waitUntil(middleware.willSaveWaitUntil\r\n                ? middleware.willSaveWaitUntil(event, willSaveWaitUntil)\r\n                : willSaveWaitUntil(event));\r\n        }\r\n    }\r\n    unregister(id) {\r\n        this._selectors.delete(id);\r\n        if (this._selectors.size === 0 && this._listener) {\r\n            this._listener.dispose();\r\n            this._listener = undefined;\r\n        }\r\n    }\r\n    dispose() {\r\n        this._selectors.clear();\r\n        if (this._listener) {\r\n            this._listener.dispose();\r\n            this._listener = undefined;\r\n        }\r\n    }\r\n}\r\nclass DidSaveTextDocumentFeature extends DocumentNotifiactions {\r\n    constructor(client) {\r\n        super(client, vscode_1.workspace.onDidSaveTextDocument, vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, client.clientOptions.middleware.didSave, (textDocument) => client.code2ProtocolConverter.asSaveTextDocumentParams(textDocument, this._includeText), DocumentNotifiactions.textDocumentFilter);\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        ensure(ensure(capabilities, 'textDocument'), 'synchronization').didSave = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\r\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.save) {\r\n            this.register(this.messages, {\r\n                id: UUID.generateUuid(),\r\n                registerOptions: Object.assign({}, { documentSelector: documentSelector }, { includeText: !!textDocumentSyncOptions.save.includeText })\r\n            });\r\n        }\r\n    }\r\n    register(method, data) {\r\n        this._includeText = !!data.registerOptions.includeText;\r\n        super.register(method, data);\r\n    }\r\n}\r\nclass FileSystemWatcherFeature {\r\n    constructor(_client, _notifyFileEvent) {\r\n        this._client = _client;\r\n        this._notifyFileEvent = _notifyFileEvent;\r\n        this._watchers = new Map();\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        ensure(ensure(capabilities, 'workspace'), 'didChangeWatchedFiles').dynamicRegistration = true;\r\n    }\r\n    initialize(_capabilities, _documentSelector) {\r\n    }\r\n    register(_method, data) {\r\n        if (!Array.isArray(data.registerOptions.watchers)) {\r\n            return;\r\n        }\r\n        let disposeables = [];\r\n        for (let watcher of data.registerOptions.watchers) {\r\n            if (!Is.string(watcher.globPattern)) {\r\n                continue;\r\n            }\r\n            let watchCreate = true, watchChange = true, watchDelete = true;\r\n            if (watcher.kind !== void 0 && watcher.kind !== null) {\r\n                watchCreate = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Create) !== 0;\r\n                watchChange = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Change) != 0;\r\n                watchDelete = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Delete) != 0;\r\n            }\r\n            let fileSystemWatcher = vscode_1.workspace.createFileSystemWatcher(watcher.globPattern, !watchCreate, !watchChange, !watchDelete);\r\n            this.hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete);\r\n            disposeables.push(fileSystemWatcher);\r\n        }\r\n        this._watchers.set(data.id, disposeables);\r\n    }\r\n    registerRaw(id, fileSystemWatchers) {\r\n        let disposeables = [];\r\n        for (let fileSystemWatcher of fileSystemWatchers) {\r\n            this.hookListeners(fileSystemWatcher, true, true, true, disposeables);\r\n        }\r\n        this._watchers.set(id, disposeables);\r\n    }\r\n    hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, listeners) {\r\n        if (watchCreate) {\r\n            fileSystemWatcher.onDidCreate((resource) => this._notifyFileEvent({\r\n                uri: this._client.code2ProtocolConverter.asUri(resource),\r\n                type: vscode_languageserver_protocol_1.FileChangeType.Created\r\n            }), null, listeners);\r\n        }\r\n        if (watchChange) {\r\n            fileSystemWatcher.onDidChange((resource) => this._notifyFileEvent({\r\n                uri: this._client.code2ProtocolConverter.asUri(resource),\r\n                type: vscode_languageserver_protocol_1.FileChangeType.Changed\r\n            }), null, listeners);\r\n        }\r\n        if (watchDelete) {\r\n            fileSystemWatcher.onDidDelete((resource) => this._notifyFileEvent({\r\n                uri: this._client.code2ProtocolConverter.asUri(resource),\r\n                type: vscode_languageserver_protocol_1.FileChangeType.Deleted\r\n            }), null, listeners);\r\n        }\r\n    }\r\n    unregister(id) {\r\n        let disposeables = this._watchers.get(id);\r\n        if (disposeables) {\r\n            for (let disposable of disposeables) {\r\n                disposable.dispose();\r\n            }\r\n        }\r\n    }\r\n    dispose() {\r\n        this._watchers.forEach((disposeables) => {\r\n            for (let disposable of disposeables) {\r\n                disposable.dispose();\r\n            }\r\n        });\r\n        this._watchers.clear();\r\n    }\r\n}\r\nclass TextDocumentFeature {\r\n    constructor(_client, _message) {\r\n        this._client = _client;\r\n        this._message = _message;\r\n        this._providers = new Map();\r\n    }\r\n    get messages() {\r\n        return this._message;\r\n    }\r\n    register(message, data) {\r\n        if (message.method !== this.messages.method) {\r\n            throw new Error(`Register called on wrong feature. Requested ${message.method} but reached feature ${this.messages.method}`);\r\n        }\r\n        if (!data.registerOptions.documentSelector) {\r\n            return;\r\n        }\r\n        let provider = this.registerLanguageProvider(data.registerOptions);\r\n        if (provider) {\r\n            this._providers.set(data.id, provider);\r\n        }\r\n    }\r\n    unregister(id) {\r\n        let provider = this._providers.get(id);\r\n        if (provider) {\r\n            provider.dispose();\r\n        }\r\n    }\r\n    dispose() {\r\n        this._providers.forEach((value) => {\r\n            value.dispose();\r\n        });\r\n        this._providers.clear();\r\n    }\r\n}\r\nexports.TextDocumentFeature = TextDocumentFeature;\r\nclass WorkspaceFeature {\r\n    constructor(_client, _message) {\r\n        this._client = _client;\r\n        this._message = _message;\r\n        this._providers = new Map();\r\n    }\r\n    get messages() {\r\n        return this._message;\r\n    }\r\n    register(message, data) {\r\n        if (message.method !== this.messages.method) {\r\n            throw new Error(`Register called on wron feature. Requested ${message.method} but reached feature ${this.messages.method}`);\r\n        }\r\n        let provider = this.registerLanguageProvider(data.registerOptions);\r\n        if (provider) {\r\n            this._providers.set(data.id, provider);\r\n        }\r\n    }\r\n    unregister(id) {\r\n        let provider = this._providers.get(id);\r\n        if (provider) {\r\n            provider.dispose();\r\n        }\r\n    }\r\n    dispose() {\r\n        this._providers.forEach((value) => {\r\n            value.dispose();\r\n        });\r\n        this._providers.clear();\r\n    }\r\n}\r\nclass CompletionItemFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.CompletionRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        let completion = ensure(ensure(capabilites, 'textDocument'), 'completion');\r\n        completion.dynamicRegistration = true;\r\n        completion.contextSupport = true;\r\n        completion.completionItem = {\r\n            snippetSupport: true,\r\n            commitCharactersSupport: true,\r\n            documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText],\r\n            deprecatedSupport: true,\r\n            preselectSupport: true\r\n        };\r\n        completion.completionItemKind = { valueSet: SupportedCompletionItemKinds };\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.completionProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector }, capabilities.completionProvider)\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let triggerCharacters = options.triggerCharacters || [];\r\n        let client = this._client;\r\n        let provideCompletionItems = (document, position, context, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.CompletionRequest.type, client.code2ProtocolConverter.asCompletionParams(document, position, context), token).then(client.protocol2CodeConverter.asCompletionResult, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.CompletionRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let resolveCompletionItem = (item, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, client.code2ProtocolConverter.asCompletionItem(item), token).then(client.protocol2CodeConverter.asCompletionItem, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, error);\r\n                return Promise.resolve(item);\r\n            });\r\n        };\r\n        let middleware = this._client.clientOptions.middleware;\r\n        return vscode_1.languages.registerCompletionItemProvider(options.documentSelector, {\r\n            provideCompletionItems: (document, position, token, context) => {\r\n                return middleware.provideCompletionItem\r\n                    ? middleware.provideCompletionItem(document, position, context, token, provideCompletionItems)\r\n                    : provideCompletionItems(document, position, context, token);\r\n            },\r\n            resolveCompletionItem: options.resolveProvider\r\n                ? (item, token) => {\r\n                    return middleware.resolveCompletionItem\r\n                        ? middleware.resolveCompletionItem(item, token, resolveCompletionItem)\r\n                        : resolveCompletionItem(item, token);\r\n                }\r\n                : undefined\r\n        }, ...triggerCharacters);\r\n    }\r\n}\r\nclass HoverFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.HoverRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        const hoverCapability = (ensure(ensure(capabilites, 'textDocument'), 'hover'));\r\n        hoverCapability.dynamicRegistration = true;\r\n        hoverCapability.contentFormat = [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText];\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.hoverProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideHover = (document, position, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(client.protocol2CodeConverter.asHover, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.HoverRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerHoverProvider(options.documentSelector, {\r\n            provideHover: (document, position, token) => {\r\n                return middleware.provideHover\r\n                    ? middleware.provideHover(document, position, token, provideHover)\r\n                    : provideHover(document, position, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass SignatureHelpFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.SignatureHelpRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        let config = ensure(ensure(capabilites, 'textDocument'), 'signatureHelp');\r\n        config.dynamicRegistration = true;\r\n        config.signatureInformation = { documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText] };\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.signatureHelpProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector }, capabilities.signatureHelpProvider)\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let providerSignatureHelp = (document, position, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(client.protocol2CodeConverter.asSignatureHelp, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        let triggerCharacters = options.triggerCharacters || [];\r\n        return vscode_1.languages.registerSignatureHelpProvider(options.documentSelector, {\r\n            provideSignatureHelp: (document, position, token) => {\r\n                return middleware.provideSignatureHelp\r\n                    ? middleware.provideSignatureHelp(document, position, token, providerSignatureHelp)\r\n                    : providerSignatureHelp(document, position, token);\r\n            }\r\n        }, ...triggerCharacters);\r\n    }\r\n}\r\nclass DefinitionFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DefinitionRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'definition').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.definitionProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideDefinition = (document, position, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(client.protocol2CodeConverter.asDefinitionResult, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerDefinitionProvider(options.documentSelector, {\r\n            provideDefinition: (document, position, token) => {\r\n                return middleware.provideDefinition\r\n                    ? middleware.provideDefinition(document, position, token, provideDefinition)\r\n                    : provideDefinition(document, position, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass ReferencesFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.ReferencesRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'references').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.referencesProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let providerReferences = (document, position, options, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, client.code2ProtocolConverter.asReferenceParams(document, position, options), token).then(client.protocol2CodeConverter.asReferences, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerReferenceProvider(options.documentSelector, {\r\n            provideReferences: (document, position, options, token) => {\r\n                return middleware.provideReferences\r\n                    ? middleware.provideReferences(document, position, options, token, providerReferences)\r\n                    : providerReferences(document, position, options, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass DocumentHighlightFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DocumentHighlightRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'documentHighlight').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.documentHighlightProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideDocumentHighlights = (document, position, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(client.protocol2CodeConverter.asDocumentHighlights, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerDocumentHighlightProvider(options.documentSelector, {\r\n            provideDocumentHighlights: (document, position, token) => {\r\n                return middleware.provideDocumentHighlights\r\n                    ? middleware.provideDocumentHighlights(document, position, token, provideDocumentHighlights)\r\n                    : provideDocumentHighlights(document, position, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass DocumentSymbolFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DocumentSymbolRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        let symbolCapabilities = ensure(ensure(capabilites, 'textDocument'), 'documentSymbol');\r\n        symbolCapabilities.dynamicRegistration = true;\r\n        symbolCapabilities.symbolKind = {\r\n            valueSet: SupporedSymbolKinds\r\n        };\r\n        symbolCapabilities.hierarchicalDocumentSymbolSupport = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.documentSymbolProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideDocumentSymbols = (document, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, client.code2ProtocolConverter.asDocumentSymbolParams(document), token).then((data) => {\r\n                if (data === null) {\r\n                    return undefined;\r\n                }\r\n                if (data.length === 0) {\r\n                    return [];\r\n                }\r\n                else {\r\n                    let element = data[0];\r\n                    if (vscode_languageserver_protocol_1.DocumentSymbol.is(element)) {\r\n                        return client.protocol2CodeConverter.asDocumentSymbols(data);\r\n                    }\r\n                    else {\r\n                        return client.protocol2CodeConverter.asSymbolInformations(data);\r\n                    }\r\n                }\r\n            }, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerDocumentSymbolProvider(options.documentSelector, {\r\n            provideDocumentSymbols: (document, token) => {\r\n                return middleware.provideDocumentSymbols\r\n                    ? middleware.provideDocumentSymbols(document, token, provideDocumentSymbols)\r\n                    : provideDocumentSymbols(document, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass WorkspaceSymbolFeature extends WorkspaceFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        let symbolCapabilities = ensure(ensure(capabilites, 'workspace'), 'symbol');\r\n        symbolCapabilities.dynamicRegistration = true;\r\n        symbolCapabilities.symbolKind = {\r\n            valueSet: SupporedSymbolKinds\r\n        };\r\n    }\r\n    initialize(capabilities) {\r\n        if (!capabilities.workspaceSymbolProvider) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: undefined\r\n        });\r\n    }\r\n    registerLanguageProvider(_options) {\r\n        let client = this._client;\r\n        let provideWorkspaceSymbols = (query, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, { query }, token).then(client.protocol2CodeConverter.asSymbolInformations, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerWorkspaceSymbolProvider({\r\n            provideWorkspaceSymbols: (query, token) => {\r\n                return middleware.provideWorkspaceSymbols\r\n                    ? middleware.provideWorkspaceSymbols(query, token, provideWorkspaceSymbols)\r\n                    : provideWorkspaceSymbols(query, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass CodeActionFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.CodeActionRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        const cap = ensure(ensure(capabilites, 'textDocument'), 'codeAction');\r\n        cap.dynamicRegistration = true;\r\n        cap.codeActionLiteralSupport = {\r\n            codeActionKind: {\r\n                valueSet: [\r\n                    '',\r\n                    vscode_languageserver_protocol_1.CodeActionKind.QuickFix,\r\n                    vscode_languageserver_protocol_1.CodeActionKind.Refactor,\r\n                    vscode_languageserver_protocol_1.CodeActionKind.RefactorExtract,\r\n                    vscode_languageserver_protocol_1.CodeActionKind.RefactorInline,\r\n                    vscode_languageserver_protocol_1.CodeActionKind.RefactorRewrite,\r\n                    vscode_languageserver_protocol_1.CodeActionKind.Source,\r\n                    vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports\r\n                ]\r\n            }\r\n        };\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.codeActionProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        let codeActionKinds = undefined;\r\n        if (!Is.boolean(capabilities.codeActionProvider)) {\r\n            codeActionKinds = capabilities.codeActionProvider.codeActionKinds;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: { documentSelector: documentSelector, codeActionKinds }\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideCodeActions = (document, range, context, token) => {\r\n            let params = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\r\n                range: client.code2ProtocolConverter.asRange(range),\r\n                context: client.code2ProtocolConverter.asCodeActionContext(context)\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, params, token).then((values) => {\r\n                if (values === null) {\r\n                    return undefined;\r\n                }\r\n                let result = [];\r\n                for (let item of values) {\r\n                    if (vscode_languageserver_protocol_1.Command.is(item)) {\r\n                        result.push(client.protocol2CodeConverter.asCommand(item));\r\n                    }\r\n                    else {\r\n                        result.push(client.protocol2CodeConverter.asCodeAction(item));\r\n                    }\r\n                    ;\r\n                }\r\n                return result;\r\n            }, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerCodeActionsProvider(options.documentSelector, {\r\n            provideCodeActions: (document, range, context, token) => {\r\n                return middleware.provideCodeActions\r\n                    ? middleware.provideCodeActions(document, range, context, token, provideCodeActions)\r\n                    : provideCodeActions(document, range, context, token);\r\n            }\r\n        }, options.codeActionKinds\r\n            ? { providedCodeActionKinds: client.protocol2CodeConverter.asCodeActionKinds(options.codeActionKinds) }\r\n            : undefined);\r\n    }\r\n}\r\nclass CodeLensFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.CodeLensRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'codeLens').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.codeLensProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector }, capabilities.codeLensProvider)\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideCodeLenses = (document, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, client.code2ProtocolConverter.asCodeLensParams(document), token).then(client.protocol2CodeConverter.asCodeLenses, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let resolveCodeLens = (codeLens, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, client.code2ProtocolConverter.asCodeLens(codeLens), token).then(client.protocol2CodeConverter.asCodeLens, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, error);\r\n                return codeLens;\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerCodeLensProvider(options.documentSelector, {\r\n            provideCodeLenses: (document, token) => {\r\n                return middleware.provideCodeLenses\r\n                    ? middleware.provideCodeLenses(document, token, provideCodeLenses)\r\n                    : provideCodeLenses(document, token);\r\n            },\r\n            resolveCodeLens: (options.resolveProvider)\r\n                ? (codeLens, token) => {\r\n                    return middleware.resolveCodeLens\r\n                        ? middleware.resolveCodeLens(codeLens, token, resolveCodeLens)\r\n                        : resolveCodeLens(codeLens, token);\r\n                }\r\n                : undefined\r\n        });\r\n    }\r\n}\r\nclass DocumentFormattingFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DocumentFormattingRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'formatting').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.documentFormattingProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideDocumentFormattingEdits = (document, options, token) => {\r\n            let params = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\r\n                options: client.code2ProtocolConverter.asFormattingOptions(options)\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, params, token).then(client.protocol2CodeConverter.asTextEdits, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerDocumentFormattingEditProvider(options.documentSelector, {\r\n            provideDocumentFormattingEdits: (document, options, token) => {\r\n                return middleware.provideDocumentFormattingEdits\r\n                    ? middleware.provideDocumentFormattingEdits(document, options, token, provideDocumentFormattingEdits)\r\n                    : provideDocumentFormattingEdits(document, options, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass DocumentRangeFormattingFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'rangeFormatting').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.documentRangeFormattingProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideDocumentRangeFormattingEdits = (document, range, options, token) => {\r\n            let params = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\r\n                range: client.code2ProtocolConverter.asRange(range),\r\n                options: client.code2ProtocolConverter.asFormattingOptions(options)\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, params, token).then(client.protocol2CodeConverter.asTextEdits, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerDocumentRangeFormattingEditProvider(options.documentSelector, {\r\n            provideDocumentRangeFormattingEdits: (document, range, options, token) => {\r\n                return middleware.provideDocumentRangeFormattingEdits\r\n                    ? middleware.provideDocumentRangeFormattingEdits(document, range, options, token, provideDocumentRangeFormattingEdits)\r\n                    : provideDocumentRangeFormattingEdits(document, range, options, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass DocumentOnTypeFormattingFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'onTypeFormatting').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.documentOnTypeFormattingProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector }, capabilities.documentOnTypeFormattingProvider)\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let moreTriggerCharacter = options.moreTriggerCharacter || [];\r\n        let provideOnTypeFormattingEdits = (document, position, ch, options, token) => {\r\n            let params = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\r\n                position: client.code2ProtocolConverter.asPosition(position),\r\n                ch: ch,\r\n                options: client.code2ProtocolConverter.asFormattingOptions(options)\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, params, token).then(client.protocol2CodeConverter.asTextEdits, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, error);\r\n                return Promise.resolve([]);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerOnTypeFormattingEditProvider(options.documentSelector, {\r\n            provideOnTypeFormattingEdits: (document, position, ch, options, token) => {\r\n                return middleware.provideOnTypeFormattingEdits\r\n                    ? middleware.provideOnTypeFormattingEdits(document, position, ch, options, token, provideOnTypeFormattingEdits)\r\n                    : provideOnTypeFormattingEdits(document, position, ch, options, token);\r\n            }\r\n        }, options.firstTriggerCharacter, ...moreTriggerCharacter);\r\n    }\r\n}\r\nclass RenameFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.RenameRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        let rename = ensure(ensure(capabilites, 'textDocument'), 'rename');\r\n        rename.dynamicRegistration = true;\r\n        rename.prepareSupport = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.renameProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        let options = Object.assign({}, { documentSelector: documentSelector });\r\n        if (Is.boolean(capabilities.renameProvider)) {\r\n            options.prepareProvider = false;\r\n        }\r\n        else {\r\n            options.prepareProvider = capabilities.renameProvider.prepareProvider;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: options\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideRenameEdits = (document, position, newName, token) => {\r\n            let params = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\r\n                position: client.code2ProtocolConverter.asPosition(position),\r\n                newName: newName\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.RenameRequest.type, params, token).then(client.protocol2CodeConverter.asWorkspaceEdit, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.RenameRequest.type, error);\r\n                return Promise.reject(new Error(error.message));\r\n            });\r\n        };\r\n        let prepareRename = (document, position, token) => {\r\n            let params = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\r\n                position: client.code2ProtocolConverter.asPosition(position),\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, params, token).then((result) => {\r\n                if (vscode_languageserver_protocol_1.Range.is(result)) {\r\n                    return client.protocol2CodeConverter.asRange(result);\r\n                }\r\n                else if (result && result.range) {\r\n                    return {\r\n                        range: client.protocol2CodeConverter.asRange(result.range),\r\n                        placeholder: result.placeholder\r\n                    };\r\n                }\r\n                return null;\r\n            }, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, error);\r\n                return Promise.reject(new Error(error.message));\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerRenameProvider(options.documentSelector, {\r\n            provideRenameEdits: (document, position, newName, token) => {\r\n                return middleware.provideRenameEdits\r\n                    ? middleware.provideRenameEdits(document, position, newName, token, provideRenameEdits)\r\n                    : provideRenameEdits(document, position, newName, token);\r\n            },\r\n            prepareRename: options.prepareProvider\r\n                ? (document, position, token) => {\r\n                    return middleware.prepareRename\r\n                        ? middleware.prepareRename(document, position, token, prepareRename)\r\n                        : prepareRename(document, position, token);\r\n                }\r\n                : undefined\r\n        });\r\n    }\r\n}\r\nclass DocumentLinkFeature extends TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DocumentLinkRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'documentLink').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.documentLinkProvider || !documentSelector) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, { documentSelector: documentSelector }, capabilities.documentLinkProvider)\r\n        });\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideDocumentLinks = (document, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, client.code2ProtocolConverter.asDocumentLinkParams(document), token).then(client.protocol2CodeConverter.asDocumentLinks, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, error);\r\n                Promise.resolve(new Error(error.message));\r\n            });\r\n        };\r\n        let resolveDocumentLink = (link, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, client.code2ProtocolConverter.asDocumentLink(link), token).then(client.protocol2CodeConverter.asDocumentLink, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, error);\r\n                Promise.resolve(new Error(error.message));\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerDocumentLinkProvider(options.documentSelector, {\r\n            provideDocumentLinks: (document, token) => {\r\n                return middleware.provideDocumentLinks\r\n                    ? middleware.provideDocumentLinks(document, token, provideDocumentLinks)\r\n                    : provideDocumentLinks(document, token);\r\n            },\r\n            resolveDocumentLink: options.resolveProvider\r\n                ? (link, token) => {\r\n                    return middleware.resolveDocumentLink\r\n                        ? middleware.resolveDocumentLink(link, token, resolveDocumentLink)\r\n                        : resolveDocumentLink(link, token);\r\n                }\r\n                : undefined\r\n        });\r\n    }\r\n}\r\nclass ConfigurationFeature {\r\n    constructor(_client) {\r\n        this._client = _client;\r\n        this._listeners = new Map();\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        ensure(ensure(capabilities, 'workspace'), 'didChangeConfiguration').dynamicRegistration = true;\r\n    }\r\n    initialize() {\r\n        let section = this._client.clientOptions.synchronize.configurationSection;\r\n        if (section !== void 0) {\r\n            this.register(this.messages, {\r\n                id: UUID.generateUuid(),\r\n                registerOptions: {\r\n                    section: section\r\n                }\r\n            });\r\n        }\r\n    }\r\n    register(_message, data) {\r\n        let disposable = vscode_1.workspace.onDidChangeConfiguration((event) => {\r\n            this.onDidChangeConfiguration(data.registerOptions.section, event);\r\n        });\r\n        this._listeners.set(data.id, disposable);\r\n        if (data.registerOptions.section !== void 0) {\r\n            this.onDidChangeConfiguration(data.registerOptions.section, undefined);\r\n        }\r\n    }\r\n    unregister(id) {\r\n        let disposable = this._listeners.get(id);\r\n        if (disposable) {\r\n            this._listeners.delete(id);\r\n            disposable.dispose();\r\n        }\r\n    }\r\n    dispose() {\r\n        for (let disposable of this._listeners.values()) {\r\n            disposable.dispose();\r\n        }\r\n        this._listeners.clear();\r\n    }\r\n    onDidChangeConfiguration(configurationSection, event) {\r\n        let sections;\r\n        if (Is.string(configurationSection)) {\r\n            sections = [configurationSection];\r\n        }\r\n        else {\r\n            sections = configurationSection;\r\n        }\r\n        if (sections !== void 0 && event !== void 0) {\r\n            let affected = sections.some((section) => event.affectsConfiguration(section));\r\n            if (!affected) {\r\n                return;\r\n            }\r\n        }\r\n        let didChangeConfiguration = (sections) => {\r\n            if (sections === void 0) {\r\n                this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, { settings: null });\r\n                return;\r\n            }\r\n            this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, { settings: this.extractSettingsInformation(sections) });\r\n        };\r\n        let middleware = this.getMiddleware();\r\n        middleware\r\n            ? middleware(sections, didChangeConfiguration)\r\n            : didChangeConfiguration(sections);\r\n    }\r\n    extractSettingsInformation(keys) {\r\n        function ensurePath(config, path) {\r\n            let current = config;\r\n            for (let i = 0; i < path.length - 1; i++) {\r\n                let obj = current[path[i]];\r\n                if (!obj) {\r\n                    obj = Object.create(null);\r\n                    current[path[i]] = obj;\r\n                }\r\n                current = obj;\r\n            }\r\n            return current;\r\n        }\r\n        let resource = this._client.clientOptions.workspaceFolder\r\n            ? this._client.clientOptions.workspaceFolder.uri\r\n            : undefined;\r\n        let result = Object.create(null);\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let key = keys[i];\r\n            let index = key.indexOf('.');\r\n            let config = null;\r\n            if (index >= 0) {\r\n                config = vscode_1.workspace.getConfiguration(key.substr(0, index), resource).get(key.substr(index + 1));\r\n            }\r\n            else {\r\n                config = vscode_1.workspace.getConfiguration(key, resource);\r\n            }\r\n            if (config) {\r\n                let path = keys[i].split('.');\r\n                ensurePath(result, path)[path[path.length - 1]] = config;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    getMiddleware() {\r\n        let middleware = this._client.clientOptions.middleware;\r\n        if (middleware.workspace && middleware.workspace.didChangeConfiguration) {\r\n            return middleware.workspace.didChangeConfiguration;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\nclass ExecuteCommandFeature {\r\n    constructor(_client) {\r\n        this._client = _client;\r\n        this._commands = new Map();\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.ExecuteCommandRequest.type;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        ensure(ensure(capabilities, 'workspace'), 'executeCommand').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities) {\r\n        if (!capabilities.executeCommandProvider) {\r\n            return;\r\n        }\r\n        this.register(this.messages, {\r\n            id: UUID.generateUuid(),\r\n            registerOptions: Object.assign({}, capabilities.executeCommandProvider)\r\n        });\r\n    }\r\n    register(_message, data) {\r\n        let client = this._client;\r\n        if (data.registerOptions.commands) {\r\n            let disposeables = [];\r\n            for (const command of data.registerOptions.commands) {\r\n                disposeables.push(vscode_1.commands.registerCommand(command, (...args) => {\r\n                    let params = {\r\n                        command,\r\n                        arguments: args\r\n                    };\r\n                    return client.sendRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, params).then(undefined, (error) => {\r\n                        client.logFailedRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, error);\r\n                    });\r\n                }));\r\n            }\r\n            this._commands.set(data.id, disposeables);\r\n        }\r\n    }\r\n    unregister(id) {\r\n        let disposeables = this._commands.get(id);\r\n        if (disposeables) {\r\n            disposeables.forEach(disposable => disposable.dispose());\r\n        }\r\n    }\r\n    dispose() {\r\n        this._commands.forEach((value) => {\r\n            value.forEach(disposable => disposable.dispose());\r\n        });\r\n        this._commands.clear();\r\n    }\r\n}\r\nvar MessageTransports;\r\n(function (MessageTransports) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && vscode_languageserver_protocol_1.MessageReader.is(value.reader) && vscode_languageserver_protocol_1.MessageWriter.is(value.writer);\r\n    }\r\n    MessageTransports.is = is;\r\n})(MessageTransports = exports.MessageTransports || (exports.MessageTransports = {}));\r\nclass OnReady {\r\n    constructor(_resolve, _reject) {\r\n        this._resolve = _resolve;\r\n        this._reject = _reject;\r\n        this._used = false;\r\n    }\r\n    get isUsed() {\r\n        return this._used;\r\n    }\r\n    resolve() {\r\n        this._used = true;\r\n        this._resolve();\r\n    }\r\n    reject(error) {\r\n        this._used = true;\r\n        this._reject(error);\r\n    }\r\n}\r\nclass BaseLanguageClient {\r\n    constructor(id, name, clientOptions) {\r\n        this._traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;\r\n        this._features = [];\r\n        this._method2Message = new Map();\r\n        this._dynamicFeatures = new Map();\r\n        this._id = id;\r\n        this._name = name;\r\n        clientOptions = clientOptions || {};\r\n        this._clientOptions = {\r\n            documentSelector: clientOptions.documentSelector || [],\r\n            synchronize: clientOptions.synchronize || {},\r\n            diagnosticCollectionName: clientOptions.diagnosticCollectionName,\r\n            outputChannelName: clientOptions.outputChannelName || this._name,\r\n            revealOutputChannelOn: clientOptions.revealOutputChannelOn || RevealOutputChannelOn.Error,\r\n            stdioEncoding: clientOptions.stdioEncoding || 'utf8',\r\n            initializationOptions: clientOptions.initializationOptions,\r\n            initializationFailedHandler: clientOptions.initializationFailedHandler,\r\n            errorHandler: clientOptions.errorHandler || new DefaultErrorHandler(this._name),\r\n            middleware: clientOptions.middleware || {},\r\n            uriConverters: clientOptions.uriConverters,\r\n            workspaceFolder: clientOptions.workspaceFolder\r\n        };\r\n        this._clientOptions.synchronize = this._clientOptions.synchronize || {};\r\n        this.state = ClientState.Initial;\r\n        this._connectionPromise = undefined;\r\n        this._resolvedConnection = undefined;\r\n        this._initializeResult = undefined;\r\n        if (clientOptions.outputChannel) {\r\n            this._outputChannel = clientOptions.outputChannel;\r\n            this._disposeOutputChannel = false;\r\n        }\r\n        else {\r\n            this._outputChannel = undefined;\r\n            this._disposeOutputChannel = true;\r\n        }\r\n        this._listeners = undefined;\r\n        this._providers = undefined;\r\n        this._diagnostics = undefined;\r\n        this._fileEvents = [];\r\n        this._fileEventDelayer = new async_1.Delayer(250);\r\n        this._onReady = new Promise((resolve, reject) => {\r\n            this._onReadyCallbacks = new OnReady(resolve, reject);\r\n        });\r\n        this._onStop = undefined;\r\n        this._telemetryEmitter = new vscode_languageserver_protocol_1.Emitter();\r\n        this._stateChangeEmitter = new vscode_languageserver_protocol_1.Emitter();\r\n        this._tracer = {\r\n            log: (messageOrDataObject, data) => {\r\n                if (Is.string(messageOrDataObject)) {\r\n                    this.logTrace(messageOrDataObject, data);\r\n                }\r\n                else {\r\n                    this.logObjectTrace(messageOrDataObject);\r\n                }\r\n            },\r\n        };\r\n        this._c2p = c2p.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.code2Protocol : undefined);\r\n        this._p2c = p2c.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.protocol2Code : undefined);\r\n        this._syncedDocuments = new Map();\r\n        this.registerBuiltinFeatures();\r\n    }\r\n    get state() {\r\n        return this._state;\r\n    }\r\n    set state(value) {\r\n        let oldState = this.getPublicState();\r\n        this._state = value;\r\n        let newState = this.getPublicState();\r\n        if (newState !== oldState) {\r\n            this._stateChangeEmitter.fire({ oldState, newState });\r\n        }\r\n    }\r\n    getPublicState() {\r\n        if (this.state === ClientState.Running) {\r\n            return State.Running;\r\n        }\r\n        else if (this.state === ClientState.Starting) {\r\n            return State.Starting;\r\n        }\r\n        else {\r\n            return State.Stopped;\r\n        }\r\n    }\r\n    get initializeResult() {\r\n        return this._initializeResult;\r\n    }\r\n    sendRequest(type, ...params) {\r\n        if (!this.isConnectionActive()) {\r\n            throw new Error('Language client is not ready yet');\r\n        }\r\n        this.forceDocumentSync();\r\n        try {\r\n            return this._resolvedConnection.sendRequest(type, ...params);\r\n        }\r\n        catch (error) {\r\n            this.error(`Sending request ${Is.string(type) ? type : type.method} failed.`, error);\r\n            throw error;\r\n        }\r\n    }\r\n    onRequest(type, handler) {\r\n        if (!this.isConnectionActive()) {\r\n            throw new Error('Language client is not ready yet');\r\n        }\r\n        try {\r\n            this._resolvedConnection.onRequest(type, handler);\r\n        }\r\n        catch (error) {\r\n            this.error(`Registering request handler ${Is.string(type) ? type : type.method} failed.`, error);\r\n            throw error;\r\n        }\r\n    }\r\n    sendNotification(type, params) {\r\n        if (!this.isConnectionActive()) {\r\n            throw new Error('Language client is not ready yet');\r\n        }\r\n        this.forceDocumentSync();\r\n        try {\r\n            this._resolvedConnection.sendNotification(type, params);\r\n        }\r\n        catch (error) {\r\n            this.error(`Sending notification ${Is.string(type) ? type : type.method} failed.`, error);\r\n            throw error;\r\n        }\r\n    }\r\n    onNotification(type, handler) {\r\n        if (!this.isConnectionActive()) {\r\n            throw new Error('Language client is not ready yet');\r\n        }\r\n        try {\r\n            this._resolvedConnection.onNotification(type, handler);\r\n        }\r\n        catch (error) {\r\n            this.error(`Registering notification handler ${Is.string(type) ? type : type.method} failed.`, error);\r\n            throw error;\r\n        }\r\n    }\r\n    get clientOptions() {\r\n        return this._clientOptions;\r\n    }\r\n    get protocol2CodeConverter() {\r\n        return this._p2c;\r\n    }\r\n    get code2ProtocolConverter() {\r\n        return this._c2p;\r\n    }\r\n    get onTelemetry() {\r\n        return this._telemetryEmitter.event;\r\n    }\r\n    get onDidChangeState() {\r\n        return this._stateChangeEmitter.event;\r\n    }\r\n    get outputChannel() {\r\n        if (!this._outputChannel) {\r\n            this._outputChannel = vscode_1.window.createOutputChannel(this._clientOptions.outputChannelName ? this._clientOptions.outputChannelName : this._name);\r\n        }\r\n        return this._outputChannel;\r\n    }\r\n    get diagnostics() {\r\n        return this._diagnostics;\r\n    }\r\n    createDefaultErrorHandler() {\r\n        return new DefaultErrorHandler(this._name);\r\n    }\r\n    set trace(value) {\r\n        this._trace = value;\r\n        this.onReady().then(() => {\r\n            this.resolveConnection().then((connection) => {\r\n                connection.trace(this._trace, this._tracer, {\r\n                    sendNotification: false,\r\n                    traceFormat: this._traceFormat\r\n                });\r\n            });\r\n        }, () => {\r\n        });\r\n    }\r\n    data2String(data) {\r\n        if (data instanceof vscode_languageserver_protocol_1.ResponseError) {\r\n            const responseError = data;\r\n            return `  Message: ${responseError.message}\\n  Code: ${responseError.code} ${responseError.data ? '\\n' + responseError.data.toString() : ''}`;\r\n        }\r\n        if (data instanceof Error) {\r\n            if (Is.string(data.stack)) {\r\n                return data.stack;\r\n            }\r\n            return data.message;\r\n        }\r\n        if (Is.string(data)) {\r\n            return data;\r\n        }\r\n        return data.toString();\r\n    }\r\n    info(message, data) {\r\n        this.outputChannel.appendLine(`[Info  - ${(new Date().toLocaleTimeString())}] ${message}`);\r\n        if (data) {\r\n            this.outputChannel.appendLine(this.data2String(data));\r\n        }\r\n        if (this._clientOptions.revealOutputChannelOn <= RevealOutputChannelOn.Info) {\r\n            this.outputChannel.show(true);\r\n        }\r\n    }\r\n    warn(message, data) {\r\n        this.outputChannel.appendLine(`[Warn  - ${(new Date().toLocaleTimeString())}] ${message}`);\r\n        if (data) {\r\n            this.outputChannel.appendLine(this.data2String(data));\r\n        }\r\n        if (this._clientOptions.revealOutputChannelOn <= RevealOutputChannelOn.Warn) {\r\n            this.outputChannel.show(true);\r\n        }\r\n    }\r\n    error(message, data) {\r\n        this.outputChannel.appendLine(`[Error - ${(new Date().toLocaleTimeString())}] ${message}`);\r\n        if (data) {\r\n            this.outputChannel.appendLine(this.data2String(data));\r\n        }\r\n        if (this._clientOptions.revealOutputChannelOn <= RevealOutputChannelOn.Error) {\r\n            this.outputChannel.show(true);\r\n        }\r\n    }\r\n    logTrace(message, data) {\r\n        this.outputChannel.appendLine(`[Trace - ${(new Date().toLocaleTimeString())}] ${message}`);\r\n        if (data) {\r\n            this.outputChannel.appendLine(this.data2String(data));\r\n        }\r\n    }\r\n    logObjectTrace(data) {\r\n        if (data.isLSPMessage && data.type) {\r\n            this.outputChannel.append(`[LSP   - ${(new Date().toLocaleTimeString())}] `);\r\n        }\r\n        else {\r\n            this.outputChannel.append(`[Trace - ${(new Date().toLocaleTimeString())}] `);\r\n        }\r\n        if (data) {\r\n            this.outputChannel.appendLine(`${JSON.stringify(data)}`);\r\n        }\r\n    }\r\n    needsStart() {\r\n        return this.state === ClientState.Initial || this.state === ClientState.Stopping || this.state === ClientState.Stopped;\r\n    }\r\n    needsStop() {\r\n        return this.state === ClientState.Starting || this.state === ClientState.Running;\r\n    }\r\n    onReady() {\r\n        return this._onReady;\r\n    }\r\n    isConnectionActive() {\r\n        return this.state === ClientState.Running && !!this._resolvedConnection;\r\n    }\r\n    start() {\r\n        if (this._onReadyCallbacks.isUsed) {\r\n            this._onReady = new Promise((resolve, reject) => {\r\n                this._onReadyCallbacks = new OnReady(resolve, reject);\r\n            });\r\n        }\r\n        this._listeners = [];\r\n        this._providers = [];\r\n        // If we restart then the diagnostics collection is reused.\r\n        if (!this._diagnostics) {\r\n            this._diagnostics = this._clientOptions.diagnosticCollectionName\r\n                ? vscode_1.languages.createDiagnosticCollection(this._clientOptions.diagnosticCollectionName)\r\n                : vscode_1.languages.createDiagnosticCollection();\r\n        }\r\n        this.state = ClientState.Starting;\r\n        this.resolveConnection().then((connection) => {\r\n            connection.onLogMessage((message) => {\r\n                switch (message.type) {\r\n                    case vscode_languageserver_protocol_1.MessageType.Error:\r\n                        this.error(message.message);\r\n                        break;\r\n                    case vscode_languageserver_protocol_1.MessageType.Warning:\r\n                        this.warn(message.message);\r\n                        break;\r\n                    case vscode_languageserver_protocol_1.MessageType.Info:\r\n                        this.info(message.message);\r\n                        break;\r\n                    default:\r\n                        this.outputChannel.appendLine(message.message);\r\n                }\r\n            });\r\n            connection.onShowMessage((message) => {\r\n                switch (message.type) {\r\n                    case vscode_languageserver_protocol_1.MessageType.Error:\r\n                        vscode_1.window.showErrorMessage(message.message);\r\n                        break;\r\n                    case vscode_languageserver_protocol_1.MessageType.Warning:\r\n                        vscode_1.window.showWarningMessage(message.message);\r\n                        break;\r\n                    case vscode_languageserver_protocol_1.MessageType.Info:\r\n                        vscode_1.window.showInformationMessage(message.message);\r\n                        break;\r\n                    default:\r\n                        vscode_1.window.showInformationMessage(message.message);\r\n                }\r\n            });\r\n            connection.onRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, (params) => {\r\n                let messageFunc;\r\n                switch (params.type) {\r\n                    case vscode_languageserver_protocol_1.MessageType.Error:\r\n                        messageFunc = vscode_1.window.showErrorMessage;\r\n                        break;\r\n                    case vscode_languageserver_protocol_1.MessageType.Warning:\r\n                        messageFunc = vscode_1.window.showWarningMessage;\r\n                        break;\r\n                    case vscode_languageserver_protocol_1.MessageType.Info:\r\n                        messageFunc = vscode_1.window.showInformationMessage;\r\n                        break;\r\n                    default:\r\n                        messageFunc = vscode_1.window.showInformationMessage;\r\n                }\r\n                let actions = params.actions || [];\r\n                return messageFunc(params.message, ...actions);\r\n            });\r\n            connection.onTelemetry((data) => {\r\n                this._telemetryEmitter.fire(data);\r\n            });\r\n            connection.listen();\r\n            // Error is handled in the intialize call.\r\n            return this.initialize(connection);\r\n        }).then(undefined, (error) => {\r\n            this.state = ClientState.StartFailed;\r\n            this._onReadyCallbacks.reject(error);\r\n            this.error('Starting client failed', error);\r\n            vscode_1.window.showErrorMessage(`Couldn't start client ${this._name}`);\r\n        });\r\n        return new vscode_1.Disposable(() => {\r\n            if (this.needsStop()) {\r\n                this.stop();\r\n            }\r\n        });\r\n    }\r\n    resolveConnection() {\r\n        if (!this._connectionPromise) {\r\n            this._connectionPromise = this.createConnection();\r\n        }\r\n        return this._connectionPromise;\r\n    }\r\n    initialize(connection) {\r\n        this.refreshTrace(connection, false);\r\n        let initOption = this._clientOptions.initializationOptions;\r\n        let rootPath = this._clientOptions.workspaceFolder\r\n            ? this._clientOptions.workspaceFolder.uri.fsPath\r\n            : this._clientGetRootPath();\r\n        let initParams = {\r\n            processId: process.pid,\r\n            rootPath: rootPath ? rootPath : null,\r\n            rootUri: rootPath ? this._c2p.asUri(vscode_1.Uri.file(rootPath)) : null,\r\n            capabilities: this.computeClientCapabilities(),\r\n            initializationOptions: Is.func(initOption) ? initOption() : initOption,\r\n            trace: vscode_languageserver_protocol_1.Trace.toString(this._trace),\r\n            workspaceFolders: null\r\n        };\r\n        this.fillInitializeParams(initParams);\r\n        return connection.initialize(initParams).then((result) => {\r\n            this._resolvedConnection = connection;\r\n            this._initializeResult = result;\r\n            this.state = ClientState.Running;\r\n            let textDocumentSyncOptions = undefined;\r\n            if (Is.number(result.capabilities.textDocumentSync)) {\r\n                if (result.capabilities.textDocumentSync === vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\r\n                    textDocumentSyncOptions = {\r\n                        openClose: false,\r\n                        change: vscode_languageserver_protocol_1.TextDocumentSyncKind.None,\r\n                        save: undefined\r\n                    };\r\n                }\r\n                else {\r\n                    textDocumentSyncOptions = {\r\n                        openClose: true,\r\n                        change: result.capabilities.textDocumentSync,\r\n                        save: {\r\n                            includeText: false\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            else if (result.capabilities.textDocumentSync !== void 0 && result.capabilities.textDocumentSync !== null) {\r\n                textDocumentSyncOptions = result.capabilities.textDocumentSync;\r\n            }\r\n            this._capabilities = Object.assign({}, result.capabilities, { resolvedTextDocumentSync: textDocumentSyncOptions });\r\n            connection.onDiagnostics(params => this.handleDiagnostics(params));\r\n            connection.onRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params => this.handleRegistrationRequest(params));\r\n            // See https://github.com/Microsoft/vscode-languageserver-node/issues/199\r\n            connection.onRequest('client/registerFeature', params => this.handleRegistrationRequest(params));\r\n            connection.onRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params => this.handleUnregistrationRequest(params));\r\n            // See https://github.com/Microsoft/vscode-languageserver-node/issues/199\r\n            connection.onRequest('client/unregisterFeature', params => this.handleUnregistrationRequest(params));\r\n            connection.onRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params => this.handleApplyWorkspaceEdit(params));\r\n            connection.sendNotification(vscode_languageserver_protocol_1.InitializedNotification.type, {});\r\n            this.hookFileEvents(connection);\r\n            this.hookConfigurationChanged(connection);\r\n            this.initializeFeatures(connection);\r\n            this._onReadyCallbacks.resolve();\r\n            return result;\r\n        }).then(undefined, (error) => {\r\n            if (this._clientOptions.initializationFailedHandler) {\r\n                if (this._clientOptions.initializationFailedHandler(error)) {\r\n                    this.initialize(connection);\r\n                }\r\n                else {\r\n                    this.stop();\r\n                    this._onReadyCallbacks.reject(error);\r\n                }\r\n            }\r\n            else if (error instanceof vscode_languageserver_protocol_1.ResponseError && error.data && error.data.retry) {\r\n                vscode_1.window.showErrorMessage(error.message, { title: 'Retry', id: \"retry\" }).then(item => {\r\n                    if (item && item.id === 'retry') {\r\n                        this.initialize(connection);\r\n                    }\r\n                    else {\r\n                        this.stop();\r\n                        this._onReadyCallbacks.reject(error);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                if (error && error.message) {\r\n                    vscode_1.window.showErrorMessage(error.message);\r\n                }\r\n                this.error('Server initialization failed.', error);\r\n                this.stop();\r\n                this._onReadyCallbacks.reject(error);\r\n            }\r\n        });\r\n    }\r\n    _clientGetRootPath() {\r\n        let folders = vscode_1.workspace.workspaceFolders;\r\n        if (!folders || folders.length === 0) {\r\n            return undefined;\r\n        }\r\n        let folder = folders[0];\r\n        if (folder.uri.scheme === 'file') {\r\n            return folder.uri.fsPath;\r\n        }\r\n        return undefined;\r\n    }\r\n    stop() {\r\n        this._initializeResult = undefined;\r\n        if (!this._connectionPromise) {\r\n            this.state = ClientState.Stopped;\r\n            return Promise.resolve();\r\n        }\r\n        if (this.state === ClientState.Stopping && this._onStop) {\r\n            return this._onStop;\r\n        }\r\n        this.state = ClientState.Stopping;\r\n        this.cleanUp();\r\n        // unkook listeners\r\n        return this._onStop = this.resolveConnection().then(connection => {\r\n            return connection.shutdown().then(() => {\r\n                connection.exit();\r\n                connection.dispose();\r\n                this.state = ClientState.Stopped;\r\n                this._onStop = undefined;\r\n                this._connectionPromise = undefined;\r\n                this._resolvedConnection = undefined;\r\n            });\r\n        });\r\n    }\r\n    cleanUp(channel = true, diagnostics = true) {\r\n        if (this._listeners) {\r\n            this._listeners.forEach(listener => listener.dispose());\r\n            this._listeners = undefined;\r\n        }\r\n        if (this._providers) {\r\n            this._providers.forEach(provider => provider.dispose());\r\n            this._providers = undefined;\r\n        }\r\n        if (this._syncedDocuments) {\r\n            this._syncedDocuments.clear();\r\n        }\r\n        for (let handler of this._dynamicFeatures.values()) {\r\n            handler.dispose();\r\n        }\r\n        if (channel && this._outputChannel && this._disposeOutputChannel) {\r\n            this._outputChannel.dispose();\r\n            this._outputChannel = undefined;\r\n        }\r\n        if (diagnostics && this._diagnostics) {\r\n            this._diagnostics.dispose();\r\n            this._diagnostics = undefined;\r\n        }\r\n    }\r\n    notifyFileEvent(event) {\r\n        this._fileEvents.push(event);\r\n        this._fileEventDelayer.trigger(() => {\r\n            this.onReady().then(() => {\r\n                this.resolveConnection().then(connection => {\r\n                    if (this.isConnectionActive()) {\r\n                        connection.didChangeWatchedFiles({ changes: this._fileEvents });\r\n                    }\r\n                    this._fileEvents = [];\r\n                });\r\n            }, (error) => {\r\n                this.error(`Notify file events failed.`, error);\r\n            });\r\n        });\r\n    }\r\n    forceDocumentSync() {\r\n        this._dynamicFeatures.get(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type.method).forceDelivery();\r\n    }\r\n    handleDiagnostics(params) {\r\n        if (!this._diagnostics) {\r\n            return;\r\n        }\r\n        let uri = this._p2c.asUri(params.uri);\r\n        let diagnostics = this._p2c.asDiagnostics(params.diagnostics);\r\n        let middleware = this.clientOptions.middleware.handleDiagnostics;\r\n        if (middleware) {\r\n            middleware(uri, diagnostics, (uri, diagnostics) => this.setDiagnostics(uri, diagnostics));\r\n        }\r\n        else {\r\n            this.setDiagnostics(uri, diagnostics);\r\n        }\r\n    }\r\n    setDiagnostics(uri, diagnostics) {\r\n        if (!this._diagnostics) {\r\n            return;\r\n        }\r\n        this._diagnostics.set(uri, diagnostics);\r\n    }\r\n    createConnection() {\r\n        let errorHandler = (error, message, count) => {\r\n            this.handleConnectionError(error, message, count);\r\n        };\r\n        let closeHandler = () => {\r\n            this.handleConnectionClosed();\r\n        };\r\n        return this.createMessageTransports(this._clientOptions.stdioEncoding || 'utf8').then((transports) => {\r\n            return createConnection(transports.reader, transports.writer, errorHandler, closeHandler);\r\n        });\r\n    }\r\n    handleConnectionClosed() {\r\n        // Check whether this is a normal shutdown in progress or the client stopped normally.\r\n        if (this.state === ClientState.Stopping || this.state === ClientState.Stopped) {\r\n            return;\r\n        }\r\n        try {\r\n            if (this._resolvedConnection) {\r\n                this._resolvedConnection.dispose();\r\n            }\r\n        }\r\n        catch (error) {\r\n            // Disposing a connection could fail if error cases.\r\n        }\r\n        let action = CloseAction.DoNotRestart;\r\n        try {\r\n            action = this._clientOptions.errorHandler.closed();\r\n        }\r\n        catch (error) {\r\n            // Ignore errors coming from the error handler.\r\n        }\r\n        this._connectionPromise = undefined;\r\n        this._resolvedConnection = undefined;\r\n        if (action === CloseAction.DoNotRestart) {\r\n            this.error('Connection to server got closed. Server will not be restarted.');\r\n            this.state = ClientState.Stopped;\r\n            this.cleanUp(false, true);\r\n        }\r\n        else if (action === CloseAction.Restart) {\r\n            this.info('Connection to server got closed. Server will restart.');\r\n            this.cleanUp(false, false);\r\n            this.state = ClientState.Initial;\r\n            this.start();\r\n        }\r\n    }\r\n    handleConnectionError(error, message, count) {\r\n        let action = this._clientOptions.errorHandler.error(error, message, count);\r\n        if (action === ErrorAction.Shutdown) {\r\n            this.error('Connection to server is erroring. Shutting down server.');\r\n            this.stop();\r\n        }\r\n    }\r\n    hookConfigurationChanged(connection) {\r\n        vscode_1.workspace.onDidChangeConfiguration(() => {\r\n            this.refreshTrace(connection, true);\r\n        });\r\n    }\r\n    refreshTrace(connection, sendNotification = false) {\r\n        let config = vscode_1.workspace.getConfiguration(this._id);\r\n        let trace = vscode_languageserver_protocol_1.Trace.Off;\r\n        let traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;\r\n        if (config) {\r\n            const traceConfig = config.get('trace.server', 'off');\r\n            if (typeof traceConfig === 'string') {\r\n                trace = vscode_languageserver_protocol_1.Trace.fromString(traceConfig);\r\n            }\r\n            else {\r\n                trace = vscode_languageserver_protocol_1.Trace.fromString(config.get('trace.server.verbosity', 'off'));\r\n                traceFormat = vscode_languageserver_protocol_1.TraceFormat.fromString(config.get('trace.server.format', 'text'));\r\n            }\r\n        }\r\n        this._trace = trace;\r\n        this._traceFormat = traceFormat;\r\n        connection.trace(this._trace, this._tracer, {\r\n            sendNotification,\r\n            traceFormat: this._traceFormat\r\n        });\r\n    }\r\n    hookFileEvents(_connection) {\r\n        let fileEvents = this._clientOptions.synchronize.fileEvents;\r\n        if (!fileEvents) {\r\n            return;\r\n        }\r\n        let watchers;\r\n        if (Is.array(fileEvents)) {\r\n            watchers = fileEvents;\r\n        }\r\n        else {\r\n            watchers = [fileEvents];\r\n        }\r\n        if (!watchers) {\r\n            return;\r\n        }\r\n        this._dynamicFeatures.get(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type.method).registerRaw(UUID.generateUuid(), watchers);\r\n    }\r\n    registerFeatures(features) {\r\n        for (let feature of features) {\r\n            this.registerFeature(feature);\r\n        }\r\n    }\r\n    registerFeature(feature) {\r\n        this._features.push(feature);\r\n        if (DynamicFeature.is(feature)) {\r\n            let messages = feature.messages;\r\n            if (Array.isArray(messages)) {\r\n                for (let message of messages) {\r\n                    this._method2Message.set(message.method, message);\r\n                    this._dynamicFeatures.set(message.method, feature);\r\n                }\r\n            }\r\n            else {\r\n                this._method2Message.set(messages.method, messages);\r\n                this._dynamicFeatures.set(messages.method, feature);\r\n            }\r\n        }\r\n    }\r\n    registerBuiltinFeatures() {\r\n        this.registerFeature(new ConfigurationFeature(this));\r\n        this.registerFeature(new DidOpenTextDocumentFeature(this, this._syncedDocuments));\r\n        this.registerFeature(new DidChangeTextDocumentFeature(this));\r\n        this.registerFeature(new WillSaveFeature(this));\r\n        this.registerFeature(new WillSaveWaitUntilFeature(this));\r\n        this.registerFeature(new DidSaveTextDocumentFeature(this));\r\n        this.registerFeature(new DidCloseTextDocumentFeature(this, this._syncedDocuments));\r\n        this.registerFeature(new FileSystemWatcherFeature(this, (event) => this.notifyFileEvent(event)));\r\n        this.registerFeature(new CompletionItemFeature(this));\r\n        this.registerFeature(new HoverFeature(this));\r\n        this.registerFeature(new SignatureHelpFeature(this));\r\n        this.registerFeature(new DefinitionFeature(this));\r\n        this.registerFeature(new ReferencesFeature(this));\r\n        this.registerFeature(new DocumentHighlightFeature(this));\r\n        this.registerFeature(new DocumentSymbolFeature(this));\r\n        this.registerFeature(new WorkspaceSymbolFeature(this));\r\n        this.registerFeature(new CodeActionFeature(this));\r\n        this.registerFeature(new CodeLensFeature(this));\r\n        this.registerFeature(new DocumentFormattingFeature(this));\r\n        this.registerFeature(new DocumentRangeFormattingFeature(this));\r\n        this.registerFeature(new DocumentOnTypeFormattingFeature(this));\r\n        this.registerFeature(new RenameFeature(this));\r\n        this.registerFeature(new DocumentLinkFeature(this));\r\n        this.registerFeature(new ExecuteCommandFeature(this));\r\n    }\r\n    fillInitializeParams(params) {\r\n        for (let feature of this._features) {\r\n            if (Is.func(feature.fillInitializeParams)) {\r\n                feature.fillInitializeParams(params);\r\n            }\r\n        }\r\n    }\r\n    computeClientCapabilities() {\r\n        let result = {};\r\n        ensure(result, 'workspace').applyEdit = true;\r\n        let workspaceEdit = ensure(ensure(result, 'workspace'), 'workspaceEdit');\r\n        workspaceEdit.documentChanges = true;\r\n        workspaceEdit.resourceOperations = [vscode_languageserver_protocol_1.ResourceOperationKind.Create, vscode_languageserver_protocol_1.ResourceOperationKind.Rename, vscode_languageserver_protocol_1.ResourceOperationKind.Delete];\r\n        workspaceEdit.failureHandling = vscode_languageserver_protocol_1.FailureHandlingKind.TextOnlyTransactional;\r\n        ensure(ensure(result, 'textDocument'), 'publishDiagnostics').relatedInformation = true;\r\n        for (let feature of this._features) {\r\n            feature.fillClientCapabilities(result);\r\n        }\r\n        return result;\r\n    }\r\n    initializeFeatures(_connection) {\r\n        let documentSelector = this._clientOptions.documentSelector;\r\n        for (let feature of this._features) {\r\n            feature.initialize(this._capabilities, documentSelector);\r\n        }\r\n    }\r\n    handleRegistrationRequest(params) {\r\n        return new Promise((resolve, reject) => {\r\n            for (let registration of params.registrations) {\r\n                const feature = this._dynamicFeatures.get(registration.method);\r\n                if (!feature) {\r\n                    reject(new Error(`No feature implementation for ${registration.method} found. Registration failed.`));\r\n                    return;\r\n                }\r\n                const options = registration.registerOptions || {};\r\n                options.documentSelector = options.documentSelector || this._clientOptions.documentSelector;\r\n                const data = {\r\n                    id: registration.id,\r\n                    registerOptions: options\r\n                };\r\n                feature.register(this._method2Message.get(registration.method), data);\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n    handleUnregistrationRequest(params) {\r\n        return new Promise((resolve, reject) => {\r\n            for (let unregistration of params.unregisterations) {\r\n                const feature = this._dynamicFeatures.get(unregistration.method);\r\n                if (!feature) {\r\n                    reject(new Error(`No feature implementation for ${unregistration.method} found. Unregistration failed.`));\r\n                    return;\r\n                }\r\n                feature.unregister(unregistration.id);\r\n            }\r\n            ;\r\n            resolve();\r\n        });\r\n    }\r\n    handleApplyWorkspaceEdit(params) {\r\n        // This is some sort of workaround since the version check should be done by VS Code in the Workspace.applyEdit.\r\n        // However doing it here adds some safety since the server can lag more behind then an extension.\r\n        let workspaceEdit = params.edit;\r\n        let openTextDocuments = new Map();\r\n        vscode_1.workspace.textDocuments.forEach((document) => openTextDocuments.set(document.uri.toString(), document));\r\n        let versionMismatch = false;\r\n        if (workspaceEdit.documentChanges) {\r\n            for (const change of workspaceEdit.documentChanges) {\r\n                if (vscode_languageserver_protocol_1.TextDocumentEdit.is(change) && change.textDocument.version && change.textDocument.version >= 0) {\r\n                    let textDocument = openTextDocuments.get(change.textDocument.uri);\r\n                    if (textDocument && textDocument.version !== change.textDocument.version) {\r\n                        versionMismatch = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (versionMismatch) {\r\n            return Promise.resolve({ applied: false });\r\n        }\r\n        return vscode_1.workspace.applyEdit(this._p2c.asWorkspaceEdit(params.edit)).then((value) => { return { applied: value }; });\r\n    }\r\n    ;\r\n    logFailedRequest(type, error) {\r\n        // If we get a request cancel don't log anything.\r\n        if (error instanceof vscode_languageserver_protocol_1.ResponseError && error.code === vscode_languageserver_protocol_1.ErrorCodes.RequestCancelled) {\r\n            return;\r\n        }\r\n        this.error(`Request ${type.method} failed.`, error);\r\n    }\r\n}\r\nexports.BaseLanguageClient = BaseLanguageClient;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/client.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/codeConverter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/codeConverter.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst code = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst proto = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst protocolCompletionItem_1 = __webpack_require__(/*! ./protocolCompletionItem */ \"./node_modules/vscode-languageclient/lib/protocolCompletionItem.js\");\r\nconst protocolCodeLens_1 = __webpack_require__(/*! ./protocolCodeLens */ \"./node_modules/vscode-languageclient/lib/protocolCodeLens.js\");\r\nconst protocolDocumentLink_1 = __webpack_require__(/*! ./protocolDocumentLink */ \"./node_modules/vscode-languageclient/lib/protocolDocumentLink.js\");\r\nfunction createConverter(uriConverter) {\r\n    const nullConverter = (value) => value.toString();\r\n    const _uriConverter = uriConverter || nullConverter;\r\n    function asUri(value) {\r\n        return _uriConverter(value);\r\n    }\r\n    function asTextDocumentIdentifier(textDocument) {\r\n        return {\r\n            uri: _uriConverter(textDocument.uri)\r\n        };\r\n    }\r\n    function asVersionedTextDocumentIdentifier(textDocument) {\r\n        return {\r\n            uri: _uriConverter(textDocument.uri),\r\n            version: textDocument.version\r\n        };\r\n    }\r\n    function asOpenTextDocumentParams(textDocument) {\r\n        return {\r\n            textDocument: {\r\n                uri: _uriConverter(textDocument.uri),\r\n                languageId: textDocument.languageId,\r\n                version: textDocument.version,\r\n                text: textDocument.getText()\r\n            }\r\n        };\r\n    }\r\n    function isTextDocumentChangeEvent(value) {\r\n        let candidate = value;\r\n        return !!candidate.document && !!candidate.contentChanges;\r\n    }\r\n    function isTextDocument(value) {\r\n        let candidate = value;\r\n        return !!candidate.uri && !!candidate.version;\r\n    }\r\n    function asChangeTextDocumentParams(arg) {\r\n        if (isTextDocument(arg)) {\r\n            let result = {\r\n                textDocument: {\r\n                    uri: _uriConverter(arg.uri),\r\n                    version: arg.version\r\n                },\r\n                contentChanges: [{ text: arg.getText() }]\r\n            };\r\n            return result;\r\n        }\r\n        else if (isTextDocumentChangeEvent(arg)) {\r\n            let document = arg.document;\r\n            let result = {\r\n                textDocument: {\r\n                    uri: _uriConverter(document.uri),\r\n                    version: document.version\r\n                },\r\n                contentChanges: arg.contentChanges.map((change) => {\r\n                    let range = change.range;\r\n                    return {\r\n                        range: {\r\n                            start: { line: range.start.line, character: range.start.character },\r\n                            end: { line: range.end.line, character: range.end.character }\r\n                        },\r\n                        rangeLength: change.rangeLength,\r\n                        text: change.text\r\n                    };\r\n                })\r\n            };\r\n            return result;\r\n        }\r\n        else {\r\n            throw Error('Unsupported text document change parameter');\r\n        }\r\n    }\r\n    function asCloseTextDocumentParams(textDocument) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(textDocument)\r\n        };\r\n    }\r\n    function asSaveTextDocumentParams(textDocument, includeContent = false) {\r\n        let result = {\r\n            textDocument: asVersionedTextDocumentIdentifier(textDocument)\r\n        };\r\n        if (includeContent) {\r\n            result.text = textDocument.getText();\r\n        }\r\n        return result;\r\n    }\r\n    function asTextDocumentSaveReason(reason) {\r\n        switch (reason) {\r\n            case code.TextDocumentSaveReason.Manual:\r\n                return proto.TextDocumentSaveReason.Manual;\r\n            case code.TextDocumentSaveReason.AfterDelay:\r\n                return proto.TextDocumentSaveReason.AfterDelay;\r\n            case code.TextDocumentSaveReason.FocusOut:\r\n                return proto.TextDocumentSaveReason.FocusOut;\r\n        }\r\n        return proto.TextDocumentSaveReason.Manual;\r\n    }\r\n    function asWillSaveTextDocumentParams(event) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(event.document),\r\n            reason: asTextDocumentSaveReason(event.reason)\r\n        };\r\n    }\r\n    function asTextDocumentPositionParams(textDocument, position) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(textDocument),\r\n            position: asWorkerPosition(position)\r\n        };\r\n    }\r\n    function asTriggerKind(triggerKind) {\r\n        switch (triggerKind) {\r\n            case code.CompletionTriggerKind.TriggerCharacter:\r\n                return proto.CompletionTriggerKind.TriggerCharacter;\r\n            case code.CompletionTriggerKind.TriggerForIncompleteCompletions:\r\n                return proto.CompletionTriggerKind.TriggerForIncompleteCompletions;\r\n            default:\r\n                return proto.CompletionTriggerKind.Invoked;\r\n        }\r\n    }\r\n    function asCompletionParams(textDocument, position, context) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(textDocument),\r\n            position: asWorkerPosition(position),\r\n            context: {\r\n                triggerKind: asTriggerKind(context.triggerKind),\r\n                triggerCharacter: context.triggerCharacter\r\n            }\r\n        };\r\n    }\r\n    function asWorkerPosition(position) {\r\n        return { line: position.line, character: position.character };\r\n    }\r\n    function asPosition(value) {\r\n        if (value === void 0) {\r\n            return undefined;\r\n        }\r\n        else if (value === null) {\r\n            return null;\r\n        }\r\n        return { line: value.line, character: value.character };\r\n    }\r\n    function asRange(value) {\r\n        if (value === void 0 || value === null) {\r\n            return value;\r\n        }\r\n        return { start: asPosition(value.start), end: asPosition(value.end) };\r\n    }\r\n    function asDiagnosticSeverity(value) {\r\n        switch (value) {\r\n            case code.DiagnosticSeverity.Error:\r\n                return proto.DiagnosticSeverity.Error;\r\n            case code.DiagnosticSeverity.Warning:\r\n                return proto.DiagnosticSeverity.Warning;\r\n            case code.DiagnosticSeverity.Information:\r\n                return proto.DiagnosticSeverity.Information;\r\n            case code.DiagnosticSeverity.Hint:\r\n                return proto.DiagnosticSeverity.Hint;\r\n        }\r\n    }\r\n    function asDiagnostic(item) {\r\n        let result = proto.Diagnostic.create(asRange(item.range), item.message);\r\n        if (Is.number(item.severity)) {\r\n            result.severity = asDiagnosticSeverity(item.severity);\r\n        }\r\n        if (Is.number(item.code) || Is.string(item.code)) {\r\n            result.code = item.code;\r\n        }\r\n        if (item.source) {\r\n            result.source = item.source;\r\n        }\r\n        return result;\r\n    }\r\n    function asDiagnostics(items) {\r\n        if (items === void 0 || items === null) {\r\n            return items;\r\n        }\r\n        return items.map(asDiagnostic);\r\n    }\r\n    function asDocumentation(format, documentation) {\r\n        switch (format) {\r\n            case '$string':\r\n                return documentation;\r\n            case proto.MarkupKind.PlainText:\r\n                return { kind: format, value: documentation };\r\n            case proto.MarkupKind.Markdown:\r\n                return { kind: format, value: documentation.value };\r\n            default:\r\n                return `Unsupported Markup content received. Kind is: ${format}`;\r\n        }\r\n    }\r\n    function asCompletionItemKind(value, original) {\r\n        if (original !== void 0) {\r\n            return original;\r\n        }\r\n        return value + 1;\r\n    }\r\n    function asCompletionItem(item) {\r\n        let result = { label: item.label };\r\n        let protocolItem = item instanceof protocolCompletionItem_1.default ? item : undefined;\r\n        if (item.detail) {\r\n            result.detail = item.detail;\r\n        }\r\n        // We only send items back we created. So this can't be something else than\r\n        // a string right now.\r\n        if (item.documentation) {\r\n            if (!protocolItem || protocolItem.documentationFormat === '$string') {\r\n                result.documentation = item.documentation;\r\n            }\r\n            else {\r\n                result.documentation = asDocumentation(protocolItem.documentationFormat, item.documentation);\r\n            }\r\n        }\r\n        if (item.filterText) {\r\n            result.filterText = item.filterText;\r\n        }\r\n        fillPrimaryInsertText(result, item);\r\n        if (Is.number(item.kind)) {\r\n            result.kind = asCompletionItemKind(item.kind, protocolItem && protocolItem.originalItemKind);\r\n        }\r\n        if (item.sortText) {\r\n            result.sortText = item.sortText;\r\n        }\r\n        if (item.additionalTextEdits) {\r\n            result.additionalTextEdits = asTextEdits(item.additionalTextEdits);\r\n        }\r\n        if (item.commitCharacters) {\r\n            result.commitCharacters = item.commitCharacters.slice();\r\n        }\r\n        if (item.command) {\r\n            result.command = asCommand(item.command);\r\n        }\r\n        if (item.preselect === true || item.preselect === false) {\r\n            result.preselect = item.preselect;\r\n        }\r\n        if (protocolItem) {\r\n            if (protocolItem.data !== void 0) {\r\n                result.data = protocolItem.data;\r\n            }\r\n            if (protocolItem.deprecated === true || protocolItem.deprecated === false) {\r\n                result.deprecated = protocolItem.deprecated;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function fillPrimaryInsertText(target, source) {\r\n        let format = proto.InsertTextFormat.PlainText;\r\n        let text;\r\n        let range = undefined;\r\n        if (source.textEdit) {\r\n            text = source.textEdit.newText;\r\n            range = asRange(source.textEdit.range);\r\n        }\r\n        else if (source.insertText instanceof code.SnippetString) {\r\n            format = proto.InsertTextFormat.Snippet;\r\n            text = source.insertText.value;\r\n        }\r\n        else {\r\n            text = source.insertText;\r\n        }\r\n        if (source.range) {\r\n            range = asRange(source.range);\r\n        }\r\n        target.insertTextFormat = format;\r\n        if (source.fromEdit && text && range) {\r\n            target.textEdit = { newText: text, range: range };\r\n        }\r\n        else {\r\n            target.insertText = text;\r\n        }\r\n    }\r\n    function asTextEdit(edit) {\r\n        return { range: asRange(edit.range), newText: edit.newText };\r\n    }\r\n    function asTextEdits(edits) {\r\n        if (edits === void 0 || edits === null) {\r\n            return edits;\r\n        }\r\n        return edits.map(asTextEdit);\r\n    }\r\n    function asReferenceParams(textDocument, position, options) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(textDocument),\r\n            position: asWorkerPosition(position),\r\n            context: { includeDeclaration: options.includeDeclaration }\r\n        };\r\n    }\r\n    function asCodeActionContext(context) {\r\n        if (context === void 0 || context === null) {\r\n            return context;\r\n        }\r\n        return proto.CodeActionContext.create(asDiagnostics(context.diagnostics), Is.string(context.only) ? [context.only] : undefined);\r\n    }\r\n    function asCommand(item) {\r\n        let result = proto.Command.create(item.title, item.command);\r\n        if (item.arguments) {\r\n            result.arguments = item.arguments;\r\n        }\r\n        return result;\r\n    }\r\n    function asCodeLens(item) {\r\n        let result = proto.CodeLens.create(asRange(item.range));\r\n        if (item.command) {\r\n            result.command = asCommand(item.command);\r\n        }\r\n        if (item instanceof protocolCodeLens_1.default) {\r\n            if (item.data) {\r\n                result.data = item.data;\r\n            }\r\n            ;\r\n        }\r\n        return result;\r\n    }\r\n    function asFormattingOptions(item) {\r\n        return { tabSize: item.tabSize, insertSpaces: item.insertSpaces };\r\n    }\r\n    function asDocumentSymbolParams(textDocument) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(textDocument)\r\n        };\r\n    }\r\n    function asCodeLensParams(textDocument) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(textDocument)\r\n        };\r\n    }\r\n    function asDocumentLink(item) {\r\n        let result = proto.DocumentLink.create(asRange(item.range));\r\n        if (item.target) {\r\n            result.target = asUri(item.target);\r\n        }\r\n        let protocolItem = item instanceof protocolDocumentLink_1.default ? item : undefined;\r\n        if (protocolItem && protocolItem.data) {\r\n            result.data = protocolItem.data;\r\n        }\r\n        return result;\r\n    }\r\n    function asDocumentLinkParams(textDocument) {\r\n        return {\r\n            textDocument: asTextDocumentIdentifier(textDocument)\r\n        };\r\n    }\r\n    return {\r\n        asUri,\r\n        asTextDocumentIdentifier,\r\n        asOpenTextDocumentParams,\r\n        asChangeTextDocumentParams,\r\n        asCloseTextDocumentParams,\r\n        asSaveTextDocumentParams,\r\n        asWillSaveTextDocumentParams,\r\n        asTextDocumentPositionParams,\r\n        asCompletionParams,\r\n        asWorkerPosition,\r\n        asRange,\r\n        asPosition,\r\n        asDiagnosticSeverity,\r\n        asDiagnostic,\r\n        asDiagnostics,\r\n        asCompletionItem,\r\n        asTextEdit,\r\n        asReferenceParams,\r\n        asCodeActionContext,\r\n        asCommand,\r\n        asCodeLens,\r\n        asFormattingOptions,\r\n        asDocumentSymbolParams,\r\n        asCodeLensParams,\r\n        asDocumentLink,\r\n        asDocumentLinkParams\r\n    };\r\n}\r\nexports.createConverter = createConverter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/codeConverter.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/colorProvider.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/colorProvider.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UUID = __webpack_require__(/*! ./utils/uuid */ \"./node_modules/vscode-languageclient/lib/utils/uuid.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst client_1 = __webpack_require__(/*! ./client */ \"./node_modules/vscode-languageclient/lib/client.js\");\r\nfunction ensure(target, key) {\r\n    if (target[key] === void 0) {\r\n        target[key] = {};\r\n    }\r\n    return target[key];\r\n}\r\nclass ColorProviderFeature extends client_1.TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.DocumentColorRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'colorProvider').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.colorProvider) {\r\n            return;\r\n        }\r\n        const implCapabilities = capabilities.colorProvider;\r\n        const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabilities.id : UUID.generateUuid();\r\n        const selector = implCapabilities.documentSelector || documentSelector;\r\n        if (selector) {\r\n            this.register(this.messages, {\r\n                id,\r\n                registerOptions: Object.assign({}, { documentSelector: selector })\r\n            });\r\n        }\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideColorPresentations = (color, context, token) => {\r\n            const requestParams = {\r\n                color,\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(context.document),\r\n                range: client.code2ProtocolConverter.asRange(context.range)\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, requestParams, token).then(this.asColorPresentations.bind(this), (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let provideDocumentColors = (document, token) => {\r\n            const requestParams = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, requestParams, token).then(this.asColorInformations.bind(this), (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerColorProvider(options.documentSelector, {\r\n            provideColorPresentations: (color, context, token) => {\r\n                return middleware.provideColorPresentations\r\n                    ? middleware.provideColorPresentations(color, context, token, provideColorPresentations)\r\n                    : provideColorPresentations(color, context, token);\r\n            },\r\n            provideDocumentColors: (document, token) => {\r\n                return middleware.provideDocumentColors\r\n                    ? middleware.provideDocumentColors(document, token, provideDocumentColors)\r\n                    : provideDocumentColors(document, token);\r\n            }\r\n        });\r\n    }\r\n    asColor(color) {\r\n        return new vscode_1.Color(color.red, color.green, color.blue, color.alpha);\r\n    }\r\n    asColorInformations(colorInformation) {\r\n        if (Array.isArray(colorInformation)) {\r\n            return colorInformation.map(ci => {\r\n                return new vscode_1.ColorInformation(this._client.protocol2CodeConverter.asRange(ci.range), this.asColor(ci.color));\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n    asColorPresentations(colorPresentations) {\r\n        if (Array.isArray(colorPresentations)) {\r\n            return colorPresentations.map(cp => {\r\n                let presentation = new vscode_1.ColorPresentation(cp.label);\r\n                presentation.additionalTextEdits = this._client.protocol2CodeConverter.asTextEdits(cp.additionalTextEdits);\r\n                presentation.textEdit = this._client.protocol2CodeConverter.asTextEdit(cp.textEdit);\r\n                return presentation;\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n}\r\nexports.ColorProviderFeature = ColorProviderFeature;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9jb2xvclByb3ZpZGVyLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VjbGllbnQvbGliL2NvbG9yUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgVVVJRCA9IHJlcXVpcmUoXCIuL3V0aWxzL3V1aWRcIik7XHJcbmNvbnN0IElzID0gcmVxdWlyZShcIi4vdXRpbHMvaXNcIik7XHJcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY29uc3QgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEgPSByZXF1aXJlKFwidnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sXCIpO1xyXG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2NsaWVudFwiKTtcclxuZnVuY3Rpb24gZW5zdXJlKHRhcmdldCwga2V5KSB7XHJcbiAgICBpZiAodGFyZ2V0W2tleV0gPT09IHZvaWQgMCkge1xyXG4gICAgICAgIHRhcmdldFtrZXldID0ge307XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0W2tleV07XHJcbn1cclxuY2xhc3MgQ29sb3JQcm92aWRlckZlYXR1cmUgZXh0ZW5kcyBjbGllbnRfMS5UZXh0RG9jdW1lbnRGZWF0dXJlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNsaWVudCkge1xyXG4gICAgICAgIHN1cGVyKGNsaWVudCwgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuRG9jdW1lbnRDb2xvclJlcXVlc3QudHlwZSk7XHJcbiAgICB9XHJcbiAgICBmaWxsQ2xpZW50Q2FwYWJpbGl0aWVzKGNhcGFiaWxpdGVzKSB7XHJcbiAgICAgICAgZW5zdXJlKGVuc3VyZShjYXBhYmlsaXRlcywgJ3RleHREb2N1bWVudCcpLCAnY29sb3JQcm92aWRlcicpLmR5bmFtaWNSZWdpc3RyYXRpb24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZShjYXBhYmlsaXRpZXMsIGRvY3VtZW50U2VsZWN0b3IpIHtcclxuICAgICAgICBpZiAoIWNhcGFiaWxpdGllcy5jb2xvclByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW1wbENhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcy5jb2xvclByb3ZpZGVyO1xyXG4gICAgICAgIGNvbnN0IGlkID0gSXMuc3RyaW5nKGltcGxDYXBhYmlsaXRpZXMuaWQpICYmIGltcGxDYXBhYmlsaXRpZXMuaWQubGVuZ3RoID4gMCA/IGltcGxDYXBhYmlsaXRpZXMuaWQgOiBVVUlELmdlbmVyYXRlVXVpZCgpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gaW1wbENhcGFiaWxpdGllcy5kb2N1bWVudFNlbGVjdG9yIHx8IGRvY3VtZW50U2VsZWN0b3I7XHJcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5tZXNzYWdlcywge1xyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICByZWdpc3Rlck9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIHsgZG9jdW1lbnRTZWxlY3Rvcjogc2VsZWN0b3IgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJMYW5ndWFnZVByb3ZpZGVyKG9wdGlvbnMpIHtcclxuICAgICAgICBsZXQgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xyXG4gICAgICAgIGxldCBwcm92aWRlQ29sb3JQcmVzZW50YXRpb25zID0gKGNvbG9yLCBjb250ZXh0LCB0b2tlbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0UGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgY29sb3IsXHJcbiAgICAgICAgICAgICAgICB0ZXh0RG9jdW1lbnQ6IGNsaWVudC5jb2RlMlByb3RvY29sQ29udmVydGVyLmFzVGV4dERvY3VtZW50SWRlbnRpZmllcihjb250ZXh0LmRvY3VtZW50KSxcclxuICAgICAgICAgICAgICAgIHJhbmdlOiBjbGllbnQuY29kZTJQcm90b2NvbENvbnZlcnRlci5hc1JhbmdlKGNvbnRleHQucmFuZ2UpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuc2VuZFJlcXVlc3QodnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0LnR5cGUsIHJlcXVlc3RQYXJhbXMsIHRva2VuKS50aGVuKHRoaXMuYXNDb2xvclByZXNlbnRhdGlvbnMuYmluZCh0aGlzKSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQubG9nRmFpbGVkUmVxdWVzdCh2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMS5Db2xvclByZXNlbnRhdGlvblJlcXVlc3QudHlwZSwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgcHJvdmlkZURvY3VtZW50Q29sb3JzID0gKGRvY3VtZW50LCB0b2tlbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0UGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgdGV4dERvY3VtZW50OiBjbGllbnQuY29kZTJQcm90b2NvbENvbnZlcnRlci5hc1RleHREb2N1bWVudElkZW50aWZpZXIoZG9jdW1lbnQpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuc2VuZFJlcXVlc3QodnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuRG9jdW1lbnRDb2xvclJlcXVlc3QudHlwZSwgcmVxdWVzdFBhcmFtcywgdG9rZW4pLnRoZW4odGhpcy5hc0NvbG9ySW5mb3JtYXRpb25zLmJpbmQodGhpcyksIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50LmxvZ0ZhaWxlZFJlcXVlc3QodnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0LnR5cGUsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IG1pZGRsZXdhcmUgPSBjbGllbnQuY2xpZW50T3B0aW9ucy5taWRkbGV3YXJlO1xyXG4gICAgICAgIHJldHVybiB2c2NvZGVfMS5sYW5ndWFnZXMucmVnaXN0ZXJDb2xvclByb3ZpZGVyKG9wdGlvbnMuZG9jdW1lbnRTZWxlY3Rvciwge1xyXG4gICAgICAgICAgICBwcm92aWRlQ29sb3JQcmVzZW50YXRpb25zOiAoY29sb3IsIGNvbnRleHQsIHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWlkZGxld2FyZS5wcm92aWRlQ29sb3JQcmVzZW50YXRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgPyBtaWRkbGV3YXJlLnByb3ZpZGVDb2xvclByZXNlbnRhdGlvbnMoY29sb3IsIGNvbnRleHQsIHRva2VuLCBwcm92aWRlQ29sb3JQcmVzZW50YXRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgIDogcHJvdmlkZUNvbG9yUHJlc2VudGF0aW9ucyhjb2xvciwgY29udGV4dCwgdG9rZW4pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm92aWRlRG9jdW1lbnRDb2xvcnM6IChkb2N1bWVudCwgdG9rZW4pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtaWRkbGV3YXJlLnByb3ZpZGVEb2N1bWVudENvbG9yc1xyXG4gICAgICAgICAgICAgICAgICAgID8gbWlkZGxld2FyZS5wcm92aWRlRG9jdW1lbnRDb2xvcnMoZG9jdW1lbnQsIHRva2VuLCBwcm92aWRlRG9jdW1lbnRDb2xvcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBwcm92aWRlRG9jdW1lbnRDb2xvcnMoZG9jdW1lbnQsIHRva2VuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYXNDb2xvcihjb2xvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgdnNjb2RlXzEuQ29sb3IoY29sb3IucmVkLCBjb2xvci5ncmVlbiwgY29sb3IuYmx1ZSwgY29sb3IuYWxwaGEpO1xyXG4gICAgfVxyXG4gICAgYXNDb2xvckluZm9ybWF0aW9ucyhjb2xvckluZm9ybWF0aW9uKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sb3JJbmZvcm1hdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG9ySW5mb3JtYXRpb24ubWFwKGNpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdnNjb2RlXzEuQ29sb3JJbmZvcm1hdGlvbih0aGlzLl9jbGllbnQucHJvdG9jb2wyQ29kZUNvbnZlcnRlci5hc1JhbmdlKGNpLnJhbmdlKSwgdGhpcy5hc0NvbG9yKGNpLmNvbG9yKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICBhc0NvbG9yUHJlc2VudGF0aW9ucyhjb2xvclByZXNlbnRhdGlvbnMpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvclByZXNlbnRhdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvclByZXNlbnRhdGlvbnMubWFwKGNwID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBwcmVzZW50YXRpb24gPSBuZXcgdnNjb2RlXzEuQ29sb3JQcmVzZW50YXRpb24oY3AubGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgcHJlc2VudGF0aW9uLmFkZGl0aW9uYWxUZXh0RWRpdHMgPSB0aGlzLl9jbGllbnQucHJvdG9jb2wyQ29kZUNvbnZlcnRlci5hc1RleHRFZGl0cyhjcC5hZGRpdGlvbmFsVGV4dEVkaXRzKTtcclxuICAgICAgICAgICAgICAgIHByZXNlbnRhdGlvbi50ZXh0RWRpdCA9IHRoaXMuX2NsaWVudC5wcm90b2NvbDJDb2RlQ29udmVydGVyLmFzVGV4dEVkaXQoY3AudGV4dEVkaXQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXNlbnRhdGlvbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNvbG9yUHJvdmlkZXJGZWF0dXJlID0gQ29sb3JQcm92aWRlckZlYXR1cmU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/colorProvider.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/configuration.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/configuration.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nclass ConfigurationFeature {\r\n    constructor(_client) {\r\n        this._client = _client;\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        capabilities.workspace = capabilities.workspace || {};\r\n        capabilities.workspace.configuration = true;\r\n    }\r\n    initialize() {\r\n        let client = this._client;\r\n        client.onRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, (params, token) => {\r\n            let configuration = (params) => {\r\n                let result = [];\r\n                for (let item of params.items) {\r\n                    let resource = item.scopeUri !== void 0 && item.scopeUri !== null ? this._client.protocol2CodeConverter.asUri(item.scopeUri) : undefined;\r\n                    result.push(this.getConfiguration(resource, item.section !== null ? item.section : undefined));\r\n                }\r\n                return result;\r\n            };\r\n            let middleware = client.clientOptions.middleware.workspace;\r\n            return middleware && middleware.configuration\r\n                ? middleware.configuration(params, token, configuration)\r\n                : configuration(params, token);\r\n        });\r\n    }\r\n    getConfiguration(resource, section) {\r\n        let result = null;\r\n        if (section) {\r\n            let index = section.lastIndexOf('.');\r\n            if (index === -1) {\r\n                result = vscode_1.workspace.getConfiguration(undefined, resource).get(section);\r\n            }\r\n            else {\r\n                let config = vscode_1.workspace.getConfiguration(section.substr(0, index));\r\n                if (config) {\r\n                    result = config.get(section.substr(index + 1));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let config = vscode_1.workspace.getConfiguration(undefined, resource);\r\n            result = {};\r\n            for (let key of Object.keys(config)) {\r\n                if (config.has(key)) {\r\n                    result[key] = config.get(key);\r\n                }\r\n            }\r\n        }\r\n        if (!result) {\r\n            return null;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexports.ConfigurationFeature = ConfigurationFeature;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9jb25maWd1cmF0aW9uLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VjbGllbnQvbGliL2NvbmZpZ3VyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2xcIik7XHJcbmNsYXNzIENvbmZpZ3VyYXRpb25GZWF0dXJlIHtcclxuICAgIGNvbnN0cnVjdG9yKF9jbGllbnQpIHtcclxuICAgICAgICB0aGlzLl9jbGllbnQgPSBfY2xpZW50O1xyXG4gICAgfVxyXG4gICAgZmlsbENsaWVudENhcGFiaWxpdGllcyhjYXBhYmlsaXRpZXMpIHtcclxuICAgICAgICBjYXBhYmlsaXRpZXMud29ya3NwYWNlID0gY2FwYWJpbGl0aWVzLndvcmtzcGFjZSB8fCB7fTtcclxuICAgICAgICBjYXBhYmlsaXRpZXMud29ya3NwYWNlLmNvbmZpZ3VyYXRpb24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICBsZXQgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xyXG4gICAgICAgIGNsaWVudC5vblJlcXVlc3QodnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuQ29uZmlndXJhdGlvblJlcXVlc3QudHlwZSwgKHBhcmFtcywgdG9rZW4pID0+IHtcclxuICAgICAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb24gPSAocGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHBhcmFtcy5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNvdXJjZSA9IGl0ZW0uc2NvcGVVcmkgIT09IHZvaWQgMCAmJiBpdGVtLnNjb3BlVXJpICE9PSBudWxsID8gdGhpcy5fY2xpZW50LnByb3RvY29sMkNvZGVDb252ZXJ0ZXIuYXNVcmkoaXRlbS5zY29wZVVyaSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZXRDb25maWd1cmF0aW9uKHJlc291cmNlLCBpdGVtLnNlY3Rpb24gIT09IG51bGwgPyBpdGVtLnNlY3Rpb24gOiB1bmRlZmluZWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxldCBtaWRkbGV3YXJlID0gY2xpZW50LmNsaWVudE9wdGlvbnMubWlkZGxld2FyZS53b3Jrc3BhY2U7XHJcbiAgICAgICAgICAgIHJldHVybiBtaWRkbGV3YXJlICYmIG1pZGRsZXdhcmUuY29uZmlndXJhdGlvblxyXG4gICAgICAgICAgICAgICAgPyBtaWRkbGV3YXJlLmNvbmZpZ3VyYXRpb24ocGFyYW1zLCB0b2tlbiwgY29uZmlndXJhdGlvbilcclxuICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbihwYXJhbXMsIHRva2VuKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldENvbmZpZ3VyYXRpb24ocmVzb3VyY2UsIHNlY3Rpb24pIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICBpZiAoc2VjdGlvbikge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSBzZWN0aW9uLmxhc3RJbmRleE9mKCcuJyk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZzY29kZV8xLndvcmtzcGFjZS5nZXRDb25maWd1cmF0aW9uKHVuZGVmaW5lZCwgcmVzb3VyY2UpLmdldChzZWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSB2c2NvZGVfMS53b3Jrc3BhY2UuZ2V0Q29uZmlndXJhdGlvbihzZWN0aW9uLnN1YnN0cigwLCBpbmRleCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbmZpZy5nZXQoc2VjdGlvbi5zdWJzdHIoaW5kZXggKyAxKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBjb25maWcgPSB2c2NvZGVfMS53b3Jrc3BhY2UuZ2V0Q29uZmlndXJhdGlvbih1bmRlZmluZWQsIHJlc291cmNlKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhjb25maWcpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBjb25maWcuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Db25maWd1cmF0aW9uRmVhdHVyZSA9IENvbmZpZ3VyYXRpb25GZWF0dXJlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/configuration.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/foldingRange.js":
/*!****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/foldingRange.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UUID = __webpack_require__(/*! ./utils/uuid */ \"./node_modules/vscode-languageclient/lib/utils/uuid.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst client_1 = __webpack_require__(/*! ./client */ \"./node_modules/vscode-languageclient/lib/client.js\");\r\nfunction ensure(target, key) {\r\n    if (target[key] === void 0) {\r\n        target[key] = {};\r\n    }\r\n    return target[key];\r\n}\r\nclass FoldingRangeFeature extends client_1.TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.FoldingRangeRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        let capability = ensure(ensure(capabilites, 'textDocument'), 'foldingRange');\r\n        capability.dynamicRegistration = true;\r\n        capability.rangeLimit = 5000;\r\n        capability.lineFoldingOnly = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.foldingRangeProvider) {\r\n            return;\r\n        }\r\n        const implCapabilities = capabilities.foldingRangeProvider;\r\n        const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabilities.id : UUID.generateUuid();\r\n        const selector = implCapabilities.documentSelector || documentSelector;\r\n        if (selector) {\r\n            this.register(this.messages, {\r\n                id,\r\n                registerOptions: Object.assign({}, { documentSelector: selector })\r\n            });\r\n        }\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideFoldingRanges = (document, _, token) => {\r\n            const requestParams = {\r\n                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\r\n            };\r\n            return client.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, requestParams, token).then(this.asFoldingRanges.bind(this), (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerFoldingRangeProvider(options.documentSelector, {\r\n            provideFoldingRanges(document, context, token) {\r\n                return middleware.provideFoldingRanges\r\n                    ? middleware.provideFoldingRanges(document, context, token, provideFoldingRanges)\r\n                    : provideFoldingRanges(document, context, token);\r\n            }\r\n        });\r\n    }\r\n    asFoldingRangeKind(kind) {\r\n        if (kind) {\r\n            switch (kind) {\r\n                case vscode_languageserver_protocol_1.FoldingRangeKind.Comment:\r\n                    return vscode_1.FoldingRangeKind.Comment;\r\n                case vscode_languageserver_protocol_1.FoldingRangeKind.Imports:\r\n                    return vscode_1.FoldingRangeKind.Imports;\r\n                case vscode_languageserver_protocol_1.FoldingRangeKind.Region:\r\n                    return vscode_1.FoldingRangeKind.Region;\r\n            }\r\n        }\r\n        return void 0;\r\n    }\r\n    asFoldingRanges(foldingRanges) {\r\n        if (Array.isArray(foldingRanges)) {\r\n            return foldingRanges.map(r => {\r\n                return new vscode_1.FoldingRange(r.startLine, r.endLine, this.asFoldingRangeKind(r.kind));\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n}\r\nexports.FoldingRangeFeature = FoldingRangeFeature;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9mb2xkaW5nUmFuZ2UuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL3ZzY29kZS1sYW5ndWFnZWNsaWVudC9saWIvZm9sZGluZ1JhbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IFVVSUQgPSByZXF1aXJlKFwiLi91dGlscy91dWlkXCIpO1xyXG5jb25zdCBJcyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzXCIpO1xyXG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNvbnN0IHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF8xID0gcmVxdWlyZShcInZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbFwiKTtcclxuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwiLi9jbGllbnRcIik7XHJcbmZ1bmN0aW9uIGVuc3VyZSh0YXJnZXQsIGtleSkge1xyXG4gICAgaWYgKHRhcmdldFtrZXldID09PSB2b2lkIDApIHtcclxuICAgICAgICB0YXJnZXRba2V5XSA9IHt9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldFtrZXldO1xyXG59XHJcbmNsYXNzIEZvbGRpbmdSYW5nZUZlYXR1cmUgZXh0ZW5kcyBjbGllbnRfMS5UZXh0RG9jdW1lbnRGZWF0dXJlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNsaWVudCkge1xyXG4gICAgICAgIHN1cGVyKGNsaWVudCwgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuRm9sZGluZ1JhbmdlUmVxdWVzdC50eXBlKTtcclxuICAgIH1cclxuICAgIGZpbGxDbGllbnRDYXBhYmlsaXRpZXMoY2FwYWJpbGl0ZXMpIHtcclxuICAgICAgICBsZXQgY2FwYWJpbGl0eSA9IGVuc3VyZShlbnN1cmUoY2FwYWJpbGl0ZXMsICd0ZXh0RG9jdW1lbnQnKSwgJ2ZvbGRpbmdSYW5nZScpO1xyXG4gICAgICAgIGNhcGFiaWxpdHkuZHluYW1pY1JlZ2lzdHJhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgY2FwYWJpbGl0eS5yYW5nZUxpbWl0ID0gNTAwMDtcclxuICAgICAgICBjYXBhYmlsaXR5LmxpbmVGb2xkaW5nT25seSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplKGNhcGFiaWxpdGllcywgZG9jdW1lbnRTZWxlY3Rvcikge1xyXG4gICAgICAgIGlmICghY2FwYWJpbGl0aWVzLmZvbGRpbmdSYW5nZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW1wbENhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcy5mb2xkaW5nUmFuZ2VQcm92aWRlcjtcclxuICAgICAgICBjb25zdCBpZCA9IElzLnN0cmluZyhpbXBsQ2FwYWJpbGl0aWVzLmlkKSAmJiBpbXBsQ2FwYWJpbGl0aWVzLmlkLmxlbmd0aCA+IDAgPyBpbXBsQ2FwYWJpbGl0aWVzLmlkIDogVVVJRC5nZW5lcmF0ZVV1aWQoKTtcclxuICAgICAgICBjb25zdCBzZWxlY3RvciA9IGltcGxDYXBhYmlsaXRpZXMuZG9jdW1lbnRTZWxlY3RvciB8fCBkb2N1bWVudFNlbGVjdG9yO1xyXG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMubWVzc2FnZXMsIHtcclxuICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJPcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCB7IGRvY3VtZW50U2VsZWN0b3I6IHNlbGVjdG9yIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlZ2lzdGVyTGFuZ3VhZ2VQcm92aWRlcihvcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IGNsaWVudCA9IHRoaXMuX2NsaWVudDtcclxuICAgICAgICBsZXQgcHJvdmlkZUZvbGRpbmdSYW5nZXMgPSAoZG9jdW1lbnQsIF8sIHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0RG9jdW1lbnQ6IGNsaWVudC5jb2RlMlByb3RvY29sQ29udmVydGVyLmFzVGV4dERvY3VtZW50SWRlbnRpZmllcihkb2N1bWVudClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5zZW5kUmVxdWVzdCh2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMS5Gb2xkaW5nUmFuZ2VSZXF1ZXN0LnR5cGUsIHJlcXVlc3RQYXJhbXMsIHRva2VuKS50aGVuKHRoaXMuYXNGb2xkaW5nUmFuZ2VzLmJpbmQodGhpcyksIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50LmxvZ0ZhaWxlZFJlcXVlc3QodnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuRm9sZGluZ1JhbmdlUmVxdWVzdC50eXBlLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBtaWRkbGV3YXJlID0gY2xpZW50LmNsaWVudE9wdGlvbnMubWlkZGxld2FyZTtcclxuICAgICAgICByZXR1cm4gdnNjb2RlXzEubGFuZ3VhZ2VzLnJlZ2lzdGVyRm9sZGluZ1JhbmdlUHJvdmlkZXIob3B0aW9ucy5kb2N1bWVudFNlbGVjdG9yLCB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVGb2xkaW5nUmFuZ2VzKGRvY3VtZW50LCBjb250ZXh0LCB0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUucHJvdmlkZUZvbGRpbmdSYW5nZXNcclxuICAgICAgICAgICAgICAgICAgICA/IG1pZGRsZXdhcmUucHJvdmlkZUZvbGRpbmdSYW5nZXMoZG9jdW1lbnQsIGNvbnRleHQsIHRva2VuLCBwcm92aWRlRm9sZGluZ1JhbmdlcylcclxuICAgICAgICAgICAgICAgICAgICA6IHByb3ZpZGVGb2xkaW5nUmFuZ2VzKGRvY3VtZW50LCBjb250ZXh0LCB0b2tlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzRm9sZGluZ1JhbmdlS2luZChraW5kKSB7XHJcbiAgICAgICAgaWYgKGtpbmQpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChraW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF8xLkZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdnNjb2RlXzEuRm9sZGluZ1JhbmdlS2luZC5Db21tZW50O1xyXG4gICAgICAgICAgICAgICAgY2FzZSB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMS5Gb2xkaW5nUmFuZ2VLaW5kLkltcG9ydHM6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZzY29kZV8xLkZvbGRpbmdSYW5nZUtpbmQuSW1wb3J0cztcclxuICAgICAgICAgICAgICAgIGNhc2UgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuRm9sZGluZ1JhbmdlS2luZC5SZWdpb246XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZzY29kZV8xLkZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2b2lkIDA7XHJcbiAgICB9XHJcbiAgICBhc0ZvbGRpbmdSYW5nZXMoZm9sZGluZ1Jhbmdlcykge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZvbGRpbmdSYW5nZXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb2xkaW5nUmFuZ2VzLm1hcChyID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdnNjb2RlXzEuRm9sZGluZ1JhbmdlKHIuc3RhcnRMaW5lLCByLmVuZExpbmUsIHRoaXMuYXNGb2xkaW5nUmFuZ2VLaW5kKHIua2luZCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRm9sZGluZ1JhbmdlRmVhdHVyZSA9IEZvbGRpbmdSYW5nZUZlYXR1cmU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/foldingRange.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/implementation.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/implementation.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UUID = __webpack_require__(/*! ./utils/uuid */ \"./node_modules/vscode-languageclient/lib/utils/uuid.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst client_1 = __webpack_require__(/*! ./client */ \"./node_modules/vscode-languageclient/lib/client.js\");\r\nfunction ensure(target, key) {\r\n    if (target[key] === void 0) {\r\n        target[key] = {};\r\n    }\r\n    return target[key];\r\n}\r\nclass ImplementationFeature extends client_1.TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.ImplementationRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'implementation').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.implementationProvider) {\r\n            return;\r\n        }\r\n        if (capabilities.implementationProvider === true) {\r\n            if (!documentSelector) {\r\n                return;\r\n            }\r\n            this.register(this.messages, {\r\n                id: UUID.generateUuid(),\r\n                registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n            });\r\n        }\r\n        else {\r\n            const implCapabilities = capabilities.implementationProvider;\r\n            const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabilities.id : UUID.generateUuid();\r\n            const selector = implCapabilities.documentSelector || documentSelector;\r\n            if (selector) {\r\n                this.register(this.messages, {\r\n                    id,\r\n                    registerOptions: Object.assign({}, { documentSelector: selector })\r\n                });\r\n            }\r\n        }\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideImplementation = (document, position, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(client.protocol2CodeConverter.asDefinitionResult, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerImplementationProvider(options.documentSelector, {\r\n            provideImplementation: (document, position, token) => {\r\n                return middleware.provideImplementation\r\n                    ? middleware.provideImplementation(document, position, token, provideImplementation)\r\n                    : provideImplementation(document, position, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.ImplementationFeature = ImplementationFeature;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9pbXBsZW1lbnRhdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9pbXBsZW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBVVUlEID0gcmVxdWlyZShcIi4vdXRpbHMvdXVpZFwiKTtcclxuY29uc3QgSXMgPSByZXF1aXJlKFwiLi91dGlscy9pc1wiKTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2xcIik7XHJcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIi4vY2xpZW50XCIpO1xyXG5mdW5jdGlvbiBlbnN1cmUodGFyZ2V0LCBrZXkpIHtcclxuICAgIGlmICh0YXJnZXRba2V5XSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB7fTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxufVxyXG5jbGFzcyBJbXBsZW1lbnRhdGlvbkZlYXR1cmUgZXh0ZW5kcyBjbGllbnRfMS5UZXh0RG9jdW1lbnRGZWF0dXJlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNsaWVudCkge1xyXG4gICAgICAgIHN1cGVyKGNsaWVudCwgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuSW1wbGVtZW50YXRpb25SZXF1ZXN0LnR5cGUpO1xyXG4gICAgfVxyXG4gICAgZmlsbENsaWVudENhcGFiaWxpdGllcyhjYXBhYmlsaXRlcykge1xyXG4gICAgICAgIGVuc3VyZShlbnN1cmUoY2FwYWJpbGl0ZXMsICd0ZXh0RG9jdW1lbnQnKSwgJ2ltcGxlbWVudGF0aW9uJykuZHluYW1pY1JlZ2lzdHJhdGlvbiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplKGNhcGFiaWxpdGllcywgZG9jdW1lbnRTZWxlY3Rvcikge1xyXG4gICAgICAgIGlmICghY2FwYWJpbGl0aWVzLmltcGxlbWVudGF0aW9uUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FwYWJpbGl0aWVzLmltcGxlbWVudGF0aW9uUHJvdmlkZXIgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKCFkb2N1bWVudFNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLm1lc3NhZ2VzLCB7XHJcbiAgICAgICAgICAgICAgICBpZDogVVVJRC5nZW5lcmF0ZVV1aWQoKSxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyT3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgeyBkb2N1bWVudFNlbGVjdG9yOiBkb2N1bWVudFNlbGVjdG9yIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaW1wbENhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcy5pbXBsZW1lbnRhdGlvblByb3ZpZGVyO1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IElzLnN0cmluZyhpbXBsQ2FwYWJpbGl0aWVzLmlkKSAmJiBpbXBsQ2FwYWJpbGl0aWVzLmlkLmxlbmd0aCA+IDAgPyBpbXBsQ2FwYWJpbGl0aWVzLmlkIDogVVVJRC5nZW5lcmF0ZVV1aWQoKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBpbXBsQ2FwYWJpbGl0aWVzLmRvY3VtZW50U2VsZWN0b3IgfHwgZG9jdW1lbnRTZWxlY3RvcjtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMubWVzc2FnZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3Rlck9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIHsgZG9jdW1lbnRTZWxlY3Rvcjogc2VsZWN0b3IgfSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJMYW5ndWFnZVByb3ZpZGVyKG9wdGlvbnMpIHtcclxuICAgICAgICBsZXQgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xyXG4gICAgICAgIGxldCBwcm92aWRlSW1wbGVtZW50YXRpb24gPSAoZG9jdW1lbnQsIHBvc2l0aW9uLCB0b2tlbikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LnNlbmRSZXF1ZXN0KHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF8xLkltcGxlbWVudGF0aW9uUmVxdWVzdC50eXBlLCBjbGllbnQuY29kZTJQcm90b2NvbENvbnZlcnRlci5hc1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKGRvY3VtZW50LCBwb3NpdGlvbiksIHRva2VuKS50aGVuKGNsaWVudC5wcm90b2NvbDJDb2RlQ29udmVydGVyLmFzRGVmaW5pdGlvblJlc3VsdCwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQubG9nRmFpbGVkUmVxdWVzdCh2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMS5JbXBsZW1lbnRhdGlvblJlcXVlc3QudHlwZSwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgbWlkZGxld2FyZSA9IGNsaWVudC5jbGllbnRPcHRpb25zLm1pZGRsZXdhcmU7XHJcbiAgICAgICAgcmV0dXJuIHZzY29kZV8xLmxhbmd1YWdlcy5yZWdpc3RlckltcGxlbWVudGF0aW9uUHJvdmlkZXIob3B0aW9ucy5kb2N1bWVudFNlbGVjdG9yLCB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVJbXBsZW1lbnRhdGlvbjogKGRvY3VtZW50LCBwb3NpdGlvbiwgdG9rZW4pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtaWRkbGV3YXJlLnByb3ZpZGVJbXBsZW1lbnRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgID8gbWlkZGxld2FyZS5wcm92aWRlSW1wbGVtZW50YXRpb24oZG9jdW1lbnQsIHBvc2l0aW9uLCB0b2tlbiwgcHJvdmlkZUltcGxlbWVudGF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIDogcHJvdmlkZUltcGxlbWVudGF0aW9uKGRvY3VtZW50LCBwb3NpdGlvbiwgdG9rZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5JbXBsZW1lbnRhdGlvbkZlYXR1cmUgPSBJbXBsZW1lbnRhdGlvbkZlYXR1cmU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/implementation.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/main.js":
/*!********************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/main.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cp = __webpack_require__(/*! child_process */ \"child_process\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst SemVer = __webpack_require__(/*! semver */ \"./node_modules/vscode-languageclient/node_modules/semver/semver.js\");\r\nconst client_1 = __webpack_require__(/*! ./client */ \"./node_modules/vscode-languageclient/lib/client.js\");\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst colorProvider_1 = __webpack_require__(/*! ./colorProvider */ \"./node_modules/vscode-languageclient/lib/colorProvider.js\");\r\nconst configuration_1 = __webpack_require__(/*! ./configuration */ \"./node_modules/vscode-languageclient/lib/configuration.js\");\r\nconst implementation_1 = __webpack_require__(/*! ./implementation */ \"./node_modules/vscode-languageclient/lib/implementation.js\");\r\nconst typeDefinition_1 = __webpack_require__(/*! ./typeDefinition */ \"./node_modules/vscode-languageclient/lib/typeDefinition.js\");\r\nconst workspaceFolders_1 = __webpack_require__(/*! ./workspaceFolders */ \"./node_modules/vscode-languageclient/lib/workspaceFolders.js\");\r\nconst foldingRange_1 = __webpack_require__(/*! ./foldingRange */ \"./node_modules/vscode-languageclient/lib/foldingRange.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst processes_1 = __webpack_require__(/*! ./utils/processes */ \"./node_modules/vscode-languageclient/lib/utils/processes.js\");\r\n__export(__webpack_require__(/*! ./client */ \"./node_modules/vscode-languageclient/lib/client.js\"));\r\nconst REQUIRED_VSCODE_VERSION = '^1.26'; // do not change format, updated by `updateVSCode` script\r\nvar Executable;\r\n(function (Executable) {\r\n    function is(value) {\r\n        return Is.string(value.command);\r\n    }\r\n    Executable.is = is;\r\n})(Executable || (Executable = {}));\r\nvar TransportKind;\r\n(function (TransportKind) {\r\n    TransportKind[TransportKind[\"stdio\"] = 0] = \"stdio\";\r\n    TransportKind[TransportKind[\"ipc\"] = 1] = \"ipc\";\r\n    TransportKind[TransportKind[\"pipe\"] = 2] = \"pipe\";\r\n    TransportKind[TransportKind[\"socket\"] = 3] = \"socket\";\r\n})(TransportKind = exports.TransportKind || (exports.TransportKind = {}));\r\nvar Transport;\r\n(function (Transport) {\r\n    function isSocket(value) {\r\n        let candidate = value;\r\n        return candidate && candidate.kind === TransportKind.socket && Is.number(candidate.port);\r\n    }\r\n    Transport.isSocket = isSocket;\r\n})(Transport || (Transport = {}));\r\nvar NodeModule;\r\n(function (NodeModule) {\r\n    function is(value) {\r\n        return Is.string(value.module);\r\n    }\r\n    NodeModule.is = is;\r\n})(NodeModule || (NodeModule = {}));\r\nvar StreamInfo;\r\n(function (StreamInfo) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && candidate.writer !== void 0 && candidate.reader !== void 0;\r\n    }\r\n    StreamInfo.is = is;\r\n})(StreamInfo || (StreamInfo = {}));\r\nvar ChildProcessInfo;\r\n(function (ChildProcessInfo) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && candidate.process !== void 0 && typeof candidate.detached === 'boolean';\r\n    }\r\n    ChildProcessInfo.is = is;\r\n})(ChildProcessInfo || (ChildProcessInfo = {}));\r\nclass LanguageClient extends client_1.BaseLanguageClient {\r\n    constructor(arg1, arg2, arg3, arg4, arg5) {\r\n        let id;\r\n        let name;\r\n        let serverOptions;\r\n        let clientOptions;\r\n        let forceDebug;\r\n        if (Is.string(arg2)) {\r\n            id = arg1;\r\n            name = arg2;\r\n            serverOptions = arg3;\r\n            clientOptions = arg4;\r\n            forceDebug = !!arg5;\r\n        }\r\n        else {\r\n            id = arg1.toLowerCase();\r\n            name = arg1;\r\n            serverOptions = arg2;\r\n            clientOptions = arg3;\r\n            forceDebug = arg4;\r\n        }\r\n        if (forceDebug === void 0) {\r\n            forceDebug = false;\r\n        }\r\n        super(id, name, clientOptions);\r\n        this._serverOptions = serverOptions;\r\n        this._forceDebug = forceDebug;\r\n        try {\r\n            this.checkVersion();\r\n        }\r\n        catch (error) {\r\n            if (Is.string(error.message)) {\r\n                this.outputChannel.appendLine(error.message);\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    checkVersion() {\r\n        let codeVersion = SemVer.parse(vscode_1.version);\r\n        if (!codeVersion) {\r\n            throw new Error(`No valid VS Code version detected. Version string is: ${vscode_1.version}`);\r\n        }\r\n        // Remove the insider pre-release since we stay API compatible.\r\n        if (codeVersion.prerelease && codeVersion.prerelease.length > 0) {\r\n            codeVersion.prerelease = [];\r\n        }\r\n        if (!SemVer.satisfies(codeVersion, REQUIRED_VSCODE_VERSION)) {\r\n            throw new Error(`The language client requires VS Code version ${REQUIRED_VSCODE_VERSION} but received version ${vscode_1.version}`);\r\n        }\r\n    }\r\n    stop() {\r\n        return super.stop().then(() => {\r\n            if (this._serverProcess) {\r\n                let toCheck = this._serverProcess;\r\n                this._serverProcess = undefined;\r\n                if (this._isDetached === void 0 || !this._isDetached) {\r\n                    this.checkProcessDied(toCheck);\r\n                }\r\n                this._isDetached = undefined;\r\n            }\r\n        });\r\n    }\r\n    checkProcessDied(childProcess) {\r\n        if (!childProcess) {\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            // Test if the process is still alive. Throws an exception if not\r\n            try {\r\n                process.kill(childProcess.pid, 0);\r\n                processes_1.terminate(childProcess);\r\n            }\r\n            catch (error) {\r\n                // All is fine.\r\n            }\r\n        }, 2000);\r\n    }\r\n    handleConnectionClosed() {\r\n        this._serverProcess = undefined;\r\n        super.handleConnectionClosed();\r\n    }\r\n    createMessageTransports(encoding) {\r\n        function getEnvironment(env) {\r\n            if (!env) {\r\n                return process.env;\r\n            }\r\n            let result = Object.create(null);\r\n            Object.keys(process.env).forEach(key => result[key] = process.env[key]);\r\n            Object.keys(env).forEach(key => result[key] = env[key]);\r\n            return result;\r\n        }\r\n        function startedInDebugMode() {\r\n            let args = process.execArgv;\r\n            if (args) {\r\n                return args.some((arg) => /^--debug=?/.test(arg) || /^--debug-brk=?/.test(arg) || /^--inspect=?/.test(arg) || /^--inspect-brk=?/.test(arg));\r\n            }\r\n            ;\r\n            return false;\r\n        }\r\n        let server = this._serverOptions;\r\n        // We got a function.\r\n        if (Is.func(server)) {\r\n            return server().then((result) => {\r\n                if (client_1.MessageTransports.is(result)) {\r\n                    this._isDetached = !!result.detached;\r\n                    return result;\r\n                }\r\n                else if (StreamInfo.is(result)) {\r\n                    this._isDetached = !!result.detached;\r\n                    return { reader: new vscode_languageserver_protocol_1.StreamMessageReader(result.reader), writer: new vscode_languageserver_protocol_1.StreamMessageWriter(result.writer) };\r\n                }\r\n                else {\r\n                    let cp;\r\n                    if (ChildProcessInfo.is(result)) {\r\n                        cp = result.process;\r\n                        this._isDetached = result.detached;\r\n                    }\r\n                    else {\r\n                        cp = result;\r\n                        this._isDetached = false;\r\n                    }\r\n                    cp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                    return { reader: new vscode_languageserver_protocol_1.StreamMessageReader(cp.stdout), writer: new vscode_languageserver_protocol_1.StreamMessageWriter(cp.stdin) };\r\n                }\r\n            });\r\n        }\r\n        let json;\r\n        let runDebug = server;\r\n        if (runDebug.run || runDebug.debug) {\r\n            // We are under debugging. So use debug as well.\r\n            if (typeof v8debug === 'object' || this._forceDebug || startedInDebugMode()) {\r\n                json = runDebug.debug;\r\n            }\r\n            else {\r\n                json = runDebug.run;\r\n            }\r\n        }\r\n        else {\r\n            json = server;\r\n        }\r\n        return this._getServerWorkingDir(json.options).then(serverWorkingDir => {\r\n            if (NodeModule.is(json) && json.module) {\r\n                let node = json;\r\n                let transport = node.transport || TransportKind.stdio;\r\n                if (node.runtime) {\r\n                    let args = [];\r\n                    let options = node.options || Object.create(null);\r\n                    if (options.execArgv) {\r\n                        options.execArgv.forEach(element => args.push(element));\r\n                    }\r\n                    args.push(node.module);\r\n                    if (node.args) {\r\n                        node.args.forEach(element => args.push(element));\r\n                    }\r\n                    let execOptions = Object.create(null);\r\n                    execOptions.cwd = serverWorkingDir;\r\n                    execOptions.env = getEnvironment(options.env);\r\n                    let pipeName = undefined;\r\n                    if (transport === TransportKind.ipc) {\r\n                        // exec options not correctly typed in lib\r\n                        execOptions.stdio = [null, null, null, 'ipc'];\r\n                        args.push('--node-ipc');\r\n                    }\r\n                    else if (transport === TransportKind.stdio) {\r\n                        args.push('--stdio');\r\n                    }\r\n                    else if (transport === TransportKind.pipe) {\r\n                        pipeName = vscode_languageserver_protocol_1.generateRandomPipeName();\r\n                        args.push(`--pipe=${pipeName}`);\r\n                    }\r\n                    else if (Transport.isSocket(transport)) {\r\n                        args.push(`--socket=${transport.port}`);\r\n                    }\r\n                    args.push(`--clientProcessId=${process.pid.toString()}`);\r\n                    if (transport === TransportKind.ipc || transport === TransportKind.stdio) {\r\n                        let serverProcess = cp.spawn(node.runtime, args, execOptions);\r\n                        if (!serverProcess || !serverProcess.pid) {\r\n                            return Promise.reject(`Launching server using runtime ${node.runtime} failed.`);\r\n                        }\r\n                        this._serverProcess = serverProcess;\r\n                        serverProcess.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                        if (transport === TransportKind.ipc) {\r\n                            serverProcess.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                            return Promise.resolve({ reader: new vscode_languageserver_protocol_1.IPCMessageReader(serverProcess), writer: new vscode_languageserver_protocol_1.IPCMessageWriter(serverProcess) });\r\n                        }\r\n                        else {\r\n                            return Promise.resolve({ reader: new vscode_languageserver_protocol_1.StreamMessageReader(serverProcess.stdout), writer: new vscode_languageserver_protocol_1.StreamMessageWriter(serverProcess.stdin) });\r\n                        }\r\n                    }\r\n                    else if (transport == TransportKind.pipe) {\r\n                        return vscode_languageserver_protocol_1.createClientPipeTransport(pipeName).then((transport) => {\r\n                            let process = cp.spawn(node.runtime, args, execOptions);\r\n                            if (!process || !process.pid) {\r\n                                return Promise.reject(`Launching server using runtime ${node.runtime} failed.`);\r\n                            }\r\n                            this._serverProcess = process;\r\n                            process.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                            process.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                            return transport.onConnected().then((protocol) => {\r\n                                return { reader: protocol[0], writer: protocol[1] };\r\n                            });\r\n                        });\r\n                    }\r\n                    else if (Transport.isSocket(transport)) {\r\n                        return vscode_languageserver_protocol_1.createClientSocketTransport(transport.port).then((transport) => {\r\n                            let process = cp.spawn(node.runtime, args, execOptions);\r\n                            if (!process || !process.pid) {\r\n                                return Promise.reject(`Launching server using runtime ${node.runtime} failed.`);\r\n                            }\r\n                            this._serverProcess = process;\r\n                            process.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                            process.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                            return transport.onConnected().then((protocol) => {\r\n                                return { reader: protocol[0], writer: protocol[1] };\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    let pipeName = undefined;\r\n                    return new Promise((resolve, _reject) => {\r\n                        let args = node.args && node.args.slice() || [];\r\n                        if (transport === TransportKind.ipc) {\r\n                            args.push('--node-ipc');\r\n                        }\r\n                        else if (transport === TransportKind.stdio) {\r\n                            args.push('--stdio');\r\n                        }\r\n                        else if (transport === TransportKind.pipe) {\r\n                            pipeName = vscode_languageserver_protocol_1.generateRandomPipeName();\r\n                            args.push(`--pipe=${pipeName}`);\r\n                        }\r\n                        else if (Transport.isSocket(transport)) {\r\n                            args.push(`--socket=${transport.port}`);\r\n                        }\r\n                        args.push(`--clientProcessId=${process.pid.toString()}`);\r\n                        let options = node.options || Object.create(null);\r\n                        options.execArgv = options.execArgv || [];\r\n                        options.cwd = serverWorkingDir;\r\n                        options.silent = true;\r\n                        if (transport === TransportKind.ipc || transport === TransportKind.stdio) {\r\n                            let sp = cp.fork(node.module, args || [], options);\r\n                            this._serverProcess = sp;\r\n                            sp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                            if (transport === TransportKind.ipc) {\r\n                                sp.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                                resolve({ reader: new vscode_languageserver_protocol_1.IPCMessageReader(this._serverProcess), writer: new vscode_languageserver_protocol_1.IPCMessageWriter(this._serverProcess) });\r\n                            }\r\n                            else {\r\n                                resolve({ reader: new vscode_languageserver_protocol_1.StreamMessageReader(sp.stdout), writer: new vscode_languageserver_protocol_1.StreamMessageWriter(sp.stdin) });\r\n                            }\r\n                        }\r\n                        else if (transport === TransportKind.pipe) {\r\n                            vscode_languageserver_protocol_1.createClientPipeTransport(pipeName).then((transport) => {\r\n                                let sp = cp.fork(node.module, args || [], options);\r\n                                this._serverProcess = sp;\r\n                                sp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                                sp.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                                transport.onConnected().then((protocol) => {\r\n                                    resolve({ reader: protocol[0], writer: protocol[1] });\r\n                                });\r\n                            });\r\n                        }\r\n                        else if (Transport.isSocket(transport)) {\r\n                            vscode_languageserver_protocol_1.createClientSocketTransport(transport.port).then((transport) => {\r\n                                let sp = cp.fork(node.module, args || [], options);\r\n                                this._serverProcess = sp;\r\n                                sp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                                sp.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                                transport.onConnected().then((protocol) => {\r\n                                    resolve({ reader: protocol[0], writer: protocol[1] });\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else if (Executable.is(json) && json.command) {\r\n                let command = json;\r\n                let args = command.args || [];\r\n                let options = Object.assign({}, command.options);\r\n                options.cwd = options.cwd || serverWorkingDir;\r\n                let serverProcess = cp.spawn(command.command, args, options);\r\n                if (!serverProcess || !serverProcess.pid) {\r\n                    return Promise.reject(`Launching server using command ${command.command} failed.`);\r\n                }\r\n                serverProcess.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));\r\n                this._serverProcess = serverProcess;\r\n                this._isDetached = !!options.detached;\r\n                return Promise.resolve({ reader: new vscode_languageserver_protocol_1.StreamMessageReader(serverProcess.stdout), writer: new vscode_languageserver_protocol_1.StreamMessageWriter(serverProcess.stdin) });\r\n            }\r\n            return Promise.reject(new Error(`Unsupported server configuration ` + JSON.stringify(server, null, 4)));\r\n        });\r\n    }\r\n    registerProposedFeatures() {\r\n        this.registerFeatures(ProposedFeatures.createAll(this));\r\n    }\r\n    registerBuiltinFeatures() {\r\n        super.registerBuiltinFeatures();\r\n        this.registerFeature(new configuration_1.ConfigurationFeature(this));\r\n        this.registerFeature(new typeDefinition_1.TypeDefinitionFeature(this));\r\n        this.registerFeature(new implementation_1.ImplementationFeature(this));\r\n        this.registerFeature(new colorProvider_1.ColorProviderFeature(this));\r\n        this.registerFeature(new workspaceFolders_1.WorkspaceFoldersFeature(this));\r\n        this.registerFeature(new foldingRange_1.FoldingRangeFeature(this));\r\n    }\r\n    _mainGetRootPath() {\r\n        let folders = vscode_1.workspace.workspaceFolders;\r\n        if (!folders || folders.length === 0) {\r\n            return undefined;\r\n        }\r\n        let folder = folders[0];\r\n        if (folder.uri.scheme === 'file') {\r\n            return folder.uri.fsPath;\r\n        }\r\n        return undefined;\r\n    }\r\n    _getServerWorkingDir(options) {\r\n        let cwd = options && options.cwd;\r\n        if (!cwd) {\r\n            cwd = this.clientOptions.workspaceFolder\r\n                ? this.clientOptions.workspaceFolder.uri.fsPath\r\n                : this._mainGetRootPath();\r\n        }\r\n        if (cwd) {\r\n            // make sure the folder exists otherwise creating the process will fail\r\n            return new Promise(s => {\r\n                fs.lstat(cwd, (err, stats) => {\r\n                    s(!err && stats.isDirectory() ? cwd : undefined);\r\n                });\r\n            });\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n}\r\nexports.LanguageClient = LanguageClient;\r\nclass SettingMonitor {\r\n    constructor(_client, _setting) {\r\n        this._client = _client;\r\n        this._setting = _setting;\r\n        this._listeners = [];\r\n    }\r\n    start() {\r\n        vscode_1.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, this._listeners);\r\n        this.onDidChangeConfiguration();\r\n        return new vscode_1.Disposable(() => {\r\n            if (this._client.needsStop()) {\r\n                this._client.stop();\r\n            }\r\n        });\r\n    }\r\n    onDidChangeConfiguration() {\r\n        let index = this._setting.indexOf('.');\r\n        let primary = index >= 0 ? this._setting.substr(0, index) : this._setting;\r\n        let rest = index >= 0 ? this._setting.substr(index + 1) : undefined;\r\n        let enabled = rest ? vscode_1.workspace.getConfiguration(primary).get(rest, false) : vscode_1.workspace.getConfiguration(primary);\r\n        if (enabled && this._client.needsStart()) {\r\n            this._client.start();\r\n        }\r\n        else if (!enabled && this._client.needsStop()) {\r\n            this._client.stop();\r\n        }\r\n    }\r\n}\r\nexports.SettingMonitor = SettingMonitor;\r\n// Exporting proposed protocol.\r\nvar ProposedFeatures;\r\n(function (ProposedFeatures) {\r\n    function createAll(_client) {\r\n        let result = [];\r\n        return result;\r\n    }\r\n    ProposedFeatures.createAll = createAll;\r\n})(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/main.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/protocolCodeLens.js":
/*!********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/protocolCodeLens.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst code = __webpack_require__(/*! vscode */ \"vscode\");\r\nclass ProtocolCodeLens extends code.CodeLens {\r\n    constructor(range) {\r\n        super(range);\r\n    }\r\n}\r\nexports.default = ProtocolCodeLens;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9wcm90b2NvbENvZGVMZW5zLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VjbGllbnQvbGliL3Byb3RvY29sQ29kZUxlbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY29kZSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNsYXNzIFByb3RvY29sQ29kZUxlbnMgZXh0ZW5kcyBjb2RlLkNvZGVMZW5zIHtcclxuICAgIGNvbnN0cnVjdG9yKHJhbmdlKSB7XHJcbiAgICAgICAgc3VwZXIocmFuZ2UpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3RvY29sQ29kZUxlbnM7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/protocolCodeLens.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/protocolCompletionItem.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/protocolCompletionItem.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst code = __webpack_require__(/*! vscode */ \"vscode\");\r\nclass ProtocolCompletionItem extends code.CompletionItem {\r\n    constructor(label) {\r\n        super(label);\r\n    }\r\n}\r\nexports.default = ProtocolCompletionItem;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9wcm90b2NvbENvbXBsZXRpb25JdGVtLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VjbGllbnQvbGliL3Byb3RvY29sQ29tcGxldGlvbkl0ZW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY29kZSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNsYXNzIFByb3RvY29sQ29tcGxldGlvbkl0ZW0gZXh0ZW5kcyBjb2RlLkNvbXBsZXRpb25JdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKGxhYmVsKSB7XHJcbiAgICAgICAgc3VwZXIobGFiZWwpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3RvY29sQ29tcGxldGlvbkl0ZW07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/protocolCompletionItem.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/protocolConverter.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/protocolConverter.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst code = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst ls = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst protocolCompletionItem_1 = __webpack_require__(/*! ./protocolCompletionItem */ \"./node_modules/vscode-languageclient/lib/protocolCompletionItem.js\");\r\nconst protocolCodeLens_1 = __webpack_require__(/*! ./protocolCodeLens */ \"./node_modules/vscode-languageclient/lib/protocolCodeLens.js\");\r\nconst protocolDocumentLink_1 = __webpack_require__(/*! ./protocolDocumentLink */ \"./node_modules/vscode-languageclient/lib/protocolDocumentLink.js\");\r\nvar CodeBlock;\r\n(function (CodeBlock) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return candidate && Is.string(candidate.language) && Is.string(candidate.value);\r\n    }\r\n    CodeBlock.is = is;\r\n})(CodeBlock || (CodeBlock = {}));\r\nfunction createConverter(uriConverter) {\r\n    const nullConverter = (value) => code.Uri.parse(value);\r\n    const _uriConverter = uriConverter || nullConverter;\r\n    function asUri(value) {\r\n        return _uriConverter(value);\r\n    }\r\n    function asDiagnostics(diagnostics) {\r\n        return diagnostics.map(asDiagnostic);\r\n    }\r\n    function asDiagnostic(diagnostic) {\r\n        let result = new code.Diagnostic(asRange(diagnostic.range), diagnostic.message, asDiagnosticSeverity(diagnostic.severity));\r\n        if (Is.number(diagnostic.code) || Is.string(diagnostic.code)) {\r\n            result.code = diagnostic.code;\r\n        }\r\n        if (diagnostic.source) {\r\n            result.source = diagnostic.source;\r\n        }\r\n        if (diagnostic.relatedInformation) {\r\n            result.relatedInformation = asRelatedInformation(diagnostic.relatedInformation);\r\n        }\r\n        return result;\r\n    }\r\n    function asRelatedInformation(relatedInformation) {\r\n        return relatedInformation.map(asDiagnosticRelatedInformation);\r\n    }\r\n    function asDiagnosticRelatedInformation(information) {\r\n        return new code.DiagnosticRelatedInformation(asLocation(information.location), information.message);\r\n    }\r\n    function asPosition(value) {\r\n        if (!value) {\r\n            return undefined;\r\n        }\r\n        return new code.Position(value.line, value.character);\r\n    }\r\n    function asRange(value) {\r\n        if (!value) {\r\n            return undefined;\r\n        }\r\n        return new code.Range(asPosition(value.start), asPosition(value.end));\r\n    }\r\n    function asDiagnosticSeverity(value) {\r\n        if (value === void 0 || value === null) {\r\n            return code.DiagnosticSeverity.Error;\r\n        }\r\n        switch (value) {\r\n            case ls.DiagnosticSeverity.Error:\r\n                return code.DiagnosticSeverity.Error;\r\n            case ls.DiagnosticSeverity.Warning:\r\n                return code.DiagnosticSeverity.Warning;\r\n            case ls.DiagnosticSeverity.Information:\r\n                return code.DiagnosticSeverity.Information;\r\n            case ls.DiagnosticSeverity.Hint:\r\n                return code.DiagnosticSeverity.Hint;\r\n        }\r\n        return code.DiagnosticSeverity.Error;\r\n    }\r\n    function asHoverContent(value) {\r\n        if (Is.string(value)) {\r\n            return new code.MarkdownString(value);\r\n        }\r\n        else if (CodeBlock.is(value)) {\r\n            let result = new code.MarkdownString();\r\n            return result.appendCodeblock(value.value, value.language);\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            let result = [];\r\n            for (let element of value) {\r\n                let item = new code.MarkdownString();\r\n                if (CodeBlock.is(element)) {\r\n                    item.appendCodeblock(element.value, element.language);\r\n                }\r\n                else {\r\n                    item.appendMarkdown(element);\r\n                }\r\n                result.push(item);\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            let result;\r\n            switch (value.kind) {\r\n                case ls.MarkupKind.Markdown:\r\n                    return new code.MarkdownString(value.value);\r\n                case ls.MarkupKind.PlainText:\r\n                    result = new code.MarkdownString();\r\n                    result.appendText(value.value);\r\n                    return result;\r\n                default:\r\n                    result = new code.MarkdownString();\r\n                    result.appendText(`Unsupported Markup content received. Kind is: ${value.kind}`);\r\n                    return result;\r\n            }\r\n        }\r\n    }\r\n    function asDocumentation(value) {\r\n        if (Is.string(value)) {\r\n            return value;\r\n        }\r\n        else {\r\n            switch (value.kind) {\r\n                case ls.MarkupKind.Markdown:\r\n                    return new code.MarkdownString(value.value);\r\n                case ls.MarkupKind.PlainText:\r\n                    return value.value;\r\n                default:\r\n                    return `Unsupported Markup content received. Kind is: ${value.kind}`;\r\n            }\r\n        }\r\n    }\r\n    function asHover(hover) {\r\n        if (!hover) {\r\n            return undefined;\r\n        }\r\n        return new code.Hover(asHoverContent(hover.contents), asRange(hover.range));\r\n    }\r\n    function asCompletionResult(result) {\r\n        if (!result) {\r\n            return undefined;\r\n        }\r\n        if (Array.isArray(result)) {\r\n            let items = result;\r\n            return items.map(asCompletionItem);\r\n        }\r\n        let list = result;\r\n        return new code.CompletionList(list.items.map(asCompletionItem), list.isIncomplete);\r\n    }\r\n    function asCompletionItemKind(value) {\r\n        // Protocol item kind is 1 based, codes item kind is zero based.\r\n        if (ls.CompletionItemKind.Text <= value && value <= ls.CompletionItemKind.TypeParameter) {\r\n            return [value - 1, undefined];\r\n        }\r\n        ;\r\n        return [code.CompletionItemKind.Text, value];\r\n    }\r\n    function asCompletionItem(item) {\r\n        let result = new protocolCompletionItem_1.default(item.label);\r\n        if (item.detail) {\r\n            result.detail = item.detail;\r\n        }\r\n        if (item.documentation) {\r\n            result.documentation = asDocumentation(item.documentation);\r\n            result.documentationFormat = Is.string(item.documentation) ? '$string' : item.documentation.kind;\r\n        }\r\n        ;\r\n        if (item.filterText) {\r\n            result.filterText = item.filterText;\r\n        }\r\n        let insertText = asCompletionInsertText(item);\r\n        if (insertText) {\r\n            result.insertText = insertText.text;\r\n            result.range = insertText.range;\r\n            result.fromEdit = insertText.fromEdit;\r\n        }\r\n        if (Is.number(item.kind)) {\r\n            let [itemKind, original] = asCompletionItemKind(item.kind);\r\n            result.kind = itemKind;\r\n            if (original) {\r\n                result.originalItemKind = original;\r\n            }\r\n        }\r\n        if (item.sortText) {\r\n            result.sortText = item.sortText;\r\n        }\r\n        if (item.additionalTextEdits) {\r\n            result.additionalTextEdits = asTextEdits(item.additionalTextEdits);\r\n        }\r\n        if (Is.stringArray(item.commitCharacters)) {\r\n            result.commitCharacters = item.commitCharacters.slice();\r\n        }\r\n        if (item.command) {\r\n            result.command = asCommand(item.command);\r\n        }\r\n        if (item.deprecated === true || item.deprecated === false) {\r\n            result.deprecated = item.deprecated;\r\n        }\r\n        if (item.preselect === true || item.preselect === false) {\r\n            result.preselect = item.preselect;\r\n        }\r\n        if (item.data !== void 0) {\r\n            result.data = item.data;\r\n        }\r\n        return result;\r\n    }\r\n    function asCompletionInsertText(item) {\r\n        if (item.textEdit) {\r\n            if (item.insertTextFormat === ls.InsertTextFormat.Snippet) {\r\n                return { text: new code.SnippetString(item.textEdit.newText), range: asRange(item.textEdit.range), fromEdit: true };\r\n            }\r\n            else {\r\n                return { text: item.textEdit.newText, range: asRange(item.textEdit.range), fromEdit: true };\r\n            }\r\n        }\r\n        else if (item.insertText) {\r\n            if (item.insertTextFormat === ls.InsertTextFormat.Snippet) {\r\n                return { text: new code.SnippetString(item.insertText), fromEdit: false };\r\n            }\r\n            else {\r\n                return { text: item.insertText, fromEdit: false };\r\n            }\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    function asTextEdit(edit) {\r\n        if (!edit) {\r\n            return undefined;\r\n        }\r\n        return new code.TextEdit(asRange(edit.range), edit.newText);\r\n    }\r\n    function asTextEdits(items) {\r\n        if (!items) {\r\n            return undefined;\r\n        }\r\n        return items.map(asTextEdit);\r\n    }\r\n    function asSignatureHelp(item) {\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        let result = new code.SignatureHelp();\r\n        if (Is.number(item.activeSignature)) {\r\n            result.activeSignature = item.activeSignature;\r\n        }\r\n        else {\r\n            // activeSignature was optional in the past\r\n            result.activeSignature = 0;\r\n        }\r\n        if (Is.number(item.activeParameter)) {\r\n            result.activeParameter = item.activeParameter;\r\n        }\r\n        else {\r\n            // activeParameter was optional in the past\r\n            result.activeParameter = 0;\r\n        }\r\n        if (item.signatures) {\r\n            result.signatures = asSignatureInformations(item.signatures);\r\n        }\r\n        return result;\r\n    }\r\n    function asSignatureInformations(items) {\r\n        return items.map(asSignatureInformation);\r\n    }\r\n    function asSignatureInformation(item) {\r\n        let result = new code.SignatureInformation(item.label);\r\n        if (item.documentation) {\r\n            result.documentation = asDocumentation(item.documentation);\r\n        }\r\n        if (item.parameters) {\r\n            result.parameters = asParameterInformations(item.parameters);\r\n        }\r\n        return result;\r\n    }\r\n    function asParameterInformations(item) {\r\n        return item.map(asParameterInformation);\r\n    }\r\n    function asParameterInformation(item) {\r\n        let result = new code.ParameterInformation(item.label);\r\n        if (item.documentation) {\r\n            result.documentation = asDocumentation(item.documentation);\r\n        }\r\n        ;\r\n        return result;\r\n    }\r\n    function asDefinitionResult(item) {\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        if (Is.array(item)) {\r\n            return item.map((location) => asLocation(location));\r\n        }\r\n        else {\r\n            return asLocation(item);\r\n        }\r\n    }\r\n    function asLocation(item) {\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        return new code.Location(_uriConverter(item.uri), asRange(item.range));\r\n    }\r\n    function asReferences(values) {\r\n        if (!values) {\r\n            return undefined;\r\n        }\r\n        return values.map(location => asLocation(location));\r\n    }\r\n    function asDocumentHighlights(values) {\r\n        if (!values) {\r\n            return undefined;\r\n        }\r\n        return values.map(asDocumentHighlight);\r\n    }\r\n    function asDocumentHighlight(item) {\r\n        let result = new code.DocumentHighlight(asRange(item.range));\r\n        if (Is.number(item.kind)) {\r\n            result.kind = asDocumentHighlightKind(item.kind);\r\n        }\r\n        return result;\r\n    }\r\n    function asDocumentHighlightKind(item) {\r\n        switch (item) {\r\n            case ls.DocumentHighlightKind.Text:\r\n                return code.DocumentHighlightKind.Text;\r\n            case ls.DocumentHighlightKind.Read:\r\n                return code.DocumentHighlightKind.Read;\r\n            case ls.DocumentHighlightKind.Write:\r\n                return code.DocumentHighlightKind.Write;\r\n        }\r\n        return code.DocumentHighlightKind.Text;\r\n    }\r\n    function asSymbolInformations(values, uri) {\r\n        if (!values) {\r\n            return undefined;\r\n        }\r\n        return values.map(information => asSymbolInformation(information, uri));\r\n    }\r\n    function asSymbolKind(item) {\r\n        if (item <= ls.SymbolKind.TypeParameter) {\r\n            // Symbol kind is one based in the protocol and zero based in code.\r\n            return item - 1;\r\n        }\r\n        return code.SymbolKind.Property;\r\n    }\r\n    function asSymbolInformation(item, uri) {\r\n        // Symbol kind is one based in the protocol and zero based in code.\r\n        let result = new code.SymbolInformation(item.name, asSymbolKind(item.kind), asRange(item.location.range), item.location.uri ? _uriConverter(item.location.uri) : uri);\r\n        if (item.containerName) {\r\n            result.containerName = item.containerName;\r\n        }\r\n        return result;\r\n    }\r\n    function asDocumentSymbols(values) {\r\n        if (values === void 0 || values === null) {\r\n            return undefined;\r\n        }\r\n        return values.map(asDocumentSymbol);\r\n    }\r\n    function asDocumentSymbol(value) {\r\n        let result = new code.DocumentSymbol(value.name, value.detail || '', asSymbolKind(value.kind), asRange(value.range), asRange(value.selectionRange));\r\n        if (value.children !== void 0 && value.children.length > 0) {\r\n            let children = [];\r\n            for (let child of value.children) {\r\n                children.push(asDocumentSymbol(child));\r\n            }\r\n            result.children = children;\r\n        }\r\n        return result;\r\n    }\r\n    function asCommand(item) {\r\n        let result = { title: item.title, command: item.command };\r\n        if (item.arguments) {\r\n            result.arguments = item.arguments;\r\n        }\r\n        return result;\r\n    }\r\n    function asCommands(items) {\r\n        if (!items) {\r\n            return undefined;\r\n        }\r\n        return items.map(asCommand);\r\n    }\r\n    const kindMapping = new Map();\r\n    kindMapping.set('', code.CodeActionKind.Empty);\r\n    kindMapping.set(ls.CodeActionKind.QuickFix, code.CodeActionKind.QuickFix);\r\n    kindMapping.set(ls.CodeActionKind.Refactor, code.CodeActionKind.Refactor);\r\n    kindMapping.set(ls.CodeActionKind.RefactorExtract, code.CodeActionKind.RefactorExtract);\r\n    kindMapping.set(ls.CodeActionKind.RefactorInline, code.CodeActionKind.RefactorInline);\r\n    kindMapping.set(ls.CodeActionKind.RefactorRewrite, code.CodeActionKind.RefactorRewrite);\r\n    kindMapping.set(ls.CodeActionKind.Source, code.CodeActionKind.Source);\r\n    kindMapping.set(ls.CodeActionKind.SourceOrganizeImports, code.CodeActionKind.SourceOrganizeImports);\r\n    function asCodeActionKind(item) {\r\n        if (item === void 0 || item === null) {\r\n            return undefined;\r\n        }\r\n        let result = kindMapping.get(item);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        let parts = item.split('.');\r\n        result = code.CodeActionKind.Empty;\r\n        for (let part of parts) {\r\n            result = result.append(part);\r\n        }\r\n        return result;\r\n    }\r\n    function asCodeActionKinds(items) {\r\n        if (items === void 0 || items === null) {\r\n            return undefined;\r\n        }\r\n        return items.map(kind => asCodeActionKind(kind));\r\n    }\r\n    function asCodeAction(item) {\r\n        if (item === void 0 || item === null) {\r\n            return undefined;\r\n        }\r\n        let result = new code.CodeAction(item.title);\r\n        if (item.kind !== void 0) {\r\n            result.kind = asCodeActionKind(item.kind);\r\n        }\r\n        if (item.diagnostics) {\r\n            result.diagnostics = asDiagnostics(item.diagnostics);\r\n        }\r\n        if (item.edit) {\r\n            result.edit = asWorkspaceEdit(item.edit);\r\n        }\r\n        if (item.command) {\r\n            result.command = asCommand(item.command);\r\n        }\r\n        return result;\r\n    }\r\n    function asCodeLens(item) {\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        let result = new protocolCodeLens_1.default(asRange(item.range));\r\n        if (item.command) {\r\n            result.command = asCommand(item.command);\r\n        }\r\n        if (item.data !== void 0 && item.data !== null) {\r\n            result.data = item.data;\r\n        }\r\n        return result;\r\n    }\r\n    function asCodeLenses(items) {\r\n        if (!items) {\r\n            return undefined;\r\n        }\r\n        return items.map((codeLens) => asCodeLens(codeLens));\r\n    }\r\n    function asWorkspaceEdit(item) {\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        let result = new code.WorkspaceEdit();\r\n        if (item.documentChanges) {\r\n            item.documentChanges.forEach(change => {\r\n                if (ls.CreateFile.is(change)) {\r\n                    result.createFile(_uriConverter(change.uri), change.options);\r\n                }\r\n                else if (ls.RenameFile.is(change)) {\r\n                    result.renameFile(_uriConverter(change.oldUri), _uriConverter(change.newUri), change.options);\r\n                }\r\n                else if (ls.DeleteFile.is(change)) {\r\n                    result.deleteFile(_uriConverter(change.uri), change.options);\r\n                }\r\n                else if (ls.TextDocumentEdit.is(change)) {\r\n                    result.set(_uriConverter(change.textDocument.uri), asTextEdits(change.edits));\r\n                }\r\n                else {\r\n                    console.error(`Unknown workspace edit change received:\\n${JSON.stringify(change, undefined, 4)}`);\r\n                }\r\n            });\r\n        }\r\n        else if (item.changes) {\r\n            Object.keys(item.changes).forEach(key => {\r\n                result.set(_uriConverter(key), asTextEdits(item.changes[key]));\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    function asDocumentLink(item) {\r\n        let range = asRange(item.range);\r\n        let target = item.target ? asUri(item.target) : undefined;\r\n        // target must be optional in DocumentLink\r\n        let link = new protocolDocumentLink_1.default(range, target);\r\n        if (item.data !== void 0 && item.data !== null) {\r\n            link.data = item.data;\r\n        }\r\n        return link;\r\n    }\r\n    function asDocumentLinks(items) {\r\n        if (!items) {\r\n            return undefined;\r\n        }\r\n        return items.map(asDocumentLink);\r\n    }\r\n    function asColor(color) {\r\n        return new code.Color(color.red, color.green, color.blue, color.alpha);\r\n    }\r\n    function asColorInformation(ci) {\r\n        return new code.ColorInformation(asRange(ci.range), asColor(ci.color));\r\n    }\r\n    function asColorInformations(colorInformation) {\r\n        if (Array.isArray(colorInformation)) {\r\n            return colorInformation.map(asColorInformation);\r\n        }\r\n        return undefined;\r\n    }\r\n    function asColorPresentation(cp) {\r\n        let presentation = new code.ColorPresentation(cp.label);\r\n        presentation.additionalTextEdits = asTextEdits(cp.additionalTextEdits);\r\n        if (cp.textEdit) {\r\n            presentation.textEdit = asTextEdit(cp.textEdit);\r\n        }\r\n        return presentation;\r\n    }\r\n    function asColorPresentations(colorPresentations) {\r\n        if (Array.isArray(colorPresentations)) {\r\n            return colorPresentations.map(asColorPresentation);\r\n        }\r\n        return undefined;\r\n    }\r\n    function asFoldingRangeKind(kind) {\r\n        if (kind) {\r\n            switch (kind) {\r\n                case ls.FoldingRangeKind.Comment:\r\n                    return code.FoldingRangeKind.Comment;\r\n                case ls.FoldingRangeKind.Imports:\r\n                    return code.FoldingRangeKind.Imports;\r\n                case ls.FoldingRangeKind.Region:\r\n                    return code.FoldingRangeKind.Region;\r\n            }\r\n        }\r\n        return void 0;\r\n    }\r\n    function asFoldingRange(r) {\r\n        return new code.FoldingRange(r.startLine, r.endLine, asFoldingRangeKind(r.kind));\r\n    }\r\n    function asFoldingRanges(foldingRanges) {\r\n        if (Array.isArray(foldingRanges)) {\r\n            return foldingRanges.map(asFoldingRange);\r\n        }\r\n        return void 0;\r\n    }\r\n    return {\r\n        asUri,\r\n        asDiagnostics,\r\n        asDiagnostic,\r\n        asRange,\r\n        asPosition,\r\n        asDiagnosticSeverity,\r\n        asHover,\r\n        asCompletionResult,\r\n        asCompletionItem,\r\n        asTextEdit,\r\n        asTextEdits,\r\n        asSignatureHelp,\r\n        asSignatureInformations,\r\n        asSignatureInformation,\r\n        asParameterInformations,\r\n        asParameterInformation,\r\n        asDefinitionResult,\r\n        asLocation,\r\n        asReferences,\r\n        asDocumentHighlights,\r\n        asDocumentHighlight,\r\n        asDocumentHighlightKind,\r\n        asSymbolInformations,\r\n        asSymbolInformation,\r\n        asDocumentSymbols,\r\n        asDocumentSymbol,\r\n        asCommand,\r\n        asCommands,\r\n        asCodeAction,\r\n        asCodeActionKind,\r\n        asCodeActionKinds,\r\n        asCodeLens,\r\n        asCodeLenses,\r\n        asWorkspaceEdit,\r\n        asDocumentLink,\r\n        asDocumentLinks,\r\n        asFoldingRangeKind,\r\n        asFoldingRange,\r\n        asFoldingRanges,\r\n        asColor,\r\n        asColorInformation,\r\n        asColorInformations,\r\n        asColorPresentation,\r\n        asColorPresentations\r\n    };\r\n}\r\nexports.createConverter = createConverter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9wcm90b2NvbENvbnZlcnRlci5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9wcm90b2NvbENvbnZlcnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY29uc3QgbHMgPSByZXF1aXJlKFwidnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sXCIpO1xyXG5jb25zdCBJcyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzXCIpO1xyXG5jb25zdCBwcm90b2NvbENvbXBsZXRpb25JdGVtXzEgPSByZXF1aXJlKFwiLi9wcm90b2NvbENvbXBsZXRpb25JdGVtXCIpO1xyXG5jb25zdCBwcm90b2NvbENvZGVMZW5zXzEgPSByZXF1aXJlKFwiLi9wcm90b2NvbENvZGVMZW5zXCIpO1xyXG5jb25zdCBwcm90b2NvbERvY3VtZW50TGlua18xID0gcmVxdWlyZShcIi4vcHJvdG9jb2xEb2N1bWVudExpbmtcIik7XHJcbnZhciBDb2RlQmxvY2s7XHJcbihmdW5jdGlvbiAoQ29kZUJsb2NrKSB7XHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgQ29kZUJsb2NrLmlzID0gaXM7XHJcbn0pKENvZGVCbG9jayB8fCAoQ29kZUJsb2NrID0ge30pKTtcclxuZnVuY3Rpb24gY3JlYXRlQ29udmVydGVyKHVyaUNvbnZlcnRlcikge1xyXG4gICAgY29uc3QgbnVsbENvbnZlcnRlciA9ICh2YWx1ZSkgPT4gY29kZS5VcmkucGFyc2UodmFsdWUpO1xyXG4gICAgY29uc3QgX3VyaUNvbnZlcnRlciA9IHVyaUNvbnZlcnRlciB8fCBudWxsQ29udmVydGVyO1xyXG4gICAgZnVuY3Rpb24gYXNVcmkodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gX3VyaUNvbnZlcnRlcih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0RpYWdub3N0aWNzKGRpYWdub3N0aWNzKSB7XHJcbiAgICAgICAgcmV0dXJuIGRpYWdub3N0aWNzLm1hcChhc0RpYWdub3N0aWMpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNEaWFnbm9zdGljKGRpYWdub3N0aWMpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IGNvZGUuRGlhZ25vc3RpYyhhc1JhbmdlKGRpYWdub3N0aWMucmFuZ2UpLCBkaWFnbm9zdGljLm1lc3NhZ2UsIGFzRGlhZ25vc3RpY1NldmVyaXR5KGRpYWdub3N0aWMuc2V2ZXJpdHkpKTtcclxuICAgICAgICBpZiAoSXMubnVtYmVyKGRpYWdub3N0aWMuY29kZSkgfHwgSXMuc3RyaW5nKGRpYWdub3N0aWMuY29kZSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNvZGUgPSBkaWFnbm9zdGljLmNvZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaWFnbm9zdGljLnNvdXJjZSkge1xyXG4gICAgICAgICAgICByZXN1bHQuc291cmNlID0gZGlhZ25vc3RpYy5zb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaWFnbm9zdGljLnJlbGF0ZWRJbmZvcm1hdGlvbikge1xyXG4gICAgICAgICAgICByZXN1bHQucmVsYXRlZEluZm9ybWF0aW9uID0gYXNSZWxhdGVkSW5mb3JtYXRpb24oZGlhZ25vc3RpYy5yZWxhdGVkSW5mb3JtYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNSZWxhdGVkSW5mb3JtYXRpb24ocmVsYXRlZEluZm9ybWF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlbGF0ZWRJbmZvcm1hdGlvbi5tYXAoYXNEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbihpbmZvcm1hdGlvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgY29kZS5EaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKGFzTG9jYXRpb24oaW5mb3JtYXRpb24ubG9jYXRpb24pLCBpbmZvcm1hdGlvbi5tZXNzYWdlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzUG9zaXRpb24odmFsdWUpIHtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgY29kZS5Qb3NpdGlvbih2YWx1ZS5saW5lLCB2YWx1ZS5jaGFyYWN0ZXIpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNSYW5nZSh2YWx1ZSkge1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjb2RlLlJhbmdlKGFzUG9zaXRpb24odmFsdWUuc3RhcnQpLCBhc1Bvc2l0aW9uKHZhbHVlLmVuZCkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNEaWFnbm9zdGljU2V2ZXJpdHkodmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29kZS5EaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcclxuICAgICAgICAgICAgY2FzZSBscy5EaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZS5EaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I7XHJcbiAgICAgICAgICAgIGNhc2UgbHMuRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZS5EaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZztcclxuICAgICAgICAgICAgY2FzZSBscy5EaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb246XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZS5EaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb247XHJcbiAgICAgICAgICAgIGNhc2UgbHMuRGlhZ25vc3RpY1NldmVyaXR5LkhpbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZS5EaWFnbm9zdGljU2V2ZXJpdHkuSGludDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvZGUuRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNIb3ZlckNvbnRlbnQodmFsdWUpIHtcclxuICAgICAgICBpZiAoSXMuc3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGNvZGUuTWFya2Rvd25TdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChDb2RlQmxvY2suaXModmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBuZXcgY29kZS5NYXJrZG93blN0cmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmFwcGVuZENvZGVibG9jayh2YWx1ZS52YWx1ZSwgdmFsdWUubGFuZ3VhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGVsZW1lbnQgb2YgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gbmV3IGNvZGUuTWFya2Rvd25TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGlmIChDb2RlQmxvY2suaXMoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmFwcGVuZENvZGVibG9jayhlbGVtZW50LnZhbHVlLCBlbGVtZW50Lmxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uYXBwZW5kTWFya2Rvd24oZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDtcclxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS5raW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGxzLk1hcmt1cEtpbmQuTWFya2Rvd246XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb2RlLk1hcmtkb3duU3RyaW5nKHZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgbHMuTWFya3VwS2luZC5QbGFpblRleHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGNvZGUuTWFya2Rvd25TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kVGV4dCh2YWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGNvZGUuTWFya2Rvd25TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kVGV4dChgVW5zdXBwb3J0ZWQgTWFya3VwIGNvbnRlbnQgcmVjZWl2ZWQuIEtpbmQgaXM6ICR7dmFsdWUua2luZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNEb2N1bWVudGF0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKElzLnN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS5raW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGxzLk1hcmt1cEtpbmQuTWFya2Rvd246XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb2RlLk1hcmtkb3duU3RyaW5nKHZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgbHMuTWFya3VwS2luZC5QbGFpblRleHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFVuc3VwcG9ydGVkIE1hcmt1cCBjb250ZW50IHJlY2VpdmVkLiBLaW5kIGlzOiAke3ZhbHVlLmtpbmR9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzSG92ZXIoaG92ZXIpIHtcclxuICAgICAgICBpZiAoIWhvdmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgY29kZS5Ib3Zlcihhc0hvdmVyQ29udGVudChob3Zlci5jb250ZW50cyksIGFzUmFuZ2UoaG92ZXIucmFuZ2UpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzQ29tcGxldGlvblJlc3VsdChyZXN1bHQpIHtcclxuICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGxldCBpdGVtcyA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChhc0NvbXBsZXRpb25JdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGxpc3QgPSByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjb2RlLkNvbXBsZXRpb25MaXN0KGxpc3QuaXRlbXMubWFwKGFzQ29tcGxldGlvbkl0ZW0pLCBsaXN0LmlzSW5jb21wbGV0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0NvbXBsZXRpb25JdGVtS2luZCh2YWx1ZSkge1xyXG4gICAgICAgIC8vIFByb3RvY29sIGl0ZW0ga2luZCBpcyAxIGJhc2VkLCBjb2RlcyBpdGVtIGtpbmQgaXMgemVybyBiYXNlZC5cclxuICAgICAgICBpZiAobHMuQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQgPD0gdmFsdWUgJiYgdmFsdWUgPD0gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlR5cGVQYXJhbWV0ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZSAtIDEsIHVuZGVmaW5lZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDtcclxuICAgICAgICByZXR1cm4gW2NvZGUuQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQsIHZhbHVlXTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzQ29tcGxldGlvbkl0ZW0oaXRlbSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgcHJvdG9jb2xDb21wbGV0aW9uSXRlbV8xLmRlZmF1bHQoaXRlbS5sYWJlbCk7XHJcbiAgICAgICAgaWYgKGl0ZW0uZGV0YWlsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kZXRhaWwgPSBpdGVtLmRldGFpbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uZG9jdW1lbnRhdGlvbikge1xyXG4gICAgICAgICAgICByZXN1bHQuZG9jdW1lbnRhdGlvbiA9IGFzRG9jdW1lbnRhdGlvbihpdGVtLmRvY3VtZW50YXRpb24pO1xyXG4gICAgICAgICAgICByZXN1bHQuZG9jdW1lbnRhdGlvbkZvcm1hdCA9IElzLnN0cmluZyhpdGVtLmRvY3VtZW50YXRpb24pID8gJyRzdHJpbmcnIDogaXRlbS5kb2N1bWVudGF0aW9uLmtpbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDtcclxuICAgICAgICBpZiAoaXRlbS5maWx0ZXJUZXh0KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5maWx0ZXJUZXh0ID0gaXRlbS5maWx0ZXJUZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaW5zZXJ0VGV4dCA9IGFzQ29tcGxldGlvbkluc2VydFRleHQoaXRlbSk7XHJcbiAgICAgICAgaWYgKGluc2VydFRleHQpIHtcclxuICAgICAgICAgICAgcmVzdWx0Lmluc2VydFRleHQgPSBpbnNlcnRUZXh0LnRleHQ7XHJcbiAgICAgICAgICAgIHJlc3VsdC5yYW5nZSA9IGluc2VydFRleHQucmFuZ2U7XHJcbiAgICAgICAgICAgIHJlc3VsdC5mcm9tRWRpdCA9IGluc2VydFRleHQuZnJvbUVkaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChJcy5udW1iZXIoaXRlbS5raW5kKSkge1xyXG4gICAgICAgICAgICBsZXQgW2l0ZW1LaW5kLCBvcmlnaW5hbF0gPSBhc0NvbXBsZXRpb25JdGVtS2luZChpdGVtLmtpbmQpO1xyXG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGl0ZW1LaW5kO1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5vcmlnaW5hbEl0ZW1LaW5kID0gb3JpZ2luYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uc29ydFRleHQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnNvcnRUZXh0ID0gaXRlbS5zb3J0VGV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uYWRkaXRpb25hbFRleHRFZGl0cykge1xyXG4gICAgICAgICAgICByZXN1bHQuYWRkaXRpb25hbFRleHRFZGl0cyA9IGFzVGV4dEVkaXRzKGl0ZW0uYWRkaXRpb25hbFRleHRFZGl0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChJcy5zdHJpbmdBcnJheShpdGVtLmNvbW1pdENoYXJhY3RlcnMpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jb21taXRDaGFyYWN0ZXJzID0gaXRlbS5jb21taXRDaGFyYWN0ZXJzLnNsaWNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpdGVtLmNvbW1hbmQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNvbW1hbmQgPSBhc0NvbW1hbmQoaXRlbS5jb21tYW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uZGVwcmVjYXRlZCA9PT0gdHJ1ZSB8fCBpdGVtLmRlcHJlY2F0ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kZXByZWNhdGVkID0gaXRlbS5kZXByZWNhdGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5wcmVzZWxlY3QgPT09IHRydWUgfHwgaXRlbS5wcmVzZWxlY3QgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wcmVzZWxlY3QgPSBpdGVtLnByZXNlbGVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uZGF0YSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kYXRhID0gaXRlbS5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNDb21wbGV0aW9uSW5zZXJ0VGV4dChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0udGV4dEVkaXQpIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uaW5zZXJ0VGV4dEZvcm1hdCA9PT0gbHMuSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0ZXh0OiBuZXcgY29kZS5TbmlwcGV0U3RyaW5nKGl0ZW0udGV4dEVkaXQubmV3VGV4dCksIHJhbmdlOiBhc1JhbmdlKGl0ZW0udGV4dEVkaXQucmFuZ2UpLCBmcm9tRWRpdDogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdGV4dDogaXRlbS50ZXh0RWRpdC5uZXdUZXh0LCByYW5nZTogYXNSYW5nZShpdGVtLnRleHRFZGl0LnJhbmdlKSwgZnJvbUVkaXQ6IHRydWUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpdGVtLmluc2VydFRleHQpIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uaW5zZXJ0VGV4dEZvcm1hdCA9PT0gbHMuSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0ZXh0OiBuZXcgY29kZS5TbmlwcGV0U3RyaW5nKGl0ZW0uaW5zZXJ0VGV4dCksIGZyb21FZGl0OiBmYWxzZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdGV4dDogaXRlbS5pbnNlcnRUZXh0LCBmcm9tRWRpdDogZmFsc2UgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc1RleHRFZGl0KGVkaXQpIHtcclxuICAgICAgICBpZiAoIWVkaXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjb2RlLlRleHRFZGl0KGFzUmFuZ2UoZWRpdC5yYW5nZSksIGVkaXQubmV3VGV4dCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc1RleHRFZGl0cyhpdGVtcykge1xyXG4gICAgICAgIGlmICghaXRlbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChhc1RleHRFZGl0KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzU2lnbmF0dXJlSGVscChpdGVtKSB7XHJcbiAgICAgICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgY29kZS5TaWduYXR1cmVIZWxwKCk7XHJcbiAgICAgICAgaWYgKElzLm51bWJlcihpdGVtLmFjdGl2ZVNpZ25hdHVyZSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmFjdGl2ZVNpZ25hdHVyZSA9IGl0ZW0uYWN0aXZlU2lnbmF0dXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gYWN0aXZlU2lnbmF0dXJlIHdhcyBvcHRpb25hbCBpbiB0aGUgcGFzdFxyXG4gICAgICAgICAgICByZXN1bHQuYWN0aXZlU2lnbmF0dXJlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKElzLm51bWJlcihpdGVtLmFjdGl2ZVBhcmFtZXRlcikpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmFjdGl2ZVBhcmFtZXRlciA9IGl0ZW0uYWN0aXZlUGFyYW1ldGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gYWN0aXZlUGFyYW1ldGVyIHdhcyBvcHRpb25hbCBpbiB0aGUgcGFzdFxyXG4gICAgICAgICAgICByZXN1bHQuYWN0aXZlUGFyYW1ldGVyID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uc2lnbmF0dXJlcykge1xyXG4gICAgICAgICAgICByZXN1bHQuc2lnbmF0dXJlcyA9IGFzU2lnbmF0dXJlSW5mb3JtYXRpb25zKGl0ZW0uc2lnbmF0dXJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc1NpZ25hdHVyZUluZm9ybWF0aW9ucyhpdGVtcykge1xyXG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoYXNTaWduYXR1cmVJbmZvcm1hdGlvbik7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc1NpZ25hdHVyZUluZm9ybWF0aW9uKGl0ZW0pIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IGNvZGUuU2lnbmF0dXJlSW5mb3JtYXRpb24oaXRlbS5sYWJlbCk7XHJcbiAgICAgICAgaWYgKGl0ZW0uZG9jdW1lbnRhdGlvbikge1xyXG4gICAgICAgICAgICByZXN1bHQuZG9jdW1lbnRhdGlvbiA9IGFzRG9jdW1lbnRhdGlvbihpdGVtLmRvY3VtZW50YXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5wYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wYXJhbWV0ZXJzID0gYXNQYXJhbWV0ZXJJbmZvcm1hdGlvbnMoaXRlbS5wYXJhbWV0ZXJzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzUGFyYW1ldGVySW5mb3JtYXRpb25zKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gaXRlbS5tYXAoYXNQYXJhbWV0ZXJJbmZvcm1hdGlvbik7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc1BhcmFtZXRlckluZm9ybWF0aW9uKGl0ZW0pIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IGNvZGUuUGFyYW1ldGVySW5mb3JtYXRpb24oaXRlbS5sYWJlbCk7XHJcbiAgICAgICAgaWYgKGl0ZW0uZG9jdW1lbnRhdGlvbikge1xyXG4gICAgICAgICAgICByZXN1bHQuZG9jdW1lbnRhdGlvbiA9IGFzRG9jdW1lbnRhdGlvbihpdGVtLmRvY3VtZW50YXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzRGVmaW5pdGlvblJlc3VsdChpdGVtKSB7XHJcbiAgICAgICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChJcy5hcnJheShpdGVtKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS5tYXAoKGxvY2F0aW9uKSA9PiBhc0xvY2F0aW9uKGxvY2F0aW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYXNMb2NhdGlvbihpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0xvY2F0aW9uKGl0ZW0pIHtcclxuICAgICAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjb2RlLkxvY2F0aW9uKF91cmlDb252ZXJ0ZXIoaXRlbS51cmkpLCBhc1JhbmdlKGl0ZW0ucmFuZ2UpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzUmVmZXJlbmNlcyh2YWx1ZXMpIHtcclxuICAgICAgICBpZiAoIXZhbHVlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChsb2NhdGlvbiA9PiBhc0xvY2F0aW9uKGxvY2F0aW9uKSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0RvY3VtZW50SGlnaGxpZ2h0cyh2YWx1ZXMpIHtcclxuICAgICAgICBpZiAoIXZhbHVlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChhc0RvY3VtZW50SGlnaGxpZ2h0KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzRG9jdW1lbnRIaWdobGlnaHQoaXRlbSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgY29kZS5Eb2N1bWVudEhpZ2hsaWdodChhc1JhbmdlKGl0ZW0ucmFuZ2UpKTtcclxuICAgICAgICBpZiAoSXMubnVtYmVyKGl0ZW0ua2luZCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBhc0RvY3VtZW50SGlnaGxpZ2h0S2luZChpdGVtLmtpbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNEb2N1bWVudEhpZ2hsaWdodEtpbmQoaXRlbSkge1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbSkge1xyXG4gICAgICAgICAgICBjYXNlIGxzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZGUuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlRleHQ7XHJcbiAgICAgICAgICAgIGNhc2UgbHMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZS5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuUmVhZDtcclxuICAgICAgICAgICAgY2FzZSBscy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuV3JpdGU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZS5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuV3JpdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb2RlLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNTeW1ib2xJbmZvcm1hdGlvbnModmFsdWVzLCB1cmkpIHtcclxuICAgICAgICBpZiAoIXZhbHVlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChpbmZvcm1hdGlvbiA9PiBhc1N5bWJvbEluZm9ybWF0aW9uKGluZm9ybWF0aW9uLCB1cmkpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzU3ltYm9sS2luZChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPD0gbHMuU3ltYm9sS2luZC5UeXBlUGFyYW1ldGVyKSB7XHJcbiAgICAgICAgICAgIC8vIFN5bWJvbCBraW5kIGlzIG9uZSBiYXNlZCBpbiB0aGUgcHJvdG9jb2wgYW5kIHplcm8gYmFzZWQgaW4gY29kZS5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29kZS5TeW1ib2xLaW5kLlByb3BlcnR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNTeW1ib2xJbmZvcm1hdGlvbihpdGVtLCB1cmkpIHtcclxuICAgICAgICAvLyBTeW1ib2wga2luZCBpcyBvbmUgYmFzZWQgaW4gdGhlIHByb3RvY29sIGFuZCB6ZXJvIGJhc2VkIGluIGNvZGUuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBjb2RlLlN5bWJvbEluZm9ybWF0aW9uKGl0ZW0ubmFtZSwgYXNTeW1ib2xLaW5kKGl0ZW0ua2luZCksIGFzUmFuZ2UoaXRlbS5sb2NhdGlvbi5yYW5nZSksIGl0ZW0ubG9jYXRpb24udXJpID8gX3VyaUNvbnZlcnRlcihpdGVtLmxvY2F0aW9uLnVyaSkgOiB1cmkpO1xyXG4gICAgICAgIGlmIChpdGVtLmNvbnRhaW5lck5hbWUpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNvbnRhaW5lck5hbWUgPSBpdGVtLmNvbnRhaW5lck5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0RvY3VtZW50U3ltYm9scyh2YWx1ZXMpIHtcclxuICAgICAgICBpZiAodmFsdWVzID09PSB2b2lkIDAgfHwgdmFsdWVzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGFzRG9jdW1lbnRTeW1ib2wpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNEb2N1bWVudFN5bWJvbCh2YWx1ZSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgY29kZS5Eb2N1bWVudFN5bWJvbCh2YWx1ZS5uYW1lLCB2YWx1ZS5kZXRhaWwgfHwgJycsIGFzU3ltYm9sS2luZCh2YWx1ZS5raW5kKSwgYXNSYW5nZSh2YWx1ZS5yYW5nZSksIGFzUmFuZ2UodmFsdWUuc2VsZWN0aW9uUmFuZ2UpKTtcclxuICAgICAgICBpZiAodmFsdWUuY2hpbGRyZW4gIT09IHZvaWQgMCAmJiB2YWx1ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiB2YWx1ZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChhc0RvY3VtZW50U3ltYm9sKGNoaWxkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0LmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0NvbW1hbmQoaXRlbSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSB7IHRpdGxlOiBpdGVtLnRpdGxlLCBjb21tYW5kOiBpdGVtLmNvbW1hbmQgfTtcclxuICAgICAgICBpZiAoaXRlbS5hcmd1bWVudHMpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmFyZ3VtZW50cyA9IGl0ZW0uYXJndW1lbnRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNDb21tYW5kcyhpdGVtcykge1xyXG4gICAgICAgIGlmICghaXRlbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChhc0NvbW1hbmQpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qga2luZE1hcHBpbmcgPSBuZXcgTWFwKCk7XHJcbiAgICBraW5kTWFwcGluZy5zZXQoJycsIGNvZGUuQ29kZUFjdGlvbktpbmQuRW1wdHkpO1xyXG4gICAga2luZE1hcHBpbmcuc2V0KGxzLkNvZGVBY3Rpb25LaW5kLlF1aWNrRml4LCBjb2RlLkNvZGVBY3Rpb25LaW5kLlF1aWNrRml4KTtcclxuICAgIGtpbmRNYXBwaW5nLnNldChscy5Db2RlQWN0aW9uS2luZC5SZWZhY3RvciwgY29kZS5Db2RlQWN0aW9uS2luZC5SZWZhY3Rvcik7XHJcbiAgICBraW5kTWFwcGluZy5zZXQobHMuQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JFeHRyYWN0LCBjb2RlLkNvZGVBY3Rpb25LaW5kLlJlZmFjdG9yRXh0cmFjdCk7XHJcbiAgICBraW5kTWFwcGluZy5zZXQobHMuQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JJbmxpbmUsIGNvZGUuQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JJbmxpbmUpO1xyXG4gICAga2luZE1hcHBpbmcuc2V0KGxzLkNvZGVBY3Rpb25LaW5kLlJlZmFjdG9yUmV3cml0ZSwgY29kZS5Db2RlQWN0aW9uS2luZC5SZWZhY3RvclJld3JpdGUpO1xyXG4gICAga2luZE1hcHBpbmcuc2V0KGxzLkNvZGVBY3Rpb25LaW5kLlNvdXJjZSwgY29kZS5Db2RlQWN0aW9uS2luZC5Tb3VyY2UpO1xyXG4gICAga2luZE1hcHBpbmcuc2V0KGxzLkNvZGVBY3Rpb25LaW5kLlNvdXJjZU9yZ2FuaXplSW1wb3J0cywgY29kZS5Db2RlQWN0aW9uS2luZC5Tb3VyY2VPcmdhbml6ZUltcG9ydHMpO1xyXG4gICAgZnVuY3Rpb24gYXNDb2RlQWN0aW9uS2luZChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT09IHZvaWQgMCB8fCBpdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHQgPSBraW5kTWFwcGluZy5nZXQoaXRlbSk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcGFydHMgPSBpdGVtLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgcmVzdWx0ID0gY29kZS5Db2RlQWN0aW9uS2luZC5FbXB0eTtcclxuICAgICAgICBmb3IgKGxldCBwYXJ0IG9mIHBhcnRzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5hcHBlbmQocGFydCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0NvZGVBY3Rpb25LaW5kcyhpdGVtcykge1xyXG4gICAgICAgIGlmIChpdGVtcyA9PT0gdm9pZCAwIHx8IGl0ZW1zID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoa2luZCA9PiBhc0NvZGVBY3Rpb25LaW5kKGtpbmQpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzQ29kZUFjdGlvbihpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT09IHZvaWQgMCB8fCBpdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgY29kZS5Db2RlQWN0aW9uKGl0ZW0udGl0bGUpO1xyXG4gICAgICAgIGlmIChpdGVtLmtpbmQgIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGFzQ29kZUFjdGlvbktpbmQoaXRlbS5raW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uZGlhZ25vc3RpY3MpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmRpYWdub3N0aWNzID0gYXNEaWFnbm9zdGljcyhpdGVtLmRpYWdub3N0aWNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uZWRpdCkge1xyXG4gICAgICAgICAgICByZXN1bHQuZWRpdCA9IGFzV29ya3NwYWNlRWRpdChpdGVtLmVkaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5jb21tYW5kKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jb21tYW5kID0gYXNDb21tYW5kKGl0ZW0uY29tbWFuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0NvZGVMZW5zKGl0ZW0pIHtcclxuICAgICAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBwcm90b2NvbENvZGVMZW5zXzEuZGVmYXVsdChhc1JhbmdlKGl0ZW0ucmFuZ2UpKTtcclxuICAgICAgICBpZiAoaXRlbS5jb21tYW5kKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jb21tYW5kID0gYXNDb21tYW5kKGl0ZW0uY29tbWFuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpdGVtLmRhdGEgIT09IHZvaWQgMCAmJiBpdGVtLmRhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmRhdGEgPSBpdGVtLmRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0NvZGVMZW5zZXMoaXRlbXMpIHtcclxuICAgICAgICBpZiAoIWl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoKGNvZGVMZW5zKSA9PiBhc0NvZGVMZW5zKGNvZGVMZW5zKSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc1dvcmtzcGFjZUVkaXQoaXRlbSkge1xyXG4gICAgICAgIGlmICghaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IGNvZGUuV29ya3NwYWNlRWRpdCgpO1xyXG4gICAgICAgIGlmIChpdGVtLmRvY3VtZW50Q2hhbmdlcykge1xyXG4gICAgICAgICAgICBpdGVtLmRvY3VtZW50Q2hhbmdlcy5mb3JFYWNoKGNoYW5nZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobHMuQ3JlYXRlRmlsZS5pcyhjaGFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmNyZWF0ZUZpbGUoX3VyaUNvbnZlcnRlcihjaGFuZ2UudXJpKSwgY2hhbmdlLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobHMuUmVuYW1lRmlsZS5pcyhjaGFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJlbmFtZUZpbGUoX3VyaUNvbnZlcnRlcihjaGFuZ2Uub2xkVXJpKSwgX3VyaUNvbnZlcnRlcihjaGFuZ2UubmV3VXJpKSwgY2hhbmdlLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobHMuRGVsZXRlRmlsZS5pcyhjaGFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRlbGV0ZUZpbGUoX3VyaUNvbnZlcnRlcihjaGFuZ2UudXJpKSwgY2hhbmdlLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobHMuVGV4dERvY3VtZW50RWRpdC5pcyhjaGFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldChfdXJpQ29udmVydGVyKGNoYW5nZS50ZXh0RG9jdW1lbnQudXJpKSwgYXNUZXh0RWRpdHMoY2hhbmdlLmVkaXRzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBVbmtub3duIHdvcmtzcGFjZSBlZGl0IGNoYW5nZSByZWNlaXZlZDpcXG4ke0pTT04uc3RyaW5naWZ5KGNoYW5nZSwgdW5kZWZpbmVkLCA0KX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGl0ZW0uY2hhbmdlcykge1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhpdGVtLmNoYW5nZXMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQoX3VyaUNvbnZlcnRlcihrZXkpLCBhc1RleHRFZGl0cyhpdGVtLmNoYW5nZXNba2V5XSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzRG9jdW1lbnRMaW5rKGl0ZW0pIHtcclxuICAgICAgICBsZXQgcmFuZ2UgPSBhc1JhbmdlKGl0ZW0ucmFuZ2UpO1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSBpdGVtLnRhcmdldCA/IGFzVXJpKGl0ZW0udGFyZ2V0KSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAvLyB0YXJnZXQgbXVzdCBiZSBvcHRpb25hbCBpbiBEb2N1bWVudExpbmtcclxuICAgICAgICBsZXQgbGluayA9IG5ldyBwcm90b2NvbERvY3VtZW50TGlua18xLmRlZmF1bHQocmFuZ2UsIHRhcmdldCk7XHJcbiAgICAgICAgaWYgKGl0ZW0uZGF0YSAhPT0gdm9pZCAwICYmIGl0ZW0uZGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsaW5rLmRhdGEgPSBpdGVtLmRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaW5rO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNEb2N1bWVudExpbmtzKGl0ZW1zKSB7XHJcbiAgICAgICAgaWYgKCFpdGVtcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXRlbXMubWFwKGFzRG9jdW1lbnRMaW5rKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzQ29sb3IoY29sb3IpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGNvZGUuQ29sb3IoY29sb3IucmVkLCBjb2xvci5ncmVlbiwgY29sb3IuYmx1ZSwgY29sb3IuYWxwaGEpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNDb2xvckluZm9ybWF0aW9uKGNpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjb2RlLkNvbG9ySW5mb3JtYXRpb24oYXNSYW5nZShjaS5yYW5nZSksIGFzQ29sb3IoY2kuY29sb3IpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzQ29sb3JJbmZvcm1hdGlvbnMoY29sb3JJbmZvcm1hdGlvbikge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbG9ySW5mb3JtYXRpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvckluZm9ybWF0aW9uLm1hcChhc0NvbG9ySW5mb3JtYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNDb2xvclByZXNlbnRhdGlvbihjcCkge1xyXG4gICAgICAgIGxldCBwcmVzZW50YXRpb24gPSBuZXcgY29kZS5Db2xvclByZXNlbnRhdGlvbihjcC5sYWJlbCk7XHJcbiAgICAgICAgcHJlc2VudGF0aW9uLmFkZGl0aW9uYWxUZXh0RWRpdHMgPSBhc1RleHRFZGl0cyhjcC5hZGRpdGlvbmFsVGV4dEVkaXRzKTtcclxuICAgICAgICBpZiAoY3AudGV4dEVkaXQpIHtcclxuICAgICAgICAgICAgcHJlc2VudGF0aW9uLnRleHRFZGl0ID0gYXNUZXh0RWRpdChjcC50ZXh0RWRpdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcmVzZW50YXRpb247XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc0NvbG9yUHJlc2VudGF0aW9ucyhjb2xvclByZXNlbnRhdGlvbnMpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvclByZXNlbnRhdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvclByZXNlbnRhdGlvbnMubWFwKGFzQ29sb3JQcmVzZW50YXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNGb2xkaW5nUmFuZ2VLaW5kKGtpbmQpIHtcclxuICAgICAgICBpZiAoa2luZCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgbHMuRm9sZGluZ1JhbmdlS2luZC5Db21tZW50OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlLkZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudDtcclxuICAgICAgICAgICAgICAgIGNhc2UgbHMuRm9sZGluZ1JhbmdlS2luZC5JbXBvcnRzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlLkZvbGRpbmdSYW5nZUtpbmQuSW1wb3J0cztcclxuICAgICAgICAgICAgICAgIGNhc2UgbHMuRm9sZGluZ1JhbmdlS2luZC5SZWdpb246XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvZGUuRm9sZGluZ1JhbmdlS2luZC5SZWdpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzRm9sZGluZ1JhbmdlKHIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGNvZGUuRm9sZGluZ1JhbmdlKHIuc3RhcnRMaW5lLCByLmVuZExpbmUsIGFzRm9sZGluZ1JhbmdlS2luZChyLmtpbmQpKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFzRm9sZGluZ1Jhbmdlcyhmb2xkaW5nUmFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm9sZGluZ1JhbmdlcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZvbGRpbmdSYW5nZXMubWFwKGFzRm9sZGluZ1JhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXNVcmksXHJcbiAgICAgICAgYXNEaWFnbm9zdGljcyxcclxuICAgICAgICBhc0RpYWdub3N0aWMsXHJcbiAgICAgICAgYXNSYW5nZSxcclxuICAgICAgICBhc1Bvc2l0aW9uLFxyXG4gICAgICAgIGFzRGlhZ25vc3RpY1NldmVyaXR5LFxyXG4gICAgICAgIGFzSG92ZXIsXHJcbiAgICAgICAgYXNDb21wbGV0aW9uUmVzdWx0LFxyXG4gICAgICAgIGFzQ29tcGxldGlvbkl0ZW0sXHJcbiAgICAgICAgYXNUZXh0RWRpdCxcclxuICAgICAgICBhc1RleHRFZGl0cyxcclxuICAgICAgICBhc1NpZ25hdHVyZUhlbHAsXHJcbiAgICAgICAgYXNTaWduYXR1cmVJbmZvcm1hdGlvbnMsXHJcbiAgICAgICAgYXNTaWduYXR1cmVJbmZvcm1hdGlvbixcclxuICAgICAgICBhc1BhcmFtZXRlckluZm9ybWF0aW9ucyxcclxuICAgICAgICBhc1BhcmFtZXRlckluZm9ybWF0aW9uLFxyXG4gICAgICAgIGFzRGVmaW5pdGlvblJlc3VsdCxcclxuICAgICAgICBhc0xvY2F0aW9uLFxyXG4gICAgICAgIGFzUmVmZXJlbmNlcyxcclxuICAgICAgICBhc0RvY3VtZW50SGlnaGxpZ2h0cyxcclxuICAgICAgICBhc0RvY3VtZW50SGlnaGxpZ2h0LFxyXG4gICAgICAgIGFzRG9jdW1lbnRIaWdobGlnaHRLaW5kLFxyXG4gICAgICAgIGFzU3ltYm9sSW5mb3JtYXRpb25zLFxyXG4gICAgICAgIGFzU3ltYm9sSW5mb3JtYXRpb24sXHJcbiAgICAgICAgYXNEb2N1bWVudFN5bWJvbHMsXHJcbiAgICAgICAgYXNEb2N1bWVudFN5bWJvbCxcclxuICAgICAgICBhc0NvbW1hbmQsXHJcbiAgICAgICAgYXNDb21tYW5kcyxcclxuICAgICAgICBhc0NvZGVBY3Rpb24sXHJcbiAgICAgICAgYXNDb2RlQWN0aW9uS2luZCxcclxuICAgICAgICBhc0NvZGVBY3Rpb25LaW5kcyxcclxuICAgICAgICBhc0NvZGVMZW5zLFxyXG4gICAgICAgIGFzQ29kZUxlbnNlcyxcclxuICAgICAgICBhc1dvcmtzcGFjZUVkaXQsXHJcbiAgICAgICAgYXNEb2N1bWVudExpbmssXHJcbiAgICAgICAgYXNEb2N1bWVudExpbmtzLFxyXG4gICAgICAgIGFzRm9sZGluZ1JhbmdlS2luZCxcclxuICAgICAgICBhc0ZvbGRpbmdSYW5nZSxcclxuICAgICAgICBhc0ZvbGRpbmdSYW5nZXMsXHJcbiAgICAgICAgYXNDb2xvcixcclxuICAgICAgICBhc0NvbG9ySW5mb3JtYXRpb24sXHJcbiAgICAgICAgYXNDb2xvckluZm9ybWF0aW9ucyxcclxuICAgICAgICBhc0NvbG9yUHJlc2VudGF0aW9uLFxyXG4gICAgICAgIGFzQ29sb3JQcmVzZW50YXRpb25zXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlQ29udmVydGVyID0gY3JlYXRlQ29udmVydGVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/protocolConverter.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/protocolDocumentLink.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/protocolDocumentLink.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst code = __webpack_require__(/*! vscode */ \"vscode\");\r\nclass ProtocolDocumentLink extends code.DocumentLink {\r\n    constructor(range, target) {\r\n        super(range, target);\r\n    }\r\n}\r\nexports.default = ProtocolDocumentLink;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9wcm90b2NvbERvY3VtZW50TGluay5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi9wcm90b2NvbERvY3VtZW50TGluay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY2xhc3MgUHJvdG9jb2xEb2N1bWVudExpbmsgZXh0ZW5kcyBjb2RlLkRvY3VtZW50TGluayB7XHJcbiAgICBjb25zdHJ1Y3RvcihyYW5nZSwgdGFyZ2V0KSB7XHJcbiAgICAgICAgc3VwZXIocmFuZ2UsIHRhcmdldCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gUHJvdG9jb2xEb2N1bWVudExpbms7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/protocolDocumentLink.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/typeDefinition.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/typeDefinition.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UUID = __webpack_require__(/*! ./utils/uuid */ \"./node_modules/vscode-languageclient/lib/utils/uuid.js\");\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageclient/lib/utils/is.js\");\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nconst client_1 = __webpack_require__(/*! ./client */ \"./node_modules/vscode-languageclient/lib/client.js\");\r\nfunction ensure(target, key) {\r\n    if (target[key] === void 0) {\r\n        target[key] = {};\r\n    }\r\n    return target[key];\r\n}\r\nclass TypeDefinitionFeature extends client_1.TextDocumentFeature {\r\n    constructor(client) {\r\n        super(client, vscode_languageserver_protocol_1.TypeDefinitionRequest.type);\r\n    }\r\n    fillClientCapabilities(capabilites) {\r\n        ensure(ensure(capabilites, 'textDocument'), 'typeDefinition').dynamicRegistration = true;\r\n    }\r\n    initialize(capabilities, documentSelector) {\r\n        if (!capabilities.typeDefinitionProvider) {\r\n            return;\r\n        }\r\n        if (capabilities.typeDefinitionProvider === true) {\r\n            if (!documentSelector) {\r\n                return;\r\n            }\r\n            this.register(this.messages, {\r\n                id: UUID.generateUuid(),\r\n                registerOptions: Object.assign({}, { documentSelector: documentSelector })\r\n            });\r\n        }\r\n        else {\r\n            const implCapabilities = capabilities.typeDefinitionProvider;\r\n            const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabilities.id : UUID.generateUuid();\r\n            const selector = implCapabilities.documentSelector || documentSelector;\r\n            if (selector) {\r\n                this.register(this.messages, {\r\n                    id,\r\n                    registerOptions: Object.assign({}, { documentSelector: selector })\r\n                });\r\n            }\r\n        }\r\n    }\r\n    registerLanguageProvider(options) {\r\n        let client = this._client;\r\n        let provideTypeDefinition = (document, position, token) => {\r\n            return client.sendRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(client.protocol2CodeConverter.asDefinitionResult, (error) => {\r\n                client.logFailedRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, error);\r\n                return Promise.resolve(null);\r\n            });\r\n        };\r\n        let middleware = client.clientOptions.middleware;\r\n        return vscode_1.languages.registerTypeDefinitionProvider(options.documentSelector, {\r\n            provideTypeDefinition: (document, position, token) => {\r\n                return middleware.provideTypeDefinition\r\n                    ? middleware.provideTypeDefinition(document, position, token, provideTypeDefinition)\r\n                    : provideTypeDefinition(document, position, token);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.TypeDefinitionFeature = TypeDefinitionFeature;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi90eXBlRGVmaW5pdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi90eXBlRGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBVVUlEID0gcmVxdWlyZShcIi4vdXRpbHMvdXVpZFwiKTtcclxuY29uc3QgSXMgPSByZXF1aXJlKFwiLi91dGlscy9pc1wiKTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2xcIik7XHJcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIi4vY2xpZW50XCIpO1xyXG5mdW5jdGlvbiBlbnN1cmUodGFyZ2V0LCBrZXkpIHtcclxuICAgIGlmICh0YXJnZXRba2V5XSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB7fTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxufVxyXG5jbGFzcyBUeXBlRGVmaW5pdGlvbkZlYXR1cmUgZXh0ZW5kcyBjbGllbnRfMS5UZXh0RG9jdW1lbnRGZWF0dXJlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNsaWVudCkge1xyXG4gICAgICAgIHN1cGVyKGNsaWVudCwgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuVHlwZURlZmluaXRpb25SZXF1ZXN0LnR5cGUpO1xyXG4gICAgfVxyXG4gICAgZmlsbENsaWVudENhcGFiaWxpdGllcyhjYXBhYmlsaXRlcykge1xyXG4gICAgICAgIGVuc3VyZShlbnN1cmUoY2FwYWJpbGl0ZXMsICd0ZXh0RG9jdW1lbnQnKSwgJ3R5cGVEZWZpbml0aW9uJykuZHluYW1pY1JlZ2lzdHJhdGlvbiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplKGNhcGFiaWxpdGllcywgZG9jdW1lbnRTZWxlY3Rvcikge1xyXG4gICAgICAgIGlmICghY2FwYWJpbGl0aWVzLnR5cGVEZWZpbml0aW9uUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FwYWJpbGl0aWVzLnR5cGVEZWZpbml0aW9uUHJvdmlkZXIgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKCFkb2N1bWVudFNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLm1lc3NhZ2VzLCB7XHJcbiAgICAgICAgICAgICAgICBpZDogVVVJRC5nZW5lcmF0ZVV1aWQoKSxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyT3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgeyBkb2N1bWVudFNlbGVjdG9yOiBkb2N1bWVudFNlbGVjdG9yIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaW1wbENhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcy50eXBlRGVmaW5pdGlvblByb3ZpZGVyO1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IElzLnN0cmluZyhpbXBsQ2FwYWJpbGl0aWVzLmlkKSAmJiBpbXBsQ2FwYWJpbGl0aWVzLmlkLmxlbmd0aCA+IDAgPyBpbXBsQ2FwYWJpbGl0aWVzLmlkIDogVVVJRC5nZW5lcmF0ZVV1aWQoKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBpbXBsQ2FwYWJpbGl0aWVzLmRvY3VtZW50U2VsZWN0b3IgfHwgZG9jdW1lbnRTZWxlY3RvcjtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMubWVzc2FnZXMsIHtcclxuICAgICAgICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3Rlck9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIHsgZG9jdW1lbnRTZWxlY3Rvcjogc2VsZWN0b3IgfSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJMYW5ndWFnZVByb3ZpZGVyKG9wdGlvbnMpIHtcclxuICAgICAgICBsZXQgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xyXG4gICAgICAgIGxldCBwcm92aWRlVHlwZURlZmluaXRpb24gPSAoZG9jdW1lbnQsIHBvc2l0aW9uLCB0b2tlbikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LnNlbmRSZXF1ZXN0KHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF8xLlR5cGVEZWZpbml0aW9uUmVxdWVzdC50eXBlLCBjbGllbnQuY29kZTJQcm90b2NvbENvbnZlcnRlci5hc1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKGRvY3VtZW50LCBwb3NpdGlvbiksIHRva2VuKS50aGVuKGNsaWVudC5wcm90b2NvbDJDb2RlQ29udmVydGVyLmFzRGVmaW5pdGlvblJlc3VsdCwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQubG9nRmFpbGVkUmVxdWVzdCh2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMS5UeXBlRGVmaW5pdGlvblJlcXVlc3QudHlwZSwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgbWlkZGxld2FyZSA9IGNsaWVudC5jbGllbnRPcHRpb25zLm1pZGRsZXdhcmU7XHJcbiAgICAgICAgcmV0dXJuIHZzY29kZV8xLmxhbmd1YWdlcy5yZWdpc3RlclR5cGVEZWZpbml0aW9uUHJvdmlkZXIob3B0aW9ucy5kb2N1bWVudFNlbGVjdG9yLCB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVUeXBlRGVmaW5pdGlvbjogKGRvY3VtZW50LCBwb3NpdGlvbiwgdG9rZW4pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtaWRkbGV3YXJlLnByb3ZpZGVUeXBlRGVmaW5pdGlvblxyXG4gICAgICAgICAgICAgICAgICAgID8gbWlkZGxld2FyZS5wcm92aWRlVHlwZURlZmluaXRpb24oZG9jdW1lbnQsIHBvc2l0aW9uLCB0b2tlbiwgcHJvdmlkZVR5cGVEZWZpbml0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIDogcHJvdmlkZVR5cGVEZWZpbml0aW9uKGRvY3VtZW50LCBwb3NpdGlvbiwgdG9rZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UeXBlRGVmaW5pdGlvbkZlYXR1cmUgPSBUeXBlRGVmaW5pdGlvbkZlYXR1cmU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/typeDefinition.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/utils/async.js":
/*!***************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/utils/async.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Delayer {\r\n    constructor(defaultDelay) {\r\n        this.defaultDelay = defaultDelay;\r\n        this.timeout = undefined;\r\n        this.completionPromise = undefined;\r\n        this.onSuccess = undefined;\r\n        this.task = undefined;\r\n    }\r\n    trigger(task, delay = this.defaultDelay) {\r\n        this.task = task;\r\n        if (delay >= 0) {\r\n            this.cancelTimeout();\r\n        }\r\n        if (!this.completionPromise) {\r\n            this.completionPromise = new Promise((resolve) => {\r\n                this.onSuccess = resolve;\r\n            }).then(() => {\r\n                this.completionPromise = undefined;\r\n                this.onSuccess = undefined;\r\n                var result = this.task();\r\n                this.task = undefined;\r\n                return result;\r\n            });\r\n        }\r\n        if (delay >= 0 || this.timeout === void 0) {\r\n            this.timeout = setTimeout(() => {\r\n                this.timeout = undefined;\r\n                this.onSuccess(undefined);\r\n            }, delay >= 0 ? delay : this.defaultDelay);\r\n        }\r\n        return this.completionPromise;\r\n    }\r\n    forceDelivery() {\r\n        if (!this.completionPromise) {\r\n            return undefined;\r\n        }\r\n        this.cancelTimeout();\r\n        let result = this.task();\r\n        this.completionPromise = undefined;\r\n        this.onSuccess = undefined;\r\n        this.task = undefined;\r\n        return result;\r\n    }\r\n    isTriggered() {\r\n        return this.timeout !== void 0;\r\n    }\r\n    cancel() {\r\n        this.cancelTimeout();\r\n        this.completionPromise = undefined;\r\n    }\r\n    cancelTimeout() {\r\n        if (this.timeout !== void 0) {\r\n            clearTimeout(this.timeout);\r\n            this.timeout = undefined;\r\n        }\r\n    }\r\n}\r\nexports.Delayer = Delayer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi91dGlscy9hc3luYy5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi91dGlscy9hc3luYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBEZWxheWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGRlZmF1bHREZWxheSkge1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdERlbGF5ID0gZGVmYXVsdERlbGF5O1xyXG4gICAgICAgIHRoaXMudGltZW91dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmNvbXBsZXRpb25Qcm9taXNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMub25TdWNjZXNzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudGFzayA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHRyaWdnZXIodGFzaywgZGVsYXkgPSB0aGlzLmRlZmF1bHREZWxheSkge1xyXG4gICAgICAgIHRoaXMudGFzayA9IHRhc2s7XHJcbiAgICAgICAgaWYgKGRlbGF5ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5jb21wbGV0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRpb25Qcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25TdWNjZXNzID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRpb25Qcm9taXNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblN1Y2Nlc3MgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy50YXNrKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhc2sgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlbGF5ID49IDAgfHwgdGhpcy50aW1lb3V0ID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uU3VjY2Vzcyh1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9LCBkZWxheSA+PSAwID8gZGVsYXkgOiB0aGlzLmRlZmF1bHREZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRpb25Qcm9taXNlO1xyXG4gICAgfVxyXG4gICAgZm9yY2VEZWxpdmVyeSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY29tcGxldGlvblByb21pc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMudGFzaygpO1xyXG4gICAgICAgIHRoaXMuY29tcGxldGlvblByb21pc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5vblN1Y2Nlc3MgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy50YXNrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBpc1RyaWdnZXJlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aW1lb3V0ICE9PSB2b2lkIDA7XHJcbiAgICB9XHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KCk7XHJcbiAgICAgICAgdGhpcy5jb21wbGV0aW9uUHJvbWlzZSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGNhbmNlbFRpbWVvdXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZW91dCAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGVsYXllciA9IERlbGF5ZXI7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/utils/async.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/utils/is.js":
/*!************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/utils/is.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction boolean(value) {\r\n    return value === true || value === false;\r\n}\r\nexports.boolean = boolean;\r\nfunction string(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\nexports.string = string;\r\nfunction number(value) {\r\n    return typeof value === 'number' || value instanceof Number;\r\n}\r\nexports.number = number;\r\nfunction error(value) {\r\n    return value instanceof Error;\r\n}\r\nexports.error = error;\r\nfunction func(value) {\r\n    return typeof value === 'function';\r\n}\r\nexports.func = func;\r\nfunction array(value) {\r\n    return Array.isArray(value);\r\n}\r\nexports.array = array;\r\nfunction stringArray(value) {\r\n    return array(value) && value.every(elem => string(elem));\r\n}\r\nexports.stringArray = stringArray;\r\nfunction typedArray(value, check) {\r\n    return Array.isArray(value) && value.every(check);\r\n}\r\nexports.typedArray = typedArray;\r\nfunction thenable(value) {\r\n    return value && func(value.then);\r\n}\r\nexports.thenable = thenable;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi91dGlscy9pcy5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi91dGlscy9pcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuYm9vbGVhbiA9IGJvb2xlYW47XHJcbmZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XHJcbn1cclxuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XHJcbmZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXI7XHJcbn1cclxuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XHJcbmZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFcnJvcjtcclxufVxyXG5leHBvcnRzLmVycm9yID0gZXJyb3I7XHJcbmZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuZXhwb3J0cy5mdW5jID0gZnVuYztcclxuZnVuY3Rpb24gYXJyYXkodmFsdWUpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcclxufVxyXG5leHBvcnRzLmFycmF5ID0gYXJyYXk7XHJcbmZ1bmN0aW9uIHN0cmluZ0FycmF5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gYXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGVsZW0gPT4gc3RyaW5nKGVsZW0pKTtcclxufVxyXG5leHBvcnRzLnN0cmluZ0FycmF5ID0gc3RyaW5nQXJyYXk7XHJcbmZ1bmN0aW9uIHR5cGVkQXJyYXkodmFsdWUsIGNoZWNrKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoY2hlY2spO1xyXG59XHJcbmV4cG9ydHMudHlwZWRBcnJheSA9IHR5cGVkQXJyYXk7XHJcbmZ1bmN0aW9uIHRoZW5hYmxlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgJiYgZnVuYyh2YWx1ZS50aGVuKTtcclxufVxyXG5leHBvcnRzLnRoZW5hYmxlID0gdGhlbmFibGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/utils/is.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/utils/processes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/utils/processes.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__dirname) {/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cp = __webpack_require__(/*! child_process */ \"child_process\");\r\nconst path_1 = __webpack_require__(/*! path */ \"path\");\r\nconst isWindows = (process.platform === 'win32');\r\nconst isMacintosh = (process.platform === 'darwin');\r\nconst isLinux = (process.platform === 'linux');\r\nfunction terminate(process, cwd) {\r\n    if (isWindows) {\r\n        try {\r\n            // This we run in Atom execFileSync is available.\r\n            // Ignore stderr since this is otherwise piped to parent.stderr\r\n            // which might be already closed.\r\n            let options = {\r\n                stdio: ['pipe', 'pipe', 'ignore']\r\n            };\r\n            if (cwd) {\r\n                options.cwd = cwd;\r\n            }\r\n            cp.execFileSync('taskkill', ['/T', '/F', '/PID', process.pid.toString()], options);\r\n            return true;\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    else if (isLinux || isMacintosh) {\r\n        try {\r\n            var cmd = path_1.join(__dirname, 'terminateProcess.sh');\r\n            var result = cp.spawnSync(cmd, [process.pid.toString()]);\r\n            return result.error ? false : true;\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        process.kill('SIGKILL');\r\n        return true;\r\n    }\r\n}\r\nexports.terminate = terminate;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi91dGlscy9wcm9jZXNzZXMuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL3ZzY29kZS1sYW5ndWFnZWNsaWVudC9saWIvdXRpbHMvcHJvY2Vzc2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGNwID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XHJcbmNvbnN0IHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBpc1dpbmRvd3MgPSAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyk7XHJcbmNvbnN0IGlzTWFjaW50b3NoID0gKHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nKTtcclxuY29uc3QgaXNMaW51eCA9IChwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnKTtcclxuZnVuY3Rpb24gdGVybWluYXRlKHByb2Nlc3MsIGN3ZCkge1xyXG4gICAgaWYgKGlzV2luZG93cykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgd2UgcnVuIGluIEF0b20gZXhlY0ZpbGVTeW5jIGlzIGF2YWlsYWJsZS5cclxuICAgICAgICAgICAgLy8gSWdub3JlIHN0ZGVyciBzaW5jZSB0aGlzIGlzIG90aGVyd2lzZSBwaXBlZCB0byBwYXJlbnQuc3RkZXJyXHJcbiAgICAgICAgICAgIC8vIHdoaWNoIG1pZ2h0IGJlIGFscmVhZHkgY2xvc2VkLlxyXG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIHN0ZGlvOiBbJ3BpcGUnLCAncGlwZScsICdpZ25vcmUnXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoY3dkKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmN3ZCA9IGN3ZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjcC5leGVjRmlsZVN5bmMoJ3Rhc2traWxsJywgWycvVCcsICcvRicsICcvUElEJywgcHJvY2Vzcy5waWQudG9TdHJpbmcoKV0sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNMaW51eCB8fCBpc01hY2ludG9zaCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBjbWQgPSBwYXRoXzEuam9pbihfX2Rpcm5hbWUsICd0ZXJtaW5hdGVQcm9jZXNzLnNoJyk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjcC5zcGF3blN5bmMoY21kLCBbcHJvY2Vzcy5waWQudG9TdHJpbmcoKV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmVycm9yID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBwcm9jZXNzLmtpbGwoJ1NJR0tJTEwnKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnRlcm1pbmF0ZSA9IHRlcm1pbmF0ZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/utils/processes.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/utils/uuid.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/utils/uuid.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ValueUUID {\r\n    constructor(_value) {\r\n        this._value = _value;\r\n        // empty\r\n    }\r\n    asHex() {\r\n        return this._value;\r\n    }\r\n    equals(other) {\r\n        return this.asHex() === other.asHex();\r\n    }\r\n}\r\nclass V4UUID extends ValueUUID {\r\n    constructor() {\r\n        super([\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            '-',\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            '-',\r\n            '4',\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            '-',\r\n            V4UUID._oneOf(V4UUID._timeHighBits),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            '-',\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n            V4UUID._randomHex(),\r\n        ].join(''));\r\n    }\r\n    static _oneOf(array) {\r\n        return array[Math.floor(array.length * Math.random())];\r\n    }\r\n    static _randomHex() {\r\n        return V4UUID._oneOf(V4UUID._chars);\r\n    }\r\n}\r\nV4UUID._chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\r\nV4UUID._timeHighBits = ['8', '9', 'a', 'b'];\r\n/**\r\n * An empty UUID that contains only zeros.\r\n */\r\nexports.empty = new ValueUUID('00000000-0000-0000-0000-000000000000');\r\nfunction v4() {\r\n    return new V4UUID();\r\n}\r\nexports.v4 = v4;\r\nconst _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r\nfunction isUUID(value) {\r\n    return _UUIDPattern.test(value);\r\n}\r\nexports.isUUID = isUUID;\r\n/**\r\n * Parses a UUID that is of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.\r\n * @param value A uuid string.\r\n */\r\nfunction parse(value) {\r\n    if (!isUUID(value)) {\r\n        throw new Error('invalid uuid');\r\n    }\r\n    return new ValueUUID(value);\r\n}\r\nexports.parse = parse;\r\nfunction generateUuid() {\r\n    return v4().asHex();\r\n}\r\nexports.generateUuid = generateUuid;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi91dGlscy91dWlkLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VjbGllbnQvbGliL3V0aWxzL3V1aWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBWYWx1ZVVVSUQge1xyXG4gICAgY29uc3RydWN0b3IoX3ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBfdmFsdWU7XHJcbiAgICAgICAgLy8gZW1wdHlcclxuICAgIH1cclxuICAgIGFzSGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuICAgIGVxdWFscyhvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFzSGV4KCkgPT09IG90aGVyLmFzSGV4KCk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgVjRVVUlEIGV4dGVuZHMgVmFsdWVVVUlEIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKFtcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgJy0nLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICAnLScsXHJcbiAgICAgICAgICAgICc0JyxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgJy0nLFxyXG4gICAgICAgICAgICBWNFVVSUQuX29uZU9mKFY0VVVJRC5fdGltZUhpZ2hCaXRzKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgVjRVVUlELl9yYW5kb21IZXgoKSxcclxuICAgICAgICAgICAgJy0nLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgICAgICBWNFVVSUQuX3JhbmRvbUhleCgpLFxyXG4gICAgICAgIF0uam9pbignJykpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIF9vbmVPZihhcnJheSkge1xyXG4gICAgICAgIHJldHVybiBhcnJheVtNYXRoLmZsb29yKGFycmF5Lmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpXTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBfcmFuZG9tSGV4KCkge1xyXG4gICAgICAgIHJldHVybiBWNFVVSUQuX29uZU9mKFY0VVVJRC5fY2hhcnMpO1xyXG4gICAgfVxyXG59XHJcblY0VVVJRC5fY2hhcnMgPSBbJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNicsICc3JywgJzgnLCAnOScsICdhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZiddO1xyXG5WNFVVSUQuX3RpbWVIaWdoQml0cyA9IFsnOCcsICc5JywgJ2EnLCAnYiddO1xyXG4vKipcclxuICogQW4gZW1wdHkgVVVJRCB0aGF0IGNvbnRhaW5zIG9ubHkgemVyb3MuXHJcbiAqL1xyXG5leHBvcnRzLmVtcHR5ID0gbmV3IFZhbHVlVVVJRCgnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJyk7XHJcbmZ1bmN0aW9uIHY0KCkge1xyXG4gICAgcmV0dXJuIG5ldyBWNFVVSUQoKTtcclxufVxyXG5leHBvcnRzLnY0ID0gdjQ7XHJcbmNvbnN0IF9VVUlEUGF0dGVybiA9IC9eWzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17MTJ9JC9pO1xyXG5mdW5jdGlvbiBpc1VVSUQodmFsdWUpIHtcclxuICAgIHJldHVybiBfVVVJRFBhdHRlcm4udGVzdCh2YWx1ZSk7XHJcbn1cclxuZXhwb3J0cy5pc1VVSUQgPSBpc1VVSUQ7XHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBVVUlEIHRoYXQgaXMgb2YgdGhlIGZvcm1hdCB4eHh4eHh4eC14eHh4LXh4eHgteHh4eC14eHh4eHh4eHh4eHguXHJcbiAqIEBwYXJhbSB2YWx1ZSBBIHV1aWQgc3RyaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcclxuICAgIGlmICghaXNVVUlEKHZhbHVlKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB1dWlkJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFZhbHVlVVVJRCh2YWx1ZSk7XHJcbn1cclxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZVV1aWQoKSB7XHJcbiAgICByZXR1cm4gdjQoKS5hc0hleCgpO1xyXG59XHJcbmV4cG9ydHMuZ2VuZXJhdGVVdWlkID0gZ2VuZXJhdGVVdWlkO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/utils/uuid.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/workspaceFolders.js":
/*!********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/workspaceFolders.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UUID = __webpack_require__(/*! ./utils/uuid */ \"./node_modules/vscode-languageclient/lib/utils/uuid.js\");\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ \"./node_modules/vscode-languageserver-protocol/lib/main.js\");\r\nfunction access(target, key) {\r\n    if (target === void 0) {\r\n        return undefined;\r\n    }\r\n    return target[key];\r\n}\r\nclass WorkspaceFoldersFeature {\r\n    constructor(_client) {\r\n        this._client = _client;\r\n        this._listeners = new Map();\r\n    }\r\n    get messages() {\r\n        return vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type;\r\n    }\r\n    fillInitializeParams(params) {\r\n        let folders = vscode_1.workspace.workspaceFolders;\r\n        if (folders === void 0) {\r\n            params.workspaceFolders = null;\r\n        }\r\n        else {\r\n            params.workspaceFolders = folders.map(folder => this.asProtocol(folder));\r\n        }\r\n    }\r\n    fillClientCapabilities(capabilities) {\r\n        capabilities.workspace = capabilities.workspace || {};\r\n        capabilities.workspace.workspaceFolders = true;\r\n    }\r\n    initialize(capabilities) {\r\n        let client = this._client;\r\n        client.onRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type, (token) => {\r\n            let workspaceFolders = () => {\r\n                let folders = vscode_1.workspace.workspaceFolders;\r\n                if (folders === void 0) {\r\n                    return null;\r\n                }\r\n                let result = folders.map((folder) => {\r\n                    return this.asProtocol(folder);\r\n                });\r\n                return result;\r\n            };\r\n            let middleware = client.clientOptions.middleware.workspace;\r\n            return middleware && middleware.workspaceFolders\r\n                ? middleware.workspaceFolders(token, workspaceFolders)\r\n                : workspaceFolders(token);\r\n        });\r\n        let value = access(access(access(capabilities, 'workspace'), 'workspaceFolders'), 'changeNotifications');\r\n        let id;\r\n        if (typeof value === 'string') {\r\n            id = value;\r\n        }\r\n        else if (value === true) {\r\n            id = UUID.generateUuid();\r\n        }\r\n        if (id) {\r\n            this.register(this.messages, {\r\n                id: id,\r\n                registerOptions: undefined\r\n            });\r\n        }\r\n    }\r\n    register(_message, data) {\r\n        let id = data.id;\r\n        let client = this._client;\r\n        let disposable = vscode_1.workspace.onDidChangeWorkspaceFolders((event) => {\r\n            let didChangeWorkspaceFolders = (event) => {\r\n                let params = {\r\n                    event: {\r\n                        added: event.added.map(folder => this.asProtocol(folder)),\r\n                        removed: event.removed.map(folder => this.asProtocol(folder))\r\n                    }\r\n                };\r\n                this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, params);\r\n            };\r\n            let middleware = client.clientOptions.middleware.workspace;\r\n            middleware && middleware.didChangeWorkspaceFolders\r\n                ? middleware.didChangeWorkspaceFolders(event, didChangeWorkspaceFolders)\r\n                : didChangeWorkspaceFolders(event);\r\n        });\r\n        this._listeners.set(id, disposable);\r\n    }\r\n    unregister(id) {\r\n        let disposable = this._listeners.get(id);\r\n        if (disposable === void 0) {\r\n            return;\r\n        }\r\n        this._listeners.delete(id);\r\n        disposable.dispose();\r\n    }\r\n    dispose() {\r\n        for (let disposable of this._listeners.values()) {\r\n            disposable.dispose();\r\n        }\r\n        this._listeners.clear();\r\n    }\r\n    asProtocol(workspaceFolder) {\r\n        if (workspaceFolder === void 0) {\r\n            return null;\r\n        }\r\n        return { uri: this._client.code2ProtocolConverter.asUri(workspaceFolder.uri), name: workspaceFolder.name };\r\n    }\r\n}\r\nexports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlY2xpZW50L2xpYi93b3Jrc3BhY2VGb2xkZXJzLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VjbGllbnQvbGliL3dvcmtzcGFjZUZvbGRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgVVVJRCA9IHJlcXVpcmUoXCIuL3V0aWxzL3V1aWRcIik7XHJcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY29uc3QgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEgPSByZXF1aXJlKFwidnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sXCIpO1xyXG5mdW5jdGlvbiBhY2Nlc3ModGFyZ2V0LCBrZXkpIHtcclxuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0W2tleV07XHJcbn1cclxuY2xhc3MgV29ya3NwYWNlRm9sZGVyc0ZlYXR1cmUge1xyXG4gICAgY29uc3RydWN0b3IoX2NsaWVudCkge1xyXG4gICAgICAgIHRoaXMuX2NsaWVudCA9IF9jbGllbnQ7XHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgZ2V0IG1lc3NhZ2VzKCkge1xyXG4gICAgICAgIHJldHVybiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfMS5EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uLnR5cGU7XHJcbiAgICB9XHJcbiAgICBmaWxsSW5pdGlhbGl6ZVBhcmFtcyhwYXJhbXMpIHtcclxuICAgICAgICBsZXQgZm9sZGVycyA9IHZzY29kZV8xLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzO1xyXG4gICAgICAgIGlmIChmb2xkZXJzID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgcGFyYW1zLndvcmtzcGFjZUZvbGRlcnMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zLndvcmtzcGFjZUZvbGRlcnMgPSBmb2xkZXJzLm1hcChmb2xkZXIgPT4gdGhpcy5hc1Byb3RvY29sKGZvbGRlcikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZpbGxDbGllbnRDYXBhYmlsaXRpZXMoY2FwYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgY2FwYWJpbGl0aWVzLndvcmtzcGFjZSA9IGNhcGFiaWxpdGllcy53b3Jrc3BhY2UgfHwge307XHJcbiAgICAgICAgY2FwYWJpbGl0aWVzLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGluaXRpYWxpemUoY2FwYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgbGV0IGNsaWVudCA9IHRoaXMuX2NsaWVudDtcclxuICAgICAgICBjbGllbnQub25SZXF1ZXN0KHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF8xLldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0LnR5cGUsICh0b2tlbikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgd29ya3NwYWNlRm9sZGVycyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBmb2xkZXJzID0gdnNjb2RlXzEud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnM7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9sZGVycyA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZm9sZGVycy5tYXAoKGZvbGRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFzUHJvdG9jb2woZm9sZGVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IG1pZGRsZXdhcmUgPSBjbGllbnQuY2xpZW50T3B0aW9ucy5taWRkbGV3YXJlLndvcmtzcGFjZTtcclxuICAgICAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUgJiYgbWlkZGxld2FyZS53b3Jrc3BhY2VGb2xkZXJzXHJcbiAgICAgICAgICAgICAgICA/IG1pZGRsZXdhcmUud29ya3NwYWNlRm9sZGVycyh0b2tlbiwgd29ya3NwYWNlRm9sZGVycylcclxuICAgICAgICAgICAgICAgIDogd29ya3NwYWNlRm9sZGVycyh0b2tlbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gYWNjZXNzKGFjY2VzcyhhY2Nlc3MoY2FwYWJpbGl0aWVzLCAnd29ya3NwYWNlJyksICd3b3Jrc3BhY2VGb2xkZXJzJyksICdjaGFuZ2VOb3RpZmljYXRpb25zJyk7XHJcbiAgICAgICAgbGV0IGlkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlkID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlkID0gVVVJRC5nZW5lcmF0ZVV1aWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5tZXNzYWdlcywge1xyXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJPcHRpb25zOiB1bmRlZmluZWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXIoX21lc3NhZ2UsIGRhdGEpIHtcclxuICAgICAgICBsZXQgaWQgPSBkYXRhLmlkO1xyXG4gICAgICAgIGxldCBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XHJcbiAgICAgICAgbGV0IGRpc3Bvc2FibGUgPSB2c2NvZGVfMS53b3Jrc3BhY2Uub25EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzKChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVycyA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRlZDogZXZlbnQuYWRkZWQubWFwKGZvbGRlciA9PiB0aGlzLmFzUHJvdG9jb2woZm9sZGVyKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQ6IGV2ZW50LnJlbW92ZWQubWFwKGZvbGRlciA9PiB0aGlzLmFzUHJvdG9jb2woZm9sZGVyKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpZW50LnNlbmROb3RpZmljYXRpb24odnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sXzEuRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbi50eXBlLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgbWlkZGxld2FyZSA9IGNsaWVudC5jbGllbnRPcHRpb25zLm1pZGRsZXdhcmUud29ya3NwYWNlO1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlICYmIG1pZGRsZXdhcmUuZGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc1xyXG4gICAgICAgICAgICAgICAgPyBtaWRkbGV3YXJlLmRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnMoZXZlbnQsIGRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnMpXHJcbiAgICAgICAgICAgICAgICA6IGRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnMoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5zZXQoaWQsIGRpc3Bvc2FibGUpO1xyXG4gICAgfVxyXG4gICAgdW5yZWdpc3RlcihpZCkge1xyXG4gICAgICAgIGxldCBkaXNwb3NhYmxlID0gdGhpcy5fbGlzdGVuZXJzLmdldChpZCk7XHJcbiAgICAgICAgaWYgKGRpc3Bvc2FibGUgPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5kZWxldGUoaWQpO1xyXG4gICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBmb3IgKGxldCBkaXNwb3NhYmxlIG9mIHRoaXMuX2xpc3RlbmVycy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmNsZWFyKCk7XHJcbiAgICB9XHJcbiAgICBhc1Byb3RvY29sKHdvcmtzcGFjZUZvbGRlcikge1xyXG4gICAgICAgIGlmICh3b3Jrc3BhY2VGb2xkZXIgPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXJpOiB0aGlzLl9jbGllbnQuY29kZTJQcm90b2NvbENvbnZlcnRlci5hc1VyaSh3b3Jrc3BhY2VGb2xkZXIudXJpKSwgbmFtZTogd29ya3NwYWNlRm9sZGVyLm5hbWUgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLldvcmtzcGFjZUZvbGRlcnNGZWF0dXJlID0gV29ya3NwYWNlRm9sZGVyc0ZlYXR1cmU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/lib/workspaceFolders.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageclient/node_modules/semver/semver.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/node_modules/semver/semver.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n/* nomin */ var debug;\n/* nomin */ if (typeof process === 'object' &&\n    /* nomin */ process.env &&\n    /* nomin */ process.env.NODE_DEBUG &&\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))\n  /* nomin */ debug = function() {\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);\n    /* nomin */ args.unshift('SEMVER');\n    /* nomin */ console.log.apply(console, args);\n    /* nomin */ };\n/* nomin */ else\n  /* nomin */ debug = function() {};\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\nvar MAX_LENGTH = 256;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16;\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\nvar COERCE = R++;\nsrc[COERCE] = '(?:^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i]);\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  if (version instanceof SemVer)\n    return version;\n\n  if (typeof version !== 'string')\n    return null;\n\n  if (version.length > MAX_LENGTH)\n    return null;\n\n  var r = options.loose ? re[LOOSE] : re[FULL];\n  if (!r.test(version))\n    return null;\n\n  try {\n    return new SemVer(version, options);\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.valid = valid;\nfunction valid(version, options) {\n  var v = parse(version, options);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (version.length > MAX_LENGTH)\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, options);\n\n  debug('SemVer', version, options);\n  this.options = options;\n  this.loose = !!options.loose;\n\n  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0)\n    throw new TypeError('Invalid major version')\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)\n    throw new TypeError('Invalid minor version')\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)\n    throw new TypeError('Invalid patch version')\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id;\n        if (num >= 0 && num < MAX_SAFE_INTEGER)\n          return num;\n      }\n      return id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  debug('SemVer.compare', this.version, this.options, other);\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.options);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.options);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.options);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    debug('prerelease compare', i, a, b);\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  this.raw = this.version;\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose));\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, options);\n\n  debug('comparator', comp, options);\n  this.options = options;\n  this.loose = !!options.loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  debug('comp', this);\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.options.loose);\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  debug('Comparator.test', version, this.options.loose);\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.options);\n\n  return cmp(version, this.operator, this.semver, this.options);\n};\n\nComparator.prototype.intersects = function(comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required');\n  }\n\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  var rangeTmp;\n\n  if (this.operator === '') {\n    rangeTmp = new Range(comp.value, options);\n    return satisfies(this.value, rangeTmp, options);\n  } else if (comp.operator === '') {\n    rangeTmp = new Range(this.value, options);\n    return satisfies(comp.semver, rangeTmp, options);\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>');\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<');\n  var sameSemVer = this.semver.version === comp.semver.version;\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=');\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'));\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'));\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;\n};\n\n\nexports.Range = Range;\nfunction Range(range, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range;\n    } else {\n      return new Range(range.raw, options);\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options);\n  }\n\n  if (!(this instanceof Range))\n    return new Range(range, options);\n\n  this.options = options;\n  this.loose = !!options.loose;\n  this.includePrerelease = !!options.includePrerelease\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.options.loose;\n  range = range.trim();\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  debug('hyphen replace', range);\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  debug('comparator trim', range, re[COMPARATORTRIM]);\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, this.options);\n  }, this).join(' ').split(/\\s+/);\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, this.options);\n  }, this);\n\n  return set;\n};\n\nRange.prototype.intersects = function(range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required');\n  }\n\n  return this.set.some(function(thisComparators) {\n    return thisComparators.every(function(thisComparator) {\n      return range.set.some(function(rangeComparators) {\n        return rangeComparators.every(function(rangeComparator) {\n          return thisComparator.intersects(rangeComparator, options);\n        });\n      });\n    });\n  });\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, options) {\n  return new Range(range, options).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, options) {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, options) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, options);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, options) {\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  var r = options.loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      debug('replaceTilde pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, options) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, options);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, options) {\n  debug('caret', comp, options);\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  var r = options.loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      debug('no pr');\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, options) {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, options);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, options) {\n  comp = comp.trim();\n  if (!options || typeof options !== 'object')\n    options = { loose: !!options, includePrerelease: false }\n  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n        if (xm)\n          M = +M + 1;\n        else\n          m = +m + 1;\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    debug('xRange return', ret);\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, options) {\n  debug('replaceStars', comp, options);\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.options);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (!options)\n    options = {}\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n      if (set[i].semver === ANY)\n        continue;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, options) {\n  try {\n    range = new Range(range, options);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, options) {\n  var max = null;\n  var maxSV = null;\n  try {\n    var rangeObj = new Range(range, options);\n  } catch (er) {\n    return null;\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) { // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)\n        max = v;\n        maxSV = new SemVer(max, options);\n      }\n    }\n  })\n  return max;\n}\n\nexports.minSatisfying = minSatisfying;\nfunction minSatisfying(versions, range, options) {\n  var min = null;\n  var minSV = null;\n  try {\n    var rangeObj = new Range(range, options);\n  } catch (er) {\n    return null;\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) { // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) { // compare(min, v, true)\n        min = v;\n        minSV = new SemVer(min, options);\n      }\n    }\n  })\n  return min;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, options) {\n  return outside(version, range, '<', options);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, options) {\n  return outside(version, range, '>', options);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, options) {\n  version = new SemVer(version, options);\n  range = new Range(range, options);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexports.prerelease = prerelease;\nfunction prerelease(version, options) {\n  var parsed = parse(version, options);\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;\n}\n\nexports.intersects = intersects;\nfunction intersects(r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce;\nfunction coerce(version) {\n  if (version instanceof SemVer)\n    return version;\n\n  if (typeof version !== 'string')\n    return null;\n\n  var match = version.match(re[COERCE]);\n\n  if (match == null)\n    return null;\n\n  return parse((match[1] || '0') + '.' + (match[2] || '0') + '.' + (match[3] || '0')); \n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageclient/node_modules/semver/semver.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/main.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/main.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\nexports.ErrorCodes = vscode_jsonrpc_1.ErrorCodes;\r\nexports.ResponseError = vscode_jsonrpc_1.ResponseError;\r\nexports.CancellationToken = vscode_jsonrpc_1.CancellationToken;\r\nexports.CancellationTokenSource = vscode_jsonrpc_1.CancellationTokenSource;\r\nexports.Disposable = vscode_jsonrpc_1.Disposable;\r\nexports.Event = vscode_jsonrpc_1.Event;\r\nexports.Emitter = vscode_jsonrpc_1.Emitter;\r\nexports.Trace = vscode_jsonrpc_1.Trace;\r\nexports.TraceFormat = vscode_jsonrpc_1.TraceFormat;\r\nexports.SetTraceNotification = vscode_jsonrpc_1.SetTraceNotification;\r\nexports.LogTraceNotification = vscode_jsonrpc_1.LogTraceNotification;\r\nexports.RequestType = vscode_jsonrpc_1.RequestType;\r\nexports.RequestType0 = vscode_jsonrpc_1.RequestType0;\r\nexports.NotificationType = vscode_jsonrpc_1.NotificationType;\r\nexports.NotificationType0 = vscode_jsonrpc_1.NotificationType0;\r\nexports.MessageReader = vscode_jsonrpc_1.MessageReader;\r\nexports.MessageWriter = vscode_jsonrpc_1.MessageWriter;\r\nexports.ConnectionStrategy = vscode_jsonrpc_1.ConnectionStrategy;\r\nexports.StreamMessageReader = vscode_jsonrpc_1.StreamMessageReader;\r\nexports.StreamMessageWriter = vscode_jsonrpc_1.StreamMessageWriter;\r\nexports.IPCMessageReader = vscode_jsonrpc_1.IPCMessageReader;\r\nexports.IPCMessageWriter = vscode_jsonrpc_1.IPCMessageWriter;\r\nexports.createClientPipeTransport = vscode_jsonrpc_1.createClientPipeTransport;\r\nexports.createServerPipeTransport = vscode_jsonrpc_1.createServerPipeTransport;\r\nexports.generateRandomPipeName = vscode_jsonrpc_1.generateRandomPipeName;\r\nexports.createClientSocketTransport = vscode_jsonrpc_1.createClientSocketTransport;\r\nexports.createServerSocketTransport = vscode_jsonrpc_1.createServerSocketTransport;\r\n__export(__webpack_require__(/*! vscode-languageserver-types */ \"./node_modules/vscode-languageserver-types/lib/esm/main.js\"));\r\n__export(__webpack_require__(/*! ./protocol */ \"./node_modules/vscode-languageserver-protocol/lib/protocol.js\"));\r\nfunction createProtocolConnection(reader, writer, logger, strategy) {\r\n    return vscode_jsonrpc_1.createMessageConnection(reader, writer, logger, strategy);\r\n}\r\nexports.createProtocolConnection = createProtocolConnection;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9tYWluLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2wvbGliL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHZzY29kZV9qc29ucnBjXzEgPSByZXF1aXJlKFwidnNjb2RlLWpzb25ycGNcIik7XHJcbmV4cG9ydHMuRXJyb3JDb2RlcyA9IHZzY29kZV9qc29ucnBjXzEuRXJyb3JDb2RlcztcclxuZXhwb3J0cy5SZXNwb25zZUVycm9yID0gdnNjb2RlX2pzb25ycGNfMS5SZXNwb25zZUVycm9yO1xyXG5leHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gdnNjb2RlX2pzb25ycGNfMS5DYW5jZWxsYXRpb25Ub2tlbjtcclxuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlblNvdXJjZSA9IHZzY29kZV9qc29ucnBjXzEuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2U7XHJcbmV4cG9ydHMuRGlzcG9zYWJsZSA9IHZzY29kZV9qc29ucnBjXzEuRGlzcG9zYWJsZTtcclxuZXhwb3J0cy5FdmVudCA9IHZzY29kZV9qc29ucnBjXzEuRXZlbnQ7XHJcbmV4cG9ydHMuRW1pdHRlciA9IHZzY29kZV9qc29ucnBjXzEuRW1pdHRlcjtcclxuZXhwb3J0cy5UcmFjZSA9IHZzY29kZV9qc29ucnBjXzEuVHJhY2U7XHJcbmV4cG9ydHMuVHJhY2VGb3JtYXQgPSB2c2NvZGVfanNvbnJwY18xLlRyYWNlRm9ybWF0O1xyXG5leHBvcnRzLlNldFRyYWNlTm90aWZpY2F0aW9uID0gdnNjb2RlX2pzb25ycGNfMS5TZXRUcmFjZU5vdGlmaWNhdGlvbjtcclxuZXhwb3J0cy5Mb2dUcmFjZU5vdGlmaWNhdGlvbiA9IHZzY29kZV9qc29ucnBjXzEuTG9nVHJhY2VOb3RpZmljYXRpb247XHJcbmV4cG9ydHMuUmVxdWVzdFR5cGUgPSB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlO1xyXG5leHBvcnRzLlJlcXVlc3RUeXBlMCA9IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUwO1xyXG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGUgPSB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGU7XHJcbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTAgPSB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUwO1xyXG5leHBvcnRzLk1lc3NhZ2VSZWFkZXIgPSB2c2NvZGVfanNvbnJwY18xLk1lc3NhZ2VSZWFkZXI7XHJcbmV4cG9ydHMuTWVzc2FnZVdyaXRlciA9IHZzY29kZV9qc29ucnBjXzEuTWVzc2FnZVdyaXRlcjtcclxuZXhwb3J0cy5Db25uZWN0aW9uU3RyYXRlZ3kgPSB2c2NvZGVfanNvbnJwY18xLkNvbm5lY3Rpb25TdHJhdGVneTtcclxuZXhwb3J0cy5TdHJlYW1NZXNzYWdlUmVhZGVyID0gdnNjb2RlX2pzb25ycGNfMS5TdHJlYW1NZXNzYWdlUmVhZGVyO1xyXG5leHBvcnRzLlN0cmVhbU1lc3NhZ2VXcml0ZXIgPSB2c2NvZGVfanNvbnJwY18xLlN0cmVhbU1lc3NhZ2VXcml0ZXI7XHJcbmV4cG9ydHMuSVBDTWVzc2FnZVJlYWRlciA9IHZzY29kZV9qc29ucnBjXzEuSVBDTWVzc2FnZVJlYWRlcjtcclxuZXhwb3J0cy5JUENNZXNzYWdlV3JpdGVyID0gdnNjb2RlX2pzb25ycGNfMS5JUENNZXNzYWdlV3JpdGVyO1xyXG5leHBvcnRzLmNyZWF0ZUNsaWVudFBpcGVUcmFuc3BvcnQgPSB2c2NvZGVfanNvbnJwY18xLmNyZWF0ZUNsaWVudFBpcGVUcmFuc3BvcnQ7XHJcbmV4cG9ydHMuY3JlYXRlU2VydmVyUGlwZVRyYW5zcG9ydCA9IHZzY29kZV9qc29ucnBjXzEuY3JlYXRlU2VydmVyUGlwZVRyYW5zcG9ydDtcclxuZXhwb3J0cy5nZW5lcmF0ZVJhbmRvbVBpcGVOYW1lID0gdnNjb2RlX2pzb25ycGNfMS5nZW5lcmF0ZVJhbmRvbVBpcGVOYW1lO1xyXG5leHBvcnRzLmNyZWF0ZUNsaWVudFNvY2tldFRyYW5zcG9ydCA9IHZzY29kZV9qc29ucnBjXzEuY3JlYXRlQ2xpZW50U29ja2V0VHJhbnNwb3J0O1xyXG5leHBvcnRzLmNyZWF0ZVNlcnZlclNvY2tldFRyYW5zcG9ydCA9IHZzY29kZV9qc29ucnBjXzEuY3JlYXRlU2VydmVyU29ja2V0VHJhbnNwb3J0O1xyXG5fX2V4cG9ydChyZXF1aXJlKFwidnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vcHJvdG9jb2xcIikpO1xyXG5mdW5jdGlvbiBjcmVhdGVQcm90b2NvbENvbm5lY3Rpb24ocmVhZGVyLCB3cml0ZXIsIGxvZ2dlciwgc3RyYXRlZ3kpIHtcclxuICAgIHJldHVybiB2c2NvZGVfanNvbnJwY18xLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uKHJlYWRlciwgd3JpdGVyLCBsb2dnZXIsIHN0cmF0ZWd5KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiA9IGNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/main.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/protocol.colorProvider.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/protocol.colorProvider.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\n/**\r\n * A request to list all color symbols found in a given text document. The request's\r\n * parameter is of type [DocumentColorParams](#DocumentColorParams) the\r\n * response is of type [ColorInformation[]](#ColorInformation) or a Thenable\r\n * that resolves to such.\r\n */\r\nvar DocumentColorRequest;\r\n(function (DocumentColorRequest) {\r\n    DocumentColorRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentColor');\r\n})(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));\r\n/**\r\n * A request to list all presentation for a color. The request's\r\n * parameter is of type [ColorPresentationParams](#ColorPresentationParams) the\r\n * response is of type [ColorInformation[]](#ColorInformation) or a Thenable\r\n * that resolves to such.\r\n */\r\nvar ColorPresentationRequest;\r\n(function (ColorPresentationRequest) {\r\n    ColorPresentationRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/colorPresentation');\r\n})(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC5jb2xvclByb3ZpZGVyLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2wvbGliL3Byb3RvY29sLmNvbG9yUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtanNvbnJwY1wiKTtcclxuLyoqXHJcbiAqIEEgcmVxdWVzdCB0byBsaXN0IGFsbCBjb2xvciBzeW1ib2xzIGZvdW5kIGluIGEgZ2l2ZW4gdGV4dCBkb2N1bWVudC4gVGhlIHJlcXVlc3Qnc1xyXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBbRG9jdW1lbnRDb2xvclBhcmFtc10oI0RvY3VtZW50Q29sb3JQYXJhbXMpIHRoZVxyXG4gKiByZXNwb25zZSBpcyBvZiB0eXBlIFtDb2xvckluZm9ybWF0aW9uW11dKCNDb2xvckluZm9ybWF0aW9uKSBvciBhIFRoZW5hYmxlXHJcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cclxuICovXHJcbnZhciBEb2N1bWVudENvbG9yUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChEb2N1bWVudENvbG9yUmVxdWVzdCkge1xyXG4gICAgRG9jdW1lbnRDb2xvclJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRDb2xvcicpO1xyXG59KShEb2N1bWVudENvbG9yUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIGxpc3QgYWxsIHByZXNlbnRhdGlvbiBmb3IgYSBjb2xvci4gVGhlIHJlcXVlc3Qnc1xyXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBbQ29sb3JQcmVzZW50YXRpb25QYXJhbXNdKCNDb2xvclByZXNlbnRhdGlvblBhcmFtcykgdGhlXHJcbiAqIHJlc3BvbnNlIGlzIG9mIHR5cGUgW0NvbG9ySW5mb3JtYXRpb25bXV0oI0NvbG9ySW5mb3JtYXRpb24pIG9yIGEgVGhlbmFibGVcclxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxyXG4gKi9cclxudmFyIENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChDb2xvclByZXNlbnRhdGlvblJlcXVlc3QpIHtcclxuICAgIENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ3RleHREb2N1bWVudC9jb2xvclByZXNlbnRhdGlvbicpO1xyXG59KShDb2xvclByZXNlbnRhdGlvblJlcXVlc3QgPSBleHBvcnRzLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5Db2xvclByZXNlbnRhdGlvblJlcXVlc3QgPSB7fSkpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/protocol.colorProvider.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/protocol.configuration.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/protocol.configuration.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\n/**\r\n * The 'workspace/configuration' request is sent from the server to the client to fetch a certain\r\n * configuration setting.\r\n *\r\n * This pull model replaces the old push model were the client signaled configuration change via an\r\n * event. If the server still needs to react to configuration changes (since the server caches the\r\n * result of `workspace/configuration` requests) the server should register for an empty configuration\r\n * change event and empty the cache if such an event is received.\r\n */\r\nvar ConfigurationRequest;\r\n(function (ConfigurationRequest) {\r\n    ConfigurationRequest.type = new vscode_jsonrpc_1.RequestType('workspace/configuration');\r\n})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC5jb25maWd1cmF0aW9uLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2wvbGliL3Byb3RvY29sLmNvbmZpZ3VyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtanNvbnJwY1wiKTtcclxuLyoqXHJcbiAqIFRoZSAnd29ya3NwYWNlL2NvbmZpZ3VyYXRpb24nIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBmZXRjaCBhIGNlcnRhaW5cclxuICogY29uZmlndXJhdGlvbiBzZXR0aW5nLlxyXG4gKlxyXG4gKiBUaGlzIHB1bGwgbW9kZWwgcmVwbGFjZXMgdGhlIG9sZCBwdXNoIG1vZGVsIHdlcmUgdGhlIGNsaWVudCBzaWduYWxlZCBjb25maWd1cmF0aW9uIGNoYW5nZSB2aWEgYW5cclxuICogZXZlbnQuIElmIHRoZSBzZXJ2ZXIgc3RpbGwgbmVlZHMgdG8gcmVhY3QgdG8gY29uZmlndXJhdGlvbiBjaGFuZ2VzIChzaW5jZSB0aGUgc2VydmVyIGNhY2hlcyB0aGVcclxuICogcmVzdWx0IG9mIGB3b3Jrc3BhY2UvY29uZmlndXJhdGlvbmAgcmVxdWVzdHMpIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlZ2lzdGVyIGZvciBhbiBlbXB0eSBjb25maWd1cmF0aW9uXHJcbiAqIGNoYW5nZSBldmVudCBhbmQgZW1wdHkgdGhlIGNhY2hlIGlmIHN1Y2ggYW4gZXZlbnQgaXMgcmVjZWl2ZWQuXHJcbiAqL1xyXG52YXIgQ29uZmlndXJhdGlvblJlcXVlc3Q7XHJcbihmdW5jdGlvbiAoQ29uZmlndXJhdGlvblJlcXVlc3QpIHtcclxuICAgIENvbmZpZ3VyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgnd29ya3NwYWNlL2NvbmZpZ3VyYXRpb24nKTtcclxufSkoQ29uZmlndXJhdGlvblJlcXVlc3QgPSBleHBvcnRzLkNvbmZpZ3VyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkNvbmZpZ3VyYXRpb25SZXF1ZXN0ID0ge30pKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/protocol.configuration.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/protocol.foldingRange.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/protocol.foldingRange.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\n/**\r\n * Enum of known range kinds\r\n */\r\nvar FoldingRangeKind;\r\n(function (FoldingRangeKind) {\r\n    /**\r\n     * Folding range for a comment\r\n     */\r\n    FoldingRangeKind[\"Comment\"] = \"comment\";\r\n    /**\r\n     * Folding range for a imports or includes\r\n     */\r\n    FoldingRangeKind[\"Imports\"] = \"imports\";\r\n    /**\r\n     * Folding range for a region (e.g. `#region`)\r\n     */\r\n    FoldingRangeKind[\"Region\"] = \"region\";\r\n})(FoldingRangeKind = exports.FoldingRangeKind || (exports.FoldingRangeKind = {}));\r\n/**\r\n * A request to provide folding ranges in a document. The request's\r\n * parameter is of type [FoldingRangeParams](#FoldingRangeParams), the\r\n * response is of type [FoldingRangeList](#FoldingRangeList) or a Thenable\r\n * that resolves to such.\r\n */\r\nvar FoldingRangeRequest;\r\n(function (FoldingRangeRequest) {\r\n    FoldingRangeRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/foldingRange');\r\n})(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC5mb2xkaW5nUmFuZ2UuanMuanMiLCJzb3VyY2VzIjpbIi4uLy4vbm9kZV9tb2R1bGVzL3ZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbC9saWIvcHJvdG9jb2wuZm9sZGluZ1JhbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gcmVxdWlyZShcInZzY29kZS1qc29ucnBjXCIpO1xyXG4vKipcclxuICogRW51bSBvZiBrbm93biByYW5nZSBraW5kc1xyXG4gKi9cclxudmFyIEZvbGRpbmdSYW5nZUtpbmQ7XHJcbihmdW5jdGlvbiAoRm9sZGluZ1JhbmdlS2luZCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb2xkaW5nIHJhbmdlIGZvciBhIGNvbW1lbnRcclxuICAgICAqL1xyXG4gICAgRm9sZGluZ1JhbmdlS2luZFtcIkNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcclxuICAgIC8qKlxyXG4gICAgICogRm9sZGluZyByYW5nZSBmb3IgYSBpbXBvcnRzIG9yIGluY2x1ZGVzXHJcbiAgICAgKi9cclxuICAgIEZvbGRpbmdSYW5nZUtpbmRbXCJJbXBvcnRzXCJdID0gXCJpbXBvcnRzXCI7XHJcbiAgICAvKipcclxuICAgICAqIEZvbGRpbmcgcmFuZ2UgZm9yIGEgcmVnaW9uIChlLmcuIGAjcmVnaW9uYClcclxuICAgICAqL1xyXG4gICAgRm9sZGluZ1JhbmdlS2luZFtcIlJlZ2lvblwiXSA9IFwicmVnaW9uXCI7XHJcbn0pKEZvbGRpbmdSYW5nZUtpbmQgPSBleHBvcnRzLkZvbGRpbmdSYW5nZUtpbmQgfHwgKGV4cG9ydHMuRm9sZGluZ1JhbmdlS2luZCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBmb2xkaW5nIHJhbmdlcyBpbiBhIGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzXHJcbiAqIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtGb2xkaW5nUmFuZ2VQYXJhbXNdKCNGb2xkaW5nUmFuZ2VQYXJhbXMpLCB0aGVcclxuICogcmVzcG9uc2UgaXMgb2YgdHlwZSBbRm9sZGluZ1JhbmdlTGlzdF0oI0ZvbGRpbmdSYW5nZUxpc3QpIG9yIGEgVGhlbmFibGVcclxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxyXG4gKi9cclxudmFyIEZvbGRpbmdSYW5nZVJlcXVlc3Q7XHJcbihmdW5jdGlvbiAoRm9sZGluZ1JhbmdlUmVxdWVzdCkge1xyXG4gICAgRm9sZGluZ1JhbmdlUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ3RleHREb2N1bWVudC9mb2xkaW5nUmFuZ2UnKTtcclxufSkoRm9sZGluZ1JhbmdlUmVxdWVzdCA9IGV4cG9ydHMuRm9sZGluZ1JhbmdlUmVxdWVzdCB8fCAoZXhwb3J0cy5Gb2xkaW5nUmFuZ2VSZXF1ZXN0ID0ge30pKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/protocol.foldingRange.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/protocol.implementation.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/protocol.implementation.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\n/**\r\n * A request to resolve the implementation locations of a symbol at a given text\r\n * document position. The request's parameter is of type [TextDocumentPositioParams]\r\n * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a\r\n * Thenable that resolves to such.\r\n */\r\nvar ImplementationRequest;\r\n(function (ImplementationRequest) {\r\n    ImplementationRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/implementation');\r\n})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC5pbXBsZW1lbnRhdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC5pbXBsZW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gcmVxdWlyZShcInZzY29kZS1qc29ucnBjXCIpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIGltcGxlbWVudGF0aW9uIGxvY2F0aW9ucyBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcclxuICogZG9jdW1lbnQgcG9zaXRpb24uIFRoZSByZXF1ZXN0J3MgcGFyYW1ldGVyIGlzIG9mIHR5cGUgW1RleHREb2N1bWVudFBvc2l0aW9QYXJhbXNdXHJcbiAqICgjVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlIFtEZWZpbml0aW9uXSgjRGVmaW5pdGlvbikgb3IgYVxyXG4gKiBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXHJcbiAqL1xyXG52YXIgSW1wbGVtZW50YXRpb25SZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKEltcGxlbWVudGF0aW9uUmVxdWVzdCkge1xyXG4gICAgSW1wbGVtZW50YXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgndGV4dERvY3VtZW50L2ltcGxlbWVudGF0aW9uJyk7XHJcbn0pKEltcGxlbWVudGF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuSW1wbGVtZW50YXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkltcGxlbWVudGF0aW9uUmVxdWVzdCA9IHt9KSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/protocol.implementation.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/protocol.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/protocol.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Is = __webpack_require__(/*! ./utils/is */ \"./node_modules/vscode-languageserver-protocol/lib/utils/is.js\");\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\nconst protocol_implementation_1 = __webpack_require__(/*! ./protocol.implementation */ \"./node_modules/vscode-languageserver-protocol/lib/protocol.implementation.js\");\r\nexports.ImplementationRequest = protocol_implementation_1.ImplementationRequest;\r\nconst protocol_typeDefinition_1 = __webpack_require__(/*! ./protocol.typeDefinition */ \"./node_modules/vscode-languageserver-protocol/lib/protocol.typeDefinition.js\");\r\nexports.TypeDefinitionRequest = protocol_typeDefinition_1.TypeDefinitionRequest;\r\nconst protocol_workspaceFolders_1 = __webpack_require__(/*! ./protocol.workspaceFolders */ \"./node_modules/vscode-languageserver-protocol/lib/protocol.workspaceFolders.js\");\r\nexports.WorkspaceFoldersRequest = protocol_workspaceFolders_1.WorkspaceFoldersRequest;\r\nexports.DidChangeWorkspaceFoldersNotification = protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification;\r\nconst protocol_configuration_1 = __webpack_require__(/*! ./protocol.configuration */ \"./node_modules/vscode-languageserver-protocol/lib/protocol.configuration.js\");\r\nexports.ConfigurationRequest = protocol_configuration_1.ConfigurationRequest;\r\nconst protocol_colorProvider_1 = __webpack_require__(/*! ./protocol.colorProvider */ \"./node_modules/vscode-languageserver-protocol/lib/protocol.colorProvider.js\");\r\nexports.DocumentColorRequest = protocol_colorProvider_1.DocumentColorRequest;\r\nexports.ColorPresentationRequest = protocol_colorProvider_1.ColorPresentationRequest;\r\nconst protocol_foldingRange_1 = __webpack_require__(/*! ./protocol.foldingRange */ \"./node_modules/vscode-languageserver-protocol/lib/protocol.foldingRange.js\");\r\nexports.FoldingRangeRequest = protocol_foldingRange_1.FoldingRangeRequest;\r\nvar DocumentFilter;\r\n(function (DocumentFilter) {\r\n    function is(value) {\r\n        let candidate = value;\r\n        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);\r\n    }\r\n    DocumentFilter.is = is;\r\n})(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));\r\n/**\r\n * The `client/registerCapability` request is sent from the server to the client to register a new capability\r\n * handler on the client side.\r\n */\r\nvar RegistrationRequest;\r\n(function (RegistrationRequest) {\r\n    RegistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/registerCapability');\r\n})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));\r\n/**\r\n * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability\r\n * handler on the client side.\r\n */\r\nvar UnregistrationRequest;\r\n(function (UnregistrationRequest) {\r\n    UnregistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/unregisterCapability');\r\n})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));\r\nvar ResourceOperationKind;\r\n(function (ResourceOperationKind) {\r\n    /**\r\n     * Supports creating new resources.\r\n     */\r\n    ResourceOperationKind.Create = 'create';\r\n    /**\r\n     * Supports renaming existing resources.\r\n     */\r\n    ResourceOperationKind.Rename = 'rename';\r\n    /**\r\n     * Supports deleting existing resources.\r\n     */\r\n    ResourceOperationKind.Delete = 'delete';\r\n})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));\r\nvar FailureHandlingKind;\r\n(function (FailureHandlingKind) {\r\n    /**\r\n     * Applying the workspace change is simply aborted if one of the changes provided\r\n     * fails. All operations executed before the failing operation stay executed.\r\n     */\r\n    FailureHandlingKind.Abort = 'abort';\r\n    /**\r\n     * All operations are executed transactional. That means they either all\r\n     * succeed or no changes at all are applied to the workspace.\r\n     */\r\n    FailureHandlingKind.Transactional = 'transactional';\r\n    /**\r\n     * If the workspace edit contains only textual file changes they are executed transactional.\r\n     * If resource changes (create, rename or delete file) are part of the change the failure\r\n     * handling startegy is abort.\r\n     */\r\n    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';\r\n    /**\r\n     * The client tries to undo the operations already executed. But there is no\r\n     * guaruntee that this is succeeding.\r\n     */\r\n    FailureHandlingKind.Undo = 'undo';\r\n})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));\r\n/**\r\n * Defines how the host (editor) should sync\r\n * document changes to the language server.\r\n */\r\nvar TextDocumentSyncKind;\r\n(function (TextDocumentSyncKind) {\r\n    /**\r\n     * Documents should not be synced at all.\r\n     */\r\n    TextDocumentSyncKind.None = 0;\r\n    /**\r\n     * Documents are synced by always sending the full content\r\n     * of the document.\r\n     */\r\n    TextDocumentSyncKind.Full = 1;\r\n    /**\r\n     * Documents are synced by sending the full content on open.\r\n     * After that only incremental updates to the document are\r\n     * send.\r\n     */\r\n    TextDocumentSyncKind.Incremental = 2;\r\n})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));\r\n/**\r\n * The initialize request is sent from the client to the server.\r\n * It is sent once as the request after starting up the server.\r\n * The requests parameter is of type [InitializeParams](#InitializeParams)\r\n * the response if of type [InitializeResult](#InitializeResult) of a Thenable that\r\n * resolves to such.\r\n */\r\nvar InitializeRequest;\r\n(function (InitializeRequest) {\r\n    InitializeRequest.type = new vscode_jsonrpc_1.RequestType('initialize');\r\n})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));\r\n/**\r\n * Known error codes for an `InitializeError`;\r\n */\r\nvar InitializeError;\r\n(function (InitializeError) {\r\n    /**\r\n     * If the protocol version provided by the client can't be handled by the server.\r\n     * @deprecated This initialize error got replaced by client capabilities. There is\r\n     * no version handshake in version 3.0x\r\n     */\r\n    InitializeError.unknownProtocolVersion = 1;\r\n})(InitializeError = exports.InitializeError || (exports.InitializeError = {}));\r\n/**\r\n * The intialized notification is sent from the client to the\r\n * server after the client is fully initialized and the server\r\n * is allowed to send requests from the server to the client.\r\n */\r\nvar InitializedNotification;\r\n(function (InitializedNotification) {\r\n    InitializedNotification.type = new vscode_jsonrpc_1.NotificationType('initialized');\r\n})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));\r\n//---- Shutdown Method ----\r\n/**\r\n * A shutdown request is sent from the client to the server.\r\n * It is sent once when the client decides to shutdown the\r\n * server. The only notification that is sent after a shutdown request\r\n * is the exit event.\r\n */\r\nvar ShutdownRequest;\r\n(function (ShutdownRequest) {\r\n    ShutdownRequest.type = new vscode_jsonrpc_1.RequestType0('shutdown');\r\n})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));\r\n//---- Exit Notification ----\r\n/**\r\n * The exit event is sent from the client to the server to\r\n * ask the server to exit its process.\r\n */\r\nvar ExitNotification;\r\n(function (ExitNotification) {\r\n    ExitNotification.type = new vscode_jsonrpc_1.NotificationType0('exit');\r\n})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));\r\n//---- Configuration notification ----\r\n/**\r\n * The configuration change notification is sent from the client to the server\r\n * when the client's configuration has changed. The notification contains\r\n * the changed configuration as defined by the language client.\r\n */\r\nvar DidChangeConfigurationNotification;\r\n(function (DidChangeConfigurationNotification) {\r\n    DidChangeConfigurationNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeConfiguration');\r\n})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));\r\n//---- Message show and log notifications ----\r\n/**\r\n * The message type\r\n */\r\nvar MessageType;\r\n(function (MessageType) {\r\n    /**\r\n     * An error message.\r\n     */\r\n    MessageType.Error = 1;\r\n    /**\r\n     * A warning message.\r\n     */\r\n    MessageType.Warning = 2;\r\n    /**\r\n     * An information message.\r\n     */\r\n    MessageType.Info = 3;\r\n    /**\r\n     * A log message.\r\n     */\r\n    MessageType.Log = 4;\r\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\r\n/**\r\n * The show message notification is sent from a server to a client to ask\r\n * the client to display a particular message in the user interface.\r\n */\r\nvar ShowMessageNotification;\r\n(function (ShowMessageNotification) {\r\n    ShowMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/showMessage');\r\n})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));\r\n/**\r\n * The show message request is sent from the server to the client to show a message\r\n * and a set of options actions to the user.\r\n */\r\nvar ShowMessageRequest;\r\n(function (ShowMessageRequest) {\r\n    ShowMessageRequest.type = new vscode_jsonrpc_1.RequestType('window/showMessageRequest');\r\n})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));\r\n/**\r\n * The log message notification is sent from the server to the client to ask\r\n * the client to log a particular message.\r\n */\r\nvar LogMessageNotification;\r\n(function (LogMessageNotification) {\r\n    LogMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/logMessage');\r\n})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));\r\n//---- Telemetry notification\r\n/**\r\n * The telemetry event notification is sent from the server to the client to ask\r\n * the client to log telemetry data.\r\n */\r\nvar TelemetryEventNotification;\r\n(function (TelemetryEventNotification) {\r\n    TelemetryEventNotification.type = new vscode_jsonrpc_1.NotificationType('telemetry/event');\r\n})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));\r\n/**\r\n * The document open notification is sent from the client to the server to signal\r\n * newly opened text documents. The document's truth is now managed by the client\r\n * and the server must not try to read the document's truth using the document's\r\n * uri. Open in this sense means it is managed by the client. It doesn't necessarily\r\n * mean that its content is presented in an editor. An open notification must not\r\n * be sent more than once without a corresponding close notification send before.\r\n * This means open and close notification must be balanced and the max open count\r\n * is one.\r\n */\r\nvar DidOpenTextDocumentNotification;\r\n(function (DidOpenTextDocumentNotification) {\r\n    DidOpenTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didOpen');\r\n})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));\r\n/**\r\n * The document change notification is sent from the client to the server to signal\r\n * changes to a text document.\r\n */\r\nvar DidChangeTextDocumentNotification;\r\n(function (DidChangeTextDocumentNotification) {\r\n    DidChangeTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didChange');\r\n})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));\r\n/**\r\n * The document close notification is sent from the client to the server when\r\n * the document got closed in the client. The document's truth now exists where\r\n * the document's uri points to (e.g. if the document's uri is a file uri the\r\n * truth now exists on disk). As with the open notification the close notification\r\n * is about managing the document's content. Receiving a close notification\r\n * doesn't mean that the document was open in an editor before. A close\r\n * notification requires a previous open notification to be sent.\r\n */\r\nvar DidCloseTextDocumentNotification;\r\n(function (DidCloseTextDocumentNotification) {\r\n    DidCloseTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didClose');\r\n})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));\r\n/**\r\n * The document save notification is sent from the client to the server when\r\n * the document got saved in the client.\r\n */\r\nvar DidSaveTextDocumentNotification;\r\n(function (DidSaveTextDocumentNotification) {\r\n    DidSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didSave');\r\n})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));\r\n/**\r\n * A document will save notification is sent from the client to the server before\r\n * the document is actually saved.\r\n */\r\nvar WillSaveTextDocumentNotification;\r\n(function (WillSaveTextDocumentNotification) {\r\n    WillSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/willSave');\r\n})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));\r\n/**\r\n * A document will save request is sent from the client to the server before\r\n * the document is actually saved. The request can return an array of TextEdits\r\n * which will be applied to the text document before it is saved. Please note that\r\n * clients might drop results if computing the text edits took too long or if a\r\n * server constantly fails on this request. This is done to keep the save fast and\r\n * reliable.\r\n */\r\nvar WillSaveTextDocumentWaitUntilRequest;\r\n(function (WillSaveTextDocumentWaitUntilRequest) {\r\n    WillSaveTextDocumentWaitUntilRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/willSaveWaitUntil');\r\n})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));\r\n//---- File eventing ----\r\n/**\r\n * The watched files notification is sent from the client to the server when\r\n * the client detects changes to file watched by the language client.\r\n */\r\nvar DidChangeWatchedFilesNotification;\r\n(function (DidChangeWatchedFilesNotification) {\r\n    DidChangeWatchedFilesNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeWatchedFiles');\r\n})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));\r\n/**\r\n * The file event type\r\n */\r\nvar FileChangeType;\r\n(function (FileChangeType) {\r\n    /**\r\n     * The file got created.\r\n     */\r\n    FileChangeType.Created = 1;\r\n    /**\r\n     * The file got changed.\r\n     */\r\n    FileChangeType.Changed = 2;\r\n    /**\r\n     * The file got deleted.\r\n     */\r\n    FileChangeType.Deleted = 3;\r\n})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));\r\nvar WatchKind;\r\n(function (WatchKind) {\r\n    /**\r\n     * Interested in create events.\r\n     */\r\n    WatchKind.Create = 1;\r\n    /**\r\n     * Interested in change events\r\n     */\r\n    WatchKind.Change = 2;\r\n    /**\r\n     * Interested in delete events\r\n     */\r\n    WatchKind.Delete = 4;\r\n})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));\r\n//---- Diagnostic notification ----\r\n/**\r\n * Diagnostics notification are sent from the server to the client to signal\r\n * results of validation runs.\r\n */\r\nvar PublishDiagnosticsNotification;\r\n(function (PublishDiagnosticsNotification) {\r\n    PublishDiagnosticsNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/publishDiagnostics');\r\n})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));\r\n/**\r\n * How a completion was triggered\r\n */\r\nvar CompletionTriggerKind;\r\n(function (CompletionTriggerKind) {\r\n    /**\r\n     * Completion was triggered by typing an identifier (24x7 code\r\n     * complete), manual invocation (e.g Ctrl+Space) or via API.\r\n     */\r\n    CompletionTriggerKind.Invoked = 1;\r\n    /**\r\n     * Completion was triggered by a trigger character specified by\r\n     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\r\n     */\r\n    CompletionTriggerKind.TriggerCharacter = 2;\r\n    /**\r\n     * Completion was re-triggered as current completion list is incomplete\r\n     */\r\n    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;\r\n})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));\r\n/**\r\n * Request to request completion at a given text document position. The request's\r\n * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response\r\n * is of type [CompletionItem[]](#CompletionItem) or [CompletionList](#CompletionList)\r\n * or a Thenable that resolves to such.\r\n *\r\n * The request can delay the computation of the [`detail`](#CompletionItem.detail)\r\n * and [`documentation`](#CompletionItem.documentation) properties to the `completionItem/resolve`\r\n * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,\r\n * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.\r\n */\r\nvar CompletionRequest;\r\n(function (CompletionRequest) {\r\n    CompletionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/completion');\r\n})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));\r\n/**\r\n * Request to resolve additional information for a given completion item.The request's\r\n * parameter is of type [CompletionItem](#CompletionItem) the response\r\n * is of type [CompletionItem](#CompletionItem) or a Thenable that resolves to such.\r\n */\r\nvar CompletionResolveRequest;\r\n(function (CompletionResolveRequest) {\r\n    CompletionResolveRequest.type = new vscode_jsonrpc_1.RequestType('completionItem/resolve');\r\n})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));\r\n//---- Hover Support -------------------------------\r\n/**\r\n * Request to request hover information at a given text document position. The request's\r\n * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response is of\r\n * type [Hover](#Hover) or a Thenable that resolves to such.\r\n */\r\nvar HoverRequest;\r\n(function (HoverRequest) {\r\n    HoverRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/hover');\r\n})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));\r\nvar SignatureHelpRequest;\r\n(function (SignatureHelpRequest) {\r\n    SignatureHelpRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/signatureHelp');\r\n})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));\r\n//---- Goto Definition -------------------------------------\r\n/**\r\n * A request to resolve the definition location of a symbol at a given text\r\n * document position. The request's parameter is of type [TextDocumentPosition]\r\n * (#TextDocumentPosition) the response is of type [Definition](#Definition) or a\r\n * Thenable that resolves to such.\r\n */\r\nvar DefinitionRequest;\r\n(function (DefinitionRequest) {\r\n    DefinitionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/definition');\r\n})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));\r\n/**\r\n * A request to resolve project-wide references for the symbol denoted\r\n * by the given text document position. The request's parameter is of\r\n * type [ReferenceParams](#ReferenceParams) the response is of type\r\n * [Location[]](#Location) or a Thenable that resolves to such.\r\n */\r\nvar ReferencesRequest;\r\n(function (ReferencesRequest) {\r\n    ReferencesRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/references');\r\n})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));\r\n//---- Document Highlight ----------------------------------\r\n/**\r\n * Request to resolve a [DocumentHighlight](#DocumentHighlight) for a given\r\n * text document position. The request's parameter is of type [TextDocumentPosition]\r\n * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\r\n * (#DocumentHighlight) or a Thenable that resolves to such.\r\n */\r\nvar DocumentHighlightRequest;\r\n(function (DocumentHighlightRequest) {\r\n    DocumentHighlightRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentHighlight');\r\n})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));\r\n//---- Document Symbol Provider ---------------------------\r\n/**\r\n * A request to list all symbols found in a given text document. The request's\r\n * parameter is of type [TextDocumentIdentifier](#TextDocumentIdentifier) the\r\n * response is of type [SymbolInformation[]](#SymbolInformation) or a Thenable\r\n * that resolves to such.\r\n */\r\nvar DocumentSymbolRequest;\r\n(function (DocumentSymbolRequest) {\r\n    DocumentSymbolRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentSymbol');\r\n})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));\r\n//---- Workspace Symbol Provider ---------------------------\r\n/**\r\n * A request to list project-wide symbols matching the query string given\r\n * by the [WorkspaceSymbolParams](#WorkspaceSymbolParams). The response is\r\n * of type [SymbolInformation[]](#SymbolInformation) or a Thenable that\r\n * resolves to such.\r\n */\r\nvar WorkspaceSymbolRequest;\r\n(function (WorkspaceSymbolRequest) {\r\n    WorkspaceSymbolRequest.type = new vscode_jsonrpc_1.RequestType('workspace/symbol');\r\n})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));\r\n/**\r\n * A request to provide commands for the given text document and range.\r\n */\r\nvar CodeActionRequest;\r\n(function (CodeActionRequest) {\r\n    CodeActionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeAction');\r\n})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));\r\n/**\r\n * A request to provide code lens for the given text document.\r\n */\r\nvar CodeLensRequest;\r\n(function (CodeLensRequest) {\r\n    CodeLensRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeLens');\r\n})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));\r\n/**\r\n * A request to resolve a command for a given code lens.\r\n */\r\nvar CodeLensResolveRequest;\r\n(function (CodeLensResolveRequest) {\r\n    CodeLensResolveRequest.type = new vscode_jsonrpc_1.RequestType('codeLens/resolve');\r\n})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));\r\n/**\r\n * A request to to format a whole document.\r\n */\r\nvar DocumentFormattingRequest;\r\n(function (DocumentFormattingRequest) {\r\n    DocumentFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/formatting');\r\n})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));\r\n/**\r\n * A request to to format a range in a document.\r\n */\r\nvar DocumentRangeFormattingRequest;\r\n(function (DocumentRangeFormattingRequest) {\r\n    DocumentRangeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rangeFormatting');\r\n})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));\r\n/**\r\n * A request to format a document on type.\r\n */\r\nvar DocumentOnTypeFormattingRequest;\r\n(function (DocumentOnTypeFormattingRequest) {\r\n    DocumentOnTypeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/onTypeFormatting');\r\n})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));\r\n/**\r\n * A request to rename a symbol.\r\n */\r\nvar RenameRequest;\r\n(function (RenameRequest) {\r\n    RenameRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rename');\r\n})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));\r\n/**\r\n * A request to test and perform the setup necessary for a rename.\r\n */\r\nvar PrepareRenameRequest;\r\n(function (PrepareRenameRequest) {\r\n    PrepareRenameRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/prepareRename');\r\n})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));\r\n/**\r\n * A request to provide document links\r\n */\r\nvar DocumentLinkRequest;\r\n(function (DocumentLinkRequest) {\r\n    DocumentLinkRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentLink');\r\n})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));\r\n/**\r\n * Request to resolve additional information for a given document link. The request's\r\n * parameter is of type [DocumentLink](#DocumentLink) the response\r\n * is of type [DocumentLink](#DocumentLink) or a Thenable that resolves to such.\r\n */\r\nvar DocumentLinkResolveRequest;\r\n(function (DocumentLinkResolveRequest) {\r\n    DocumentLinkResolveRequest.type = new vscode_jsonrpc_1.RequestType('documentLink/resolve');\r\n})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));\r\n/**\r\n * A request send from the client to the server to execute a command. The request might return\r\n * a workspace edit which the client will apply to the workspace.\r\n */\r\nvar ExecuteCommandRequest;\r\n(function (ExecuteCommandRequest) {\r\n    ExecuteCommandRequest.type = new vscode_jsonrpc_1.RequestType('workspace/executeCommand');\r\n})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));\r\n/**\r\n * A request sent from the server to the client to modified certain resources.\r\n */\r\nvar ApplyWorkspaceEditRequest;\r\n(function (ApplyWorkspaceEditRequest) {\r\n    ApplyWorkspaceEditRequest.type = new vscode_jsonrpc_1.RequestType('workspace/applyEdit');\r\n})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBJcyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzXCIpO1xyXG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gcmVxdWlyZShcInZzY29kZS1qc29ucnBjXCIpO1xyXG5jb25zdCBwcm90b2NvbF9pbXBsZW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vcHJvdG9jb2wuaW1wbGVtZW50YXRpb25cIik7XHJcbmV4cG9ydHMuSW1wbGVtZW50YXRpb25SZXF1ZXN0ID0gcHJvdG9jb2xfaW1wbGVtZW50YXRpb25fMS5JbXBsZW1lbnRhdGlvblJlcXVlc3Q7XHJcbmNvbnN0IHByb3RvY29sX3R5cGVEZWZpbml0aW9uXzEgPSByZXF1aXJlKFwiLi9wcm90b2NvbC50eXBlRGVmaW5pdGlvblwiKTtcclxuZXhwb3J0cy5UeXBlRGVmaW5pdGlvblJlcXVlc3QgPSBwcm90b2NvbF90eXBlRGVmaW5pdGlvbl8xLlR5cGVEZWZpbml0aW9uUmVxdWVzdDtcclxuY29uc3QgcHJvdG9jb2xfd29ya3NwYWNlRm9sZGVyc18xID0gcmVxdWlyZShcIi4vcHJvdG9jb2wud29ya3NwYWNlRm9sZGVyc1wiKTtcclxuZXhwb3J0cy5Xb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCA9IHByb3RvY29sX3dvcmtzcGFjZUZvbGRlcnNfMS5Xb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdDtcclxuZXhwb3J0cy5EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uID0gcHJvdG9jb2xfd29ya3NwYWNlRm9sZGVyc18xLkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb247XHJcbmNvbnN0IHByb3RvY29sX2NvbmZpZ3VyYXRpb25fMSA9IHJlcXVpcmUoXCIuL3Byb3RvY29sLmNvbmZpZ3VyYXRpb25cIik7XHJcbmV4cG9ydHMuQ29uZmlndXJhdGlvblJlcXVlc3QgPSBwcm90b2NvbF9jb25maWd1cmF0aW9uXzEuQ29uZmlndXJhdGlvblJlcXVlc3Q7XHJcbmNvbnN0IHByb3RvY29sX2NvbG9yUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3Byb3RvY29sLmNvbG9yUHJvdmlkZXJcIik7XHJcbmV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgPSBwcm90b2NvbF9jb2xvclByb3ZpZGVyXzEuRG9jdW1lbnRDb2xvclJlcXVlc3Q7XHJcbmV4cG9ydHMuQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0ID0gcHJvdG9jb2xfY29sb3JQcm92aWRlcl8xLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdDtcclxuY29uc3QgcHJvdG9jb2xfZm9sZGluZ1JhbmdlXzEgPSByZXF1aXJlKFwiLi9wcm90b2NvbC5mb2xkaW5nUmFuZ2VcIik7XHJcbmV4cG9ydHMuRm9sZGluZ1JhbmdlUmVxdWVzdCA9IHByb3RvY29sX2ZvbGRpbmdSYW5nZV8xLkZvbGRpbmdSYW5nZVJlcXVlc3Q7XHJcbnZhciBEb2N1bWVudEZpbHRlcjtcclxuKGZ1bmN0aW9uIChEb2N1bWVudEZpbHRlcikge1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuc2NoZW1lKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnBhdHRlcm4pO1xyXG4gICAgfVxyXG4gICAgRG9jdW1lbnRGaWx0ZXIuaXMgPSBpcztcclxufSkoRG9jdW1lbnRGaWx0ZXIgPSBleHBvcnRzLkRvY3VtZW50RmlsdGVyIHx8IChleHBvcnRzLkRvY3VtZW50RmlsdGVyID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBgY2xpZW50L3JlZ2lzdGVyQ2FwYWJpbGl0eWAgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIHJlZ2lzdGVyIGEgbmV3IGNhcGFiaWxpdHlcclxuICogaGFuZGxlciBvbiB0aGUgY2xpZW50IHNpZGUuXHJcbiAqL1xyXG52YXIgUmVnaXN0cmF0aW9uUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChSZWdpc3RyYXRpb25SZXF1ZXN0KSB7XHJcbiAgICBSZWdpc3RyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgnY2xpZW50L3JlZ2lzdGVyQ2FwYWJpbGl0eScpO1xyXG59KShSZWdpc3RyYXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5SZWdpc3RyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLlJlZ2lzdHJhdGlvblJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIGBjbGllbnQvdW5yZWdpc3RlckNhcGFiaWxpdHlgIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIGNhcGFiaWxpdHlcclxuICogaGFuZGxlciBvbiB0aGUgY2xpZW50IHNpZGUuXHJcbiAqL1xyXG52YXIgVW5yZWdpc3RyYXRpb25SZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKFVucmVnaXN0cmF0aW9uUmVxdWVzdCkge1xyXG4gICAgVW5yZWdpc3RyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgnY2xpZW50L3VucmVnaXN0ZXJDYXBhYmlsaXR5Jyk7XHJcbn0pKFVucmVnaXN0cmF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuVW5yZWdpc3RyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLlVucmVnaXN0cmF0aW9uUmVxdWVzdCA9IHt9KSk7XHJcbnZhciBSZXNvdXJjZU9wZXJhdGlvbktpbmQ7XHJcbihmdW5jdGlvbiAoUmVzb3VyY2VPcGVyYXRpb25LaW5kKSB7XHJcbiAgICAvKipcclxuICAgICAqIFN1cHBvcnRzIGNyZWF0aW5nIG5ldyByZXNvdXJjZXMuXHJcbiAgICAgKi9cclxuICAgIFJlc291cmNlT3BlcmF0aW9uS2luZC5DcmVhdGUgPSAnY3JlYXRlJztcclxuICAgIC8qKlxyXG4gICAgICogU3VwcG9ydHMgcmVuYW1pbmcgZXhpc3RpbmcgcmVzb3VyY2VzLlxyXG4gICAgICovXHJcbiAgICBSZXNvdXJjZU9wZXJhdGlvbktpbmQuUmVuYW1lID0gJ3JlbmFtZSc7XHJcbiAgICAvKipcclxuICAgICAqIFN1cHBvcnRzIGRlbGV0aW5nIGV4aXN0aW5nIHJlc291cmNlcy5cclxuICAgICAqL1xyXG4gICAgUmVzb3VyY2VPcGVyYXRpb25LaW5kLkRlbGV0ZSA9ICdkZWxldGUnO1xyXG59KShSZXNvdXJjZU9wZXJhdGlvbktpbmQgPSBleHBvcnRzLlJlc291cmNlT3BlcmF0aW9uS2luZCB8fCAoZXhwb3J0cy5SZXNvdXJjZU9wZXJhdGlvbktpbmQgPSB7fSkpO1xyXG52YXIgRmFpbHVyZUhhbmRsaW5nS2luZDtcclxuKGZ1bmN0aW9uIChGYWlsdXJlSGFuZGxpbmdLaW5kKSB7XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5aW5nIHRoZSB3b3Jrc3BhY2UgY2hhbmdlIGlzIHNpbXBseSBhYm9ydGVkIGlmIG9uZSBvZiB0aGUgY2hhbmdlcyBwcm92aWRlZFxyXG4gICAgICogZmFpbHMuIEFsbCBvcGVyYXRpb25zIGV4ZWN1dGVkIGJlZm9yZSB0aGUgZmFpbGluZyBvcGVyYXRpb24gc3RheSBleGVjdXRlZC5cclxuICAgICAqL1xyXG4gICAgRmFpbHVyZUhhbmRsaW5nS2luZC5BYm9ydCA9ICdhYm9ydCc7XHJcbiAgICAvKipcclxuICAgICAqIEFsbCBvcGVyYXRpb25zIGFyZSBleGVjdXRlZCB0cmFuc2FjdGlvbmFsLiBUaGF0IG1lYW5zIHRoZXkgZWl0aGVyIGFsbFxyXG4gICAgICogc3VjY2VlZCBvciBubyBjaGFuZ2VzIGF0IGFsbCBhcmUgYXBwbGllZCB0byB0aGUgd29ya3NwYWNlLlxyXG4gICAgICovXHJcbiAgICBGYWlsdXJlSGFuZGxpbmdLaW5kLlRyYW5zYWN0aW9uYWwgPSAndHJhbnNhY3Rpb25hbCc7XHJcbiAgICAvKipcclxuICAgICAqIElmIHRoZSB3b3Jrc3BhY2UgZWRpdCBjb250YWlucyBvbmx5IHRleHR1YWwgZmlsZSBjaGFuZ2VzIHRoZXkgYXJlIGV4ZWN1dGVkIHRyYW5zYWN0aW9uYWwuXHJcbiAgICAgKiBJZiByZXNvdXJjZSBjaGFuZ2VzIChjcmVhdGUsIHJlbmFtZSBvciBkZWxldGUgZmlsZSkgYXJlIHBhcnQgb2YgdGhlIGNoYW5nZSB0aGUgZmFpbHVyZVxyXG4gICAgICogaGFuZGxpbmcgc3RhcnRlZ3kgaXMgYWJvcnQuXHJcbiAgICAgKi9cclxuICAgIEZhaWx1cmVIYW5kbGluZ0tpbmQuVGV4dE9ubHlUcmFuc2FjdGlvbmFsID0gJ3RleHRPbmx5VHJhbnNhY3Rpb25hbCc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjbGllbnQgdHJpZXMgdG8gdW5kbyB0aGUgb3BlcmF0aW9ucyBhbHJlYWR5IGV4ZWN1dGVkLiBCdXQgdGhlcmUgaXMgbm9cclxuICAgICAqIGd1YXJ1bnRlZSB0aGF0IHRoaXMgaXMgc3VjY2VlZGluZy5cclxuICAgICAqL1xyXG4gICAgRmFpbHVyZUhhbmRsaW5nS2luZC5VbmRvID0gJ3VuZG8nO1xyXG59KShGYWlsdXJlSGFuZGxpbmdLaW5kID0gZXhwb3J0cy5GYWlsdXJlSGFuZGxpbmdLaW5kIHx8IChleHBvcnRzLkZhaWx1cmVIYW5kbGluZ0tpbmQgPSB7fSkpO1xyXG4vKipcclxuICogRGVmaW5lcyBob3cgdGhlIGhvc3QgKGVkaXRvcikgc2hvdWxkIHN5bmNcclxuICogZG9jdW1lbnQgY2hhbmdlcyB0byB0aGUgbGFuZ3VhZ2Ugc2VydmVyLlxyXG4gKi9cclxudmFyIFRleHREb2N1bWVudFN5bmNLaW5kO1xyXG4oZnVuY3Rpb24gKFRleHREb2N1bWVudFN5bmNLaW5kKSB7XHJcbiAgICAvKipcclxuICAgICAqIERvY3VtZW50cyBzaG91bGQgbm90IGJlIHN5bmNlZCBhdCBhbGwuXHJcbiAgICAgKi9cclxuICAgIFRleHREb2N1bWVudFN5bmNLaW5kLk5vbmUgPSAwO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEb2N1bWVudHMgYXJlIHN5bmNlZCBieSBhbHdheXMgc2VuZGluZyB0aGUgZnVsbCBjb250ZW50XHJcbiAgICAgKiBvZiB0aGUgZG9jdW1lbnQuXHJcbiAgICAgKi9cclxuICAgIFRleHREb2N1bWVudFN5bmNLaW5kLkZ1bGwgPSAxO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEb2N1bWVudHMgYXJlIHN5bmNlZCBieSBzZW5kaW5nIHRoZSBmdWxsIGNvbnRlbnQgb24gb3Blbi5cclxuICAgICAqIEFmdGVyIHRoYXQgb25seSBpbmNyZW1lbnRhbCB1cGRhdGVzIHRvIHRoZSBkb2N1bWVudCBhcmVcclxuICAgICAqIHNlbmQuXHJcbiAgICAgKi9cclxuICAgIFRleHREb2N1bWVudFN5bmNLaW5kLkluY3JlbWVudGFsID0gMjtcclxufSkoVGV4dERvY3VtZW50U3luY0tpbmQgPSBleHBvcnRzLlRleHREb2N1bWVudFN5bmNLaW5kIHx8IChleHBvcnRzLlRleHREb2N1bWVudFN5bmNLaW5kID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBpbml0aWFsaXplIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlci5cclxuICogSXQgaXMgc2VudCBvbmNlIGFzIHRoZSByZXF1ZXN0IGFmdGVyIHN0YXJ0aW5nIHVwIHRoZSBzZXJ2ZXIuXHJcbiAqIFRoZSByZXF1ZXN0cyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBbSW5pdGlhbGl6ZVBhcmFtc10oI0luaXRpYWxpemVQYXJhbXMpXHJcbiAqIHRoZSByZXNwb25zZSBpZiBvZiB0eXBlIFtJbml0aWFsaXplUmVzdWx0XSgjSW5pdGlhbGl6ZVJlc3VsdCkgb2YgYSBUaGVuYWJsZSB0aGF0XHJcbiAqIHJlc29sdmVzIHRvIHN1Y2guXHJcbiAqL1xyXG52YXIgSW5pdGlhbGl6ZVJlcXVlc3Q7XHJcbihmdW5jdGlvbiAoSW5pdGlhbGl6ZVJlcXVlc3QpIHtcclxuICAgIEluaXRpYWxpemVSZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgnaW5pdGlhbGl6ZScpO1xyXG59KShJbml0aWFsaXplUmVxdWVzdCA9IGV4cG9ydHMuSW5pdGlhbGl6ZVJlcXVlc3QgfHwgKGV4cG9ydHMuSW5pdGlhbGl6ZVJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogS25vd24gZXJyb3IgY29kZXMgZm9yIGFuIGBJbml0aWFsaXplRXJyb3JgO1xyXG4gKi9cclxudmFyIEluaXRpYWxpemVFcnJvcjtcclxuKGZ1bmN0aW9uIChJbml0aWFsaXplRXJyb3IpIHtcclxuICAgIC8qKlxyXG4gICAgICogSWYgdGhlIHByb3RvY29sIHZlcnNpb24gcHJvdmlkZWQgYnkgdGhlIGNsaWVudCBjYW4ndCBiZSBoYW5kbGVkIGJ5IHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGluaXRpYWxpemUgZXJyb3IgZ290IHJlcGxhY2VkIGJ5IGNsaWVudCBjYXBhYmlsaXRpZXMuIFRoZXJlIGlzXHJcbiAgICAgKiBubyB2ZXJzaW9uIGhhbmRzaGFrZSBpbiB2ZXJzaW9uIDMuMHhcclxuICAgICAqL1xyXG4gICAgSW5pdGlhbGl6ZUVycm9yLnVua25vd25Qcm90b2NvbFZlcnNpb24gPSAxO1xyXG59KShJbml0aWFsaXplRXJyb3IgPSBleHBvcnRzLkluaXRpYWxpemVFcnJvciB8fCAoZXhwb3J0cy5Jbml0aWFsaXplRXJyb3IgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIGludGlhbGl6ZWQgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZVxyXG4gKiBzZXJ2ZXIgYWZ0ZXIgdGhlIGNsaWVudCBpcyBmdWxseSBpbml0aWFsaXplZCBhbmQgdGhlIHNlcnZlclxyXG4gKiBpcyBhbGxvd2VkIHRvIHNlbmQgcmVxdWVzdHMgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQuXHJcbiAqL1xyXG52YXIgSW5pdGlhbGl6ZWROb3RpZmljYXRpb247XHJcbihmdW5jdGlvbiAoSW5pdGlhbGl6ZWROb3RpZmljYXRpb24pIHtcclxuICAgIEluaXRpYWxpemVkTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Ob3RpZmljYXRpb25UeXBlKCdpbml0aWFsaXplZCcpO1xyXG59KShJbml0aWFsaXplZE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuSW5pdGlhbGl6ZWROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuSW5pdGlhbGl6ZWROb3RpZmljYXRpb24gPSB7fSkpO1xyXG4vLy0tLS0gU2h1dGRvd24gTWV0aG9kIC0tLS1cclxuLyoqXHJcbiAqIEEgc2h1dGRvd24gcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyLlxyXG4gKiBJdCBpcyBzZW50IG9uY2Ugd2hlbiB0aGUgY2xpZW50IGRlY2lkZXMgdG8gc2h1dGRvd24gdGhlXHJcbiAqIHNlcnZlci4gVGhlIG9ubHkgbm90aWZpY2F0aW9uIHRoYXQgaXMgc2VudCBhZnRlciBhIHNodXRkb3duIHJlcXVlc3RcclxuICogaXMgdGhlIGV4aXQgZXZlbnQuXHJcbiAqL1xyXG52YXIgU2h1dGRvd25SZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKFNodXRkb3duUmVxdWVzdCkge1xyXG4gICAgU2h1dGRvd25SZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZTAoJ3NodXRkb3duJyk7XHJcbn0pKFNodXRkb3duUmVxdWVzdCA9IGV4cG9ydHMuU2h1dGRvd25SZXF1ZXN0IHx8IChleHBvcnRzLlNodXRkb3duUmVxdWVzdCA9IHt9KSk7XHJcbi8vLS0tLSBFeGl0IE5vdGlmaWNhdGlvbiAtLS0tXHJcbi8qKlxyXG4gKiBUaGUgZXhpdCBldmVudCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHRvXHJcbiAqIGFzayB0aGUgc2VydmVyIHRvIGV4aXQgaXRzIHByb2Nlc3MuXHJcbiAqL1xyXG52YXIgRXhpdE5vdGlmaWNhdGlvbjtcclxuKGZ1bmN0aW9uIChFeGl0Tm90aWZpY2F0aW9uKSB7XHJcbiAgICBFeGl0Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Ob3RpZmljYXRpb25UeXBlMCgnZXhpdCcpO1xyXG59KShFeGl0Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5FeGl0Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkV4aXROb3RpZmljYXRpb24gPSB7fSkpO1xyXG4vLy0tLS0gQ29uZmlndXJhdGlvbiBub3RpZmljYXRpb24gLS0tLVxyXG4vKipcclxuICogVGhlIGNvbmZpZ3VyYXRpb24gY2hhbmdlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyXHJcbiAqIHdoZW4gdGhlIGNsaWVudCdzIGNvbmZpZ3VyYXRpb24gaGFzIGNoYW5nZWQuIFRoZSBub3RpZmljYXRpb24gY29udGFpbnNcclxuICogdGhlIGNoYW5nZWQgY29uZmlndXJhdGlvbiBhcyBkZWZpbmVkIGJ5IHRoZSBsYW5ndWFnZSBjbGllbnQuXHJcbiAqL1xyXG52YXIgRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbjtcclxuKGZ1bmN0aW9uIChEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uKSB7XHJcbiAgICBEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Ob3RpZmljYXRpb25UeXBlKCd3b3Jrc3BhY2UvZGlkQ2hhbmdlQ29uZmlndXJhdGlvbicpO1xyXG59KShEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24gPSB7fSkpO1xyXG4vLy0tLS0gTWVzc2FnZSBzaG93IGFuZCBsb2cgbm90aWZpY2F0aW9ucyAtLS0tXHJcbi8qKlxyXG4gKiBUaGUgbWVzc2FnZSB0eXBlXHJcbiAqL1xyXG52YXIgTWVzc2FnZVR5cGU7XHJcbihmdW5jdGlvbiAoTWVzc2FnZVR5cGUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQW4gZXJyb3IgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgTWVzc2FnZVR5cGUuRXJyb3IgPSAxO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHdhcm5pbmcgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgTWVzc2FnZVR5cGUuV2FybmluZyA9IDI7XHJcbiAgICAvKipcclxuICAgICAqIEFuIGluZm9ybWF0aW9uIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIE1lc3NhZ2VUeXBlLkluZm8gPSAzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGxvZyBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBNZXNzYWdlVHlwZS5Mb2cgPSA0O1xyXG59KShNZXNzYWdlVHlwZSA9IGV4cG9ydHMuTWVzc2FnZVR5cGUgfHwgKGV4cG9ydHMuTWVzc2FnZVR5cGUgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIHNob3cgbWVzc2FnZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIGEgc2VydmVyIHRvIGEgY2xpZW50IHRvIGFza1xyXG4gKiB0aGUgY2xpZW50IHRvIGRpc3BsYXkgYSBwYXJ0aWN1bGFyIG1lc3NhZ2UgaW4gdGhlIHVzZXIgaW50ZXJmYWNlLlxyXG4gKi9cclxudmFyIFNob3dNZXNzYWdlTm90aWZpY2F0aW9uO1xyXG4oZnVuY3Rpb24gKFNob3dNZXNzYWdlTm90aWZpY2F0aW9uKSB7XHJcbiAgICBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbi50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuTm90aWZpY2F0aW9uVHlwZSgnd2luZG93L3Nob3dNZXNzYWdlJyk7XHJcbn0pKFNob3dNZXNzYWdlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5TaG93TWVzc2FnZU5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5TaG93TWVzc2FnZU5vdGlmaWNhdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgc2hvdyBtZXNzYWdlIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBzaG93IGEgbWVzc2FnZVxyXG4gKiBhbmQgYSBzZXQgb2Ygb3B0aW9ucyBhY3Rpb25zIHRvIHRoZSB1c2VyLlxyXG4gKi9cclxudmFyIFNob3dNZXNzYWdlUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChTaG93TWVzc2FnZVJlcXVlc3QpIHtcclxuICAgIFNob3dNZXNzYWdlUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ3dpbmRvdy9zaG93TWVzc2FnZVJlcXVlc3QnKTtcclxufSkoU2hvd01lc3NhZ2VSZXF1ZXN0ID0gZXhwb3J0cy5TaG93TWVzc2FnZVJlcXVlc3QgfHwgKGV4cG9ydHMuU2hvd01lc3NhZ2VSZXF1ZXN0ID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBsb2cgbWVzc2FnZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBhc2tcclxuICogdGhlIGNsaWVudCB0byBsb2cgYSBwYXJ0aWN1bGFyIG1lc3NhZ2UuXHJcbiAqL1xyXG52YXIgTG9nTWVzc2FnZU5vdGlmaWNhdGlvbjtcclxuKGZ1bmN0aW9uIChMb2dNZXNzYWdlTm90aWZpY2F0aW9uKSB7XHJcbiAgICBMb2dNZXNzYWdlTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Ob3RpZmljYXRpb25UeXBlKCd3aW5kb3cvbG9nTWVzc2FnZScpO1xyXG59KShMb2dNZXNzYWdlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Mb2dNZXNzYWdlTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkxvZ01lc3NhZ2VOb3RpZmljYXRpb24gPSB7fSkpO1xyXG4vLy0tLS0gVGVsZW1ldHJ5IG5vdGlmaWNhdGlvblxyXG4vKipcclxuICogVGhlIHRlbGVtZXRyeSBldmVudCBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBhc2tcclxuICogdGhlIGNsaWVudCB0byBsb2cgdGVsZW1ldHJ5IGRhdGEuXHJcbiAqL1xyXG52YXIgVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb247XHJcbihmdW5jdGlvbiAoVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24pIHtcclxuICAgIFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Ob3RpZmljYXRpb25UeXBlKCd0ZWxlbWV0cnkvZXZlbnQnKTtcclxufSkoVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24gPSBleHBvcnRzLlRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLlRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBkb2N1bWVudCBvcGVuIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHRvIHNpZ25hbFxyXG4gKiBuZXdseSBvcGVuZWQgdGV4dCBkb2N1bWVudHMuIFRoZSBkb2N1bWVudCdzIHRydXRoIGlzIG5vdyBtYW5hZ2VkIGJ5IHRoZSBjbGllbnRcclxuICogYW5kIHRoZSBzZXJ2ZXIgbXVzdCBub3QgdHJ5IHRvIHJlYWQgdGhlIGRvY3VtZW50J3MgdHJ1dGggdXNpbmcgdGhlIGRvY3VtZW50J3NcclxuICogdXJpLiBPcGVuIGluIHRoaXMgc2Vuc2UgbWVhbnMgaXQgaXMgbWFuYWdlZCBieSB0aGUgY2xpZW50LiBJdCBkb2Vzbid0IG5lY2Vzc2FyaWx5XHJcbiAqIG1lYW4gdGhhdCBpdHMgY29udGVudCBpcyBwcmVzZW50ZWQgaW4gYW4gZWRpdG9yLiBBbiBvcGVuIG5vdGlmaWNhdGlvbiBtdXN0IG5vdFxyXG4gKiBiZSBzZW50IG1vcmUgdGhhbiBvbmNlIHdpdGhvdXQgYSBjb3JyZXNwb25kaW5nIGNsb3NlIG5vdGlmaWNhdGlvbiBzZW5kIGJlZm9yZS5cclxuICogVGhpcyBtZWFucyBvcGVuIGFuZCBjbG9zZSBub3RpZmljYXRpb24gbXVzdCBiZSBiYWxhbmNlZCBhbmQgdGhlIG1heCBvcGVuIGNvdW50XHJcbiAqIGlzIG9uZS5cclxuICovXHJcbnZhciBEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uO1xyXG4oZnVuY3Rpb24gKERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24pIHtcclxuICAgIERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUoJ3RleHREb2N1bWVudC9kaWRPcGVuJyk7XHJcbn0pKERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkT3BlblRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgZG9jdW1lbnQgY2hhbmdlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHRvIHNpZ25hbFxyXG4gKiBjaGFuZ2VzIHRvIGEgdGV4dCBkb2N1bWVudC5cclxuICovXHJcbnZhciBEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb247XHJcbihmdW5jdGlvbiAoRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uKSB7XHJcbiAgICBEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUoJ3RleHREb2N1bWVudC9kaWRDaGFuZ2UnKTtcclxufSkoRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBkb2N1bWVudCBjbG9zZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXHJcbiAqIHRoZSBkb2N1bWVudCBnb3QgY2xvc2VkIGluIHRoZSBjbGllbnQuIFRoZSBkb2N1bWVudCdzIHRydXRoIG5vdyBleGlzdHMgd2hlcmVcclxuICogdGhlIGRvY3VtZW50J3MgdXJpIHBvaW50cyB0byAoZS5nLiBpZiB0aGUgZG9jdW1lbnQncyB1cmkgaXMgYSBmaWxlIHVyaSB0aGVcclxuICogdHJ1dGggbm93IGV4aXN0cyBvbiBkaXNrKS4gQXMgd2l0aCB0aGUgb3BlbiBub3RpZmljYXRpb24gdGhlIGNsb3NlIG5vdGlmaWNhdGlvblxyXG4gKiBpcyBhYm91dCBtYW5hZ2luZyB0aGUgZG9jdW1lbnQncyBjb250ZW50LiBSZWNlaXZpbmcgYSBjbG9zZSBub3RpZmljYXRpb25cclxuICogZG9lc24ndCBtZWFuIHRoYXQgdGhlIGRvY3VtZW50IHdhcyBvcGVuIGluIGFuIGVkaXRvciBiZWZvcmUuIEEgY2xvc2VcclxuICogbm90aWZpY2F0aW9uIHJlcXVpcmVzIGEgcHJldmlvdXMgb3BlbiBub3RpZmljYXRpb24gdG8gYmUgc2VudC5cclxuICovXHJcbnZhciBEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbjtcclxuKGZ1bmN0aW9uIChEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xyXG4gICAgRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUoJ3RleHREb2N1bWVudC9kaWRDbG9zZScpO1xyXG59KShEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogVGhlIGRvY3VtZW50IHNhdmUgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlblxyXG4gKiB0aGUgZG9jdW1lbnQgZ290IHNhdmVkIGluIHRoZSBjbGllbnQuXHJcbiAqL1xyXG52YXIgRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbjtcclxuKGZ1bmN0aW9uIChEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uKSB7XHJcbiAgICBEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Ob3RpZmljYXRpb25UeXBlKCd0ZXh0RG9jdW1lbnQvZGlkU2F2ZScpO1xyXG59KShEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogQSBkb2N1bWVudCB3aWxsIHNhdmUgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgYmVmb3JlXHJcbiAqIHRoZSBkb2N1bWVudCBpcyBhY3R1YWxseSBzYXZlZC5cclxuICovXHJcbnZhciBXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbjtcclxuKGZ1bmN0aW9uIChXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xyXG4gICAgV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUoJ3RleHREb2N1bWVudC93aWxsU2F2ZScpO1xyXG59KShXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogQSBkb2N1bWVudCB3aWxsIHNhdmUgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIGJlZm9yZVxyXG4gKiB0aGUgZG9jdW1lbnQgaXMgYWN0dWFsbHkgc2F2ZWQuIFRoZSByZXF1ZXN0IGNhbiByZXR1cm4gYW4gYXJyYXkgb2YgVGV4dEVkaXRzXHJcbiAqIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgdGV4dCBkb2N1bWVudCBiZWZvcmUgaXQgaXMgc2F2ZWQuIFBsZWFzZSBub3RlIHRoYXRcclxuICogY2xpZW50cyBtaWdodCBkcm9wIHJlc3VsdHMgaWYgY29tcHV0aW5nIHRoZSB0ZXh0IGVkaXRzIHRvb2sgdG9vIGxvbmcgb3IgaWYgYVxyXG4gKiBzZXJ2ZXIgY29uc3RhbnRseSBmYWlscyBvbiB0aGlzIHJlcXVlc3QuIFRoaXMgaXMgZG9uZSB0byBrZWVwIHRoZSBzYXZlIGZhc3QgYW5kXHJcbiAqIHJlbGlhYmxlLlxyXG4gKi9cclxudmFyIFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QpIHtcclxuICAgIFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ3RleHREb2N1bWVudC93aWxsU2F2ZVdhaXRVbnRpbCcpO1xyXG59KShXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QgPSBleHBvcnRzLldpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCB8fCAoZXhwb3J0cy5XaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QgPSB7fSkpO1xyXG4vLy0tLS0gRmlsZSBldmVudGluZyAtLS0tXHJcbi8qKlxyXG4gKiBUaGUgd2F0Y2hlZCBmaWxlcyBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXHJcbiAqIHRoZSBjbGllbnQgZGV0ZWN0cyBjaGFuZ2VzIHRvIGZpbGUgd2F0Y2hlZCBieSB0aGUgbGFuZ3VhZ2UgY2xpZW50LlxyXG4gKi9cclxudmFyIERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbjtcclxuKGZ1bmN0aW9uIChEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24pIHtcclxuICAgIERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuTm90aWZpY2F0aW9uVHlwZSgnd29ya3NwYWNlL2RpZENoYW5nZVdhdGNoZWRGaWxlcycpO1xyXG59KShEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogVGhlIGZpbGUgZXZlbnQgdHlwZVxyXG4gKi9cclxudmFyIEZpbGVDaGFuZ2VUeXBlO1xyXG4oZnVuY3Rpb24gKEZpbGVDaGFuZ2VUeXBlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBmaWxlIGdvdCBjcmVhdGVkLlxyXG4gICAgICovXHJcbiAgICBGaWxlQ2hhbmdlVHlwZS5DcmVhdGVkID0gMTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZpbGUgZ290IGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIEZpbGVDaGFuZ2VUeXBlLkNoYW5nZWQgPSAyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZmlsZSBnb3QgZGVsZXRlZC5cclxuICAgICAqL1xyXG4gICAgRmlsZUNoYW5nZVR5cGUuRGVsZXRlZCA9IDM7XHJcbn0pKEZpbGVDaGFuZ2VUeXBlID0gZXhwb3J0cy5GaWxlQ2hhbmdlVHlwZSB8fCAoZXhwb3J0cy5GaWxlQ2hhbmdlVHlwZSA9IHt9KSk7XHJcbnZhciBXYXRjaEtpbmQ7XHJcbihmdW5jdGlvbiAoV2F0Y2hLaW5kKSB7XHJcbiAgICAvKipcclxuICAgICAqIEludGVyZXN0ZWQgaW4gY3JlYXRlIGV2ZW50cy5cclxuICAgICAqL1xyXG4gICAgV2F0Y2hLaW5kLkNyZWF0ZSA9IDE7XHJcbiAgICAvKipcclxuICAgICAqIEludGVyZXN0ZWQgaW4gY2hhbmdlIGV2ZW50c1xyXG4gICAgICovXHJcbiAgICBXYXRjaEtpbmQuQ2hhbmdlID0gMjtcclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJlc3RlZCBpbiBkZWxldGUgZXZlbnRzXHJcbiAgICAgKi9cclxuICAgIFdhdGNoS2luZC5EZWxldGUgPSA0O1xyXG59KShXYXRjaEtpbmQgPSBleHBvcnRzLldhdGNoS2luZCB8fCAoZXhwb3J0cy5XYXRjaEtpbmQgPSB7fSkpO1xyXG4vLy0tLS0gRGlhZ25vc3RpYyBub3RpZmljYXRpb24gLS0tLVxyXG4vKipcclxuICogRGlhZ25vc3RpY3Mgbm90aWZpY2F0aW9uIGFyZSBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIHNpZ25hbFxyXG4gKiByZXN1bHRzIG9mIHZhbGlkYXRpb24gcnVucy5cclxuICovXHJcbnZhciBQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb247XHJcbihmdW5jdGlvbiAoUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uKSB7XHJcbiAgICBQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24udHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUoJ3RleHREb2N1bWVudC9wdWJsaXNoRGlhZ25vc3RpY3MnKTtcclxufSkoUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5QdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0ge30pKTtcclxuLyoqXHJcbiAqIEhvdyBhIGNvbXBsZXRpb24gd2FzIHRyaWdnZXJlZFxyXG4gKi9cclxudmFyIENvbXBsZXRpb25UcmlnZ2VyS2luZDtcclxuKGZ1bmN0aW9uIChDb21wbGV0aW9uVHJpZ2dlcktpbmQpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGJ5IHR5cGluZyBhbiBpZGVudGlmaWVyICgyNHg3IGNvZGVcclxuICAgICAqIGNvbXBsZXRlKSwgbWFudWFsIGludm9jYXRpb24gKGUuZyBDdHJsK1NwYWNlKSBvciB2aWEgQVBJLlxyXG4gICAgICovXHJcbiAgICBDb21wbGV0aW9uVHJpZ2dlcktpbmQuSW52b2tlZCA9IDE7XHJcbiAgICAvKipcclxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBieSBhIHRyaWdnZXIgY2hhcmFjdGVyIHNwZWNpZmllZCBieVxyXG4gICAgICogdGhlIGB0cmlnZ2VyQ2hhcmFjdGVyc2AgcHJvcGVydGllcyBvZiB0aGUgYENvbXBsZXRpb25SZWdpc3RyYXRpb25PcHRpb25zYC5cclxuICAgICAqL1xyXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kLlRyaWdnZXJDaGFyYWN0ZXIgPSAyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wbGV0aW9uIHdhcyByZS10cmlnZ2VyZWQgYXMgY3VycmVudCBjb21wbGV0aW9uIGxpc3QgaXMgaW5jb21wbGV0ZVxyXG4gICAgICovXHJcbiAgICBDb21wbGV0aW9uVHJpZ2dlcktpbmQuVHJpZ2dlckZvckluY29tcGxldGVDb21wbGV0aW9ucyA9IDM7XHJcbn0pKENvbXBsZXRpb25UcmlnZ2VyS2luZCA9IGV4cG9ydHMuQ29tcGxldGlvblRyaWdnZXJLaW5kIHx8IChleHBvcnRzLkNvbXBsZXRpb25UcmlnZ2VyS2luZCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBSZXF1ZXN0IHRvIHJlcXVlc3QgY29tcGxldGlvbiBhdCBhIGdpdmVuIHRleHQgZG9jdW1lbnQgcG9zaXRpb24uIFRoZSByZXF1ZXN0J3NcclxuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUgW1RleHREb2N1bWVudFBvc2l0aW9uXSgjVGV4dERvY3VtZW50UG9zaXRpb24pIHRoZSByZXNwb25zZVxyXG4gKiBpcyBvZiB0eXBlIFtDb21wbGV0aW9uSXRlbVtdXSgjQ29tcGxldGlvbkl0ZW0pIG9yIFtDb21wbGV0aW9uTGlzdF0oI0NvbXBsZXRpb25MaXN0KVxyXG4gKiBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cclxuICpcclxuICogVGhlIHJlcXVlc3QgY2FuIGRlbGF5IHRoZSBjb21wdXRhdGlvbiBvZiB0aGUgW2BkZXRhaWxgXSgjQ29tcGxldGlvbkl0ZW0uZGV0YWlsKVxyXG4gKiBhbmQgW2Bkb2N1bWVudGF0aW9uYF0oI0NvbXBsZXRpb25JdGVtLmRvY3VtZW50YXRpb24pIHByb3BlcnRpZXMgdG8gdGhlIGBjb21wbGV0aW9uSXRlbS9yZXNvbHZlYFxyXG4gKiByZXF1ZXN0LiBIb3dldmVyLCBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5lZWRlZCBmb3IgdGhlIGluaXRpYWwgc29ydGluZyBhbmQgZmlsdGVyaW5nLCBsaWtlIGBzb3J0VGV4dGAsXHJcbiAqIGBmaWx0ZXJUZXh0YCwgYGluc2VydFRleHRgLCBhbmQgYHRleHRFZGl0YCwgbXVzdCBub3QgYmUgY2hhbmdlZCBkdXJpbmcgcmVzb2x2ZS5cclxuICovXHJcbnZhciBDb21wbGV0aW9uUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChDb21wbGV0aW9uUmVxdWVzdCkge1xyXG4gICAgQ29tcGxldGlvblJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvY29tcGxldGlvbicpO1xyXG59KShDb21wbGV0aW9uUmVxdWVzdCA9IGV4cG9ydHMuQ29tcGxldGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuQ29tcGxldGlvblJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogUmVxdWVzdCB0byByZXNvbHZlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZm9yIGEgZ2l2ZW4gY29tcGxldGlvbiBpdGVtLlRoZSByZXF1ZXN0J3NcclxuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUgW0NvbXBsZXRpb25JdGVtXSgjQ29tcGxldGlvbkl0ZW0pIHRoZSByZXNwb25zZVxyXG4gKiBpcyBvZiB0eXBlIFtDb21wbGV0aW9uSXRlbV0oI0NvbXBsZXRpb25JdGVtKSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cclxuICovXHJcbnZhciBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3Q7XHJcbihmdW5jdGlvbiAoQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0KSB7XHJcbiAgICBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCdjb21wbGV0aW9uSXRlbS9yZXNvbHZlJyk7XHJcbn0pKENvbXBsZXRpb25SZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0IHx8IChleHBvcnRzLkNvbXBsZXRpb25SZXNvbHZlUmVxdWVzdCA9IHt9KSk7XHJcbi8vLS0tLSBIb3ZlciBTdXBwb3J0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLyoqXHJcbiAqIFJlcXVlc3QgdG8gcmVxdWVzdCBob3ZlciBpbmZvcm1hdGlvbiBhdCBhIGdpdmVuIHRleHQgZG9jdW1lbnQgcG9zaXRpb24uIFRoZSByZXF1ZXN0J3NcclxuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUgW1RleHREb2N1bWVudFBvc2l0aW9uXSgjVGV4dERvY3VtZW50UG9zaXRpb24pIHRoZSByZXNwb25zZSBpcyBvZlxyXG4gKiB0eXBlIFtIb3Zlcl0oI0hvdmVyKSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cclxuICovXHJcbnZhciBIb3ZlclJlcXVlc3Q7XHJcbihmdW5jdGlvbiAoSG92ZXJSZXF1ZXN0KSB7XHJcbiAgICBIb3ZlclJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvaG92ZXInKTtcclxufSkoSG92ZXJSZXF1ZXN0ID0gZXhwb3J0cy5Ib3ZlclJlcXVlc3QgfHwgKGV4cG9ydHMuSG92ZXJSZXF1ZXN0ID0ge30pKTtcclxudmFyIFNpZ25hdHVyZUhlbHBSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKFNpZ25hdHVyZUhlbHBSZXF1ZXN0KSB7XHJcbiAgICBTaWduYXR1cmVIZWxwUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ3RleHREb2N1bWVudC9zaWduYXR1cmVIZWxwJyk7XHJcbn0pKFNpZ25hdHVyZUhlbHBSZXF1ZXN0ID0gZXhwb3J0cy5TaWduYXR1cmVIZWxwUmVxdWVzdCB8fCAoZXhwb3J0cy5TaWduYXR1cmVIZWxwUmVxdWVzdCA9IHt9KSk7XHJcbi8vLS0tLSBHb3RvIERlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIGRlZmluaXRpb24gbG9jYXRpb24gb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0XHJcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtUZXh0RG9jdW1lbnRQb3NpdGlvbl1cclxuICogKCNUZXh0RG9jdW1lbnRQb3NpdGlvbikgdGhlIHJlc3BvbnNlIGlzIG9mIHR5cGUgW0RlZmluaXRpb25dKCNEZWZpbml0aW9uKSBvciBhXHJcbiAqIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cclxuICovXHJcbnZhciBEZWZpbml0aW9uUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChEZWZpbml0aW9uUmVxdWVzdCkge1xyXG4gICAgRGVmaW5pdGlvblJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvZGVmaW5pdGlvbicpO1xyXG59KShEZWZpbml0aW9uUmVxdWVzdCA9IGV4cG9ydHMuRGVmaW5pdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuRGVmaW5pdGlvblJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgcHJvamVjdC13aWRlIHJlZmVyZW5jZXMgZm9yIHRoZSBzeW1ib2wgZGVub3RlZFxyXG4gKiBieSB0aGUgZ2l2ZW4gdGV4dCBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2ZcclxuICogdHlwZSBbUmVmZXJlbmNlUGFyYW1zXSgjUmVmZXJlbmNlUGFyYW1zKSB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZVxyXG4gKiBbTG9jYXRpb25bXV0oI0xvY2F0aW9uKSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cclxuICovXHJcbnZhciBSZWZlcmVuY2VzUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChSZWZlcmVuY2VzUmVxdWVzdCkge1xyXG4gICAgUmVmZXJlbmNlc1JlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvcmVmZXJlbmNlcycpO1xyXG59KShSZWZlcmVuY2VzUmVxdWVzdCA9IGV4cG9ydHMuUmVmZXJlbmNlc1JlcXVlc3QgfHwgKGV4cG9ydHMuUmVmZXJlbmNlc1JlcXVlc3QgPSB7fSkpO1xyXG4vLy0tLS0gRG9jdW1lbnQgSGlnaGxpZ2h0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLyoqXHJcbiAqIFJlcXVlc3QgdG8gcmVzb2x2ZSBhIFtEb2N1bWVudEhpZ2hsaWdodF0oI0RvY3VtZW50SGlnaGxpZ2h0KSBmb3IgYSBnaXZlblxyXG4gKiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtUZXh0RG9jdW1lbnRQb3NpdGlvbl1cclxuICogKCNUZXh0RG9jdW1lbnRQb3NpdGlvbikgdGhlIHJlcXVlc3QgcmVzcG9uc2UgaXMgb2YgdHlwZSBbRG9jdW1lbnRIaWdobGlnaHRbXV1cclxuICogKCNEb2N1bWVudEhpZ2hsaWdodCkgb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXHJcbiAqL1xyXG52YXIgRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCkge1xyXG4gICAgRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgndGV4dERvY3VtZW50L2RvY3VtZW50SGlnaGxpZ2h0Jyk7XHJcbn0pKERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IHt9KSk7XHJcbi8vLS0tLSBEb2N1bWVudCBTeW1ib2wgUHJvdmlkZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8qKlxyXG4gKiBBIHJlcXVlc3QgdG8gbGlzdCBhbGwgc3ltYm9scyBmb3VuZCBpbiBhIGdpdmVuIHRleHQgZG9jdW1lbnQuIFRoZSByZXF1ZXN0J3NcclxuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUgW1RleHREb2N1bWVudElkZW50aWZpZXJdKCNUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB0aGVcclxuICogcmVzcG9uc2UgaXMgb2YgdHlwZSBbU3ltYm9sSW5mb3JtYXRpb25bXV0oI1N5bWJvbEluZm9ybWF0aW9uKSBvciBhIFRoZW5hYmxlXHJcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cclxuICovXHJcbnZhciBEb2N1bWVudFN5bWJvbFJlcXVlc3Q7XHJcbihmdW5jdGlvbiAoRG9jdW1lbnRTeW1ib2xSZXF1ZXN0KSB7XHJcbiAgICBEb2N1bWVudFN5bWJvbFJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRTeW1ib2wnKTtcclxufSkoRG9jdW1lbnRTeW1ib2xSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudFN5bWJvbFJlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRTeW1ib2xSZXF1ZXN0ID0ge30pKTtcclxuLy8tLS0tIFdvcmtzcGFjZSBTeW1ib2wgUHJvdmlkZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8qKlxyXG4gKiBBIHJlcXVlc3QgdG8gbGlzdCBwcm9qZWN0LXdpZGUgc3ltYm9scyBtYXRjaGluZyB0aGUgcXVlcnkgc3RyaW5nIGdpdmVuXHJcbiAqIGJ5IHRoZSBbV29ya3NwYWNlU3ltYm9sUGFyYW1zXSgjV29ya3NwYWNlU3ltYm9sUGFyYW1zKS4gVGhlIHJlc3BvbnNlIGlzXHJcbiAqIG9mIHR5cGUgW1N5bWJvbEluZm9ybWF0aW9uW11dKCNTeW1ib2xJbmZvcm1hdGlvbikgb3IgYSBUaGVuYWJsZSB0aGF0XHJcbiAqIHJlc29sdmVzIHRvIHN1Y2guXHJcbiAqL1xyXG52YXIgV29ya3NwYWNlU3ltYm9sUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0KSB7XHJcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgnd29ya3NwYWNlL3N5bWJvbCcpO1xyXG59KShXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0ID0gZXhwb3J0cy5Xb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0IHx8IChleHBvcnRzLldvcmtzcGFjZVN5bWJvbFJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgY29tbWFuZHMgZm9yIHRoZSBnaXZlbiB0ZXh0IGRvY3VtZW50IGFuZCByYW5nZS5cclxuICovXHJcbnZhciBDb2RlQWN0aW9uUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChDb2RlQWN0aW9uUmVxdWVzdCkge1xyXG4gICAgQ29kZUFjdGlvblJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvY29kZUFjdGlvbicpO1xyXG59KShDb2RlQWN0aW9uUmVxdWVzdCA9IGV4cG9ydHMuQ29kZUFjdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuQ29kZUFjdGlvblJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgY29kZSBsZW5zIGZvciB0aGUgZ2l2ZW4gdGV4dCBkb2N1bWVudC5cclxuICovXHJcbnZhciBDb2RlTGVuc1JlcXVlc3Q7XHJcbihmdW5jdGlvbiAoQ29kZUxlbnNSZXF1ZXN0KSB7XHJcbiAgICBDb2RlTGVuc1JlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvY29kZUxlbnMnKTtcclxufSkoQ29kZUxlbnNSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlTGVuc1JlcXVlc3QgfHwgKGV4cG9ydHMuQ29kZUxlbnNSZXF1ZXN0ID0ge30pKTtcclxuLyoqXHJcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIGEgY29tbWFuZCBmb3IgYSBnaXZlbiBjb2RlIGxlbnMuXHJcbiAqL1xyXG52YXIgQ29kZUxlbnNSZXNvbHZlUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0KSB7XHJcbiAgICBDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgnY29kZUxlbnMvcmVzb2x2ZScpO1xyXG59KShDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlTGVuc1Jlc29sdmVSZXF1ZXN0IHx8IChleHBvcnRzLkNvZGVMZW5zUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHRvIGZvcm1hdCBhIHdob2xlIGRvY3VtZW50LlxyXG4gKi9cclxudmFyIERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3Q7XHJcbihmdW5jdGlvbiAoRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCkge1xyXG4gICAgRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ3RleHREb2N1bWVudC9mb3JtYXR0aW5nJyk7XHJcbn0pKERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHJlcXVlc3QgdG8gdG8gZm9ybWF0IGEgcmFuZ2UgaW4gYSBkb2N1bWVudC5cclxuICovXHJcbnZhciBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3Q7XHJcbihmdW5jdGlvbiAoRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0KSB7XHJcbiAgICBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvcmFuZ2VGb3JtYXR0aW5nJyk7XHJcbn0pKERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHJlcXVlc3QgdG8gZm9ybWF0IGEgZG9jdW1lbnQgb24gdHlwZS5cclxuICovXHJcbnZhciBEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QpIHtcclxuICAgIERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvb25UeXBlRm9ybWF0dGluZycpO1xyXG59KShEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHJlbmFtZSBhIHN5bWJvbC5cclxuICovXHJcbnZhciBSZW5hbWVSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKFJlbmFtZVJlcXVlc3QpIHtcclxuICAgIFJlbmFtZVJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvcmVuYW1lJyk7XHJcbn0pKFJlbmFtZVJlcXVlc3QgPSBleHBvcnRzLlJlbmFtZVJlcXVlc3QgfHwgKGV4cG9ydHMuUmVuYW1lUmVxdWVzdCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHJlcXVlc3QgdG8gdGVzdCBhbmQgcGVyZm9ybSB0aGUgc2V0dXAgbmVjZXNzYXJ5IGZvciBhIHJlbmFtZS5cclxuICovXHJcbnZhciBQcmVwYXJlUmVuYW1lUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChQcmVwYXJlUmVuYW1lUmVxdWVzdCkge1xyXG4gICAgUHJlcGFyZVJlbmFtZVJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvcHJlcGFyZVJlbmFtZScpO1xyXG59KShQcmVwYXJlUmVuYW1lUmVxdWVzdCA9IGV4cG9ydHMuUHJlcGFyZVJlbmFtZVJlcXVlc3QgfHwgKGV4cG9ydHMuUHJlcGFyZVJlbmFtZVJlcXVlc3QgPSB7fSkpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgZG9jdW1lbnQgbGlua3NcclxuICovXHJcbnZhciBEb2N1bWVudExpbmtSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKERvY3VtZW50TGlua1JlcXVlc3QpIHtcclxuICAgIERvY3VtZW50TGlua1JlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRMaW5rJyk7XHJcbn0pKERvY3VtZW50TGlua1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50TGlua1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRMaW5rUmVxdWVzdCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBSZXF1ZXN0IHRvIHJlc29sdmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBkb2N1bWVudCBsaW5rLiBUaGUgcmVxdWVzdCdzXHJcbiAqIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtEb2N1bWVudExpbmtdKCNEb2N1bWVudExpbmspIHRoZSByZXNwb25zZVxyXG4gKiBpcyBvZiB0eXBlIFtEb2N1bWVudExpbmtdKCNEb2N1bWVudExpbmspIG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxyXG4gKi9cclxudmFyIERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0KSB7XHJcbiAgICBEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ2RvY3VtZW50TGluay9yZXNvbHZlJyk7XHJcbn0pKERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHJlcXVlc3Qgc2VuZCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB0byBleGVjdXRlIGEgY29tbWFuZC4gVGhlIHJlcXVlc3QgbWlnaHQgcmV0dXJuXHJcbiAqIGEgd29ya3NwYWNlIGVkaXQgd2hpY2ggdGhlIGNsaWVudCB3aWxsIGFwcGx5IHRvIHRoZSB3b3Jrc3BhY2UuXHJcbiAqL1xyXG52YXIgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKEV4ZWN1dGVDb21tYW5kUmVxdWVzdCkge1xyXG4gICAgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSgnd29ya3NwYWNlL2V4ZWN1dGVDb21tYW5kJyk7XHJcbn0pKEV4ZWN1dGVDb21tYW5kUmVxdWVzdCA9IGV4cG9ydHMuRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0IHx8IChleHBvcnRzLkV4ZWN1dGVDb21tYW5kUmVxdWVzdCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHJlcXVlc3Qgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBtb2RpZmllZCBjZXJ0YWluIHJlc291cmNlcy5cclxuICovXHJcbnZhciBBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0O1xyXG4oZnVuY3Rpb24gKEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QpIHtcclxuICAgIEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QudHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlKCd3b3Jrc3BhY2UvYXBwbHlFZGl0Jyk7XHJcbn0pKEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgPSBleHBvcnRzLkFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgfHwgKGV4cG9ydHMuQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdCA9IHt9KSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/protocol.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/protocol.typeDefinition.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/protocol.typeDefinition.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\n/**\r\n * A request to resolve the type definition locations of a symbol at a given text\r\n * document position. The request's parameter is of type [TextDocumentPositioParams]\r\n * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a\r\n * Thenable that resolves to such.\r\n */\r\nvar TypeDefinitionRequest;\r\n(function (TypeDefinitionRequest) {\r\n    TypeDefinitionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/typeDefinition');\r\n})(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC50eXBlRGVmaW5pdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC50eXBlRGVmaW5pdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gcmVxdWlyZShcInZzY29kZS1qc29ucnBjXCIpO1xyXG4vKipcclxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIHR5cGUgZGVmaW5pdGlvbiBsb2NhdGlvbnMgb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0XHJcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtUZXh0RG9jdW1lbnRQb3NpdGlvUGFyYW1zXVxyXG4gKiAoI1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKSB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZSBbRGVmaW5pdGlvbl0oI0RlZmluaXRpb24pIG9yIGFcclxuICogVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxyXG4gKi9cclxudmFyIFR5cGVEZWZpbml0aW9uUmVxdWVzdDtcclxuKGZ1bmN0aW9uIChUeXBlRGVmaW5pdGlvblJlcXVlc3QpIHtcclxuICAgIFR5cGVEZWZpbml0aW9uUmVxdWVzdC50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUoJ3RleHREb2N1bWVudC90eXBlRGVmaW5pdGlvbicpO1xyXG59KShUeXBlRGVmaW5pdGlvblJlcXVlc3QgPSBleHBvcnRzLlR5cGVEZWZpbml0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5UeXBlRGVmaW5pdGlvblJlcXVlc3QgPSB7fSkpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/protocol.typeDefinition.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/protocol.workspaceFolders.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/protocol.workspaceFolders.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ \"./node_modules/vscode-jsonrpc/lib/main.js\");\r\n/**\r\n * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\r\n */\r\nvar WorkspaceFoldersRequest;\r\n(function (WorkspaceFoldersRequest) {\r\n    WorkspaceFoldersRequest.type = new vscode_jsonrpc_1.RequestType0('workspace/workspaceFolders');\r\n})(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));\r\n/**\r\n * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace\r\n * folder configuration changes.\r\n */\r\nvar DidChangeWorkspaceFoldersNotification;\r\n(function (DidChangeWorkspaceFoldersNotification) {\r\n    DidChangeWorkspaceFoldersNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeWorkspaceFolders');\r\n})(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi9wcm90b2NvbC53b3Jrc3BhY2VGb2xkZXJzLmpzLmpzIiwic291cmNlcyI6WyIuLi8uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2wvbGliL3Byb3RvY29sLndvcmtzcGFjZUZvbGRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtanNvbnJwY1wiKTtcclxuLyoqXHJcbiAqIFRoZSBgd29ya3NwYWNlL3dvcmtzcGFjZUZvbGRlcnNgIGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gZmV0Y2ggdGhlIG9wZW4gd29ya3NwYWNlIGZvbGRlcnMuXHJcbiAqL1xyXG52YXIgV29ya3NwYWNlRm9sZGVyc1JlcXVlc3Q7XHJcbihmdW5jdGlvbiAoV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QpIHtcclxuICAgIFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0LnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZTAoJ3dvcmtzcGFjZS93b3Jrc3BhY2VGb2xkZXJzJyk7XHJcbn0pKFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0ID0gZXhwb3J0cy5Xb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCB8fCAoZXhwb3J0cy5Xb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgYHdvcmtzcGFjZS9kaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzYCBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuIHRoZSB3b3Jrc3BhY2VcclxuICogZm9sZGVyIGNvbmZpZ3VyYXRpb24gY2hhbmdlcy5cclxuICovXHJcbnZhciBEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uO1xyXG4oZnVuY3Rpb24gKERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24pIHtcclxuICAgIERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24udHlwZSA9IG5ldyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUoJ3dvcmtzcGFjZS9kaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzJyk7XHJcbn0pKERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiA9IHt9KSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/protocol.workspaceFolders.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/utils/is.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/utils/is.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction boolean(value) {\r\n    return value === true || value === false;\r\n}\r\nexports.boolean = boolean;\r\nfunction string(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\nexports.string = string;\r\nfunction number(value) {\r\n    return typeof value === 'number' || value instanceof Number;\r\n}\r\nexports.number = number;\r\nfunction error(value) {\r\n    return value instanceof Error;\r\n}\r\nexports.error = error;\r\nfunction func(value) {\r\n    return typeof value === 'function';\r\n}\r\nexports.func = func;\r\nfunction array(value) {\r\n    return Array.isArray(value);\r\n}\r\nexports.array = array;\r\nfunction stringArray(value) {\r\n    return array(value) && value.every(elem => string(elem));\r\n}\r\nexports.stringArray = stringArray;\r\nfunction typedArray(value, check) {\r\n    return Array.isArray(value) && value.every(check);\r\n}\r\nexports.typedArray = typedArray;\r\nfunction thenable(value) {\r\n    return value && func(value.then);\r\n}\r\nexports.thenable = thenable;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi91dGlscy9pcy5qcy5qcyIsInNvdXJjZXMiOlsiLi4vLi9ub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXByb3RvY29sL2xpYi91dGlscy9pcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuYm9vbGVhbiA9IGJvb2xlYW47XHJcbmZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XHJcbn1cclxuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XHJcbmZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXI7XHJcbn1cclxuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XHJcbmZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFcnJvcjtcclxufVxyXG5leHBvcnRzLmVycm9yID0gZXJyb3I7XHJcbmZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuZXhwb3J0cy5mdW5jID0gZnVuYztcclxuZnVuY3Rpb24gYXJyYXkodmFsdWUpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcclxufVxyXG5leHBvcnRzLmFycmF5ID0gYXJyYXk7XHJcbmZ1bmN0aW9uIHN0cmluZ0FycmF5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gYXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGVsZW0gPT4gc3RyaW5nKGVsZW0pKTtcclxufVxyXG5leHBvcnRzLnN0cmluZ0FycmF5ID0gc3RyaW5nQXJyYXk7XHJcbmZ1bmN0aW9uIHR5cGVkQXJyYXkodmFsdWUsIGNoZWNrKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoY2hlY2spO1xyXG59XHJcbmV4cG9ydHMudHlwZWRBcnJheSA9IHR5cGVkQXJyYXk7XHJcbmZ1bmN0aW9uIHRoZW5hYmxlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgJiYgZnVuYyh2YWx1ZS50aGVuKTtcclxufVxyXG5leHBvcnRzLnRoZW5hYmxlID0gdGhlbmFibGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-protocol/lib/utils/is.js\n");

/***/ }),

/***/ "./node_modules/vscode-languageserver-types/lib/esm/main.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode-languageserver-types/lib/esm/main.js ***!
  \******************************************************************/
/*! exports provided: Position, Range, Location, Color, ColorInformation, ColorPresentation, FoldingRangeKind, FoldingRange, DiagnosticRelatedInformation, DiagnosticSeverity, Diagnostic, Command, TextEdit, TextDocumentEdit, CreateFile, RenameFile, DeleteFile, WorkspaceEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, MarkupContent, CompletionItemKind, InsertTextFormat, CompletionItem, CompletionList, MarkedString, Hover, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolInformation, DocumentSymbol, CodeActionKind, CodeActionContext, CodeAction, CodeLens, FormattingOptions, DocumentLink, EOL, TextDocument, TextDocumentSaveReason */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Position\", function() { return Position; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Range\", function() { return Range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Location\", function() { return Location; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorInformation\", function() { return ColorInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorPresentation\", function() { return ColorPresentation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FoldingRangeKind\", function() { return FoldingRangeKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FoldingRange\", function() { return FoldingRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DiagnosticRelatedInformation\", function() { return DiagnosticRelatedInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DiagnosticSeverity\", function() { return DiagnosticSeverity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Diagnostic\", function() { return Diagnostic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Command\", function() { return Command; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextEdit\", function() { return TextEdit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentEdit\", function() { return TextDocumentEdit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CreateFile\", function() { return CreateFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenameFile\", function() { return RenameFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DeleteFile\", function() { return DeleteFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorkspaceEdit\", function() { return WorkspaceEdit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorkspaceChange\", function() { return WorkspaceChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentIdentifier\", function() { return TextDocumentIdentifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VersionedTextDocumentIdentifier\", function() { return VersionedTextDocumentIdentifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentItem\", function() { return TextDocumentItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MarkupKind\", function() { return MarkupKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MarkupContent\", function() { return MarkupContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompletionItemKind\", function() { return CompletionItemKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InsertTextFormat\", function() { return InsertTextFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompletionItem\", function() { return CompletionItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompletionList\", function() { return CompletionList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MarkedString\", function() { return MarkedString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Hover\", function() { return Hover; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParameterInformation\", function() { return ParameterInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SignatureInformation\", function() { return SignatureInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentHighlightKind\", function() { return DocumentHighlightKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentHighlight\", function() { return DocumentHighlight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SymbolKind\", function() { return SymbolKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SymbolInformation\", function() { return SymbolInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentSymbol\", function() { return DocumentSymbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeActionKind\", function() { return CodeActionKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeActionContext\", function() { return CodeActionContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeAction\", function() { return CodeAction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeLens\", function() { return CodeLens; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormattingOptions\", function() { return FormattingOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentLink\", function() { return DocumentLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EOL\", function() { return EOL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocument\", function() { return TextDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentSaveReason\", function() { return TextDocumentSaveReason; });\n/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\n/**\r\n * The Position namespace provides helper functions to work with\r\n * [Position](#Position) literals.\r\n */\r\nvar Position;\r\n(function (Position) {\r\n    /**\r\n     * Creates a new Position literal from the given line and character.\r\n     * @param line The position's line.\r\n     * @param character The position's character.\r\n     */\r\n    function create(line, character) {\r\n        return { line: line, character: character };\r\n    }\r\n    Position.create = create;\r\n    /**\r\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\r\n    }\r\n    Position.is = is;\r\n})(Position || (Position = {}));\r\n/**\r\n * The Range namespace provides helper functions to work with\r\n * [Range](#Range) literals.\r\n */\r\nvar Range;\r\n(function (Range) {\r\n    function create(one, two, three, four) {\r\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\r\n            return { start: Position.create(one, two), end: Position.create(three, four) };\r\n        }\r\n        else if (Position.is(one) && Position.is(two)) {\r\n            return { start: one, end: two };\r\n        }\r\n        else {\r\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\r\n        }\r\n    }\r\n    Range.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\r\n    }\r\n    Range.is = is;\r\n})(Range || (Range = {}));\r\n/**\r\n * The Location namespace provides helper functions to work with\r\n * [Location](#Location) literals.\r\n */\r\nvar Location;\r\n(function (Location) {\r\n    /**\r\n     * Creates a Location literal.\r\n     * @param uri The location's uri.\r\n     * @param range The location's range.\r\n     */\r\n    function create(uri, range) {\r\n        return { uri: uri, range: range };\r\n    }\r\n    Location.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\r\n    }\r\n    Location.is = is;\r\n})(Location || (Location = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [Color](#Color) literals.\r\n */\r\nvar Color;\r\n(function (Color) {\r\n    /**\r\n     * Creates a new Color literal.\r\n     */\r\n    function create(red, green, blue, alpha) {\r\n        return {\r\n            red: red,\r\n            green: green,\r\n            blue: blue,\r\n            alpha: alpha,\r\n        };\r\n    }\r\n    Color.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.red)\r\n            && Is.number(candidate.green)\r\n            && Is.number(candidate.blue)\r\n            && Is.number(candidate.alpha);\r\n    }\r\n    Color.is = is;\r\n})(Color || (Color = {}));\r\n/**\r\n * The ColorInformation namespace provides helper functions to work with\r\n * [ColorInformation](#ColorInformation) literals.\r\n */\r\nvar ColorInformation;\r\n(function (ColorInformation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(range, color) {\r\n        return {\r\n            range: range,\r\n            color: color,\r\n        };\r\n    }\r\n    ColorInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Range.is(candidate.range) && Color.is(candidate.color);\r\n    }\r\n    ColorInformation.is = is;\r\n})(ColorInformation || (ColorInformation = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [ColorPresentation](#ColorPresentation) literals.\r\n */\r\nvar ColorPresentation;\r\n(function (ColorPresentation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(label, textEdit, additionalTextEdits) {\r\n        return {\r\n            label: label,\r\n            textEdit: textEdit,\r\n            additionalTextEdits: additionalTextEdits,\r\n        };\r\n    }\r\n    ColorPresentation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate.label)\r\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\r\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\r\n    }\r\n    ColorPresentation.is = is;\r\n})(ColorPresentation || (ColorPresentation = {}));\r\n/**\r\n * Enum of known range kinds\r\n */\r\nvar FoldingRangeKind;\r\n(function (FoldingRangeKind) {\r\n    /**\r\n     * Folding range for a comment\r\n     */\r\n    FoldingRangeKind[\"Comment\"] = \"comment\";\r\n    /**\r\n     * Folding range for a imports or includes\r\n     */\r\n    FoldingRangeKind[\"Imports\"] = \"imports\";\r\n    /**\r\n     * Folding range for a region (e.g. `#region`)\r\n     */\r\n    FoldingRangeKind[\"Region\"] = \"region\";\r\n})(FoldingRangeKind || (FoldingRangeKind = {}));\r\n/**\r\n * The folding range namespace provides helper functions to work with\r\n * [FoldingRange](#FoldingRange) literals.\r\n */\r\nvar FoldingRange;\r\n(function (FoldingRange) {\r\n    /**\r\n     * Creates a new FoldingRange literal.\r\n     */\r\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\r\n        var result = {\r\n            startLine: startLine,\r\n            endLine: endLine\r\n        };\r\n        if (Is.defined(startCharacter)) {\r\n            result.startCharacter = startCharacter;\r\n        }\r\n        if (Is.defined(endCharacter)) {\r\n            result.endCharacter = endCharacter;\r\n        }\r\n        if (Is.defined(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    FoldingRange.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\r\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\r\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\r\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\r\n    }\r\n    FoldingRange.is = is;\r\n})(FoldingRange || (FoldingRange = {}));\r\n/**\r\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\r\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\r\n */\r\nvar DiagnosticRelatedInformation;\r\n(function (DiagnosticRelatedInformation) {\r\n    /**\r\n     * Creates a new DiagnosticRelatedInformation literal.\r\n     */\r\n    function create(location, message) {\r\n        return {\r\n            location: location,\r\n            message: message\r\n        };\r\n    }\r\n    DiagnosticRelatedInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\r\n    }\r\n    DiagnosticRelatedInformation.is = is;\r\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\r\n/**\r\n * The diagnostic's severity.\r\n */\r\nvar DiagnosticSeverity;\r\n(function (DiagnosticSeverity) {\r\n    /**\r\n     * Reports an error.\r\n     */\r\n    DiagnosticSeverity.Error = 1;\r\n    /**\r\n     * Reports a warning.\r\n     */\r\n    DiagnosticSeverity.Warning = 2;\r\n    /**\r\n     * Reports an information.\r\n     */\r\n    DiagnosticSeverity.Information = 3;\r\n    /**\r\n     * Reports a hint.\r\n     */\r\n    DiagnosticSeverity.Hint = 4;\r\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\r\n/**\r\n * The Diagnostic namespace provides helper functions to work with\r\n * [Diagnostic](#Diagnostic) literals.\r\n */\r\nvar Diagnostic;\r\n(function (Diagnostic) {\r\n    /**\r\n     * Creates a new Diagnostic literal.\r\n     */\r\n    function create(range, message, severity, code, source, relatedInformation) {\r\n        var result = { range: range, message: message };\r\n        if (Is.defined(severity)) {\r\n            result.severity = severity;\r\n        }\r\n        if (Is.defined(code)) {\r\n            result.code = code;\r\n        }\r\n        if (Is.defined(source)) {\r\n            result.source = source;\r\n        }\r\n        if (Is.defined(relatedInformation)) {\r\n            result.relatedInformation = relatedInformation;\r\n        }\r\n        return result;\r\n    }\r\n    Diagnostic.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && Range.is(candidate.range)\r\n            && Is.string(candidate.message)\r\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\r\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\r\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\r\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\r\n    }\r\n    Diagnostic.is = is;\r\n})(Diagnostic || (Diagnostic = {}));\r\n/**\r\n * The Command namespace provides helper functions to work with\r\n * [Command](#Command) literals.\r\n */\r\nvar Command;\r\n(function (Command) {\r\n    /**\r\n     * Creates a new Command literal.\r\n     */\r\n    function create(title, command) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { title: title, command: command };\r\n        if (Is.defined(args) && args.length > 0) {\r\n            result.arguments = args;\r\n        }\r\n        return result;\r\n    }\r\n    Command.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\r\n    }\r\n    Command.is = is;\r\n})(Command || (Command = {}));\r\n/**\r\n * The TextEdit namespace provides helper function to create replace,\r\n * insert and delete edits more easily.\r\n */\r\nvar TextEdit;\r\n(function (TextEdit) {\r\n    /**\r\n     * Creates a replace text edit.\r\n     * @param range The range of text to be replaced.\r\n     * @param newText The new text.\r\n     */\r\n    function replace(range, newText) {\r\n        return { range: range, newText: newText };\r\n    }\r\n    TextEdit.replace = replace;\r\n    /**\r\n     * Creates a insert text edit.\r\n     * @param position The position to insert the text at.\r\n     * @param newText The text to be inserted.\r\n     */\r\n    function insert(position, newText) {\r\n        return { range: { start: position, end: position }, newText: newText };\r\n    }\r\n    TextEdit.insert = insert;\r\n    /**\r\n     * Creates a delete text edit.\r\n     * @param range The range of text to be deleted.\r\n     */\r\n    function del(range) {\r\n        return { range: range, newText: '' };\r\n    }\r\n    TextEdit.del = del;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate)\r\n            && Is.string(candidate.newText)\r\n            && Range.is(candidate.range);\r\n    }\r\n    TextEdit.is = is;\r\n})(TextEdit || (TextEdit = {}));\r\n/**\r\n * The TextDocumentEdit namespace provides helper function to create\r\n * an edit that manipulates a text document.\r\n */\r\nvar TextDocumentEdit;\r\n(function (TextDocumentEdit) {\r\n    /**\r\n     * Creates a new `TextDocumentEdit`\r\n     */\r\n    function create(textDocument, edits) {\r\n        return { textDocument: textDocument, edits: edits };\r\n    }\r\n    TextDocumentEdit.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\r\n            && Array.isArray(candidate.edits);\r\n    }\r\n    TextDocumentEdit.is = is;\r\n})(TextDocumentEdit || (TextDocumentEdit = {}));\r\nvar CreateFile;\r\n(function (CreateFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'create',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    CreateFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    CreateFile.is = is;\r\n})(CreateFile || (CreateFile = {}));\r\nvar RenameFile;\r\n(function (RenameFile) {\r\n    function create(oldUri, newUri, options) {\r\n        var result = {\r\n            kind: 'rename',\r\n            oldUri: oldUri,\r\n            newUri: newUri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    RenameFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    RenameFile.is = is;\r\n})(RenameFile || (RenameFile = {}));\r\nvar DeleteFile;\r\n(function (DeleteFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'delete',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    DeleteFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))));\r\n    }\r\n    DeleteFile.is = is;\r\n})(DeleteFile || (DeleteFile = {}));\r\nvar WorkspaceEdit;\r\n(function (WorkspaceEdit) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\r\n            (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {\r\n                if (Is.string(change.kind)) {\r\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\r\n                }\r\n                else {\r\n                    return TextDocumentEdit.is(change);\r\n                }\r\n            }));\r\n    }\r\n    WorkspaceEdit.is = is;\r\n})(WorkspaceEdit || (WorkspaceEdit = {}));\r\nvar TextEditChangeImpl = /** @class */ (function () {\r\n    function TextEditChangeImpl(edits) {\r\n        this.edits = edits;\r\n    }\r\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\r\n        this.edits.push(TextEdit.insert(position, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\r\n        this.edits.push(TextEdit.replace(range, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.delete = function (range) {\r\n        this.edits.push(TextEdit.del(range));\r\n    };\r\n    TextEditChangeImpl.prototype.add = function (edit) {\r\n        this.edits.push(edit);\r\n    };\r\n    TextEditChangeImpl.prototype.all = function () {\r\n        return this.edits;\r\n    };\r\n    TextEditChangeImpl.prototype.clear = function () {\r\n        this.edits.splice(0, this.edits.length);\r\n    };\r\n    return TextEditChangeImpl;\r\n}());\r\n/**\r\n * A workspace change helps constructing changes to a workspace.\r\n */\r\nvar WorkspaceChange = /** @class */ (function () {\r\n    function WorkspaceChange(workspaceEdit) {\r\n        var _this = this;\r\n        this._textEditChanges = Object.create(null);\r\n        if (workspaceEdit) {\r\n            this._workspaceEdit = workspaceEdit;\r\n            if (workspaceEdit.documentChanges) {\r\n                workspaceEdit.documentChanges.forEach(function (change) {\r\n                    if (TextDocumentEdit.is(change)) {\r\n                        var textEditChange = new TextEditChangeImpl(change.edits);\r\n                        _this._textEditChanges[change.textDocument.uri] = textEditChange;\r\n                    }\r\n                });\r\n            }\r\n            else if (workspaceEdit.changes) {\r\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\r\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\r\n                    _this._textEditChanges[key] = textEditChange;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\r\n        /**\r\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\r\n         * use to be returned from a workspace edit operation like rename.\r\n         */\r\n        get: function () {\r\n            return this._workspaceEdit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\r\n        if (VersionedTextDocumentIdentifier.is(key)) {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    documentChanges: []\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.documentChanges) {\r\n                throw new Error('Workspace edit is not configured for document changes.');\r\n            }\r\n            var textDocument = key;\r\n            var result = this._textEditChanges[textDocument.uri];\r\n            if (!result) {\r\n                var edits = [];\r\n                var textDocumentEdit = {\r\n                    textDocument: textDocument,\r\n                    edits: edits\r\n                };\r\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[textDocument.uri] = result;\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    changes: Object.create(null)\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.changes) {\r\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\r\n            }\r\n            var result = this._textEditChanges[key];\r\n            if (!result) {\r\n                var edits = [];\r\n                this._workspaceEdit.changes[key] = edits;\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[key] = result;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    WorkspaceChange.prototype.createFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(CreateFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(RenameFile.create(oldUri, newUri, options));\r\n    };\r\n    WorkspaceChange.prototype.deleteFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(DeleteFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.checkDocumentChanges = function () {\r\n        if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) {\r\n            throw new Error('Workspace edit is not configured for document changes.');\r\n        }\r\n    };\r\n    return WorkspaceChange;\r\n}());\r\n\r\n/**\r\n * The TextDocumentIdentifier namespace provides helper functions to work with\r\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\r\n */\r\nvar TextDocumentIdentifier;\r\n(function (TextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new TextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     */\r\n    function create(uri) {\r\n        return { uri: uri };\r\n    }\r\n    TextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri);\r\n    }\r\n    TextDocumentIdentifier.is = is;\r\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\r\n/**\r\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\r\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\r\n */\r\nvar VersionedTextDocumentIdentifier;\r\n(function (VersionedTextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new VersionedTextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     * @param uri The document's text.\r\n     */\r\n    function create(uri, version) {\r\n        return { uri: uri, version: version };\r\n    }\r\n    VersionedTextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.number(candidate.version));\r\n    }\r\n    VersionedTextDocumentIdentifier.is = is;\r\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\r\n/**\r\n * The TextDocumentItem namespace provides helper functions to work with\r\n * [TextDocumentItem](#TextDocumentItem) literals.\r\n */\r\nvar TextDocumentItem;\r\n(function (TextDocumentItem) {\r\n    /**\r\n     * Creates a new TextDocumentItem literal.\r\n     * @param uri The document's uri.\r\n     * @param languageId The document's language identifier.\r\n     * @param version The document's version number.\r\n     * @param text The document's text.\r\n     */\r\n    function create(uri, languageId, version, text) {\r\n        return { uri: uri, languageId: languageId, version: version, text: text };\r\n    }\r\n    TextDocumentItem.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\r\n    }\r\n    TextDocumentItem.is = is;\r\n})(TextDocumentItem || (TextDocumentItem = {}));\r\n/**\r\n * Describes the content type that a client supports in various\r\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\r\n *\r\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\r\n * are reserved for internal usage.\r\n */\r\nvar MarkupKind;\r\n(function (MarkupKind) {\r\n    /**\r\n     * Plain text is supported as a content format\r\n     */\r\n    MarkupKind.PlainText = 'plaintext';\r\n    /**\r\n     * Markdown is supported as a content format\r\n     */\r\n    MarkupKind.Markdown = 'markdown';\r\n})(MarkupKind || (MarkupKind = {}));\r\n(function (MarkupKind) {\r\n    /**\r\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\r\n    }\r\n    MarkupKind.is = is;\r\n})(MarkupKind || (MarkupKind = {}));\r\nvar MarkupContent;\r\n(function (MarkupContent) {\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\r\n    }\r\n    MarkupContent.is = is;\r\n})(MarkupContent || (MarkupContent = {}));\r\n/**\r\n * The kind of a completion entry.\r\n */\r\nvar CompletionItemKind;\r\n(function (CompletionItemKind) {\r\n    CompletionItemKind.Text = 1;\r\n    CompletionItemKind.Method = 2;\r\n    CompletionItemKind.Function = 3;\r\n    CompletionItemKind.Constructor = 4;\r\n    CompletionItemKind.Field = 5;\r\n    CompletionItemKind.Variable = 6;\r\n    CompletionItemKind.Class = 7;\r\n    CompletionItemKind.Interface = 8;\r\n    CompletionItemKind.Module = 9;\r\n    CompletionItemKind.Property = 10;\r\n    CompletionItemKind.Unit = 11;\r\n    CompletionItemKind.Value = 12;\r\n    CompletionItemKind.Enum = 13;\r\n    CompletionItemKind.Keyword = 14;\r\n    CompletionItemKind.Snippet = 15;\r\n    CompletionItemKind.Color = 16;\r\n    CompletionItemKind.File = 17;\r\n    CompletionItemKind.Reference = 18;\r\n    CompletionItemKind.Folder = 19;\r\n    CompletionItemKind.EnumMember = 20;\r\n    CompletionItemKind.Constant = 21;\r\n    CompletionItemKind.Struct = 22;\r\n    CompletionItemKind.Event = 23;\r\n    CompletionItemKind.Operator = 24;\r\n    CompletionItemKind.TypeParameter = 25;\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\n/**\r\n * Defines whether the insert text in a completion item should be interpreted as\r\n * plain text or a snippet.\r\n */\r\nvar InsertTextFormat;\r\n(function (InsertTextFormat) {\r\n    /**\r\n     * The primary text to be inserted is treated as a plain string.\r\n     */\r\n    InsertTextFormat.PlainText = 1;\r\n    /**\r\n     * The primary text to be inserted is treated as a snippet.\r\n     *\r\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n     * the end of the snippet. Placeholders with equal identifiers are linked,\r\n     * that is typing in one will update others too.\r\n     *\r\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\r\n     */\r\n    InsertTextFormat.Snippet = 2;\r\n})(InsertTextFormat || (InsertTextFormat = {}));\r\n/**\r\n * The CompletionItem namespace provides functions to deal with\r\n * completion items.\r\n */\r\nvar CompletionItem;\r\n(function (CompletionItem) {\r\n    /**\r\n     * Create a completion item and seed it with a label.\r\n     * @param label The completion item's label\r\n     */\r\n    function create(label) {\r\n        return { label: label };\r\n    }\r\n    CompletionItem.create = create;\r\n})(CompletionItem || (CompletionItem = {}));\r\n/**\r\n * The CompletionList namespace provides functions to deal with\r\n * completion lists.\r\n */\r\nvar CompletionList;\r\n(function (CompletionList) {\r\n    /**\r\n     * Creates a new completion list.\r\n     *\r\n     * @param items The completion items.\r\n     * @param isIncomplete The list is not complete.\r\n     */\r\n    function create(items, isIncomplete) {\r\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\r\n    }\r\n    CompletionList.create = create;\r\n})(CompletionList || (CompletionList = {}));\r\nvar MarkedString;\r\n(function (MarkedString) {\r\n    /**\r\n     * Creates a marked string from plain text.\r\n     *\r\n     * @param plainText The plain text.\r\n     */\r\n    function fromPlainText(plainText) {\r\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\r\n    }\r\n    MarkedString.fromPlainText = fromPlainText;\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\r\n    }\r\n    MarkedString.is = is;\r\n})(MarkedString || (MarkedString = {}));\r\nvar Hover;\r\n(function (Hover) {\r\n    /**\r\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\r\n            MarkedString.is(candidate.contents) ||\r\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\r\n    }\r\n    Hover.is = is;\r\n})(Hover || (Hover = {}));\r\n/**\r\n * The ParameterInformation namespace provides helper functions to work with\r\n * [ParameterInformation](#ParameterInformation) literals.\r\n */\r\nvar ParameterInformation;\r\n(function (ParameterInformation) {\r\n    /**\r\n     * Creates a new parameter information literal.\r\n     *\r\n     * @param label A label string.\r\n     * @param documentation A doc string.\r\n     */\r\n    function create(label, documentation) {\r\n        return documentation ? { label: label, documentation: documentation } : { label: label };\r\n    }\r\n    ParameterInformation.create = create;\r\n    ;\r\n})(ParameterInformation || (ParameterInformation = {}));\r\n/**\r\n * The SignatureInformation namespace provides helper functions to work with\r\n * [SignatureInformation](#SignatureInformation) literals.\r\n */\r\nvar SignatureInformation;\r\n(function (SignatureInformation) {\r\n    function create(label, documentation) {\r\n        var parameters = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            parameters[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { label: label };\r\n        if (Is.defined(documentation)) {\r\n            result.documentation = documentation;\r\n        }\r\n        if (Is.defined(parameters)) {\r\n            result.parameters = parameters;\r\n        }\r\n        else {\r\n            result.parameters = [];\r\n        }\r\n        return result;\r\n    }\r\n    SignatureInformation.create = create;\r\n})(SignatureInformation || (SignatureInformation = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nvar DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind.Text = 1;\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind.Read = 2;\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind.Write = 3;\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * DocumentHighlight namespace to provide helper functions to work with\r\n * [DocumentHighlight](#DocumentHighlight) literals.\r\n */\r\nvar DocumentHighlight;\r\n(function (DocumentHighlight) {\r\n    /**\r\n     * Create a DocumentHighlight object.\r\n     * @param range The range the highlight applies to.\r\n     */\r\n    function create(range, kind) {\r\n        var result = { range: range };\r\n        if (Is.number(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentHighlight.create = create;\r\n})(DocumentHighlight || (DocumentHighlight = {}));\r\n/**\r\n * A symbol kind.\r\n */\r\nvar SymbolKind;\r\n(function (SymbolKind) {\r\n    SymbolKind.File = 1;\r\n    SymbolKind.Module = 2;\r\n    SymbolKind.Namespace = 3;\r\n    SymbolKind.Package = 4;\r\n    SymbolKind.Class = 5;\r\n    SymbolKind.Method = 6;\r\n    SymbolKind.Property = 7;\r\n    SymbolKind.Field = 8;\r\n    SymbolKind.Constructor = 9;\r\n    SymbolKind.Enum = 10;\r\n    SymbolKind.Interface = 11;\r\n    SymbolKind.Function = 12;\r\n    SymbolKind.Variable = 13;\r\n    SymbolKind.Constant = 14;\r\n    SymbolKind.String = 15;\r\n    SymbolKind.Number = 16;\r\n    SymbolKind.Boolean = 17;\r\n    SymbolKind.Array = 18;\r\n    SymbolKind.Object = 19;\r\n    SymbolKind.Key = 20;\r\n    SymbolKind.Null = 21;\r\n    SymbolKind.EnumMember = 22;\r\n    SymbolKind.Struct = 23;\r\n    SymbolKind.Event = 24;\r\n    SymbolKind.Operator = 25;\r\n    SymbolKind.TypeParameter = 26;\r\n})(SymbolKind || (SymbolKind = {}));\r\nvar SymbolInformation;\r\n(function (SymbolInformation) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the location of the symbol.\r\n     * @param uri The resource of the location of symbol, defaults to the current document.\r\n     * @param containerName The name of the symbol containing the symbol.\r\n     */\r\n    function create(name, kind, range, uri, containerName) {\r\n        var result = {\r\n            name: name,\r\n            kind: kind,\r\n            location: { uri: uri, range: range }\r\n        };\r\n        if (containerName) {\r\n            result.containerName = containerName;\r\n        }\r\n        return result;\r\n    }\r\n    SymbolInformation.create = create;\r\n})(SymbolInformation || (SymbolInformation = {}));\r\n/**\r\n * Represents programming constructs like variables, classes, interfaces etc.\r\n * that appear in a document. Document symbols can be hierarchical and they\r\n * have two ranges: one that encloses its definition and one that points to\r\n * its most interesting range, e.g. the range of an identifier.\r\n */\r\nvar DocumentSymbol = /** @class */ (function () {\r\n    function DocumentSymbol() {\r\n    }\r\n    return DocumentSymbol;\r\n}());\r\n\r\n(function (DocumentSymbol) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param detail The detail of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the symbol.\r\n     * @param selectionRange The selectionRange of the symbol.\r\n     * @param children Children of the symbol.\r\n     */\r\n    function create(name, detail, kind, range, selectionRange, children) {\r\n        var result = {\r\n            name: name,\r\n            detail: detail,\r\n            kind: kind,\r\n            range: range,\r\n            selectionRange: selectionRange\r\n        };\r\n        if (children !== void 0) {\r\n            result.children = children;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentSymbol.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\r\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\r\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\r\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\r\n            (candidate.children === void 0 || Array.isArray(candidate.children));\r\n    }\r\n    DocumentSymbol.is = is;\r\n})(DocumentSymbol || (DocumentSymbol = {}));\r\n/**\r\n * A set of predefined code action kinds\r\n */\r\nvar CodeActionKind;\r\n(function (CodeActionKind) {\r\n    /**\r\n     * Base kind for quickfix actions: 'quickfix'\r\n     */\r\n    CodeActionKind.QuickFix = 'quickfix';\r\n    /**\r\n     * Base kind for refactoring actions: 'refactor'\r\n     */\r\n    CodeActionKind.Refactor = 'refactor';\r\n    /**\r\n     * Base kind for refactoring extraction actions: 'refactor.extract'\r\n     *\r\n     * Example extract actions:\r\n     *\r\n     * - Extract method\r\n     * - Extract function\r\n     * - Extract variable\r\n     * - Extract interface from class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorExtract = 'refactor.extract';\r\n    /**\r\n     * Base kind for refactoring inline actions: 'refactor.inline'\r\n     *\r\n     * Example inline actions:\r\n     *\r\n     * - Inline function\r\n     * - Inline variable\r\n     * - Inline constant\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorInline = 'refactor.inline';\r\n    /**\r\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\r\n     *\r\n     * Example rewrite actions:\r\n     *\r\n     * - Convert JavaScript function to class\r\n     * - Add or remove parameter\r\n     * - Encapsulate field\r\n     * - Make method static\r\n     * - Move method to base class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\r\n    /**\r\n     * Base kind for source actions: `source`\r\n     *\r\n     * Source code actions apply to the entire file.\r\n     */\r\n    CodeActionKind.Source = 'source';\r\n    /**\r\n     * Base kind for an organize imports source action: `source.organizeImports`\r\n     */\r\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\r\n})(CodeActionKind || (CodeActionKind = {}));\r\n/**\r\n * The CodeActionContext namespace provides helper functions to work with\r\n * [CodeActionContext](#CodeActionContext) literals.\r\n */\r\nvar CodeActionContext;\r\n(function (CodeActionContext) {\r\n    /**\r\n     * Creates a new CodeActionContext literal.\r\n     */\r\n    function create(diagnostics, only) {\r\n        var result = { diagnostics: diagnostics };\r\n        if (only !== void 0 && only !== null) {\r\n            result.only = only;\r\n        }\r\n        return result;\r\n    }\r\n    CodeActionContext.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\r\n    }\r\n    CodeActionContext.is = is;\r\n})(CodeActionContext || (CodeActionContext = {}));\r\nvar CodeAction;\r\n(function (CodeAction) {\r\n    function create(title, commandOrEdit, kind) {\r\n        var result = { title: title };\r\n        if (Command.is(commandOrEdit)) {\r\n            result.command = commandOrEdit;\r\n        }\r\n        else {\r\n            result.edit = commandOrEdit;\r\n        }\r\n        if (kind !== void null) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    CodeAction.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && Is.string(candidate.title) &&\r\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\r\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\r\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\r\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\r\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\r\n    }\r\n    CodeAction.is = is;\r\n})(CodeAction || (CodeAction = {}));\r\n/**\r\n * The CodeLens namespace provides helper functions to work with\r\n * [CodeLens](#CodeLens) literals.\r\n */\r\nvar CodeLens;\r\n(function (CodeLens) {\r\n    /**\r\n     * Creates a new CodeLens literal.\r\n     */\r\n    function create(range, data) {\r\n        var result = { range: range };\r\n        if (Is.defined(data))\r\n            result.data = data;\r\n        return result;\r\n    }\r\n    CodeLens.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\r\n    }\r\n    CodeLens.is = is;\r\n})(CodeLens || (CodeLens = {}));\r\n/**\r\n * The FormattingOptions namespace provides helper functions to work with\r\n * [FormattingOptions](#FormattingOptions) literals.\r\n */\r\nvar FormattingOptions;\r\n(function (FormattingOptions) {\r\n    /**\r\n     * Creates a new FormattingOptions literal.\r\n     */\r\n    function create(tabSize, insertSpaces) {\r\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\r\n    }\r\n    FormattingOptions.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\r\n    }\r\n    FormattingOptions.is = is;\r\n})(FormattingOptions || (FormattingOptions = {}));\r\n/**\r\n * A document link is a range in a text document that links to an internal or external resource, like another\r\n * text document or a web site.\r\n */\r\nvar DocumentLink = /** @class */ (function () {\r\n    function DocumentLink() {\r\n    }\r\n    return DocumentLink;\r\n}());\r\n\r\n/**\r\n * The DocumentLink namespace provides helper functions to work with\r\n * [DocumentLink](#DocumentLink) literals.\r\n */\r\n(function (DocumentLink) {\r\n    /**\r\n     * Creates a new DocumentLink literal.\r\n     */\r\n    function create(range, target, data) {\r\n        return { range: range, target: target, data: data };\r\n    }\r\n    DocumentLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\r\n    }\r\n    DocumentLink.is = is;\r\n})(DocumentLink || (DocumentLink = {}));\r\nvar EOL = ['\\n', '\\r\\n', '\\r'];\r\nvar TextDocument;\r\n(function (TextDocument) {\r\n    /**\r\n     * Creates a new ITextDocument literal from the given uri and content.\r\n     * @param uri The document's uri.\r\n     * @param languageId  The document's language Id.\r\n     * @param content The document's content.\r\n     */\r\n    function create(uri, languageId, version, content) {\r\n        return new FullTextDocument(uri, languageId, version, content);\r\n    }\r\n    TextDocument.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\r\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\r\n    }\r\n    TextDocument.is = is;\r\n    function applyEdits(document, edits) {\r\n        var text = document.getText();\r\n        var sortedEdits = mergeSort(edits, function (a, b) {\r\n            var diff = a.range.start.line - b.range.start.line;\r\n            if (diff === 0) {\r\n                return a.range.start.character - b.range.start.character;\r\n            }\r\n            return diff;\r\n        });\r\n        var lastModifiedOffset = text.length;\r\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\r\n            var e = sortedEdits[i];\r\n            var startOffset = document.offsetAt(e.range.start);\r\n            var endOffset = document.offsetAt(e.range.end);\r\n            if (endOffset <= lastModifiedOffset) {\r\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\r\n            }\r\n            else {\r\n                throw new Error('Ovelapping edit');\r\n            }\r\n            lastModifiedOffset = startOffset;\r\n        }\r\n        return text;\r\n    }\r\n    TextDocument.applyEdits = applyEdits;\r\n    function mergeSort(data, compare) {\r\n        if (data.length <= 1) {\r\n            // sorted\r\n            return data;\r\n        }\r\n        var p = (data.length / 2) | 0;\r\n        var left = data.slice(0, p);\r\n        var right = data.slice(p);\r\n        mergeSort(left, compare);\r\n        mergeSort(right, compare);\r\n        var leftIdx = 0;\r\n        var rightIdx = 0;\r\n        var i = 0;\r\n        while (leftIdx < left.length && rightIdx < right.length) {\r\n            var ret = compare(left[leftIdx], right[rightIdx]);\r\n            if (ret <= 0) {\r\n                // smaller_equal -> take left to preserve order\r\n                data[i++] = left[leftIdx++];\r\n            }\r\n            else {\r\n                // greater -> take right\r\n                data[i++] = right[rightIdx++];\r\n            }\r\n        }\r\n        while (leftIdx < left.length) {\r\n            data[i++] = left[leftIdx++];\r\n        }\r\n        while (rightIdx < right.length) {\r\n            data[i++] = right[rightIdx++];\r\n        }\r\n        return data;\r\n    }\r\n})(TextDocument || (TextDocument = {}));\r\n/**\r\n * Represents reasons why a text document is saved.\r\n */\r\nvar TextDocumentSaveReason;\r\n(function (TextDocumentSaveReason) {\r\n    /**\r\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\r\n     * or by an API call.\r\n     */\r\n    TextDocumentSaveReason.Manual = 1;\r\n    /**\r\n     * Automatic after a delay.\r\n     */\r\n    TextDocumentSaveReason.AfterDelay = 2;\r\n    /**\r\n     * When the editor lost focus.\r\n     */\r\n    TextDocumentSaveReason.FocusOut = 3;\r\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\r\nvar FullTextDocument = /** @class */ (function () {\r\n    function FullTextDocument(uri, languageId, version, content) {\r\n        this._uri = uri;\r\n        this._languageId = languageId;\r\n        this._version = version;\r\n        this._content = content;\r\n        this._lineOffsets = null;\r\n    }\r\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._uri;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\r\n        get: function () {\r\n            return this._languageId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\r\n        get: function () {\r\n            return this._version;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FullTextDocument.prototype.getText = function (range) {\r\n        if (range) {\r\n            var start = this.offsetAt(range.start);\r\n            var end = this.offsetAt(range.end);\r\n            return this._content.substring(start, end);\r\n        }\r\n        return this._content;\r\n    };\r\n    FullTextDocument.prototype.update = function (event, version) {\r\n        this._content = event.text;\r\n        this._version = version;\r\n        this._lineOffsets = null;\r\n    };\r\n    FullTextDocument.prototype.getLineOffsets = function () {\r\n        if (this._lineOffsets === null) {\r\n            var lineOffsets = [];\r\n            var text = this._content;\r\n            var isLineStart = true;\r\n            for (var i = 0; i < text.length; i++) {\r\n                if (isLineStart) {\r\n                    lineOffsets.push(i);\r\n                    isLineStart = false;\r\n                }\r\n                var ch = text.charAt(i);\r\n                isLineStart = (ch === '\\r' || ch === '\\n');\r\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\r\n                    i++;\r\n                }\r\n            }\r\n            if (isLineStart && text.length > 0) {\r\n                lineOffsets.push(text.length);\r\n            }\r\n            this._lineOffsets = lineOffsets;\r\n        }\r\n        return this._lineOffsets;\r\n    };\r\n    FullTextDocument.prototype.positionAt = function (offset) {\r\n        offset = Math.max(Math.min(offset, this._content.length), 0);\r\n        var lineOffsets = this.getLineOffsets();\r\n        var low = 0, high = lineOffsets.length;\r\n        if (high === 0) {\r\n            return Position.create(0, offset);\r\n        }\r\n        while (low < high) {\r\n            var mid = Math.floor((low + high) / 2);\r\n            if (lineOffsets[mid] > offset) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        // low is the least x for which the line offset is larger than the current offset\r\n        // or array.length if no line offset is larger than the current offset\r\n        var line = low - 1;\r\n        return Position.create(line, offset - lineOffsets[line]);\r\n    };\r\n    FullTextDocument.prototype.offsetAt = function (position) {\r\n        var lineOffsets = this.getLineOffsets();\r\n        if (position.line >= lineOffsets.length) {\r\n            return this._content.length;\r\n        }\r\n        else if (position.line < 0) {\r\n            return 0;\r\n        }\r\n        var lineOffset = lineOffsets[position.line];\r\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\r\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n    };\r\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\r\n        get: function () {\r\n            return this.getLineOffsets().length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FullTextDocument;\r\n}());\r\nvar Is;\r\n(function (Is) {\r\n    var toString = Object.prototype.toString;\r\n    function defined(value) {\r\n        return typeof value !== 'undefined';\r\n    }\r\n    Is.defined = defined;\r\n    function undefined(value) {\r\n        return typeof value === 'undefined';\r\n    }\r\n    Is.undefined = undefined;\r\n    function boolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n    Is.boolean = boolean;\r\n    function string(value) {\r\n        return toString.call(value) === '[object String]';\r\n    }\r\n    Is.string = string;\r\n    function number(value) {\r\n        return toString.call(value) === '[object Number]';\r\n    }\r\n    Is.number = number;\r\n    function func(value) {\r\n        return toString.call(value) === '[object Function]';\r\n    }\r\n    Is.func = func;\r\n    function objectLiteral(value) {\r\n        // Strictly speaking class instances pass this check as well. Since the LSP\r\n        // doesn't use classes we ignore this for now. If we do we need to add something\r\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\r\n        return value !== null && typeof value === 'object';\r\n    }\r\n    Is.objectLiteral = objectLiteral;\r\n    function typedArray(value, check) {\r\n        return Array.isArray(value) && value.every(check);\r\n    }\r\n    Is.typedArray = typedArray;\r\n})(Is || (Is = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vscode-languageserver-types/lib/esm/main.js\n");

/***/ }),

/***/ "./node_modules/yauzl/index.js":
/*!*************************************!*\
  !*** ./node_modules/yauzl/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar fd_slicer = __webpack_require__(/*! fd-slicer */ \"./node_modules/fd-slicer/index.js\");\nvar crc32 = __webpack_require__(/*! buffer-crc32 */ \"./node_modules/buffer-crc32/index.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\").EventEmitter;\nvar Transform = __webpack_require__(/*! stream */ \"stream\").Transform;\nvar PassThrough = __webpack_require__(/*! stream */ \"stream\").PassThrough;\nvar Writable = __webpack_require__(/*! stream */ \"stream\").Writable;\n\nexports.open = open;\nexports.fromFd = fromFd;\nexports.fromBuffer = fromBuffer;\nexports.fromRandomAccessReader = fromRandomAccessReader;\nexports.dosDateTimeToDate = dosDateTimeToDate;\nexports.validateFileName = validateFileName;\nexports.ZipFile = ZipFile;\nexports.Entry = Entry;\nexports.RandomAccessReader = RandomAccessReader;\n\nfunction open(path, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.open(path, \"r\", function(err, fd) {\n    if (err) return callback(err);\n    fromFd(fd, options, function(err, zipfile) {\n      if (err) fs.close(fd, defaultCallback);\n      callback(err, zipfile);\n    });\n  });\n}\n\nfunction fromFd(fd, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.fstat(fd, function(err, stats) {\n    if (err) return callback(err);\n    var reader = fd_slicer.createFromFd(fd, {autoClose: true});\n    fromRandomAccessReader(reader, stats.size, options, callback);\n  });\n}\n\nfunction fromBuffer(buffer, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  // limit the max chunk size. see https://github.com/thejoshwolfe/yauzl/issues/87\n  var reader = fd_slicer.createFromBuffer(buffer, {maxChunkSize: 0x10000});\n  fromRandomAccessReader(reader, buffer.length, options, callback);\n}\n\nfunction fromRandomAccessReader(reader, totalSize, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  var decodeStrings = !!options.decodeStrings;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  if (typeof totalSize !== \"number\") throw new Error(\"expected totalSize parameter to be a number\");\n  if (totalSize > Number.MAX_SAFE_INTEGER) {\n    throw new Error(\"zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.\");\n  }\n\n  // the matching unref() call is in zipfile.close()\n  reader.ref();\n\n  // eocdr means End of Central Directory Record.\n  // search backwards for the eocdr signature.\n  // the last field of the eocdr is a variable-length comment.\n  // the comment size is encoded in a 2-byte field in the eocdr, which we can't find without trudging backwards through the comment to find it.\n  // as a consequence of this design decision, it's possible to have ambiguous zip file metadata if a coherent eocdr was in the comment.\n  // we search backwards for a eocdr signature, and hope that whoever made the zip file was smart enough to forbid the eocdr signature in the comment.\n  var eocdrWithoutCommentSize = 22;\n  var maxCommentSize = 0xffff; // 2-byte size\n  var bufferSize = Math.min(eocdrWithoutCommentSize + maxCommentSize, totalSize);\n  var buffer = newBuffer(bufferSize);\n  var bufferReadStart = totalSize - buffer.length;\n  readAndAssertNoEof(reader, buffer, 0, bufferSize, bufferReadStart, function(err) {\n    if (err) return callback(err);\n    for (var i = bufferSize - eocdrWithoutCommentSize; i >= 0; i -= 1) {\n      if (buffer.readUInt32LE(i) !== 0x06054b50) continue;\n      // found eocdr\n      var eocdrBuffer = buffer.slice(i);\n\n      // 0 - End of central directory signature = 0x06054b50\n      // 4 - Number of this disk\n      var diskNumber = eocdrBuffer.readUInt16LE(4);\n      if (diskNumber !== 0) {\n        return callback(new Error(\"multi-disk zip files are not supported: found disk number: \" + diskNumber));\n      }\n      // 6 - Disk where central directory starts\n      // 8 - Number of central directory records on this disk\n      // 10 - Total number of central directory records\n      var entryCount = eocdrBuffer.readUInt16LE(10);\n      // 12 - Size of central directory (bytes)\n      // 16 - Offset of start of central directory, relative to start of archive\n      var centralDirectoryOffset = eocdrBuffer.readUInt32LE(16);\n      // 20 - Comment length\n      var commentLength = eocdrBuffer.readUInt16LE(20);\n      var expectedCommentLength = eocdrBuffer.length - eocdrWithoutCommentSize;\n      if (commentLength !== expectedCommentLength) {\n        return callback(new Error(\"invalid comment length. expected: \" + expectedCommentLength + \". found: \" + commentLength));\n      }\n      // 22 - Comment\n      // the encoding is always cp437.\n      var comment = decodeStrings ? decodeBuffer(eocdrBuffer, 22, eocdrBuffer.length, false)\n                                  : eocdrBuffer.slice(22);\n\n      if (!(entryCount === 0xffff || centralDirectoryOffset === 0xffffffff)) {\n        return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n      }\n\n      // ZIP64 format\n\n      // ZIP64 Zip64 end of central directory locator\n      var zip64EocdlBuffer = newBuffer(20);\n      var zip64EocdlOffset = bufferReadStart + i - zip64EocdlBuffer.length;\n      readAndAssertNoEof(reader, zip64EocdlBuffer, 0, zip64EocdlBuffer.length, zip64EocdlOffset, function(err) {\n        if (err) return callback(err);\n\n        // 0 - zip64 end of central dir locator signature = 0x07064b50\n        if (zip64EocdlBuffer.readUInt32LE(0) !== 0x07064b50) {\n          return callback(new Error(\"invalid zip64 end of central directory locator signature\"));\n        }\n        // 4 - number of the disk with the start of the zip64 end of central directory\n        // 8 - relative offset of the zip64 end of central directory record\n        var zip64EocdrOffset = readUInt64LE(zip64EocdlBuffer, 8);\n        // 16 - total number of disks\n\n        // ZIP64 end of central directory record\n        var zip64EocdrBuffer = newBuffer(56);\n        readAndAssertNoEof(reader, zip64EocdrBuffer, 0, zip64EocdrBuffer.length, zip64EocdrOffset, function(err) {\n          if (err) return callback(err);\n\n          // 0 - zip64 end of central dir signature                           4 bytes  (0x06064b50)\n          if (zip64EocdrBuffer.readUInt32LE(0) !== 0x06064b50) {\n            return callback(new Error(\"invalid zip64 end of central directory record signature\"));\n          }\n          // 4 - size of zip64 end of central directory record                8 bytes\n          // 12 - version made by                                             2 bytes\n          // 14 - version needed to extract                                   2 bytes\n          // 16 - number of this disk                                         4 bytes\n          // 20 - number of the disk with the start of the central directory  4 bytes\n          // 24 - total number of entries in the central directory on this disk         8 bytes\n          // 32 - total number of entries in the central directory            8 bytes\n          entryCount = readUInt64LE(zip64EocdrBuffer, 32);\n          // 40 - size of the central directory                               8 bytes\n          // 48 - offset of start of central directory with respect to the starting disk number     8 bytes\n          centralDirectoryOffset = readUInt64LE(zip64EocdrBuffer, 48);\n          // 56 - zip64 extensible data sector                                (variable size)\n          return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n        });\n      });\n      return;\n    }\n    callback(new Error(\"end of central directory record signature not found\"));\n  });\n}\n\nutil.inherits(ZipFile, EventEmitter);\nfunction ZipFile(reader, centralDirectoryOffset, fileSize, entryCount, comment, autoClose, lazyEntries, decodeStrings, validateEntrySizes, strictFileNames) {\n  var self = this;\n  EventEmitter.call(self);\n  self.reader = reader;\n  // forward close events\n  self.reader.on(\"error\", function(err) {\n    // error closing the fd\n    emitError(self, err);\n  });\n  self.reader.once(\"close\", function() {\n    self.emit(\"close\");\n  });\n  self.readEntryCursor = centralDirectoryOffset;\n  self.fileSize = fileSize;\n  self.entryCount = entryCount;\n  self.comment = comment;\n  self.entriesRead = 0;\n  self.autoClose = !!autoClose;\n  self.lazyEntries = !!lazyEntries;\n  self.decodeStrings = !!decodeStrings;\n  self.validateEntrySizes = !!validateEntrySizes;\n  self.strictFileNames = !!strictFileNames;\n  self.isOpen = true;\n  self.emittedError = false;\n\n  if (!self.lazyEntries) self._readEntry();\n}\nZipFile.prototype.close = function() {\n  if (!this.isOpen) return;\n  this.isOpen = false;\n  this.reader.unref();\n};\n\nfunction emitErrorAndAutoClose(self, err) {\n  if (self.autoClose) self.close();\n  emitError(self, err);\n}\nfunction emitError(self, err) {\n  if (self.emittedError) return;\n  self.emittedError = true;\n  self.emit(\"error\", err);\n}\n\nZipFile.prototype.readEntry = function() {\n  if (!this.lazyEntries) throw new Error(\"readEntry() called without lazyEntries:true\");\n  this._readEntry();\n};\nZipFile.prototype._readEntry = function() {\n  var self = this;\n  if (self.entryCount === self.entriesRead) {\n    // done with metadata\n    setImmediate(function() {\n      if (self.autoClose) self.close();\n      if (self.emittedError) return;\n      self.emit(\"end\");\n    });\n    return;\n  }\n  if (self.emittedError) return;\n  var buffer = newBuffer(46);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n    if (err) return emitErrorAndAutoClose(self, err);\n    if (self.emittedError) return;\n    var entry = new Entry();\n    // 0 - Central directory file header signature\n    var signature = buffer.readUInt32LE(0);\n    if (signature !== 0x02014b50) return emitErrorAndAutoClose(self, new Error(\"invalid central directory file header signature: 0x\" + signature.toString(16)));\n    // 4 - Version made by\n    entry.versionMadeBy = buffer.readUInt16LE(4);\n    // 6 - Version needed to extract (minimum)\n    entry.versionNeededToExtract = buffer.readUInt16LE(6);\n    // 8 - General purpose bit flag\n    entry.generalPurposeBitFlag = buffer.readUInt16LE(8);\n    // 10 - Compression method\n    entry.compressionMethod = buffer.readUInt16LE(10);\n    // 12 - File last modification time\n    entry.lastModFileTime = buffer.readUInt16LE(12);\n    // 14 - File last modification date\n    entry.lastModFileDate = buffer.readUInt16LE(14);\n    // 16 - CRC-32\n    entry.crc32 = buffer.readUInt32LE(16);\n    // 20 - Compressed size\n    entry.compressedSize = buffer.readUInt32LE(20);\n    // 24 - Uncompressed size\n    entry.uncompressedSize = buffer.readUInt32LE(24);\n    // 28 - File name length (n)\n    entry.fileNameLength = buffer.readUInt16LE(28);\n    // 30 - Extra field length (m)\n    entry.extraFieldLength = buffer.readUInt16LE(30);\n    // 32 - File comment length (k)\n    entry.fileCommentLength = buffer.readUInt16LE(32);\n    // 34 - Disk number where file starts\n    // 36 - Internal file attributes\n    entry.internalFileAttributes = buffer.readUInt16LE(36);\n    // 38 - External file attributes\n    entry.externalFileAttributes = buffer.readUInt32LE(38);\n    // 42 - Relative offset of local file header\n    entry.relativeOffsetOfLocalHeader = buffer.readUInt32LE(42);\n\n    if (entry.generalPurposeBitFlag & 0x40) return emitErrorAndAutoClose(self, new Error(\"strong encryption is not supported\"));\n\n    self.readEntryCursor += 46;\n\n    buffer = newBuffer(entry.fileNameLength + entry.extraFieldLength + entry.fileCommentLength);\n    readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n      if (err) return emitErrorAndAutoClose(self, err);\n      if (self.emittedError) return;\n      // 46 - File name\n      var isUtf8 = (entry.generalPurposeBitFlag & 0x800) !== 0;\n      entry.fileName = self.decodeStrings ? decodeBuffer(buffer, 0, entry.fileNameLength, isUtf8)\n                                          : buffer.slice(0, entry.fileNameLength);\n\n      // 46+n - Extra field\n      var fileCommentStart = entry.fileNameLength + entry.extraFieldLength;\n      var extraFieldBuffer = buffer.slice(entry.fileNameLength, fileCommentStart);\n      entry.extraFields = [];\n      var i = 0;\n      while (i < extraFieldBuffer.length - 3) {\n        var headerId = extraFieldBuffer.readUInt16LE(i + 0);\n        var dataSize = extraFieldBuffer.readUInt16LE(i + 2);\n        var dataStart = i + 4;\n        var dataEnd = dataStart + dataSize;\n        if (dataEnd > extraFieldBuffer.length) return emitErrorAndAutoClose(self, new Error(\"extra field length exceeds extra field buffer size\"));\n        var dataBuffer = newBuffer(dataSize);\n        extraFieldBuffer.copy(dataBuffer, 0, dataStart, dataEnd);\n        entry.extraFields.push({\n          id: headerId,\n          data: dataBuffer,\n        });\n        i = dataEnd;\n      }\n\n      // 46+n+m - File comment\n      entry.fileComment = self.decodeStrings ? decodeBuffer(buffer, fileCommentStart, fileCommentStart + entry.fileCommentLength, isUtf8)\n                                             : buffer.slice(fileCommentStart, fileCommentStart + entry.fileCommentLength);\n      // compatibility hack for https://github.com/thejoshwolfe/yauzl/issues/47\n      entry.comment = entry.fileComment;\n\n      self.readEntryCursor += buffer.length;\n      self.entriesRead += 1;\n\n      if (entry.uncompressedSize            === 0xffffffff ||\n          entry.compressedSize              === 0xffffffff ||\n          entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n        // ZIP64 format\n        // find the Zip64 Extended Information Extra Field\n        var zip64EiefBuffer = null;\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x0001) {\n            zip64EiefBuffer = extraField.data;\n            break;\n          }\n        }\n        if (zip64EiefBuffer == null) {\n          return emitErrorAndAutoClose(self, new Error(\"expected zip64 extended information extra field\"));\n        }\n        var index = 0;\n        // 0 - Original Size          8 bytes\n        if (entry.uncompressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include uncompressed size\"));\n          }\n          entry.uncompressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 8 - Compressed Size        8 bytes\n        if (entry.compressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include compressed size\"));\n          }\n          entry.compressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 16 - Relative Header Offset 8 bytes\n        if (entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include relative header offset\"));\n          }\n          entry.relativeOffsetOfLocalHeader = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 24 - Disk Start Number      4 bytes\n      }\n\n      // check for Info-ZIP Unicode Path Extra Field (0x7075)\n      // see https://github.com/thejoshwolfe/yauzl/issues/33\n      if (self.decodeStrings) {\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x7075) {\n            if (extraField.data.length < 6) {\n              // too short to be meaningful\n              continue;\n            }\n            // Version       1 byte      version of this extra field, currently 1\n            if (extraField.data.readUInt8(0) !== 1) {\n              // > Changes may not be backward compatible so this extra\n              // > field should not be used if the version is not recognized.\n              continue;\n            }\n            // NameCRC32     4 bytes     File Name Field CRC32 Checksum\n            var oldNameCrc32 = extraField.data.readUInt32LE(1);\n            if (crc32.unsigned(buffer.slice(0, entry.fileNameLength)) !== oldNameCrc32) {\n              // > If the CRC check fails, this UTF-8 Path Extra Field should be\n              // > ignored and the File Name field in the header should be used instead.\n              continue;\n            }\n            // UnicodeName   Variable    UTF-8 version of the entry File Name\n            entry.fileName = decodeBuffer(extraField.data, 5, extraField.data.length, true);\n            break;\n          }\n        }\n      }\n\n      // validate file size\n      if (self.validateEntrySizes && entry.compressionMethod === 0) {\n        var expectedCompressedSize = entry.uncompressedSize;\n        if (entry.isEncrypted()) {\n          // traditional encryption prefixes the file data with a header\n          expectedCompressedSize += 12;\n        }\n        if (entry.compressedSize !== expectedCompressedSize) {\n          var msg = \"compressed/uncompressed size mismatch for stored file: \" + entry.compressedSize + \" != \" + entry.uncompressedSize;\n          return emitErrorAndAutoClose(self, new Error(msg));\n        }\n      }\n\n      if (self.decodeStrings) {\n        if (!self.strictFileNames) {\n          // allow backslash\n          entry.fileName = entry.fileName.replace(/\\\\/g, \"/\");\n        }\n        var errorMessage = validateFileName(entry.fileName, self.validateFileNameOptions);\n        if (errorMessage != null) return emitErrorAndAutoClose(self, new Error(errorMessage));\n      }\n      self.emit(\"entry\", entry);\n\n      if (!self.lazyEntries) self._readEntry();\n    });\n  });\n};\n\nZipFile.prototype.openReadStream = function(entry, options, callback) {\n  var self = this;\n  // parameter validation\n  var relativeStart = 0;\n  var relativeEnd = entry.compressedSize;\n  if (callback == null) {\n    callback = options;\n    options = {};\n  } else {\n    // validate options that the caller has no excuse to get wrong\n    if (options.decrypt != null) {\n      if (!entry.isEncrypted()) {\n        throw new Error(\"options.decrypt can only be specified for encrypted entries\");\n      }\n      if (options.decrypt !== false) throw new Error(\"invalid options.decrypt value: \" + options.decrypt);\n      if (entry.isCompressed()) {\n        if (options.decompress !== false) throw new Error(\"entry is encrypted and compressed, and options.decompress !== false\");\n      }\n    }\n    if (options.decompress != null) {\n      if (!entry.isCompressed()) {\n        throw new Error(\"options.decompress can only be specified for compressed entries\");\n      }\n      if (!(options.decompress === false || options.decompress === true)) {\n        throw new Error(\"invalid options.decompress value: \" + options.decompress);\n      }\n    }\n    if (options.start != null || options.end != null) {\n      if (entry.isCompressed() && options.decompress !== false) {\n        throw new Error(\"start/end range not allowed for compressed entry without options.decompress === false\");\n      }\n      if (entry.isEncrypted() && options.decrypt !== false) {\n        throw new Error(\"start/end range not allowed for encrypted entry without options.decrypt === false\");\n      }\n    }\n    if (options.start != null) {\n      relativeStart = options.start;\n      if (relativeStart < 0) throw new Error(\"options.start < 0\");\n      if (relativeStart > entry.compressedSize) throw new Error(\"options.start > entry.compressedSize\");\n    }\n    if (options.end != null) {\n      relativeEnd = options.end;\n      if (relativeEnd < 0) throw new Error(\"options.end < 0\");\n      if (relativeEnd > entry.compressedSize) throw new Error(\"options.end > entry.compressedSize\");\n      if (relativeEnd < relativeStart) throw new Error(\"options.end < options.start\");\n    }\n  }\n  // any further errors can either be caused by the zipfile,\n  // or were introduced in a minor version of yauzl,\n  // so should be passed to the client rather than thrown.\n  if (!self.isOpen) return callback(new Error(\"closed\"));\n  if (entry.isEncrypted()) {\n    if (options.decrypt !== false) return callback(new Error(\"entry is encrypted, and options.decrypt !== false\"));\n  }\n  // make sure we don't lose the fd before we open the actual read stream\n  self.reader.ref();\n  var buffer = newBuffer(30);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, entry.relativeOffsetOfLocalHeader, function(err) {\n    try {\n      if (err) return callback(err);\n      // 0 - Local file header signature = 0x04034b50\n      var signature = buffer.readUInt32LE(0);\n      if (signature !== 0x04034b50) {\n        return callback(new Error(\"invalid local file header signature: 0x\" + signature.toString(16)));\n      }\n      // all this should be redundant\n      // 4 - Version needed to extract (minimum)\n      // 6 - General purpose bit flag\n      // 8 - Compression method\n      // 10 - File last modification time\n      // 12 - File last modification date\n      // 14 - CRC-32\n      // 18 - Compressed size\n      // 22 - Uncompressed size\n      // 26 - File name length (n)\n      var fileNameLength = buffer.readUInt16LE(26);\n      // 28 - Extra field length (m)\n      var extraFieldLength = buffer.readUInt16LE(28);\n      // 30 - File name\n      // 30+n - Extra field\n      var localFileHeaderEnd = entry.relativeOffsetOfLocalHeader + buffer.length + fileNameLength + extraFieldLength;\n      var decompress;\n      if (entry.compressionMethod === 0) {\n        // 0 - The file is stored (no compression)\n        decompress = false;\n      } else if (entry.compressionMethod === 8) {\n        // 8 - The file is Deflated\n        decompress = options.decompress != null ? options.decompress : true;\n      } else {\n        return callback(new Error(\"unsupported compression method: \" + entry.compressionMethod));\n      }\n      var fileDataStart = localFileHeaderEnd;\n      var fileDataEnd = fileDataStart + entry.compressedSize;\n      if (entry.compressedSize !== 0) {\n        // bounds check now, because the read streams will probably not complain loud enough.\n        // since we're dealing with an unsigned offset plus an unsigned size,\n        // we only have 1 thing to check for.\n        if (fileDataEnd > self.fileSize) {\n          return callback(new Error(\"file data overflows file bounds: \" +\n              fileDataStart + \" + \" + entry.compressedSize + \" > \" + self.fileSize));\n        }\n      }\n      var readStream = self.reader.createReadStream({\n        start: fileDataStart + relativeStart,\n        end: fileDataStart + relativeEnd,\n      });\n      var endpointStream = readStream;\n      if (decompress) {\n        var destroyed = false;\n        var inflateFilter = zlib.createInflateRaw();\n        readStream.on(\"error\", function(err) {\n          // setImmediate here because errors can be emitted during the first call to pipe()\n          setImmediate(function() {\n            if (!destroyed) inflateFilter.emit(\"error\", err);\n          });\n        });\n        readStream.pipe(inflateFilter);\n\n        if (self.validateEntrySizes) {\n          endpointStream = new AssertByteCountStream(entry.uncompressedSize);\n          inflateFilter.on(\"error\", function(err) {\n            // forward zlib errors to the client-visible stream\n            setImmediate(function() {\n              if (!destroyed) endpointStream.emit(\"error\", err);\n            });\n          });\n          inflateFilter.pipe(endpointStream);\n        } else {\n          // the zlib filter is the client-visible stream\n          endpointStream = inflateFilter;\n        }\n        // this is part of yauzl's API, so implement this function on the client-visible stream\n        endpointStream.destroy = function() {\n          destroyed = true;\n          if (inflateFilter !== endpointStream) inflateFilter.unpipe(endpointStream);\n          readStream.unpipe(inflateFilter);\n          // TODO: the inflateFilter may cause a memory leak. see Issue #27.\n          readStream.destroy();\n        };\n      }\n      callback(null, endpointStream);\n    } finally {\n      self.reader.unref();\n    }\n  });\n};\n\nfunction Entry() {\n}\nEntry.prototype.getLastModDate = function() {\n  return dosDateTimeToDate(this.lastModFileDate, this.lastModFileTime);\n};\nEntry.prototype.isEncrypted = function() {\n  return (this.generalPurposeBitFlag & 0x1) !== 0;\n};\nEntry.prototype.isCompressed = function() {\n  return this.compressionMethod === 8;\n};\n\nfunction dosDateTimeToDate(date, time) {\n  var day = date & 0x1f; // 1-31\n  var month = (date >> 5 & 0xf) - 1; // 1-12, 0-11\n  var year = (date >> 9 & 0x7f) + 1980; // 0-128, 1980-2108\n\n  var millisecond = 0;\n  var second = (time & 0x1f) * 2; // 0-29, 0-58 (even numbers)\n  var minute = time >> 5 & 0x3f; // 0-59\n  var hour = time >> 11 & 0x1f; // 0-23\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n}\n\nfunction validateFileName(fileName) {\n  if (fileName.indexOf(\"\\\\\") !== -1) {\n    return \"invalid characters in fileName: \" + fileName;\n  }\n  if (/^[a-zA-Z]:/.test(fileName) || /^\\//.test(fileName)) {\n    return \"absolute path: \" + fileName;\n  }\n  if (fileName.split(\"/\").indexOf(\"..\") !== -1) {\n    return \"invalid relative path: \" + fileName;\n  }\n  // all good\n  return null;\n}\n\nfunction readAndAssertNoEof(reader, buffer, offset, length, position, callback) {\n  if (length === 0) {\n    // fs.read will throw an out-of-bounds error if you try to read 0 bytes from a 0 byte file\n    return setImmediate(function() { callback(null, newBuffer(0)); });\n  }\n  reader.read(buffer, offset, length, position, function(err, bytesRead) {\n    if (err) return callback(err);\n    if (bytesRead < length) {\n      return callback(new Error(\"unexpected EOF\"));\n    }\n    callback();\n  });\n}\n\nutil.inherits(AssertByteCountStream, Transform);\nfunction AssertByteCountStream(byteCount) {\n  Transform.call(this);\n  this.actualByteCount = 0;\n  this.expectedByteCount = byteCount;\n}\nAssertByteCountStream.prototype._transform = function(chunk, encoding, cb) {\n  this.actualByteCount += chunk.length;\n  if (this.actualByteCount > this.expectedByteCount) {\n    var msg = \"too many bytes in the stream. expected \" + this.expectedByteCount + \". got at least \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb(null, chunk);\n};\nAssertByteCountStream.prototype._flush = function(cb) {\n  if (this.actualByteCount < this.expectedByteCount) {\n    var msg = \"not enough bytes in the stream. expected \" + this.expectedByteCount + \". got only \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb();\n};\n\nutil.inherits(RandomAccessReader, EventEmitter);\nfunction RandomAccessReader() {\n  EventEmitter.call(this);\n  this.refCount = 0;\n}\nRandomAccessReader.prototype.ref = function() {\n  this.refCount += 1;\n};\nRandomAccessReader.prototype.unref = function() {\n  var self = this;\n  self.refCount -= 1;\n\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  self.close(onCloseDone);\n\n  function onCloseDone(err) {\n    if (err) return self.emit('error', err);\n    self.emit('close');\n  }\n};\nRandomAccessReader.prototype.createReadStream = function(options) {\n  var start = options.start;\n  var end = options.end;\n  if (start === end) {\n    var emptyStream = new PassThrough();\n    setImmediate(function() {\n      emptyStream.end();\n    });\n    return emptyStream;\n  }\n  var stream = this._readStreamForRange(start, end);\n\n  var destroyed = false;\n  var refUnrefFilter = new RefUnrefFilter(this);\n  stream.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) refUnrefFilter.emit(\"error\", err);\n    });\n  });\n  refUnrefFilter.destroy = function() {\n    stream.unpipe(refUnrefFilter);\n    refUnrefFilter.unref();\n    stream.destroy();\n  };\n\n  var byteCounter = new AssertByteCountStream(end - start);\n  refUnrefFilter.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) byteCounter.emit(\"error\", err);\n    });\n  });\n  byteCounter.destroy = function() {\n    destroyed = true;\n    refUnrefFilter.unpipe(byteCounter);\n    refUnrefFilter.destroy();\n  };\n\n  return stream.pipe(refUnrefFilter).pipe(byteCounter);\n};\nRandomAccessReader.prototype._readStreamForRange = function(start, end) {\n  throw new Error(\"not implemented\");\n};\nRandomAccessReader.prototype.read = function(buffer, offset, length, position, callback) {\n  var readStream = this.createReadStream({start: position, end: position + length});\n  var writeStream = new Writable();\n  var written = 0;\n  writeStream._write = function(chunk, encoding, cb) {\n    chunk.copy(buffer, offset + written, 0, chunk.length);\n    written += chunk.length;\n    cb();\n  };\n  writeStream.on(\"finish\", callback);\n  readStream.on(\"error\", function(error) {\n    callback(error);\n  });\n  readStream.pipe(writeStream);\n};\nRandomAccessReader.prototype.close = function(callback) {\n  setImmediate(callback);\n};\n\nutil.inherits(RefUnrefFilter, PassThrough);\nfunction RefUnrefFilter(context) {\n  PassThrough.call(this);\n  this.context = context;\n  this.context.ref();\n  this.unreffedYet = false;\n}\nRefUnrefFilter.prototype._flush = function(cb) {\n  this.unref();\n  cb();\n};\nRefUnrefFilter.prototype.unref = function(cb) {\n  if (this.unreffedYet) return;\n  this.unreffedYet = true;\n  this.context.unref();\n};\n\nvar cp437 = '\\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';\nfunction decodeBuffer(buffer, start, end, isUtf8) {\n  if (isUtf8) {\n    return buffer.toString(\"utf8\", start, end);\n  } else {\n    var result = \"\";\n    for (var i = start; i < end; i++) {\n      result += cp437[buffer[i]];\n    }\n    return result;\n  }\n}\n\nfunction readUInt64LE(buffer, offset) {\n  // there is no native function for this, because we can't actually store 64-bit integers precisely.\n  // after 53 bits, JavaScript's Number type (IEEE 754 double) can't store individual integers anymore.\n  // but since 53 bits is a whole lot more than 32 bits, we do our best anyway.\n  var lower32 = buffer.readUInt32LE(offset);\n  var upper32 = buffer.readUInt32LE(offset + 4);\n  // we can't use bitshifting here, because JavaScript bitshifting only works on 32-bit integers.\n  return upper32 * 0x100000000 + lower32;\n  // as long as we're bounds checking the result of this function against the total file size,\n  // we'll catch any overflow errors, because we already made sure the total file size was within reason.\n}\n\n// Node 10 deprecated new Buffer().\nvar newBuffer;\nif (typeof Buffer.allocUnsafe === \"function\") {\n  newBuffer = function(len) {\n    return Buffer.allocUnsafe(len);\n  };\n} else {\n  newBuffer = function(len) {\n    return new Buffer(len);\n  };\n}\n\nfunction defaultCallback(err) {\n  if (err) throw err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/yauzl/index.js\n");

/***/ }),

/***/ "./node_modules/zone.js/dist/zone-node.js":
/*!************************************************!*\
  !*** ./node_modules/zone.js/dist/zone-node.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n     true ? factory() :\n    undefined;\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar Zone$1 = (function (global) {\n    if (global['Zone']) {\n        throw new Error('Zone already loaded.');\n    }\n    var Zone = (function () {\n        function Zone(parent, zoneSpec) {\n            this._properties = null;\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        Zone.assertZonePatched = function () {\n            if (global.Promise !== ZoneAwarePromise) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        };\n        Object.defineProperty(Zone, \"current\", {\n            get: function () {\n                return _currentZoneFrame.zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone, \"currentTask\", {\n            get: function () {\n                return _currentTask;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone.prototype, \"parent\", {\n            get: function () {\n                return this._parent;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone.prototype, \"name\", {\n            get: function () {\n                return this._name;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Zone.prototype.get = function (key) {\n            var zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        };\n        Zone.prototype.getZoneWith = function (key) {\n            var current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        };\n        Zone.prototype.fork = function (zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        };\n        Zone.prototype.wrap = function (callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            var _callback = this._zoneDelegate.intercept(this, callback, source);\n            var zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        };\n        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = null; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = null; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runTask = function (task, applyThis, applyArgs) {\n            task.runCount++;\n            if (task.zone != this)\n                throw new Error('A task can only be run in the zone which created it! (Creation: ' + task.zone.name +\n                    '; Execution: ' + this.name + ')');\n            var previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);\n            try {\n                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = null;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        };\n        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {\n            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));\n        };\n        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {\n            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {\n            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.cancelTask = function (task) {\n            var value = this._zoneDelegate.cancelTask(this, task);\n            task.runCount = -1;\n            task.cancelFn = null;\n            return value;\n        };\n        return Zone;\n    }());\n    Zone.__symbol__ = __symbol__;\n    \n    var ZoneDelegate = (function () {\n        function ZoneDelegate(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt =\n                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);\n            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);\n            this._hasTaskDlgt =\n                zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);\n            this._hasTaskCurrZone = zoneSpec && (zoneSpec.onHasTask ? this.zone : parentDelegate.zone);\n        }\n        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        };\n        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        };\n        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ?\n                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        };\n        ZoneDelegate.prototype.handleError = function (targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        };\n        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {\n            try {\n                if (this._scheduleTaskZS) {\n                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                }\n                else if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == 'microTask') {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n                return task;\n            }\n            finally {\n                if (targetZone == this.zone) {\n                    this._updateTaskCount(task.type, 1);\n                }\n            }\n        };\n        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {\n            try {\n                return this._invokeTaskZS ?\n                    this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                    task.callback.apply(applyThis, applyArgs);\n            }\n            finally {\n                if (targetZone == this.zone && (task.type != 'eventTask') &&\n                    !(task.data && task.data.isPeriodic)) {\n                    this._updateTaskCount(task.type, -1);\n                }\n            }\n        };\n        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {\n            var value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else if (!task.cancelFn) {\n                throw new Error('Task does not support cancellation, or is already canceled.');\n            }\n            else {\n                value = task.cancelFn(task);\n            }\n            if (targetZone == this.zone) {\n                // this should not be in the finally block, because exceptions assume not canceled.\n                this._updateTaskCount(task.type, -1);\n            }\n            return value;\n        };\n        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {\n            return this._hasTaskZS &&\n                this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n        };\n        ZoneDelegate.prototype._updateTaskCount = function (type, count) {\n            var counts = this._taskCounts;\n            var prev = counts[type];\n            var next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                var isEmpty = {\n                    microTask: counts.microTask > 0,\n                    macroTask: counts.macroTask > 0,\n                    eventTask: counts.eventTask > 0,\n                    change: type\n                };\n                try {\n                    this.hasTask(this.zone, isEmpty);\n                }\n                finally {\n                    if (this._parentDelegate) {\n                        this._parentDelegate._updateTaskCount(type, count);\n                    }\n                }\n            }\n        };\n        return ZoneDelegate;\n    }());\n    var ZoneTask = (function () {\n        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {\n            this.runCount = 0;\n            this.type = type;\n            this.zone = zone;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            this.callback = callback;\n            var self = this;\n            this.invoke = function () {\n                _numberOfNestedTaskFrames++;\n                try {\n                    return zone.runTask(self, this, arguments);\n                }\n                finally {\n                    if (_numberOfNestedTaskFrames == 1) {\n                        drainMicroTaskQueue();\n                    }\n                    _numberOfNestedTaskFrames--;\n                }\n            };\n        }\n        ZoneTask.prototype.toString = function () {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId;\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        };\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        ZoneTask.prototype.toJSON = function () {\n            return {\n                type: this.type,\n                source: this.source,\n                data: this.data,\n                zone: this.zone.name,\n                invoke: this.invoke,\n                scheduleFn: this.scheduleFn,\n                cancelFn: this.cancelFn,\n                runCount: this.runCount,\n                callback: this.callback\n            };\n        };\n        return ZoneTask;\n    }());\n    var ZoneFrame = (function () {\n        function ZoneFrame(parent, zone) {\n            this.parent = parent;\n            this.zone = zone;\n        }\n        return ZoneFrame;\n    }());\n    function __symbol__(name) {\n        return '__zone_symbol__' + name;\n    }\n    \n    var symbolSetTimeout = __symbol__('setTimeout');\n    var symbolPromise = __symbol__('Promise');\n    var symbolThen = __symbol__('then');\n    var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));\n    var _currentTask = null;\n    var _microTaskQueue = [];\n    var _isDrainingMicrotaskQueue = false;\n    var _uncaughtPromiseErrors = [];\n    var _numberOfNestedTaskFrames = 0;\n    function scheduleQueueDrain() {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            if (global[symbolPromise]) {\n                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);\n            }\n            else {\n                global[symbolSetTimeout](drainMicroTaskQueue, 0);\n            }\n        }\n    }\n    function scheduleMicroTask(task) {\n        scheduleQueueDrain();\n        _microTaskQueue.push(task);\n    }\n    function consoleError(e) {\n        var rejection = e && e.rejection;\n        if (rejection) {\n            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n        }\n        console.error(e);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                var queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (var i = 0; i < queue.length; i++) {\n                    var task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (e) {\n                        consoleError(e);\n                    }\n                }\n            }\n            while (_uncaughtPromiseErrors.length) {\n                var _loop_1 = function () {\n                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n                    try {\n                        uncaughtPromiseError.zone.runGuarded(function () {\n                            throw uncaughtPromiseError;\n                        });\n                    }\n                    catch (e) {\n                        consoleError(e);\n                    }\n                };\n                while (_uncaughtPromiseErrors.length) {\n                    _loop_1();\n                }\n            }\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    var symbolState = __symbol__('state');\n    var symbolValue = __symbol__('value');\n    var source = 'Promise.then';\n    var UNRESOLVED = null;\n    var RESOLVED = true;\n    var REJECTED = false;\n    var REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return function (v) {\n            resolvePromise(promise, state, v);\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    function resolvePromise(promise, state, value) {\n        if (promise[symbolState] === UNRESOLVED) {\n            if (value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) &&\n                value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (isThenable(value)) {\n                value.then(makeResolver(promise, state), makeResolver(promise, false));\n            }\n            else {\n                promise[symbolState] = state;\n                var queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                for (var i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    try {\n                        throw new Error('Uncaught (in promise): ' + value +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (e) {\n                        var error_1 = e;\n                        error_1.rejection = value;\n                        error_1.promise = promise;\n                        error_1.zone = Zone.current;\n                        error_1.task = Zone.currentTask;\n                        _uncaughtPromiseErrors.push(error_1);\n                        scheduleQueueDrain();\n                    }\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            promise[symbolState] = REJECTED;\n            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;\n        zone.scheduleMicroTask(source, function () {\n            try {\n                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));\n            }\n            catch (error) {\n                resolvePromise(chainPromise, false, error);\n            }\n        });\n    }\n    var ZoneAwarePromise = (function () {\n        function ZoneAwarePromise(executor) {\n            var promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n            }\n            catch (e) {\n                resolvePromise(promise, false, e);\n            }\n        }\n        ZoneAwarePromise.toString = function () {\n            return 'function ZoneAwarePromise() { [native code] }';\n        };\n        ZoneAwarePromise.resolve = function (value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        };\n        ZoneAwarePromise.reject = function (error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        };\n        ZoneAwarePromise.race = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                _a = [res, rej], resolve = _a[0], reject = _a[1];\n                var _a;\n            });\n            function onResolve(value) {\n                promise && (promise =  false || resolve(value));\n            }\n            function onReject(error) {\n                promise && (promise =  false || reject(error));\n            }\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                var value = values_1[_i];\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then(onResolve, onReject);\n            }\n            return promise;\n        };\n        ZoneAwarePromise.all = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                resolve = res;\n                reject = rej;\n            });\n            var count = 0;\n            var resolvedValues = [];\n            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {\n                var value = values_2[_i];\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then((function (index) { return function (value) {\n                    resolvedValues[index] = value;\n                    count--;\n                    if (!count) {\n                        resolve(resolvedValues);\n                    }\n                }; })(count), reject);\n                count++;\n            }\n            if (!count)\n                resolve(resolvedValues);\n            return promise;\n        };\n        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {\n            var chainPromise = new this.constructor(null);\n            var zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        };\n        ZoneAwarePromise.prototype.catch = function (onRejected) {\n            return this.then(null, onRejected);\n        };\n        return ZoneAwarePromise;\n    }());\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    var NativePromise = global[__symbol__('Promise')] = global['Promise'];\n    global['Promise'] = ZoneAwarePromise;\n    function patchThen(NativePromise) {\n        var NativePromiseProtototype = NativePromise.prototype;\n        var NativePromiseThen = NativePromiseProtototype[__symbol__('then')] =\n            NativePromiseProtototype.then;\n        NativePromiseProtototype.then = function (onResolve, onReject) {\n            var nativePromise = this;\n            return new ZoneAwarePromise(function (resolve, reject) {\n                NativePromiseThen.call(nativePromise, resolve, reject);\n            })\n                .then(onResolve, onReject);\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        if (typeof global['fetch'] !== 'undefined') {\n            var fetchPromise = void 0;\n            try {\n                // In MS Edge this throws\n                fetchPromise = global['fetch']();\n            }\n            catch (e) {\n                // In Chrome this throws instead.\n                fetchPromise = global['fetch']('about:blank');\n            }\n            // ignore output to prevent error;\n            fetchPromise.then(function () { return null; }, function () { return null; });\n            if (fetchPromise.constructor != NativePromise &&\n                fetchPromise.constructor != ZoneAwarePromise) {\n                patchThen(fetchPromise.constructor);\n            }\n        }\n    }\n    // This is not part of public API, but it is usefull for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    /*\n     * This code patches Error so that:\n     *   - It ignores un-needed stack frames.\n     *   - It Shows the associated Zone for reach frame.\n     */\n    var FrameType;\n    (function (FrameType) {\n        /// Skip this frame when printing out stack\n        FrameType[FrameType[\"blackList\"] = 0] = \"blackList\";\n        /// This frame marks zone transition\n        FrameType[FrameType[\"transition\"] = 1] = \"transition\";\n    })(FrameType || (FrameType = {}));\n    var NativeError = global[__symbol__('Error')] = global.Error;\n    // Store the frames which should be removed from the stack frames\n    var blackListedStackFrames = {};\n    // We must find the frame where Error was created, otherwise we assume we don't understand stack\n    var zoneAwareFrame;\n    global.Error = ZoneAwareError;\n    // How should the stack frames be parsed.\n    var frameParserStrategy = null;\n    var stackRewrite = 'stackRewrite';\n    // fix #595, create property descriptor\n    // for error properties\n    var createProperty = function (props, key) {\n        // if property is already defined, skip it.\n        if (props[key]) {\n            return;\n        }\n        // define a local property\n        // in case error property is not settable\n        var name = __symbol__(key);\n        props[key] = {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n                // if local property has no value\n                // use internal error's property value\n                if (!this[name]) {\n                    var error_2 = this[__symbol__('error')];\n                    if (error_2) {\n                        this[name] = error_2[key];\n                    }\n                }\n                return this[name];\n            },\n            set: function (value) {\n                // setter will set value to local property value\n                this[name] = value;\n            }\n        };\n    };\n    // fix #595, create property descriptor\n    // for error method properties\n    var createMethodProperty = function (props, key) {\n        if (props[key]) {\n            return;\n        }\n        props[key] = {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: function () {\n                var error = this[__symbol__('error')];\n                var errorMethod = (error && error[key]) || this[key];\n                if (errorMethod) {\n                    return errorMethod.apply(error, arguments);\n                }\n            }\n        };\n    };\n    var createErrorProperties = function () {\n        var props = Object.create(null);\n        var error = new NativeError();\n        var keys = Object.getOwnPropertyNames(error);\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(error, key)) {\n                createProperty(props, key);\n            }\n        }\n        var proto = NativeError.prototype;\n        if (proto) {\n            var pKeys = Object.getOwnPropertyNames(proto);\n            for (var i = 0; i < pKeys.length; i++) {\n                var key = pKeys[i];\n                // skip constructor\n                if (key !== 'constructor' && key !== 'toString' && key !== 'toSource') {\n                    createProperty(props, key);\n                }\n            }\n        }\n        // some other properties are not\n        // in NativeError\n        createProperty(props, 'originalStack');\n        createProperty(props, 'zoneAwareStack');\n        // define toString, toSource as method property\n        createMethodProperty(props, 'toString');\n        createMethodProperty(props, 'toSource');\n        return props;\n    };\n    var errorProperties = createErrorProperties();\n    // for derived Error class which extends ZoneAwareError\n    // we should not override the derived class's property\n    // so we create a new props object only copy the properties\n    // from errorProperties which not exist in derived Error's prototype\n    var getErrorPropertiesForPrototype = function (prototype) {\n        // if the prototype is ZoneAwareError.prototype\n        // we just return the prebuilt errorProperties.\n        if (prototype === ZoneAwareError.prototype) {\n            return errorProperties;\n        }\n        var newProps = Object.create(null);\n        var cKeys = Object.getOwnPropertyNames(errorProperties);\n        var keys = Object.getOwnPropertyNames(prototype);\n        cKeys.forEach(function (cKey) {\n            if (keys.filter(function (key) {\n                return key === cKey;\n            })\n                .length === 0) {\n                newProps[cKey] = errorProperties[cKey];\n            }\n        });\n        return newProps;\n    };\n    /**\n     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as\n     * adds zone information to it.\n     */\n    function ZoneAwareError() {\n        // make sure we have a valid this\n        // if this is undefined(call Error without new) or this is global\n        // or this is some other objects, we should force to create a\n        // valid ZoneAwareError by call Object.create()\n        if (!(this instanceof ZoneAwareError)) {\n            return ZoneAwareError.apply(Object.create(ZoneAwareError.prototype), arguments);\n        }\n        // Create an Error.\n        var error = NativeError.apply(this, arguments);\n        this[__symbol__('error')] = error;\n        // Save original stack trace\n        error.originalStack = error.stack;\n        // Process the stack trace and rewrite the frames.\n        if (ZoneAwareError[stackRewrite] && error.originalStack) {\n            var frames_1 = error.originalStack.split('\\n');\n            var zoneFrame = _currentZoneFrame;\n            var i = 0;\n            // Find the first frame\n            while (frames_1[i] !== zoneAwareFrame && i < frames_1.length) {\n                i++;\n            }\n            for (; i < frames_1.length && zoneFrame; i++) {\n                var frame = frames_1[i];\n                if (frame.trim()) {\n                    var frameType = blackListedStackFrames.hasOwnProperty(frame) && blackListedStackFrames[frame];\n                    if (frameType === FrameType.blackList) {\n                        frames_1.splice(i, 1);\n                        i--;\n                    }\n                    else if (frameType === FrameType.transition) {\n                        if (zoneFrame.parent) {\n                            // This is the special frame where zone changed. Print and process it accordingly\n                            frames_1[i] += \" [\" + zoneFrame.parent.zone.name + \" => \" + zoneFrame.zone.name + \"]\";\n                            zoneFrame = zoneFrame.parent;\n                        }\n                        else {\n                            zoneFrame = null;\n                        }\n                    }\n                    else {\n                        frames_1[i] += \" [\" + zoneFrame.zone.name + \"]\";\n                    }\n                }\n            }\n            error.stack = error.zoneAwareStack = frames_1.join('\\n');\n        }\n        // use defineProperties here instead of copy property value\n        // because of issue #595 which will break angular2.\n        Object.defineProperties(this, getErrorPropertiesForPrototype(Object.getPrototypeOf(this)));\n        return this;\n    }\n    // Copy the prototype so that instanceof operator works as expected\n    ZoneAwareError.prototype = NativeError.prototype;\n    ZoneAwareError[Zone.__symbol__('blacklistedStackFrames')] = blackListedStackFrames;\n    ZoneAwareError[stackRewrite] = false;\n    if (NativeError.hasOwnProperty('stackTraceLimit')) {\n        // Extend default stack limit as we will be removing few frames.\n        NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);\n        // make sure that ZoneAwareError has the same property which forwards to NativeError.\n        Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {\n            get: function () {\n                return NativeError.stackTraceLimit;\n            },\n            set: function (value) {\n                return NativeError.stackTraceLimit = value;\n            }\n        });\n    }\n    if (NativeError.hasOwnProperty('captureStackTrace')) {\n        Object.defineProperty(ZoneAwareError, 'captureStackTrace', {\n            // add named function here because we need to remove this\n            // stack frame when prepareStackTrace below\n            value: function zoneCaptureStackTrace(targetObject, constructorOpt) {\n                NativeError.captureStackTrace(targetObject, constructorOpt);\n            }\n        });\n    }\n    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {\n        get: function () {\n            return NativeError.prepareStackTrace;\n        },\n        set: function (value) {\n            if (!value || typeof value !== 'function') {\n                return NativeError.prepareStackTrace = value;\n            }\n            return NativeError.prepareStackTrace = function (error, structuredStackTrace) {\n                // remove additional stack information from ZoneAwareError.captureStackTrace\n                if (structuredStackTrace) {\n                    for (var i = 0; i < structuredStackTrace.length; i++) {\n                        var st = structuredStackTrace[i];\n                        // remove the first function which name is zoneCaptureStackTrace\n                        if (st.getFunctionName() === 'zoneCaptureStackTrace') {\n                            structuredStackTrace.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n                return value.apply(this, [error, structuredStackTrace]);\n            };\n        }\n    });\n    // Now we need to populet the `blacklistedStackFrames` as well as find the\n    // run/runGuraded/runTask frames. This is done by creating a detect zone and then threading\n    // the execution through all of the above methods so that we can look at the stack trace and\n    // find the frames of interest.\n    var detectZone = Zone.current.fork({\n        name: 'detect',\n        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {\n            // Here only so that it will show up in the stack frame so that it can be black listed.\n            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\n        },\n        onHandleError: function (parentZD, current, target, error) {\n            if (error.originalStack && Error === ZoneAwareError) {\n                var frames_2 = error.originalStack.split(/\\n/);\n                var runFrame = false, runGuardedFrame = false, runTaskFrame = false;\n                while (frames_2.length) {\n                    var frame = frames_2.shift();\n                    // On safari it is possible to have stack frame with no line number.\n                    // This check makes sure that we don't filter frames on name only (must have\n                    // linenumber)\n                    if (/:\\d+:\\d+/.test(frame)) {\n                        // Get rid of the path so that we don't accidintely find function name in path.\n                        // In chrome the seperator is `(` and `@` in FF and safari\n                        // Chrome: at Zone.run (zone.js:100)\n                        // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)\n                        // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24\n                        // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24\n                        var fnName = frame.split('(')[0].split('@')[0];\n                        var frameType = FrameType.transition;\n                        if (fnName.indexOf('ZoneAwareError') !== -1) {\n                            zoneAwareFrame = frame;\n                        }\n                        if (fnName.indexOf('runGuarded') !== -1) {\n                            runGuardedFrame = true;\n                        }\n                        else if (fnName.indexOf('runTask') !== -1) {\n                            runTaskFrame = true;\n                        }\n                        else if (fnName.indexOf('run') !== -1) {\n                            runFrame = true;\n                        }\n                        else {\n                            frameType = FrameType.blackList;\n                        }\n                        blackListedStackFrames[frame] = frameType;\n                        // Once we find all of the frames we can stop looking.\n                        if (runFrame && runGuardedFrame && runTaskFrame) {\n                            ZoneAwareError[stackRewrite] = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n    });\n    // carefully constructor a stack frame which contains all of the frames of interest which\n    // need to be detected and blacklisted.\n    var detectRunFn = function () {\n        detectZone.run(function () {\n            detectZone.runGuarded(function () {\n                throw new Error('blacklistStackFrames');\n            });\n        });\n    };\n    // Cause the error to extract the stack frames.\n    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunFn, null, function () { return null; }, null));\n    return global['Zone'] = Zone;\n})(typeof window === 'object' && window || typeof self === 'object' && self || global);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars}\n */\nvar zoneSymbol = function (n) { return \"__zone_symbol__\" + n; };\nvar _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;\nfunction bindArguments(args, source) {\n    for (var i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = Zone.current.wrap(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\n\n\nvar isNode = (!('nw' in _global$1) && typeof process !== 'undefined' &&\n    {}.toString.call(process) === '[object process]');\n\n\n\n\n\nvar EVENT_TASKS = zoneSymbol('eventTasks');\n// For EventTarget\nvar ADD_EVENT_LISTENER = 'addEventListener';\nvar REMOVE_EVENT_LISTENER = 'removeEventListener';\nfunction findExistingRegisteredTask(target, handler, name, capture, remove) {\n    var eventTasks = target[EVENT_TASKS];\n    if (eventTasks) {\n        for (var i = 0; i < eventTasks.length; i++) {\n            var eventTask = eventTasks[i];\n            var data = eventTask.data;\n            var listener = data.handler;\n            if ((data.handler === handler || listener.listener === handler) &&\n                data.useCapturing === capture && data.eventName === name) {\n                if (remove) {\n                    eventTasks.splice(i, 1);\n                }\n                return eventTask;\n            }\n        }\n    }\n    return null;\n}\nfunction findAllExistingRegisteredTasks(target, name, capture, remove) {\n    var eventTasks = target[EVENT_TASKS];\n    if (eventTasks) {\n        var result = [];\n        for (var i = eventTasks.length - 1; i >= 0; i--) {\n            var eventTask = eventTasks[i];\n            var data = eventTask.data;\n            if (data.eventName === name && data.useCapturing === capture) {\n                result.push(eventTask);\n                if (remove) {\n                    eventTasks.splice(i, 1);\n                }\n            }\n        }\n        return result;\n    }\n    return null;\n}\nfunction attachRegisteredEvent(target, eventTask, isPrepend) {\n    var eventTasks = target[EVENT_TASKS];\n    if (!eventTasks) {\n        eventTasks = target[EVENT_TASKS] = [];\n    }\n    if (isPrepend) {\n        eventTasks.unshift(eventTask);\n    }\n    else {\n        eventTasks.push(eventTask);\n    }\n}\nvar defaultListenerMetaCreator = function (self, args) {\n    return {\n        useCapturing: args[2],\n        eventName: args[0],\n        handler: args[1],\n        target: self || _global$1,\n        name: args[0],\n        invokeAddFunc: function (addFnSymbol, delegate) {\n            if (delegate && delegate.invoke) {\n                return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);\n            }\n            else {\n                return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);\n            }\n        },\n        invokeRemoveFunc: function (removeFnSymbol, delegate) {\n            if (delegate && delegate.invoke) {\n                return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);\n            }\n            else {\n                return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);\n            }\n        }\n    };\n};\nfunction makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {\n    if (useCapturingParam === void 0) { useCapturingParam = true; }\n    if (allowDuplicates === void 0) { allowDuplicates = false; }\n    if (isPrepend === void 0) { isPrepend = false; }\n    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }\n    var addFnSymbol = zoneSymbol(addFnName);\n    var removeFnSymbol = zoneSymbol(removeFnName);\n    var defaultUseCapturing = useCapturingParam ? false : undefined;\n    function scheduleEventListener(eventTask) {\n        var meta = eventTask.data;\n        attachRegisteredEvent(meta.target, eventTask, isPrepend);\n        return meta.invokeAddFunc(addFnSymbol, eventTask);\n    }\n    function cancelEventListener(eventTask) {\n        var meta = eventTask.data;\n        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);\n        return meta.invokeRemoveFunc(removeFnSymbol, eventTask);\n    }\n    return function zoneAwareAddListener(self, args) {\n        var data = metaCreator(self, args);\n        data.useCapturing = data.useCapturing || defaultUseCapturing;\n        // - Inside a Web Worker, `this` is undefined, the context is `global`\n        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined\n        // see https://github.com/angular/zone.js/issues/190\n        var delegate = null;\n        if (typeof data.handler == 'function') {\n            delegate = data.handler;\n        }\n        else if (data.handler && data.handler.handleEvent) {\n            delegate = function (event) { return data.handler.handleEvent(event); };\n        }\n        var validZoneHandler = false;\n        try {\n            // In cross site contexts (such as WebDriver frameworks like Selenium),\n            // accessing the handler object here will cause an exception to be thrown which\n            // will fail tests prematurely.\n            validZoneHandler = data.handler && data.handler.toString() === '[object FunctionWrapper]';\n        }\n        catch (e) {\n            // Returning nothing here is fine, because objects in a cross-site context are unusable\n            return;\n        }\n        // Ignore special listeners of IE11 & Edge dev tools, see\n        // https://github.com/angular/zone.js/issues/150\n        if (!delegate || validZoneHandler) {\n            return data.invokeAddFunc(addFnSymbol, data.handler);\n        }\n        if (!allowDuplicates) {\n            var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);\n            if (eventTask) {\n                // we already registered, so this will have noop.\n                return data.invokeAddFunc(addFnSymbol, eventTask);\n            }\n        }\n        var zone = Zone.current;\n        var source = data.target.constructor['name'] + '.' + addFnName + ':' + data.eventName;\n        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);\n    };\n}\nfunction makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {\n    if (useCapturingParam === void 0) { useCapturingParam = true; }\n    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }\n    var symbol = zoneSymbol(fnName);\n    var defaultUseCapturing = useCapturingParam ? false : undefined;\n    return function zoneAwareRemoveListener(self, args) {\n        var data = metaCreator(self, args);\n        data.useCapturing = data.useCapturing || defaultUseCapturing;\n        // - Inside a Web Worker, `this` is undefined, the context is `global`\n        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined\n        // see https://github.com/angular/zone.js/issues/190\n        var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);\n        if (eventTask) {\n            eventTask.zone.cancelTask(eventTask);\n        }\n        else {\n            data.invokeRemoveFunc(symbol, data.handler);\n        }\n    };\n}\nfunction makeZoneAwareRemoveAllListeners(fnName, useCapturingParam) {\n    if (useCapturingParam === void 0) { useCapturingParam = true; }\n    var symbol = zoneSymbol(fnName);\n    var defaultUseCapturing = useCapturingParam ? false : undefined;\n    return function zoneAwareRemoveAllListener(self, args) {\n        var target = self || _global$1;\n        if (args.length === 0) {\n            // remove all listeners without eventName\n            target[EVENT_TASKS] = [];\n            // we don't cancel Task either, because call native eventEmitter.removeAllListeners will\n            // will do remove listener(cancelTask) for us\n            target[symbol]();\n            return;\n        }\n        var eventName = args[0];\n        var useCapturing = args[1] || defaultUseCapturing;\n        // call this function just remove the related eventTask from target[EVENT_TASKS]\n        findAllExistingRegisteredTasks(target, eventName, useCapturing, true);\n        // we don't need useCapturing here because useCapturing is just for DOM, and\n        // removeAllListeners should only be called by node eventEmitter\n        // and we don't cancel Task either, because call native eventEmitter.removeAllListeners will\n        // will do remove listener(cancelTask) for us\n        target[symbol](eventName);\n    };\n}\nfunction makeZoneAwareListeners(fnName) {\n    var symbol = zoneSymbol(fnName);\n    return function zoneAwareEventListeners(self, args) {\n        var eventName = args[0];\n        var target = self || _global$1;\n        if (!target[EVENT_TASKS]) {\n            return [];\n        }\n        return target[EVENT_TASKS]\n            .filter(function (task) { return task.data.eventName === eventName; })\n            .map(function (task) { return task.data.handler; });\n    };\n}\nvar zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);\nvar zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);\n\nvar originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\n\n\nfunction createNamedFn(name, delegate) {\n    try {\n        return (Function('f', \"return function \" + name + \"(){return f(this, arguments)}\"))(delegate);\n    }\n    catch (e) {\n        // if we fail, we must be CSP, just return delegate.\n        return function () {\n            return delegate(this, arguments);\n        };\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    var proto = target;\n    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    var delegateName = zoneSymbol(name);\n    var delegate;\n    if (proto && !(delegate = proto[delegateName])) {\n        delegate = proto[delegateName] = proto[name];\n        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));\n    }\n    return delegate;\n}\n// TODO: support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    var setNative = null;\n    function scheduleTask(task) {\n        var data = task.data;\n        data.args[data.callbackIndex] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, function (delegate) { return function (self, args) {\n        var meta = metaCreator(self, args);\n        if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === 'function') {\n            var task = Zone.current.scheduleMacroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask, null);\n            return task;\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    }; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar callAndReturnFirstParam = function (fn) {\n    return function (self, args) {\n        fn(self, args);\n        return self;\n    };\n};\n// For EventEmitter\nvar EE_ADD_LISTENER = 'addListener';\nvar EE_PREPEND_LISTENER = 'prependListener';\nvar EE_REMOVE_LISTENER = 'removeListener';\nvar EE_REMOVE_ALL_LISTENER = 'removeAllListeners';\nvar EE_LISTENERS = 'listeners';\nvar EE_ON = 'on';\nvar zoneAwareAddListener$1 = callAndReturnFirstParam(makeZoneAwareAddListener(EE_ADD_LISTENER, EE_REMOVE_LISTENER, false, true, false));\nvar zoneAwarePrependListener = callAndReturnFirstParam(makeZoneAwareAddListener(EE_PREPEND_LISTENER, EE_REMOVE_LISTENER, false, true, true));\nvar zoneAwareRemoveListener$1 = callAndReturnFirstParam(makeZoneAwareRemoveListener(EE_REMOVE_LISTENER, false));\nvar zoneAwareRemoveAllListeners = callAndReturnFirstParam(makeZoneAwareRemoveAllListeners(EE_REMOVE_ALL_LISTENER, false));\nvar zoneAwareListeners = makeZoneAwareListeners(EE_LISTENERS);\nfunction patchEventEmitterMethods(obj) {\n    if (obj && obj.addListener) {\n        patchMethod(obj, EE_ADD_LISTENER, function () { return zoneAwareAddListener$1; });\n        patchMethod(obj, EE_PREPEND_LISTENER, function () { return zoneAwarePrependListener; });\n        patchMethod(obj, EE_REMOVE_LISTENER, function () { return zoneAwareRemoveListener$1; });\n        patchMethod(obj, EE_REMOVE_ALL_LISTENER, function () { return zoneAwareRemoveAllListeners; });\n        patchMethod(obj, EE_LISTENERS, function () { return zoneAwareListeners; });\n        obj[EE_ON] = obj[EE_ADD_LISTENER];\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n// EventEmitter\nvar events;\ntry {\n    events = __webpack_require__(/*! events */ \"events\");\n}\ncatch (err) {\n}\nif (events && events.EventEmitter) {\n    patchEventEmitterMethods(events.EventEmitter.prototype);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar fs;\ntry {\n    fs = __webpack_require__(/*! fs */ \"fs\");\n}\ncatch (err) {\n}\n// watch, watchFile, unwatchFile has been patched\n// because EventEmitter has been patched\nvar TO_PATCH_MACROTASK_METHODS = [\n    'access', 'appendFile', 'chmod', 'chown', 'close', 'exists', 'fchmod',\n    'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod',\n    'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'read',\n    'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rmdir', 'stat',\n    'symlink', 'truncate', 'unlink', 'utimes', 'write', 'writeFile',\n];\nif (fs) {\n    TO_PATCH_MACROTASK_METHODS.filter(function (name) { return !!fs[name] && typeof fs[name] === 'function'; })\n        .forEach(function (name) {\n        patchMacroTask(fs, name, function (self, args) {\n            return {\n                name: 'fs.' + name,\n                args: args,\n                callbackIndex: args.length > 0 ? args.length - 1 : -1,\n                target: self\n            };\n        });\n    });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    var setNative = null;\n    var clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    var tasksByHandleId = {};\n    function scheduleTask(task) {\n        var data = task.data;\n        data.args[0] = function () {\n            task.invoke.apply(this, arguments);\n            delete tasksByHandleId[data.handleId];\n        };\n        data.handleId = setNative.apply(window, data.args);\n        tasksByHandleId[data.handleId] = task;\n        return task;\n    }\n    function clearTask(task) {\n        delete tasksByHandleId[task.data.handleId];\n        return clearNative(task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, function (delegate) { return function (self, args) {\n            if (typeof args[0] === 'function') {\n                var zone = Zone.current;\n                var options = {\n                    handleId: null,\n                    isPeriodic: nameSuffix === 'Interval',\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,\n                    args: args\n                };\n                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                var handle = task.data.handleId;\n                if (handle.ref && handle.unref) {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        }; });\n    clearNative =\n        patchMethod(window, cancelName, function (delegate) { return function (self, args) {\n            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];\n            if (task && typeof task.type === 'string') {\n                if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        }; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar set = 'set';\nvar clear = 'clear';\nvar _global = typeof window === 'object' && window || typeof self === 'object' && self || global;\n// Timers\nvar timers = __webpack_require__(/*! timers */ \"timers\");\npatchTimer(timers, set, clear, 'Timeout');\npatchTimer(timers, set, clear, 'Interval');\npatchTimer(timers, set, clear, 'Immediate');\nvar shouldPatchGlobalTimers = global.setTimeout !== timers.setTimeout;\nif (shouldPatchGlobalTimers) {\n    patchTimer(_global, set, clear, 'Timeout');\n    patchTimer(_global, set, clear, 'Interval');\n    patchTimer(_global, set, clear, 'Immediate');\n}\npatchNextTick();\n// Crypto\nvar crypto;\ntry {\n    crypto = __webpack_require__(/*! crypto */ \"crypto\");\n}\ncatch (err) {\n}\n// TODO(gdi2290): implement a better way to patch these methods\nif (crypto) {\n    var nativeRandomBytes_1 = crypto.randomBytes;\n    crypto.randomBytes = function randomBytesZone(size, callback) {\n        if (!callback) {\n            return nativeRandomBytes_1(size);\n        }\n        else {\n            var zone = Zone.current;\n            var source = crypto.constructor.name + '.randomBytes';\n            return nativeRandomBytes_1(size, zone.wrap(callback, source));\n        }\n    }.bind(crypto);\n    var nativePbkdf2_1 = crypto.pbkdf2;\n    crypto.pbkdf2 = function pbkdf2Zone() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var fn = args[args.length - 1];\n        if (typeof fn === 'function') {\n            var zone = Zone.current;\n            var source = crypto.constructor.name + '.pbkdf2';\n            args[args.length - 1] = zone.wrap(fn, source);\n            return nativePbkdf2_1.apply(void 0, args);\n        }\n        else {\n            return nativePbkdf2_1.apply(void 0, args);\n        }\n    }.bind(crypto);\n}\n// HTTP Client\nvar httpClient;\ntry {\n    httpClient = __webpack_require__(/*! _http_client */ \"_http_client\");\n}\ncatch (err) {\n}\nif (httpClient && httpClient.ClientRequest) {\n    var ClientRequest_1 = httpClient.ClientRequest.bind(httpClient);\n    httpClient.ClientRequest = function (options, callback) {\n        if (!callback) {\n            return new ClientRequest_1(options);\n        }\n        else {\n            var zone = Zone.current;\n            return new ClientRequest_1(options, zone.wrap(callback, 'http.ClientRequest'));\n        }\n    };\n}\nfunction patchNextTick() {\n    var setNative = null;\n    function scheduleTask(task) {\n        var args = task.data;\n        args[0] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(process, args);\n        return task;\n    }\n    setNative =\n        patchMethod(process, 'nextTick', function (delegate) { return function (self, args) {\n            if (typeof args[0] === 'function') {\n                var zone = Zone.current;\n                var task = zone.scheduleMicroTask('nextTick', args[0], args, scheduleTask);\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(process, args);\n            }\n        }; });\n}\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/zone.js/dist/zone-node.js\n");

/***/ }),

/***/ "./src/Debugger/attachQuickPick.ts":
/*!*****************************************!*\
  !*** ./src/Debugger/attachQuickPick.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nclass RefreshButton {\r\n    get iconPath() {\r\n        const refreshImagePathDark = util.getExtensionFilePath(\"assets/Refresh_inverse.svg\");\r\n        const refreshImagePathLight = util.getExtensionFilePath(\"assets/Refresh.svg\");\r\n        return {\r\n            dark: vscode.Uri.file(refreshImagePathDark),\r\n            light: vscode.Uri.file(refreshImagePathLight)\r\n        };\r\n    }\r\n    get tooltip() {\r\n        return \"Refresh process list\";\r\n    }\r\n}\r\nfunction showQuickPick(getAttachItems) {\r\n    return getAttachItems().then(processEntries => {\r\n        return new Promise((resolve, reject) => {\r\n            let quickPick = vscode.window.createQuickPick();\r\n            quickPick.title = \"Attach to process\";\r\n            quickPick.canSelectMany = false;\r\n            quickPick.matchOnDescription = true;\r\n            quickPick.matchOnDetail = true;\r\n            quickPick.placeholder = \"Select the process to attach to\";\r\n            quickPick.items = processEntries;\r\n            quickPick.buttons = [new RefreshButton()];\r\n            let disposables = [];\r\n            quickPick.onDidTriggerButton(button => {\r\n                getAttachItems().then(processEntries => quickPick.items = processEntries);\r\n            }, undefined, disposables);\r\n            quickPick.onDidAccept(() => {\r\n                if (quickPick.selectedItems.length !== 1) {\r\n                    reject(new Error(\"Process not selected\"));\r\n                }\r\n                let selectedId = quickPick.selectedItems[0].id;\r\n                disposables.forEach(item => item.dispose());\r\n                quickPick.dispose();\r\n                resolve(selectedId);\r\n            }, undefined, disposables);\r\n            quickPick.onDidHide(() => {\r\n                disposables.forEach(item => item.dispose());\r\n                quickPick.dispose();\r\n                reject(new Error(\"Process not selected.\"));\r\n            }, undefined, disposables);\r\n            quickPick.show();\r\n        });\r\n    });\r\n}\r\nexports.showQuickPick = showQuickPick;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRGVidWdnZXIvYXR0YWNoUXVpY2tQaWNrLnRzLmpzIiwic291cmNlcyI6WyIuLi8uL3NyYy9EZWJ1Z2dlci9hdHRhY2hRdWlja1BpY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4uL2NvbW1vblwiKTtcclxuY29uc3QgdnNjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY2xhc3MgUmVmcmVzaEJ1dHRvbiB7XHJcbiAgICBnZXQgaWNvblBhdGgoKSB7XHJcbiAgICAgICAgY29uc3QgcmVmcmVzaEltYWdlUGF0aERhcmsgPSB1dGlsLmdldEV4dGVuc2lvbkZpbGVQYXRoKFwiYXNzZXRzL1JlZnJlc2hfaW52ZXJzZS5zdmdcIik7XHJcbiAgICAgICAgY29uc3QgcmVmcmVzaEltYWdlUGF0aExpZ2h0ID0gdXRpbC5nZXRFeHRlbnNpb25GaWxlUGF0aChcImFzc2V0cy9SZWZyZXNoLnN2Z1wiKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkYXJrOiB2c2NvZGUuVXJpLmZpbGUocmVmcmVzaEltYWdlUGF0aERhcmspLFxyXG4gICAgICAgICAgICBsaWdodDogdnNjb2RlLlVyaS5maWxlKHJlZnJlc2hJbWFnZVBhdGhMaWdodClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZ2V0IHRvb2x0aXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiUmVmcmVzaCBwcm9jZXNzIGxpc3RcIjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzaG93UXVpY2tQaWNrKGdldEF0dGFjaEl0ZW1zKSB7XHJcbiAgICByZXR1cm4gZ2V0QXR0YWNoSXRlbXMoKS50aGVuKHByb2Nlc3NFbnRyaWVzID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcXVpY2tQaWNrID0gdnNjb2RlLndpbmRvdy5jcmVhdGVRdWlja1BpY2soKTtcclxuICAgICAgICAgICAgcXVpY2tQaWNrLnRpdGxlID0gXCJBdHRhY2ggdG8gcHJvY2Vzc1wiO1xyXG4gICAgICAgICAgICBxdWlja1BpY2suY2FuU2VsZWN0TWFueSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBxdWlja1BpY2subWF0Y2hPbkRlc2NyaXB0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgcXVpY2tQaWNrLm1hdGNoT25EZXRhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICBxdWlja1BpY2sucGxhY2Vob2xkZXIgPSBcIlNlbGVjdCB0aGUgcHJvY2VzcyB0byBhdHRhY2ggdG9cIjtcclxuICAgICAgICAgICAgcXVpY2tQaWNrLml0ZW1zID0gcHJvY2Vzc0VudHJpZXM7XHJcbiAgICAgICAgICAgIHF1aWNrUGljay5idXR0b25zID0gW25ldyBSZWZyZXNoQnV0dG9uKCldO1xyXG4gICAgICAgICAgICBsZXQgZGlzcG9zYWJsZXMgPSBbXTtcclxuICAgICAgICAgICAgcXVpY2tQaWNrLm9uRGlkVHJpZ2dlckJ1dHRvbihidXR0b24gPT4ge1xyXG4gICAgICAgICAgICAgICAgZ2V0QXR0YWNoSXRlbXMoKS50aGVuKHByb2Nlc3NFbnRyaWVzID0+IHF1aWNrUGljay5pdGVtcyA9IHByb2Nlc3NFbnRyaWVzKTtcclxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCBkaXNwb3NhYmxlcyk7XHJcbiAgICAgICAgICAgIHF1aWNrUGljay5vbkRpZEFjY2VwdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocXVpY2tQaWNrLnNlbGVjdGVkSXRlbXMubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlByb2Nlc3Mgbm90IHNlbGVjdGVkXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZElkID0gcXVpY2tQaWNrLnNlbGVjdGVkSXRlbXNbMF0uaWQ7XHJcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5kaXNwb3NlKCkpO1xyXG4gICAgICAgICAgICAgICAgcXVpY2tQaWNrLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoc2VsZWN0ZWRJZCk7XHJcbiAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgZGlzcG9zYWJsZXMpO1xyXG4gICAgICAgICAgICBxdWlja1BpY2sub25EaWRIaWRlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLmZvckVhY2goaXRlbSA9PiBpdGVtLmRpc3Bvc2UoKSk7XHJcbiAgICAgICAgICAgICAgICBxdWlja1BpY2suZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlByb2Nlc3Mgbm90IHNlbGVjdGVkLlwiKSk7XHJcbiAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgZGlzcG9zYWJsZXMpO1xyXG4gICAgICAgICAgICBxdWlja1BpY2suc2hvdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zaG93UXVpY2tQaWNrID0gc2hvd1F1aWNrUGljaztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Debugger/attachQuickPick.ts\n");

/***/ }),

/***/ "./src/Debugger/attachToProcess.ts":
/*!*****************************************!*\
  !*** ./src/Debugger/attachToProcess.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst common_1 = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst nativeAttach_1 = __webpack_require__(/*! ./nativeAttach */ \"./src/Debugger/nativeAttach.ts\");\r\nconst attachQuickPick_1 = __webpack_require__(/*! ./attachQuickPick */ \"./src/Debugger/attachQuickPick.ts\");\r\nconst debugUtils = __webpack_require__(/*! ./utils */ \"./src/Debugger/utils.ts\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nclass AttachPicker {\r\n    constructor(attachItemsProvider) {\r\n        this.attachItemsProvider = attachItemsProvider;\r\n    }\r\n    ShowAttachEntries() {\r\n        return util.isExtensionReady().then(ready => {\r\n            if (!ready) {\r\n                util.displayExtensionNotReadyPrompt();\r\n            }\r\n            else {\r\n                return attachQuickPick_1.showQuickPick(() => this.attachItemsProvider.getAttachItems());\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.AttachPicker = AttachPicker;\r\nclass RemoteAttachPicker {\r\n    constructor() {\r\n        this._channel = null;\r\n        this._channel = vscode.window.createOutputChannel('remote-attach');\r\n    }\r\n    ShowAttachEntries(config) {\r\n        return util.isExtensionReady().then(ready => {\r\n            if (!ready) {\r\n                util.displayExtensionNotReadyPrompt();\r\n            }\r\n            else {\r\n                this._channel.clear();\r\n                let pipeTransport = config ? config.pipeTransport : null;\r\n                if (pipeTransport === null) {\r\n                    return Promise.reject(new Error(\"Chosen debug configuration does not contain pipeTransport\"));\r\n                }\r\n                let pipeProgram = null;\r\n                if (os.platform() === 'win32' &&\r\n                    pipeTransport.pipeProgram &&\r\n                    !fs.existsSync(pipeTransport.pipeProgram)) {\r\n                    const pipeProgramStr = pipeTransport.pipeProgram.toLowerCase().trim();\r\n                    const expectedArch = debugUtils.ArchType[process.arch];\r\n                    if (!fs.existsSync(config.pipeTransport.pipeProgram)) {\r\n                        pipeProgram = debugUtils.ArchitectureReplacer.checkAndReplaceWSLPipeProgram(pipeProgramStr, expectedArch);\r\n                    }\r\n                    if (!pipeProgram && config.pipeTransport.pipeCwd) {\r\n                        const pipeCwdStr = config.pipeTransport.pipeCwd.toLowerCase().trim();\r\n                        const newPipeProgramStr = path.join(pipeCwdStr, pipeProgramStr);\r\n                        if (!fs.existsSync(newPipeProgramStr)) {\r\n                            pipeProgram = debugUtils.ArchitectureReplacer.checkAndReplaceWSLPipeProgram(newPipeProgramStr, expectedArch);\r\n                        }\r\n                    }\r\n                }\r\n                if (!pipeProgram) {\r\n                    pipeProgram = pipeTransport.pipeProgram;\r\n                }\r\n                let pipeArgs = pipeTransport.pipeArgs;\r\n                let argList = RemoteAttachPicker.createArgumentList(pipeArgs);\r\n                let pipeCmd = `\"${pipeProgram}\" ${argList}`;\r\n                return this.getRemoteOSAndProcesses(pipeCmd)\r\n                    .then(processes => {\r\n                    let attachPickOptions = {\r\n                        matchOnDetail: true,\r\n                        matchOnDescription: true,\r\n                        placeHolder: \"Select the process to attach to\"\r\n                    };\r\n                    return vscode.window.showQuickPick(processes, attachPickOptions)\r\n                        .then(item => {\r\n                        return item ? item.id : Promise.reject(new Error(\"Process not selected.\"));\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getRemoteOSAndProcesses(pipeCmd) {\r\n        const command = `sh -c \"uname && if [ $(uname) = \\\\\\\"Linux\\\\\\\" ] ; then ${nativeAttach_1.PsProcessParser.psLinuxCommand} ; elif [ $(uname) = \\\\\\\"Darwin\\\\\\\" ] ; ` +\r\n            `then ${nativeAttach_1.PsProcessParser.psDarwinCommand}; fi\"`;\r\n        return common_1.execChildProcess(`${pipeCmd} '${command}'`, null, this._channel).then(output => {\r\n            let lines = output.split(/\\r?\\n/);\r\n            if (lines.length === 0) {\r\n                return Promise.reject(new Error(\"Pipe transport failed to get OS and processes.\"));\r\n            }\r\n            else {\r\n                let remoteOS = lines[0].replace(/[\\r\\n]+/g, '');\r\n                if (remoteOS !== \"Linux\" && remoteOS !== \"Darwin\") {\r\n                    return Promise.reject(new Error(`Operating system \"${remoteOS}\" not supported.`));\r\n                }\r\n                if (lines.length === 1) {\r\n                    return Promise.reject(new Error(\"Transport attach could not obtain processes list.\"));\r\n                }\r\n                else {\r\n                    let processes = lines.slice(1);\r\n                    return nativeAttach_1.PsProcessParser.ParseProcessFromPsArray(processes)\r\n                        .sort((a, b) => {\r\n                        if (a.name === undefined) {\r\n                            if (b.name === undefined) {\r\n                                return 0;\r\n                            }\r\n                            return 1;\r\n                        }\r\n                        if (b.name === undefined) {\r\n                            return -1;\r\n                        }\r\n                        let aLower = a.name.toLowerCase();\r\n                        let bLower = b.name.toLowerCase();\r\n                        if (aLower === bLower) {\r\n                            return 0;\r\n                        }\r\n                        return aLower < bLower ? -1 : 1;\r\n                    })\r\n                        .map(p => p.toAttachItem());\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static createArgumentList(args) {\r\n        let argsString = \"\";\r\n        for (let arg of args) {\r\n            if (argsString) {\r\n                argsString += \" \";\r\n            }\r\n            argsString += `\"${arg}\"`;\r\n        }\r\n        return argsString;\r\n    }\r\n}\r\nexports.RemoteAttachPicker = RemoteAttachPicker;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Debugger/attachToProcess.ts\n");

/***/ }),

/***/ "./src/Debugger/configurationProvider.ts":
/*!***********************************************!*\
  !*** ./src/Debugger/configurationProvider.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst debugUtils = __webpack_require__(/*! ./utils */ \"./src/Debugger/utils.ts\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst extension_1 = __webpack_require__(/*! ../LanguageServer/extension */ \"./src/LanguageServer/extension.ts\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst Telemetry = __webpack_require__(/*! ../telemetry */ \"./src/telemetry.ts\");\r\nconst extension_2 = __webpack_require__(/*! ./extension */ \"./src/Debugger/extension.ts\");\r\nconst configurations_1 = __webpack_require__(/*! ./configurations */ \"./src/Debugger/configurations.ts\");\r\nconst jsonc_parser_1 = __webpack_require__(/*! jsonc-parser */ \"./node_modules/jsonc-parser/lib/esm/main.js\");\r\nconst platform_1 = __webpack_require__(/*! ../platform */ \"./src/platform.ts\");\r\nfunction isDebugLaunchStr(str) {\r\n    return str === \"(gdb) Launch\" || str === \"(lldb) Launch\" || str === \"(Windows) Launch\";\r\n}\r\nclass QuickPickConfigurationProvider {\r\n    constructor(provider) {\r\n        this.underlyingProvider = provider;\r\n    }\r\n    provideDebugConfigurations(folder, token) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const configs = yield this.underlyingProvider.provideDebugConfigurations(folder, token);\r\n            const defaultConfig = configs.find(config => { return isDebugLaunchStr(config.name); });\r\n            console.assert(defaultConfig);\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (!editor || !util.fileIsCOrCppSource(editor.document.fileName) || configs.length <= 1) {\r\n                return [defaultConfig];\r\n            }\r\n            const items = configs.map(config => {\r\n                let menuItem = { label: config.name, configuration: config };\r\n                if (isDebugLaunchStr(menuItem.label)) {\r\n                    menuItem.label = \"Default Configuration\";\r\n                }\r\n                return menuItem;\r\n            });\r\n            const selection = yield vscode.window.showQuickPick(items, { placeHolder: \"Select a configuration\" });\r\n            if (!selection) {\r\n                throw new Error();\r\n            }\r\n            if (selection.label.startsWith(\"cl.exe\")) {\r\n                if (!process.env.DevEnvDir || process.env.DevEnvDir.length === 0) {\r\n                    vscode.window.showErrorMessage('cl.exe build and debug is only usable when VS Code is run from the Developer Command Prompt for VS.');\r\n                    throw new Error();\r\n                }\r\n            }\r\n            if (selection.label.indexOf(extension_2.buildAndDebugActiveFileStr()) !== -1 && selection.configuration.preLaunchTask) {\r\n                try {\r\n                    yield util.ensureBuildTaskExists(selection.configuration.preLaunchTask);\r\n                    yield vscode.debug.startDebugging(folder, selection.configuration);\r\n                    Telemetry.logDebuggerEvent(\"buildAndDebug\", { \"success\": \"true\" });\r\n                }\r\n                catch (e) {\r\n                    Telemetry.logDebuggerEvent(\"buildAndDebug\", { \"success\": \"false\" });\r\n                }\r\n            }\r\n            return [selection.configuration];\r\n        });\r\n    }\r\n    resolveDebugConfiguration(folder, config, token) {\r\n        return this.underlyingProvider.resolveDebugConfiguration(folder, config, token);\r\n    }\r\n}\r\nexports.QuickPickConfigurationProvider = QuickPickConfigurationProvider;\r\nclass CppConfigurationProvider {\r\n    constructor(provider, type) {\r\n        this.provider = provider;\r\n        this.type = type;\r\n    }\r\n    provideDebugConfigurations(folder, token) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let buildTasks = yield extension_1.getBuildTasks();\r\n            if (buildTasks.length === 0) {\r\n                return Promise.resolve(this.provider.getInitialConfigurations(this.type));\r\n            }\r\n            const defaultConfig = this.provider.getInitialConfigurations(this.type).find(config => {\r\n                return isDebugLaunchStr(config.name);\r\n            });\r\n            console.assert(defaultConfig, \"Could not find default debug configuration.\");\r\n            const platformInfo = yield platform_1.PlatformInformation.GetPlatformInformation();\r\n            const platform = platformInfo.platform;\r\n            buildTasks = buildTasks.filter((task) => {\r\n                if (defaultConfig.name === \"(Windows) Launch\") {\r\n                    if (task.name.startsWith(\"cl.exe\")) {\r\n                        return true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (!task.name.startsWith(\"cl.exe\")) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n            let configs = yield Promise.all(buildTasks.map((task) => __awaiter(this, void 0, void 0, function* () {\r\n                const definition = task.definition;\r\n                const compilerName = path.basename(definition.compilerPath);\r\n                let newConfig = Object.assign({}, defaultConfig);\r\n                newConfig.name = compilerName + extension_2.buildAndDebugActiveFileStr();\r\n                newConfig.preLaunchTask = task.name;\r\n                newConfig.externalConsole = false;\r\n                const exeName = path.join(\"${fileDirname}\", \"${fileBasenameNoExtension}\");\r\n                newConfig.program = platform === \"win32\" ? exeName + \".exe\" : exeName;\r\n                return new Promise(resolve => {\r\n                    if (platform === \"darwin\") {\r\n                        return resolve(newConfig);\r\n                    }\r\n                    else {\r\n                        let debuggerName;\r\n                        if (compilerName.startsWith(\"clang\")) {\r\n                            newConfig.MIMode = \"lldb\";\r\n                            const suffixIndex = compilerName.indexOf(\"-\");\r\n                            const suffix = suffixIndex === -1 ? \"\" : compilerName.substr(suffixIndex);\r\n                            debuggerName = \"lldb-mi\" + suffix;\r\n                        }\r\n                        else if (compilerName === \"cl.exe\") {\r\n                            newConfig.miDebuggerPath = undefined;\r\n                            newConfig.type = \"cppvsdbg\";\r\n                            return resolve(newConfig);\r\n                        }\r\n                        else {\r\n                            debuggerName = \"gdb\";\r\n                        }\r\n                        if (platform === \"win32\") {\r\n                            debuggerName += \".exe\";\r\n                        }\r\n                        const compilerDirname = path.dirname(definition.compilerPath);\r\n                        const debuggerPath = path.join(compilerDirname, debuggerName);\r\n                        fs.stat(debuggerPath, (err, stats) => {\r\n                            if (!err && stats && stats.isFile) {\r\n                                newConfig.miDebuggerPath = debuggerPath;\r\n                            }\r\n                            else {\r\n                                newConfig.miDebuggerPath = path.join(\"/usr\", \"bin\", debuggerName);\r\n                            }\r\n                            return resolve(newConfig);\r\n                        });\r\n                    }\r\n                });\r\n            })));\r\n            configs.push(defaultConfig);\r\n            return configs;\r\n        });\r\n    }\r\n    resolveDebugConfiguration(folder, config, token) {\r\n        if (config) {\r\n            if (config.type === 'cppvsdbg' && os.platform() !== 'win32') {\r\n                vscode.window.showErrorMessage(\"Debugger of type: 'cppvsdbg' is only available on Windows. Use type: 'cppdbg' on the current OS platform.\");\r\n                return undefined;\r\n            }\r\n            if (os.platform() === 'win32' &&\r\n                config.pipeTransport &&\r\n                config.pipeTransport.pipeProgram) {\r\n                let replacedPipeProgram = null;\r\n                const pipeProgramStr = config.pipeTransport.pipeProgram.toLowerCase().trim();\r\n                replacedPipeProgram = debugUtils.ArchitectureReplacer.checkAndReplaceWSLPipeProgram(pipeProgramStr, debugUtils.ArchType.ia32);\r\n                if (!replacedPipeProgram && !path.isAbsolute(pipeProgramStr) && config.pipeTransport.pipeCwd) {\r\n                    const pipeCwdStr = config.pipeTransport.pipeCwd.toLowerCase().trim();\r\n                    const newPipeProgramStr = path.join(pipeCwdStr, pipeProgramStr);\r\n                    replacedPipeProgram = debugUtils.ArchitectureReplacer.checkAndReplaceWSLPipeProgram(newPipeProgramStr, debugUtils.ArchType.ia32);\r\n                }\r\n                if (replacedPipeProgram) {\r\n                    config.pipeTransport.pipeProgram = replacedPipeProgram;\r\n                }\r\n            }\r\n        }\r\n        return config && config.type ? config : null;\r\n    }\r\n}\r\nclass CppVsDbgConfigurationProvider extends CppConfigurationProvider {\r\n    constructor(provider) {\r\n        super(provider, configurations_1.DebuggerType.cppvsdbg);\r\n    }\r\n}\r\nexports.CppVsDbgConfigurationProvider = CppVsDbgConfigurationProvider;\r\nclass CppDbgConfigurationProvider extends CppConfigurationProvider {\r\n    constructor(provider) {\r\n        super(provider, configurations_1.DebuggerType.cppdbg);\r\n    }\r\n}\r\nexports.CppDbgConfigurationProvider = CppDbgConfigurationProvider;\r\nclass ConfigurationAssetProviderFactory {\r\n    static getConfigurationProvider() {\r\n        switch (os.platform()) {\r\n            case 'win32':\r\n                return new WindowsConfigurationProvider();\r\n            case 'darwin':\r\n                return new OSXConfigurationProvider();\r\n            case 'linux':\r\n                return new LinuxConfigurationProvider();\r\n            default:\r\n                throw new Error(\"Unexpected OS type\");\r\n        }\r\n    }\r\n}\r\nexports.ConfigurationAssetProviderFactory = ConfigurationAssetProviderFactory;\r\nclass DefaultConfigurationProvider {\r\n    getInitialConfigurations(debuggerType) {\r\n        let configurationSnippet = [];\r\n        this.configurations.forEach(configuration => {\r\n            configurationSnippet.push(configuration.GetLaunchConfiguration());\r\n        });\r\n        let initialConfigurations = configurationSnippet.filter(snippet => snippet.debuggerType === debuggerType && snippet.isInitialConfiguration)\r\n            .map(snippet => JSON.parse(snippet.bodyText));\r\n        return initialConfigurations;\r\n    }\r\n    getConfigurationSnippets() {\r\n        let completionItems = [];\r\n        this.configurations.forEach(configuration => {\r\n            completionItems.push(convertConfigurationSnippetToCompetionItem(configuration.GetLaunchConfiguration()));\r\n            completionItems.push(convertConfigurationSnippetToCompetionItem(configuration.GetAttachConfiguration()));\r\n        });\r\n        return completionItems;\r\n    }\r\n}\r\nclass WindowsConfigurationProvider extends DefaultConfigurationProvider {\r\n    constructor() {\r\n        super();\r\n        this.executable = \"a.exe\";\r\n        this.pipeProgram = \"<full path to pipe program such as plink.exe>\";\r\n        this.MIMode = 'gdb';\r\n        this.setupCommandsBlock = `\"setupCommands\": [\r\n    {\r\n        \"description\": \"Enable pretty-printing for gdb\",\r\n        \"text\": \"-enable-pretty-printing\",\r\n        \"ignoreFailures\": true\r\n    }\r\n]`;\r\n        this.configurations = [\r\n            new configurations_1.MIConfigurations(this.MIMode, this.executable, this.pipeProgram, this.setupCommandsBlock),\r\n            new configurations_1.PipeTransportConfigurations(this.MIMode, this.executable, this.pipeProgram, this.setupCommandsBlock),\r\n            new configurations_1.WindowsConfigurations(this.MIMode, this.executable, this.pipeProgram, this.setupCommandsBlock),\r\n            new configurations_1.WSLConfigurations(this.MIMode, this.executable, this.pipeProgram, this.setupCommandsBlock),\r\n        ];\r\n    }\r\n}\r\nclass OSXConfigurationProvider extends DefaultConfigurationProvider {\r\n    constructor() {\r\n        super();\r\n        this.MIMode = 'lldb';\r\n        this.executable = \"a.out\";\r\n        this.pipeProgram = \"/usr/bin/ssh\";\r\n        this.configurations = [\r\n            new configurations_1.MIConfigurations(this.MIMode, this.executable, this.pipeProgram),\r\n        ];\r\n    }\r\n}\r\nclass LinuxConfigurationProvider extends DefaultConfigurationProvider {\r\n    constructor() {\r\n        super();\r\n        this.MIMode = 'gdb';\r\n        this.setupCommandsBlock = `\"setupCommands\": [\r\n    {\r\n        \"description\": \"Enable pretty-printing for gdb\",\r\n        \"text\": \"-enable-pretty-printing\",\r\n        \"ignoreFailures\": true\r\n    }\r\n]`;\r\n        this.executable = \"a.out\";\r\n        this.pipeProgram = \"/usr/bin/ssh\";\r\n        this.configurations = [\r\n            new configurations_1.MIConfigurations(this.MIMode, this.executable, this.pipeProgram, this.setupCommandsBlock),\r\n            new configurations_1.PipeTransportConfigurations(this.MIMode, this.executable, this.pipeProgram, this.setupCommandsBlock)\r\n        ];\r\n    }\r\n}\r\nfunction convertConfigurationSnippetToCompetionItem(snippet) {\r\n    let item = new vscode.CompletionItem(snippet.label, vscode.CompletionItemKind.Snippet);\r\n    item.insertText = snippet.bodyText;\r\n    return item;\r\n}\r\nclass ConfigurationSnippetProvider {\r\n    constructor(provider) {\r\n        this.provider = provider;\r\n        this.snippets = this.provider.getConfigurationSnippets();\r\n    }\r\n    resolveCompletionItem(item, token) {\r\n        return Promise.resolve(item);\r\n    }\r\n    provideCompletionItems(document, position, token, context) {\r\n        let items = this.snippets;\r\n        const launch = jsonc_parser_1.parse(document.getText());\r\n        if (launch.configurations.length !== 0) {\r\n            items = [];\r\n            this.snippets.forEach((item) => items.push(Object.assign({}, item)));\r\n            items.map((item) => {\r\n                item.insertText = item.insertText + ',';\r\n            });\r\n        }\r\n        return Promise.resolve(new vscode.CompletionList(items, true));\r\n    }\r\n}\r\nexports.ConfigurationSnippetProvider = ConfigurationSnippetProvider;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Debugger/configurationProvider.ts\n");

/***/ }),

/***/ "./src/Debugger/configurations.ts":
/*!****************************************!*\
  !*** ./src/Debugger/configurations.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nvar DebuggerType;\r\n(function (DebuggerType) {\r\n    DebuggerType[DebuggerType[\"cppvsdbg\"] = 0] = \"cppvsdbg\";\r\n    DebuggerType[DebuggerType[\"cppdbg\"] = 1] = \"cppdbg\";\r\n})(DebuggerType = exports.DebuggerType || (exports.DebuggerType = {}));\r\nfunction indentJsonString(json, numTabs = 1) {\r\n    return json.split('\\n').map(line => '\\t'.repeat(numTabs) + line).join('\\n').trim();\r\n}\r\nexports.indentJsonString = indentJsonString;\r\nfunction formatString(format, args) {\r\n    for (let arg in args) {\r\n        format = format.replace(\"{\" + arg + \"}\", args[arg]);\r\n    }\r\n    return format;\r\n}\r\nfunction createLaunchString(name, type, executable) {\r\n    return `\"name\": \"${name}\",\r\n\"type\": \"${type}\",\r\n\"request\": \"launch\",\r\n\"program\": \"${\"enter program name, for example \" + \"$\\{workspaceFolder\\}\" + \"/\" + executable}\",\r\n\"args\": [],\r\n\"stopAtEntry\": false,\r\n\"cwd\": \"$\\{workspaceFolder\\}\",\r\n\"environment\": [],\r\n\"externalConsole\": true\r\n`;\r\n}\r\nfunction createAttachString(name, type, executable) {\r\n    return formatString(`\r\n\"name\": \"${name}\",\r\n\"type\": \"${type}\",\r\n\"request\": \"attach\",{0}\r\n\"processId\": \"$\\{command:pickProcess\\}\"\r\n`, [type === \"cppdbg\" ? `${os.EOL}\"program\": \"${\"enter program name, for example $\\{workspaceFolder\\}/\" + executable}\",` : \"\"]);\r\n}\r\nfunction createRemoteAttachString(name, type, executable) {\r\n    return `\r\n\"name\": \"${name}\",\r\n\"type\": \"${type}\",\r\n\"request\": \"attach\",\r\n\"program\": \"${\"enter program name, for example $\\{workspaceFolder\\}/\" + executable}\",\r\n\"processId\": \"$\\{command:pickRemoteProcess\\}\"\r\n`;\r\n}\r\nfunction createPipeTransportString(pipeProgram, debuggerProgram, pipeArgs = []) {\r\n    return `\r\n\"pipeTransport\": {\r\n\\t\"debuggerPath\": \"/usr/bin/${debuggerProgram}\",\r\n\\t\"pipeProgram\": \"${pipeProgram}\",\r\n\\t\"pipeArgs\": ${JSON.stringify(pipeArgs)},\r\n\\t\"pipeCwd\": \"\"\r\n}`;\r\n}\r\nclass Configuration {\r\n    constructor(MIMode, executable, pipeProgram, additionalProperties = \"\") {\r\n        this.snippetPrefix = \"C/C++: \";\r\n        this.miDebugger = \"cppdbg\";\r\n        this.windowsDebugger = \"cppvsdbg\";\r\n        this.MIMode = MIMode;\r\n        this.executable = executable;\r\n        this.pipeProgram = pipeProgram;\r\n        this.additionalProperties = additionalProperties;\r\n    }\r\n}\r\nclass MIConfigurations extends Configuration {\r\n    GetLaunchConfiguration() {\r\n        let name = `(${this.MIMode}) Launch`;\r\n        let body = formatString(`{\r\n\\t${indentJsonString(createLaunchString(name, this.miDebugger, this.executable))},\r\n\\t\"MIMode\": \"${this.MIMode}\"{0}{1}\r\n}`, [this.miDebugger === \"cppdbg\" && os.platform() === \"win32\" ? `,${os.EOL}\\t\"miDebuggerPath\": \"/path/to/gdb\"` : \"\",\r\n            this.additionalProperties ? `,${os.EOL}\\t${indentJsonString(this.additionalProperties)}` : \"\"]);\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": `Launch with ${this.MIMode}.`,\r\n            \"bodyText\": body.trim(),\r\n            \"isInitialConfiguration\": true,\r\n            \"debuggerType\": DebuggerType.cppdbg\r\n        };\r\n    }\r\n    GetAttachConfiguration() {\r\n        let name = `(${this.MIMode}) Attach`;\r\n        let body = formatString(`{ \r\n\\t${indentJsonString(createAttachString(name, this.miDebugger, this.executable))},\r\n\\t\"MIMode\": \"${this.MIMode}\"{0}{1}\r\n}`, [this.miDebugger === \"cppdbg\" && os.platform() === \"win32\" ? `,${os.EOL}\\t\"miDebuggerPath\": \"/path/to/gdb\"` : \"\",\r\n            this.additionalProperties ? `,${os.EOL}\\t${indentJsonString(this.additionalProperties)}` : \"\"]);\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": `Attach with ${this.MIMode}.`,\r\n            \"bodyText\": body.trim(),\r\n            \"debuggerType\": DebuggerType.cppdbg\r\n        };\r\n    }\r\n}\r\nexports.MIConfigurations = MIConfigurations;\r\nclass PipeTransportConfigurations extends Configuration {\r\n    GetLaunchConfiguration() {\r\n        let name = `(${this.MIMode}) Pipe Launch`;\r\n        let body = formatString(`\r\n{\r\n\\t${indentJsonString(createLaunchString(name, this.miDebugger, this.executable))},\r\n\\t${indentJsonString(createPipeTransportString(this.pipeProgram, this.MIMode))},\r\n\\t\"MIMode\": \"${this.MIMode}\"{0}\r\n}`, [this.additionalProperties ? `,${os.EOL}\\t${indentJsonString(this.additionalProperties)}` : \"\"]);\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": `Pipe Launch with ${this.MIMode}.`,\r\n            \"bodyText\": body.trim(),\r\n            \"debuggerType\": DebuggerType.cppdbg\r\n        };\r\n    }\r\n    GetAttachConfiguration() {\r\n        let name = `(${this.MIMode}) Pipe Attach`;\r\n        let body = formatString(`\r\n{\r\n\\t${indentJsonString(createRemoteAttachString(name, this.miDebugger, this.executable))},\r\n\\t${indentJsonString(createPipeTransportString(this.pipeProgram, this.MIMode))},\r\n\\t\"MIMode\": \"${this.MIMode}\"{0}\r\n}`, [this.additionalProperties ? `,${os.EOL}\\t${indentJsonString(this.additionalProperties)}` : \"\"]);\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": `Pipe Attach with ${this.MIMode}.`,\r\n            \"bodyText\": body.trim(),\r\n            \"debuggerType\": DebuggerType.cppdbg\r\n        };\r\n    }\r\n}\r\nexports.PipeTransportConfigurations = PipeTransportConfigurations;\r\nclass WindowsConfigurations extends Configuration {\r\n    GetLaunchConfiguration() {\r\n        let name = \"(Windows) Launch\";\r\n        let body = `\r\n{\r\n\\t${indentJsonString(createLaunchString(name, this.windowsDebugger, this.executable))}\r\n}`;\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": \"Launch with the Visual Studio C/C++ debugger.\",\r\n            \"bodyText\": body.trim(),\r\n            \"isInitialConfiguration\": true,\r\n            \"debuggerType\": DebuggerType.cppvsdbg\r\n        };\r\n    }\r\n    GetAttachConfiguration() {\r\n        let name = \"(Windows) Attach\";\r\n        let body = `\r\n{\r\n\\t${indentJsonString(createAttachString(name, this.windowsDebugger, this.executable))}\r\n}`;\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": \"Attach to a process with the Visual Studio C/C++ debugger.\",\r\n            \"bodyText\": body.trim(),\r\n            \"debuggerType\": DebuggerType.cppvsdbg\r\n        };\r\n    }\r\n}\r\nexports.WindowsConfigurations = WindowsConfigurations;\r\nclass WSLConfigurations extends Configuration {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.bashPipeProgram = process.arch === 'ia32' ? \"${env:windir}\\\\\\\\sysnative\\\\\\\\bash.exe\" : \"${env:windir}\\\\\\\\system32\\\\\\\\bash.exe\";\r\n    }\r\n    GetLaunchConfiguration() {\r\n        let name = `(${this.MIMode}) Bash on Windows Launch`;\r\n        let body = formatString(`\r\n{\r\n\\t${indentJsonString(createLaunchString(name, this.miDebugger, this.executable))},\r\n\\t${indentJsonString(createPipeTransportString(this.bashPipeProgram, this.MIMode, [\"-c\"]))}{0}\r\n}`, [this.additionalProperties ? `,${os.EOL}\\t${indentJsonString(this.additionalProperties)}` : \"\"]);\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": `Launch in Bash on Windows using ${this.MIMode}.`,\r\n            \"bodyText\": body.trim(),\r\n            \"debuggerType\": DebuggerType.cppdbg\r\n        };\r\n    }\r\n    GetAttachConfiguration() {\r\n        let name = `(${this.MIMode}) Bash on Windows Attach`;\r\n        let body = formatString(`\r\n{\r\n\\t${indentJsonString(createRemoteAttachString(name, this.miDebugger, this.executable))},\r\n\\t${indentJsonString(createPipeTransportString(this.bashPipeProgram, this.MIMode, [\"-c\"]))}{0}\r\n}`, [this.additionalProperties ? `,${os.EOL}\\t${indentJsonString(this.additionalProperties)}` : \"\"]);\r\n        return {\r\n            \"label\": this.snippetPrefix + name,\r\n            \"description\": `Attach to a remote process running in Bash on Windows using ${this.MIMode}.`,\r\n            \"bodyText\": body.trim(),\r\n            \"debuggerType\": DebuggerType.cppdbg\r\n        };\r\n    }\r\n}\r\nexports.WSLConfigurations = WSLConfigurations;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Debugger/configurations.ts\n");

/***/ }),

/***/ "./src/Debugger/debugAdapterDescriptorFactory.ts":
/*!*******************************************************!*\
  !*** ./src/Debugger/debugAdapterDescriptorFactory.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nclass AbstractDebugAdapterDescriptorFactory {\r\n    constructor(context) {\r\n        this.context = context;\r\n    }\r\n}\r\nclass CppdbgDebugAdapterDescriptorFactory extends AbstractDebugAdapterDescriptorFactory {\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    createDebugAdapterDescriptor(session, executable) {\r\n        return util.isExtensionReady().then(ready => {\r\n            if (ready) {\r\n                let command = path.join(this.context.extensionPath, './debugAdapters/OpenDebugAD7');\r\n                if (os.platform() === 'win32') {\r\n                    command = path.join(this.context.extensionPath, \"./debugAdapters/bin/OpenDebugAD7.exe\");\r\n                }\r\n                return new vscode.DebugAdapterExecutable(command, []);\r\n            }\r\n            else {\r\n                throw new Error(util.extensionNotReadyString);\r\n            }\r\n        });\r\n    }\r\n}\r\nCppdbgDebugAdapterDescriptorFactory.DEBUG_TYPE = \"cppdbg\";\r\nexports.CppdbgDebugAdapterDescriptorFactory = CppdbgDebugAdapterDescriptorFactory;\r\nclass CppvsdbgDebugAdapterDescriptorFactory extends AbstractDebugAdapterDescriptorFactory {\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    createDebugAdapterDescriptor(session, executable) {\r\n        if (os.platform() !== 'win32') {\r\n            vscode.window.showErrorMessage(\"Debugger type 'cppvsdbg' is not avaliable for non-Windows machines.\");\r\n            return null;\r\n        }\r\n        else {\r\n            return util.isExtensionReady().then(ready => {\r\n                if (ready) {\r\n                    return new vscode.DebugAdapterExecutable(path.join(this.context.extensionPath, './debugAdapters/vsdbg/bin/vsdbg.exe'), ['--interpreter=vscode']);\r\n                }\r\n                else {\r\n                    throw new Error(util.extensionNotReadyString);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nCppvsdbgDebugAdapterDescriptorFactory.DEBUG_TYPE = \"cppvsdbg\";\r\nexports.CppvsdbgDebugAdapterDescriptorFactory = CppvsdbgDebugAdapterDescriptorFactory;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRGVidWdnZXIvZGVidWdBZGFwdGVyRGVzY3JpcHRvckZhY3RvcnkudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL0RlYnVnZ2VyL2RlYnVnQWRhcHRlckRlc2NyaXB0b3JGYWN0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3Qgb3MgPSByZXF1aXJlKFwib3NcIik7XHJcbmNsYXNzIEFic3RyYWN0RGVidWdBZGFwdGVyRGVzY3JpcHRvckZhY3Rvcnkge1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgQ3BwZGJnRGVidWdBZGFwdGVyRGVzY3JpcHRvckZhY3RvcnkgZXh0ZW5kcyBBYnN0cmFjdERlYnVnQWRhcHRlckRlc2NyaXB0b3JGYWN0b3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGNyZWF0ZURlYnVnQWRhcHRlckRlc2NyaXB0b3Ioc2Vzc2lvbiwgZXhlY3V0YWJsZSkge1xyXG4gICAgICAgIHJldHVybiB1dGlsLmlzRXh0ZW5zaW9uUmVhZHkoKS50aGVuKHJlYWR5ID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29tbWFuZCA9IHBhdGguam9pbih0aGlzLmNvbnRleHQuZXh0ZW5zaW9uUGF0aCwgJy4vZGVidWdBZGFwdGVycy9PcGVuRGVidWdBRDcnKTtcclxuICAgICAgICAgICAgICAgIGlmIChvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IHBhdGguam9pbih0aGlzLmNvbnRleHQuZXh0ZW5zaW9uUGF0aCwgXCIuL2RlYnVnQWRhcHRlcnMvYmluL09wZW5EZWJ1Z0FENy5leGVcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHZzY29kZS5EZWJ1Z0FkYXB0ZXJFeGVjdXRhYmxlKGNvbW1hbmQsIFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih1dGlsLmV4dGVuc2lvbk5vdFJlYWR5U3RyaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbkNwcGRiZ0RlYnVnQWRhcHRlckRlc2NyaXB0b3JGYWN0b3J5LkRFQlVHX1RZUEUgPSBcImNwcGRiZ1wiO1xyXG5leHBvcnRzLkNwcGRiZ0RlYnVnQWRhcHRlckRlc2NyaXB0b3JGYWN0b3J5ID0gQ3BwZGJnRGVidWdBZGFwdGVyRGVzY3JpcHRvckZhY3Rvcnk7XHJcbmNsYXNzIENwcHZzZGJnRGVidWdBZGFwdGVyRGVzY3JpcHRvckZhY3RvcnkgZXh0ZW5kcyBBYnN0cmFjdERlYnVnQWRhcHRlckRlc2NyaXB0b3JGYWN0b3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGNyZWF0ZURlYnVnQWRhcHRlckRlc2NyaXB0b3Ioc2Vzc2lvbiwgZXhlY3V0YWJsZSkge1xyXG4gICAgICAgIGlmIChvcy5wbGF0Zm9ybSgpICE9PSAnd2luMzInKSB7XHJcbiAgICAgICAgICAgIHZzY29kZS53aW5kb3cuc2hvd0Vycm9yTWVzc2FnZShcIkRlYnVnZ2VyIHR5cGUgJ2NwcHZzZGJnJyBpcyBub3QgYXZhbGlhYmxlIGZvciBub24tV2luZG93cyBtYWNoaW5lcy5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNFeHRlbnNpb25SZWFkeSgpLnRoZW4ocmVhZHkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB2c2NvZGUuRGVidWdBZGFwdGVyRXhlY3V0YWJsZShwYXRoLmpvaW4odGhpcy5jb250ZXh0LmV4dGVuc2lvblBhdGgsICcuL2RlYnVnQWRhcHRlcnMvdnNkYmcvYmluL3ZzZGJnLmV4ZScpLCBbJy0taW50ZXJwcmV0ZXI9dnNjb2RlJ10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHV0aWwuZXh0ZW5zaW9uTm90UmVhZHlTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuQ3BwdnNkYmdEZWJ1Z0FkYXB0ZXJEZXNjcmlwdG9yRmFjdG9yeS5ERUJVR19UWVBFID0gXCJjcHB2c2RiZ1wiO1xyXG5leHBvcnRzLkNwcHZzZGJnRGVidWdBZGFwdGVyRGVzY3JpcHRvckZhY3RvcnkgPSBDcHB2c2RiZ0RlYnVnQWRhcHRlckRlc2NyaXB0b3JGYWN0b3J5O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Debugger/debugAdapterDescriptorFactory.ts\n");

/***/ }),

/***/ "./src/Debugger/extension.ts":
/*!***********************************!*\
  !*** ./src/Debugger/extension.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst attachToProcess_1 = __webpack_require__(/*! ./attachToProcess */ \"./src/Debugger/attachToProcess.ts\");\r\nconst nativeAttach_1 = __webpack_require__(/*! ./nativeAttach */ \"./src/Debugger/nativeAttach.ts\");\r\nconst configurationProvider_1 = __webpack_require__(/*! ./configurationProvider */ \"./src/Debugger/configurationProvider.ts\");\r\nconst debugAdapterDescriptorFactory_1 = __webpack_require__(/*! ./debugAdapterDescriptorFactory */ \"./src/Debugger/debugAdapterDescriptorFactory.ts\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst Telemetry = __webpack_require__(/*! ../telemetry */ \"./src/telemetry.ts\");\r\nlet disposables = [];\r\nfunction buildAndDebugActiveFileStr() {\r\n    return \" build and debug active file\";\r\n}\r\nexports.buildAndDebugActiveFileStr = buildAndDebugActiveFileStr;\r\nfunction initialize(context) {\r\n    let attachItemsProvider = nativeAttach_1.NativeAttachItemsProviderFactory.Get();\r\n    let attacher = new attachToProcess_1.AttachPicker(attachItemsProvider);\r\n    disposables.push(vscode.commands.registerCommand('extension.pickNativeProcess', () => attacher.ShowAttachEntries()));\r\n    let remoteAttacher = new attachToProcess_1.RemoteAttachPicker();\r\n    disposables.push(vscode.commands.registerCommand('extension.pickRemoteNativeProcess', (any) => remoteAttacher.ShowAttachEntries(any)));\r\n    let configurationProvider = configurationProvider_1.ConfigurationAssetProviderFactory.getConfigurationProvider();\r\n    let vsdbgProvider = null;\r\n    if (os.platform() === 'win32') {\r\n        vsdbgProvider = new configurationProvider_1.CppVsDbgConfigurationProvider(configurationProvider);\r\n        disposables.push(vscode.debug.registerDebugConfigurationProvider('cppvsdbg', new configurationProvider_1.QuickPickConfigurationProvider(vsdbgProvider)));\r\n    }\r\n    const provider = new configurationProvider_1.CppDbgConfigurationProvider(configurationProvider);\r\n    disposables.push(vscode.debug.registerDebugConfigurationProvider('cppdbg', new configurationProvider_1.QuickPickConfigurationProvider(provider)));\r\n    disposables.push(vscode.commands.registerTextEditorCommand(\"C_Cpp.BuildAndDebugActiveFile\", (textEditor, edit, ...args) => __awaiter(this, void 0, void 0, function* () {\r\n        const folder = vscode.workspace.getWorkspaceFolder(textEditor.document.uri);\r\n        if (!folder) {\r\n            vscode.window.showErrorMessage('This command is not yet available for single-file mode.');\r\n            return Promise.resolve();\r\n        }\r\n        if (!util.fileIsCOrCppSource(textEditor.document.uri.fsPath)) {\r\n            vscode.window.showErrorMessage('Cannot build and debug because the active file is not a C or C++ source file.');\r\n            return Promise.resolve();\r\n        }\r\n        let configs = (yield provider.provideDebugConfigurations(folder)).filter(config => {\r\n            return config.name.indexOf(buildAndDebugActiveFileStr()) !== -1;\r\n        });\r\n        if (vsdbgProvider) {\r\n            let vsdbgConfigs = (yield vsdbgProvider.provideDebugConfigurations(folder)).filter(config => {\r\n                return config.name.indexOf(buildAndDebugActiveFileStr()) !== -1;\r\n            });\r\n            if (vsdbgConfigs) {\r\n                configs.push(...vsdbgConfigs);\r\n            }\r\n        }\r\n        const items = configs.map(config => {\r\n            return { label: config.name, configuration: config };\r\n        });\r\n        vscode.window.showQuickPick(items, { placeHolder: (items.length === 0 ? \"No compiler found\" : \"Select a compiler\") }).then((selection) => __awaiter(this, void 0, void 0, function* () {\r\n            if (!selection) {\r\n                return;\r\n            }\r\n            if (selection.label.startsWith(\"cl.exe\")) {\r\n                if (!process.env.DevEnvDir || process.env.DevEnvDir.length === 0) {\r\n                    vscode.window.showErrorMessage('cl.exe build and debug is only usable when VS Code is run from the Developer Command Prompt for VS.');\r\n                    return;\r\n                }\r\n            }\r\n            if (selection.configuration.preLaunchTask) {\r\n                if (folder) {\r\n                    try {\r\n                        yield util.ensureBuildTaskExists(selection.configuration.preLaunchTask);\r\n                        Telemetry.logDebuggerEvent(\"buildAndDebug\", { \"success\": \"false\" });\r\n                    }\r\n                    catch (e) {\r\n                        return Promise.resolve();\r\n                    }\r\n                }\r\n                else {\r\n                    return Promise.resolve();\r\n                }\r\n            }\r\n            try {\r\n                yield vscode.debug.startDebugging(folder, selection.configuration.name);\r\n                Telemetry.logDebuggerEvent(\"buildAndDebug\", { \"success\": \"true\" });\r\n            }\r\n            catch (e) {\r\n                try {\r\n                    vscode.debug.startDebugging(folder, selection.configuration);\r\n                }\r\n                catch (e) {\r\n                    Telemetry.logDebuggerEvent(\"buildAndDebug\", { \"success\": \"false\" });\r\n                }\r\n            }\r\n        }));\r\n    })));\r\n    configurationProvider.getConfigurationSnippets();\r\n    const launchJsonDocumentSelector = [{\r\n            scheme: 'file',\r\n            language: 'jsonc',\r\n            pattern: '**/launch.json'\r\n        }];\r\n    disposables.push(vscode.languages.registerCompletionItemProvider(launchJsonDocumentSelector, new configurationProvider_1.ConfigurationSnippetProvider(configurationProvider)));\r\n    disposables.push(vscode.debug.registerDebugAdapterDescriptorFactory(debugAdapterDescriptorFactory_1.CppvsdbgDebugAdapterDescriptorFactory.DEBUG_TYPE, new debugAdapterDescriptorFactory_1.CppvsdbgDebugAdapterDescriptorFactory(context)));\r\n    disposables.push(vscode.debug.registerDebugAdapterDescriptorFactory(debugAdapterDescriptorFactory_1.CppdbgDebugAdapterDescriptorFactory.DEBUG_TYPE, new debugAdapterDescriptorFactory_1.CppdbgDebugAdapterDescriptorFactory(context)));\r\n    vscode.Disposable.from(...disposables);\r\n}\r\nexports.initialize = initialize;\r\nfunction dispose() {\r\n    disposables.forEach(d => d.dispose());\r\n}\r\nexports.dispose = dispose;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Debugger/extension.ts\n");

/***/ }),

/***/ "./src/Debugger/nativeAttach.ts":
/*!**************************************!*\
  !*** ./src/Debugger/nativeAttach.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst child_process = __webpack_require__(/*! child_process */ \"child_process\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nclass Process {\r\n    constructor(name, pid, commandLine) {\r\n        this.name = name;\r\n        this.pid = pid;\r\n        this.commandLine = commandLine;\r\n    }\r\n    toAttachItem() {\r\n        return {\r\n            label: this.name,\r\n            description: this.pid,\r\n            detail: this.commandLine,\r\n            id: this.pid\r\n        };\r\n    }\r\n}\r\nclass NativeAttachItemsProviderFactory {\r\n    static Get() {\r\n        if (os.platform() === 'win32') {\r\n            return new WmicAttachItemsProvider();\r\n        }\r\n        else {\r\n            return new PsAttachItemsProvider();\r\n        }\r\n    }\r\n}\r\nexports.NativeAttachItemsProviderFactory = NativeAttachItemsProviderFactory;\r\nclass NativeAttachItemsProvider {\r\n    getAttachItems() {\r\n        return this.getInternalProcessEntries().then(processEntries => {\r\n            processEntries.sort((a, b) => {\r\n                if (a.name === undefined) {\r\n                    if (b.name === undefined) {\r\n                        return 0;\r\n                    }\r\n                    return 1;\r\n                }\r\n                if (b.name === undefined) {\r\n                    return -1;\r\n                }\r\n                let aLower = a.name.toLowerCase();\r\n                let bLower = b.name.toLowerCase();\r\n                if (aLower === bLower) {\r\n                    return 0;\r\n                }\r\n                return aLower < bLower ? -1 : 1;\r\n            });\r\n            let attachItems = processEntries.map(p => p.toAttachItem());\r\n            return attachItems;\r\n        });\r\n    }\r\n}\r\nclass PsAttachItemsProvider extends NativeAttachItemsProvider {\r\n    getInternalProcessEntries() {\r\n        let processCmd = '';\r\n        switch (os.platform()) {\r\n            case 'darwin':\r\n                processCmd = PsProcessParser.psDarwinCommand;\r\n                break;\r\n            case 'linux':\r\n                processCmd = PsProcessParser.psLinuxCommand;\r\n                break;\r\n            default:\r\n                return Promise.reject(new Error(`Operating system \"${os.platform()}\" not support.`));\r\n        }\r\n        return execChildProcess(processCmd, null).then(processes => {\r\n            return PsProcessParser.ParseProcessFromPs(processes);\r\n        });\r\n    }\r\n}\r\nexports.PsAttachItemsProvider = PsAttachItemsProvider;\r\nclass PsProcessParser {\r\n    static get secondColumnCharacters() { return 50; }\r\n    static get commColumnTitle() { return Array(PsProcessParser.secondColumnCharacters).join(\"a\"); }\r\n    static get psLinuxCommand() { return `ps axww -o pid=,comm=${PsProcessParser.commColumnTitle},args=`; }\r\n    static get psDarwinCommand() { return `ps axww -o pid=,comm=${PsProcessParser.commColumnTitle},args= -c`; }\r\n    static ParseProcessFromPs(processes) {\r\n        let lines = processes.split(os.EOL);\r\n        return PsProcessParser.ParseProcessFromPsArray(lines);\r\n    }\r\n    static ParseProcessFromPsArray(processArray) {\r\n        let processEntries = [];\r\n        for (let i = 1; i < processArray.length; i++) {\r\n            let line = processArray[i];\r\n            if (!line) {\r\n                continue;\r\n            }\r\n            let processEntry = PsProcessParser.parseLineFromPs(line);\r\n            processEntries.push(processEntry);\r\n        }\r\n        return processEntries;\r\n    }\r\n    static parseLineFromPs(line) {\r\n        const psEntry = new RegExp(`^\\\\s*([0-9]+)\\\\s+(.{${PsProcessParser.secondColumnCharacters - 1}})\\\\s+(.*)$`);\r\n        const matches = psEntry.exec(line);\r\n        if (matches && matches.length === 4) {\r\n            const pid = matches[1].trim();\r\n            const executable = matches[2].trim();\r\n            const cmdline = matches[3].trim();\r\n            return new Process(executable, pid, cmdline);\r\n        }\r\n    }\r\n}\r\nexports.PsProcessParser = PsProcessParser;\r\nfunction execChildProcess(process, workingDirectory) {\r\n    return new Promise((resolve, reject) => {\r\n        child_process.exec(process, { cwd: workingDirectory, maxBuffer: 500 * 1024 }, (error, stdout, stderr) => {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n            if (stderr && stderr.length > 0) {\r\n                reject(new Error(stderr));\r\n                return;\r\n            }\r\n            resolve(stdout);\r\n        });\r\n    });\r\n}\r\nclass WmicAttachItemsProvider extends NativeAttachItemsProvider {\r\n    getInternalProcessEntries() {\r\n        const wmicCommand = 'wmic process get Name,ProcessId,CommandLine /FORMAT:list';\r\n        return execChildProcess(wmicCommand, null).then(processes => {\r\n            return WmicProcessParser.ParseProcessFromWmic(processes);\r\n        });\r\n    }\r\n}\r\nexports.WmicAttachItemsProvider = WmicAttachItemsProvider;\r\nclass WmicProcessParser {\r\n    static get wmicNameTitle() { return 'Name'; }\r\n    static get wmicCommandLineTitle() { return 'CommandLine'; }\r\n    static get wmicPidTitle() { return 'ProcessId'; }\r\n    static ParseProcessFromWmic(processes) {\r\n        let lines = processes.split(os.EOL);\r\n        let currentProcess = new Process(null, null, null);\r\n        let processEntries = [];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            let line = lines[i];\r\n            if (!line) {\r\n                continue;\r\n            }\r\n            WmicProcessParser.parseLineFromWmic(line, currentProcess);\r\n            if (line.lastIndexOf(WmicProcessParser.wmicPidTitle, 0) === 0) {\r\n                processEntries.push(currentProcess);\r\n                currentProcess = new Process(null, null, null);\r\n            }\r\n        }\r\n        return processEntries;\r\n    }\r\n    static parseLineFromWmic(line, process) {\r\n        let splitter = line.indexOf('=');\r\n        if (splitter >= 0) {\r\n            let key = line.slice(0, line.indexOf('=')).trim();\r\n            let value = line.slice(line.indexOf('=') + 1).trim();\r\n            if (key === WmicProcessParser.wmicNameTitle) {\r\n                process.name = value;\r\n            }\r\n            else if (key === WmicProcessParser.wmicPidTitle) {\r\n                process.pid = value;\r\n            }\r\n            else if (key === WmicProcessParser.wmicCommandLineTitle) {\r\n                const extendedLengthPath = '\\\\??\\\\';\r\n                if (value.lastIndexOf(extendedLengthPath, 0) === 0) {\r\n                    value = value.slice(extendedLengthPath.length);\r\n                }\r\n                process.commandLine = value;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.WmicProcessParser = WmicProcessParser;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Debugger/nativeAttach.ts\n");

/***/ }),

/***/ "./src/Debugger/utils.ts":
/*!*******************************!*\
  !*** ./src/Debugger/utils.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ArchType;\r\n(function (ArchType) {\r\n    ArchType[ArchType[\"ia32\"] = 0] = \"ia32\";\r\n    ArchType[ArchType[\"x64\"] = 1] = \"x64\";\r\n})(ArchType = exports.ArchType || (exports.ArchType = {}));\r\nclass ArchitectureReplacer {\r\n    static checkAndReplaceWSLPipeProgram(pipeProgramStr, expectedArch) {\r\n        let replacedPipeProgram = null;\r\n        const winDir = process.env.WINDIR ? process.env.WINDIR.toLowerCase() : null;\r\n        const winDirAltDirSep = process.env.WINDIR ? process.env.WINDIR.replace('\\\\', '/').toLowerCase() : null;\r\n        const winDirEnv = \"${env:windir}\";\r\n        if (winDir && winDirAltDirSep && (pipeProgramStr.indexOf(winDir) === 0 || pipeProgramStr.indexOf(winDirAltDirSep) === 0 || pipeProgramStr.indexOf(winDirEnv) === 0)) {\r\n            if (expectedArch === ArchType.x64) {\r\n                const pathSep = ArchitectureReplacer.checkForFolderInPath(pipeProgramStr, \"sysnative\");\r\n                if (pathSep) {\r\n                    replacedPipeProgram = pipeProgramStr.replace(`${pathSep}sysnative${pathSep}`, `${pathSep}system32${pathSep}`);\r\n                }\r\n            }\r\n            else if (expectedArch === ArchType.ia32) {\r\n                const pathSep = ArchitectureReplacer.checkForFolderInPath(pipeProgramStr, \"system32\");\r\n                if (pathSep) {\r\n                    replacedPipeProgram = pipeProgramStr.replace(`${pathSep}system32${pathSep}`, `${pathSep}sysnative${pathSep}`);\r\n                }\r\n            }\r\n        }\r\n        return replacedPipeProgram;\r\n    }\r\n    static checkForFolderInPath(path, folder) {\r\n        if (path.indexOf(`/${folder}/`) >= 0) {\r\n            return '/';\r\n        }\r\n        else if (path.indexOf(`\\\\${folder}\\\\`) >= 0) {\r\n            return '\\\\';\r\n        }\r\n        return \"\";\r\n    }\r\n}\r\nexports.ArchitectureReplacer = ArchitectureReplacer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRGVidWdnZXIvdXRpbHMudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL0RlYnVnZ2VyL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEFyY2hUeXBlO1xyXG4oZnVuY3Rpb24gKEFyY2hUeXBlKSB7XHJcbiAgICBBcmNoVHlwZVtBcmNoVHlwZVtcImlhMzJcIl0gPSAwXSA9IFwiaWEzMlwiO1xyXG4gICAgQXJjaFR5cGVbQXJjaFR5cGVbXCJ4NjRcIl0gPSAxXSA9IFwieDY0XCI7XHJcbn0pKEFyY2hUeXBlID0gZXhwb3J0cy5BcmNoVHlwZSB8fCAoZXhwb3J0cy5BcmNoVHlwZSA9IHt9KSk7XHJcbmNsYXNzIEFyY2hpdGVjdHVyZVJlcGxhY2VyIHtcclxuICAgIHN0YXRpYyBjaGVja0FuZFJlcGxhY2VXU0xQaXBlUHJvZ3JhbShwaXBlUHJvZ3JhbVN0ciwgZXhwZWN0ZWRBcmNoKSB7XHJcbiAgICAgICAgbGV0IHJlcGxhY2VkUGlwZVByb2dyYW0gPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IHdpbkRpciA9IHByb2Nlc3MuZW52LldJTkRJUiA/IHByb2Nlc3MuZW52LldJTkRJUi50b0xvd2VyQ2FzZSgpIDogbnVsbDtcclxuICAgICAgICBjb25zdCB3aW5EaXJBbHREaXJTZXAgPSBwcm9jZXNzLmVudi5XSU5ESVIgPyBwcm9jZXNzLmVudi5XSU5ESVIucmVwbGFjZSgnXFxcXCcsICcvJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XHJcbiAgICAgICAgY29uc3Qgd2luRGlyRW52ID0gXCIke2Vudjp3aW5kaXJ9XCI7XHJcbiAgICAgICAgaWYgKHdpbkRpciAmJiB3aW5EaXJBbHREaXJTZXAgJiYgKHBpcGVQcm9ncmFtU3RyLmluZGV4T2Yod2luRGlyKSA9PT0gMCB8fCBwaXBlUHJvZ3JhbVN0ci5pbmRleE9mKHdpbkRpckFsdERpclNlcCkgPT09IDAgfHwgcGlwZVByb2dyYW1TdHIuaW5kZXhPZih3aW5EaXJFbnYpID09PSAwKSkge1xyXG4gICAgICAgICAgICBpZiAoZXhwZWN0ZWRBcmNoID09PSBBcmNoVHlwZS54NjQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhTZXAgPSBBcmNoaXRlY3R1cmVSZXBsYWNlci5jaGVja0ZvckZvbGRlckluUGF0aChwaXBlUHJvZ3JhbVN0ciwgXCJzeXNuYXRpdmVcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aFNlcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VkUGlwZVByb2dyYW0gPSBwaXBlUHJvZ3JhbVN0ci5yZXBsYWNlKGAke3BhdGhTZXB9c3lzbmF0aXZlJHtwYXRoU2VwfWAsIGAke3BhdGhTZXB9c3lzdGVtMzIke3BhdGhTZXB9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZXhwZWN0ZWRBcmNoID09PSBBcmNoVHlwZS5pYTMyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoU2VwID0gQXJjaGl0ZWN0dXJlUmVwbGFjZXIuY2hlY2tGb3JGb2xkZXJJblBhdGgocGlwZVByb2dyYW1TdHIsIFwic3lzdGVtMzJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aFNlcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VkUGlwZVByb2dyYW0gPSBwaXBlUHJvZ3JhbVN0ci5yZXBsYWNlKGAke3BhdGhTZXB9c3lzdGVtMzIke3BhdGhTZXB9YCwgYCR7cGF0aFNlcH1zeXNuYXRpdmUke3BhdGhTZXB9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VkUGlwZVByb2dyYW07XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY2hlY2tGb3JGb2xkZXJJblBhdGgocGF0aCwgZm9sZGVyKSB7XHJcbiAgICAgICAgaWYgKHBhdGguaW5kZXhPZihgLyR7Zm9sZGVyfS9gKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnLyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBhdGguaW5kZXhPZihgXFxcXCR7Zm9sZGVyfVxcXFxgKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnXFxcXCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQXJjaGl0ZWN0dXJlUmVwbGFjZXIgPSBBcmNoaXRlY3R1cmVSZXBsYWNlcjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Debugger/utils.ts\n");

/***/ }),

/***/ "./src/LanguageServer/client.ts":
/*!**************************************!*\
  !*** ./src/LanguageServer/client.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst vscode_languageclient_1 = __webpack_require__(/*! vscode-languageclient */ \"./node_modules/vscode-languageclient/lib/main.js\");\r\nconst vscode_cpptools_1 = __webpack_require__(/*! vscode-cpptools */ \"./node_modules/vscode-cpptools/out/api.js\");\r\nconst testApi_1 = __webpack_require__(/*! vscode-cpptools/out/testApi */ \"./node_modules/vscode-cpptools/out/testApi.js\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst configs = __webpack_require__(/*! ./configurations */ \"./src/LanguageServer/configurations.ts\");\r\nconst settings_1 = __webpack_require__(/*! ./settings */ \"./src/LanguageServer/settings.ts\");\r\nconst telemetry = __webpack_require__(/*! ../telemetry */ \"./src/telemetry.ts\");\r\nconst persistentState_1 = __webpack_require__(/*! ./persistentState */ \"./src/LanguageServer/persistentState.ts\");\r\nconst ui_1 = __webpack_require__(/*! ./ui */ \"./src/LanguageServer/ui.ts\");\r\nconst protocolFilter_1 = __webpack_require__(/*! ./protocolFilter */ \"./src/LanguageServer/protocolFilter.ts\");\r\nconst dataBinding_1 = __webpack_require__(/*! ./dataBinding */ \"./src/LanguageServer/dataBinding.ts\");\r\nconst minimatch = __webpack_require__(/*! minimatch */ \"./node_modules/minimatch/minimatch.js\");\r\nconst logger = __webpack_require__(/*! ../logger */ \"./src/logger.ts\");\r\nconst extension_1 = __webpack_require__(/*! ./extension */ \"./src/LanguageServer/extension.ts\");\r\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst settingsTracker_1 = __webpack_require__(/*! ./settingsTracker */ \"./src/LanguageServer/settingsTracker.ts\");\r\nconst testHook_1 = __webpack_require__(/*! ../testHook */ \"./src/testHook.ts\");\r\nconst customProviders_1 = __webpack_require__(/*! ../LanguageServer/customProviders */ \"./src/LanguageServer/customProviders.ts\");\r\nconst abTesting_1 = __webpack_require__(/*! ../abTesting */ \"./src/abTesting.ts\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nlet ui;\r\nconst configProviderTimeout = 2000;\r\nconst NavigationListRequest = new vscode_languageclient_1.RequestType('cpptools/requestNavigationList');\r\nconst GoToDeclarationRequest = new vscode_languageclient_1.RequestType('cpptools/goToDeclaration');\r\nconst QueryCompilerDefaultsRequest = new vscode_languageclient_1.RequestType('cpptools/queryCompilerDefaults');\r\nconst SwitchHeaderSourceRequest = new vscode_languageclient_1.RequestType('cpptools/didSwitchHeaderSource');\r\nconst DidOpenNotification = new vscode_languageclient_1.NotificationType('textDocument/didOpen');\r\nconst FileCreatedNotification = new vscode_languageclient_1.NotificationType('cpptools/fileCreated');\r\nconst FileDeletedNotification = new vscode_languageclient_1.NotificationType('cpptools/fileDeleted');\r\nconst ResetDatabaseNotification = new vscode_languageclient_1.NotificationType('cpptools/resetDatabase');\r\nconst PauseParsingNotification = new vscode_languageclient_1.NotificationType('cpptools/pauseParsing');\r\nconst ResumeParsingNotification = new vscode_languageclient_1.NotificationType('cpptools/resumeParsing');\r\nconst ActiveDocumentChangeNotification = new vscode_languageclient_1.NotificationType('cpptools/activeDocumentChange');\r\nconst TextEditorSelectionChangeNotification = new vscode_languageclient_1.NotificationType('cpptools/textEditorSelectionChange');\r\nconst ChangeFolderSettingsNotification = new vscode_languageclient_1.NotificationType('cpptools/didChangeFolderSettings');\r\nconst ChangeCompileCommandsNotification = new vscode_languageclient_1.NotificationType('cpptools/didChangeCompileCommands');\r\nconst ChangeSelectedSettingNotification = new vscode_languageclient_1.NotificationType('cpptools/didChangeSelectedSetting');\r\nconst IntervalTimerNotification = new vscode_languageclient_1.NotificationType('cpptools/onIntervalTimer');\r\nconst CustomConfigurationNotification = new vscode_languageclient_1.NotificationType('cpptools/didChangeCustomConfiguration');\r\nconst CustomBrowseConfigurationNotification = new vscode_languageclient_1.NotificationType('cpptools/didChangeCustomBrowseConfiguration');\r\nconst ClearCustomConfigurationsNotification = new vscode_languageclient_1.NotificationType('cpptools/clearCustomConfigurations');\r\nconst ReloadWindowNotification = new vscode_languageclient_1.NotificationType('cpptools/reloadWindow');\r\nconst LogTelemetryNotification = new vscode_languageclient_1.NotificationType('cpptools/logTelemetry');\r\nconst ReportNavigationNotification = new vscode_languageclient_1.NotificationType('cpptools/reportNavigation');\r\nconst ReportTagParseStatusNotification = new vscode_languageclient_1.NotificationType('cpptools/reportTagParseStatus');\r\nconst ReportStatusNotification = new vscode_languageclient_1.NotificationType('cpptools/reportStatus');\r\nconst DebugProtocolNotification = new vscode_languageclient_1.NotificationType('cpptools/debugProtocol');\r\nconst DebugLogNotification = new vscode_languageclient_1.NotificationType('cpptools/debugLog');\r\nconst InactiveRegionNotification = new vscode_languageclient_1.NotificationType('cpptools/inactiveRegions');\r\nconst CompileCommandsPathsNotification = new vscode_languageclient_1.NotificationType('cpptools/compileCommandsPaths');\r\nconst UpdateClangFormatPathNotification = new vscode_languageclient_1.NotificationType('cpptools/updateClangFormatPath');\r\nclass BlockingTask {\r\n    constructor(task, dependency) {\r\n        this.done = false;\r\n        this.promise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let result = yield task();\r\n                resolve(result);\r\n                this.done = true;\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n                this.done = true;\r\n            }\r\n        }));\r\n        this.dependency = dependency;\r\n    }\r\n    get Done() {\r\n        return this.done && (!this.dependency || this.dependency.Done);\r\n    }\r\n    then(onSucceeded, onRejected) {\r\n        return this.promise.then(onSucceeded, onRejected);\r\n    }\r\n}\r\nlet failureMessageShown = false;\r\nfunction createClient(allClients, workspaceFolder) {\r\n    return new DefaultClient(allClients, workspaceFolder);\r\n}\r\nexports.createClient = createClient;\r\nfunction createNullClient() {\r\n    return new NullClient();\r\n}\r\nexports.createNullClient = createNullClient;\r\nclass DefaultClient {\r\n    constructor(allClients, workspaceFolder) {\r\n        this.disposables = [];\r\n        this.trackedDocuments = new Set();\r\n        this.crashTimes = [];\r\n        this.isSupported = true;\r\n        this.inactiveRegionsDecorations = new Map();\r\n        this.model = {\r\n            isTagParsing: new dataBinding_1.DataBinding(false),\r\n            isUpdatingIntelliSense: new dataBinding_1.DataBinding(false),\r\n            navigationLocation: new dataBinding_1.DataBinding(\"\"),\r\n            tagParserStatus: new dataBinding_1.DataBinding(\"\"),\r\n            activeConfigName: new dataBinding_1.DataBinding(\"\")\r\n        };\r\n        try {\r\n            console.log('create LanguageClient');\r\n            let languageClient = this.createLanguageClient(allClients, workspaceFolder);\r\n            languageClient.registerProposedFeatures();\r\n            languageClient.start();\r\n            util.setProgress(util.getProgressExecutableStarted());\r\n            this.rootFolder = workspaceFolder;\r\n            ui = ui_1.getUI();\r\n            ui.bind(this);\r\n            this.queueBlockingTask(() => languageClient.onReady().then(() => {\r\n                console.log('client ready');\r\n                this.configuration = new configs.CppProperties(this.RootUri);\r\n                this.configuration.ConfigurationsChanged((e) => this.onConfigurationsChanged(e));\r\n                this.configuration.SelectionChanged((e) => this.onSelectedConfigurationChanged(e));\r\n                this.configuration.CompileCommandsChanged((e) => this.onCompileCommandsChanged(e));\r\n                this.disposables.push(this.configuration);\r\n                languageClient.sendRequest(QueryCompilerDefaultsRequest, {}).then((compilerDefaults) => {\r\n                    this.configuration.CompilerDefaults = compilerDefaults;\r\n                    console.log('compiler defaults received');\r\n                    extension_1.registerCommands();\r\n                });\r\n                this.languageClient = languageClient;\r\n                this.settingsTracker = settingsTracker_1.getTracker(this.RootUri);\r\n                telemetry.logLanguageServerEvent(\"NonDefaultInitialCppSettings\", this.settingsTracker.getUserModifiedSettings());\r\n                failureMessageShown = false;\r\n                this.registerNotifications();\r\n                this.registerFileWatcher();\r\n                console.log('registered stuff');\r\n            }, (err) => {\r\n                this.isSupported = false;\r\n                if (!failureMessageShown) {\r\n                    failureMessageShown = true;\r\n                    vscode.window.showErrorMessage(\"Unable to start the C/C++ language server. IntelliSense features will be disabled. Error: \" + String(err));\r\n                }\r\n            }));\r\n        }\r\n        catch (err) {\r\n            this.isSupported = false;\r\n            if (!failureMessageShown) {\r\n                failureMessageShown = true;\r\n                let additionalInfo;\r\n                if (err.code === \"EPERM\") {\r\n                    additionalInfo = `EPERM: Check permissions for '${getLanguageServerFileName()}'`;\r\n                }\r\n                else {\r\n                    additionalInfo = String(err);\r\n                }\r\n                vscode.window.showErrorMessage(\"Unable to start the C/C++ language server. IntelliSense features will be disabled. Error: \" + additionalInfo);\r\n            }\r\n        }\r\n    }\r\n    get TagParsingChanged() { return this.model.isTagParsing.ValueChanged; }\r\n    get IntelliSenseParsingChanged() { return this.model.isUpdatingIntelliSense.ValueChanged; }\r\n    get NavigationLocationChanged() { return this.model.navigationLocation.ValueChanged; }\r\n    get TagParserStatusChanged() { return this.model.tagParserStatus.ValueChanged; }\r\n    get ActiveConfigChanged() { return this.model.activeConfigName.ValueChanged; }\r\n    get RootPath() {\r\n        return (this.rootFolder) ? this.rootFolder.uri.fsPath : \"\";\r\n    }\r\n    get RootUri() {\r\n        return (this.rootFolder) ? this.rootFolder.uri : null;\r\n    }\r\n    get Name() {\r\n        return this.getName(this.rootFolder);\r\n    }\r\n    get TrackedDocuments() {\r\n        return this.trackedDocuments;\r\n    }\r\n    get AdditionalEnvironment() {\r\n        return { workspaceFolderBasename: this.Name };\r\n    }\r\n    getName(workspaceFolder) {\r\n        return workspaceFolder ? workspaceFolder.name : \"untitled\";\r\n    }\r\n    createLanguageClient(allClients, workspaceFolder) {\r\n        let serverModule = getLanguageServerFileName();\r\n        let exeExists = fs.existsSync(serverModule);\r\n        if (!exeExists) {\r\n            throw String('Missing binary at ' + serverModule);\r\n        }\r\n        let serverName = this.getName(workspaceFolder);\r\n        let serverOptions = {\r\n            run: { command: serverModule },\r\n            debug: { command: serverModule, args: [serverName] }\r\n        };\r\n        let settings = new settings_1.CppSettings(workspaceFolder ? workspaceFolder.uri : null);\r\n        let other = new settings_1.OtherSettings(workspaceFolder ? workspaceFolder.uri : null);\r\n        let storagePath = util.extensionContext.storagePath;\r\n        if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 1) {\r\n            storagePath = path.join(storagePath, serverName);\r\n        }\r\n        let abTestSettings = abTesting_1.getABTestSettings();\r\n        let intelliSenseCacheDisabled = false;\r\n        if (os.platform() === \"darwin\") {\r\n            const releaseParts = os.release().split(\".\");\r\n            if (releaseParts.length >= 1) {\r\n                intelliSenseCacheDisabled = parseInt(releaseParts[0]) < 17;\r\n            }\r\n        }\r\n        let clientOptions = {\r\n            documentSelector: [\r\n                { scheme: 'file', language: 'cpp' },\r\n                { scheme: 'file', language: 'c' }\r\n            ],\r\n            synchronize: {\r\n                configurationSection: ['C_Cpp', 'files', 'search']\r\n            },\r\n            workspaceFolder: workspaceFolder,\r\n            initializationOptions: {\r\n                clang_format_path: util.resolveVariables(settings.clangFormatPath, this.AdditionalEnvironment),\r\n                clang_format_style: settings.clangFormatStyle,\r\n                clang_format_fallbackStyle: settings.clangFormatFallbackStyle,\r\n                clang_format_sortIncludes: settings.clangFormatSortIncludes,\r\n                formatting: settings.formatting,\r\n                extension_path: util.extensionContext.extensionPath,\r\n                exclude_files: other.filesExclude,\r\n                exclude_search: other.searchExclude,\r\n                storage_path: storagePath,\r\n                tab_size: other.editorTabSize,\r\n                intelliSenseEngine: settings.intelliSenseEngine,\r\n                intelliSenseEngineFallback: settings.intelliSenseEngineFallback,\r\n                intelliSenseCacheDisabled: intelliSenseCacheDisabled,\r\n                intelliSenseCachePath: settings.intelliSenseCachePath,\r\n                intelliSenseCacheSize: settings.intelliSenseCacheSize,\r\n                autocomplete: settings.autoComplete,\r\n                errorSquiggles: settings.errorSquiggles,\r\n                dimInactiveRegions: settings.dimInactiveRegions,\r\n                suggestSnippets: settings.suggestSnippets,\r\n                loggingLevel: settings.loggingLevel,\r\n                workspaceParsingPriority: settings.workspaceParsingPriority,\r\n                workspaceSymbols: settings.workspaceSymbols,\r\n                exclusionPolicy: settings.exclusionPolicy,\r\n                preferredPathSeparator: settings.preferredPathSeparator,\r\n                default: {\r\n                    systemIncludePath: settings.defaultSystemIncludePath\r\n                },\r\n                vcpkg_root: util.getVcpkgRoot(),\r\n                gotoDefIntelliSense: abTestSettings.UseGoToDefIntelliSense\r\n            },\r\n            middleware: protocolFilter_1.createProtocolFilter(this, allClients),\r\n            errorHandler: {\r\n                error: () => vscode_languageclient_1.ErrorAction.Continue,\r\n                closed: () => {\r\n                    this.crashTimes.push(Date.now());\r\n                    if (this.crashTimes.length < 5) {\r\n                        let newClient = allClients.replace(this, true);\r\n                        newClient.crashTimes = this.crashTimes;\r\n                    }\r\n                    else {\r\n                        let elapsed = this.crashTimes[this.crashTimes.length - 1] - this.crashTimes[0];\r\n                        if (elapsed <= 3 * 60 * 1000) {\r\n                            if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 1) {\r\n                                vscode.window.showErrorMessage(`The language server for '${serverName}' crashed 5 times in the last 3 minutes. It will not be restarted.`);\r\n                            }\r\n                            else {\r\n                                vscode.window.showErrorMessage(`The language server crashed 5 times in the last 3 minutes. It will not be restarted.`);\r\n                            }\r\n                            allClients.replace(this, false);\r\n                        }\r\n                        else {\r\n                            this.crashTimes.shift();\r\n                            let newClient = allClients.replace(this, true);\r\n                            newClient.crashTimes = this.crashTimes;\r\n                        }\r\n                    }\r\n                    return vscode_languageclient_1.CloseAction.DoNotRestart;\r\n                }\r\n            }\r\n        };\r\n        return new vscode_languageclient_1.LanguageClient(`cpptools: ${serverName}`, serverOptions, clientOptions);\r\n    }\r\n    onDidChangeSettings() {\r\n        let changedSettings = this.settingsTracker.getChangedSettings();\r\n        if (Object.keys(changedSettings).length > 0) {\r\n            if (changedSettings[\"commentContinuationPatterns\"]) {\r\n                extension_1.updateLanguageConfigurations();\r\n            }\r\n            if (changedSettings[\"clang_format_path\"]) {\r\n                let settings = new settings_1.CppSettings(this.RootUri);\r\n                this.languageClient.sendNotification(UpdateClangFormatPathNotification, util.resolveVariables(settings.clangFormatPath, this.AdditionalEnvironment));\r\n            }\r\n            this.configuration.onDidChangeSettings();\r\n            telemetry.logLanguageServerEvent(\"CppSettingsChange\", changedSettings, null);\r\n        }\r\n        return changedSettings;\r\n    }\r\n    onDidChangeVisibleTextEditors(editors) {\r\n        let settings = new settings_1.CppSettings(this.RootUri);\r\n        if (settings.dimInactiveRegions) {\r\n            for (let e of editors) {\r\n                let valuePair = this.inactiveRegionsDecorations.get(e.document.uri.toString());\r\n                if (valuePair) {\r\n                    e.setDecorations(valuePair.decoration, valuePair.ranges);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onRegisterCustomConfigurationProvider(provider) {\r\n        let onRegistered = () => {\r\n            if (provider.version >= vscode_cpptools_1.Version.v2) {\r\n                this.pauseParsing();\r\n            }\r\n        };\r\n        return this.notifyWhenReady(() => {\r\n            if (!this.RootPath) {\r\n                return;\r\n            }\r\n            let selectedProvider = this.configuration.CurrentConfigurationProvider;\r\n            if (!selectedProvider) {\r\n                let ask = new persistentState_1.PersistentFolderState(\"Client.registerProvider\", true, this.RootPath);\r\n                if (ask.Value) {\r\n                    ui.showConfigureCustomProviderMessage(() => {\r\n                        let folderStr = (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 1) ? \"the '\" + this.Name + \"'\" : \"this\";\r\n                        const message = `${provider.name} would like to configure IntelliSense for ${folderStr} folder.`;\r\n                        const allow = \"Allow\";\r\n                        const dontAllow = \"Don't Allow\";\r\n                        const askLater = \"Ask Me Later\";\r\n                        return vscode.window.showInformationMessage(message, allow, dontAllow, askLater).then(result => {\r\n                            switch (result) {\r\n                                case allow: {\r\n                                    this.configuration.updateCustomConfigurationProvider(provider.extensionId).then(() => {\r\n                                        onRegistered();\r\n                                        telemetry.logLanguageServerEvent(\"customConfigurationProvider\", { \"providerId\": provider.extensionId });\r\n                                    });\r\n                                    ask.Value = false;\r\n                                    return true;\r\n                                }\r\n                                case dontAllow: {\r\n                                    ask.Value = false;\r\n                                    break;\r\n                                }\r\n                                default: {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            return false;\r\n                        });\r\n                    }, () => ask.Value = false);\r\n                }\r\n            }\r\n            else if (selectedProvider === provider.extensionId) {\r\n                onRegistered();\r\n                telemetry.logLanguageServerEvent(\"customConfigurationProvider\", { \"providerId\": provider.extensionId });\r\n            }\r\n            else if (selectedProvider === provider.name) {\r\n                onRegistered();\r\n                this.configuration.updateCustomConfigurationProvider(provider.extensionId);\r\n            }\r\n        });\r\n    }\r\n    updateCustomConfigurations(requestingProvider) {\r\n        return this.notifyWhenReady(() => {\r\n            if (!this.configurationProvider) {\r\n                return;\r\n            }\r\n            let currentProvider = customProviders_1.getCustomConfigProviders().get(this.configurationProvider);\r\n            if (!currentProvider || (requestingProvider && requestingProvider.extensionId !== currentProvider.extensionId) || this.trackedDocuments.size === 0) {\r\n                return;\r\n            }\r\n            let tokenSource = new vscode_1.CancellationTokenSource();\r\n            let documentUris = [];\r\n            this.trackedDocuments.forEach(document => documentUris.push(document.uri));\r\n            let task = () => {\r\n                return currentProvider.provideConfigurations(documentUris, tokenSource.token);\r\n            };\r\n            this.queueTaskWithTimeout(task, configProviderTimeout, tokenSource).then(configs => this.sendCustomConfigurations(configs), () => { });\r\n        });\r\n    }\r\n    updateCustomBrowseConfiguration(requestingProvider) {\r\n        return this.notifyWhenReady(() => {\r\n            if (!this.configurationProvider) {\r\n                return;\r\n            }\r\n            console.log(\"updateCustomBrowseConfiguration\");\r\n            let currentProvider = customProviders_1.getCustomConfigProviders().get(this.configurationProvider);\r\n            if (!currentProvider || (requestingProvider && requestingProvider.extensionId !== currentProvider.extensionId)) {\r\n                return;\r\n            }\r\n            let tokenSource = new vscode_1.CancellationTokenSource();\r\n            let task = () => __awaiter(this, void 0, void 0, function* () {\r\n                if (yield currentProvider.canProvideBrowseConfiguration(tokenSource.token)) {\r\n                    return currentProvider.provideBrowseConfiguration(tokenSource.token);\r\n                }\r\n                if (currentProvider.version >= vscode_cpptools_1.Version.v2) {\r\n                    console.warn(\"failed to provide browse configuration\");\r\n                }\r\n                return Promise.reject(\"\");\r\n            });\r\n            this.queueTaskWithTimeout(task, configProviderTimeout, tokenSource).then((config) => __awaiter(this, void 0, void 0, function* () {\r\n                yield this.sendCustomBrowseConfiguration(config);\r\n                this.resumeParsing();\r\n            }), () => { });\r\n        });\r\n    }\r\n    provideCustomConfiguration(document) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let tokenSource = new vscode_1.CancellationTokenSource();\r\n            let providers = customProviders_1.getCustomConfigProviders();\r\n            if (providers.size === 0) {\r\n                return Promise.resolve();\r\n            }\r\n            console.log(\"provideCustomConfiguration\");\r\n            let providerId = yield this.getCustomConfigurationProviderId();\r\n            if (!providerId) {\r\n                return Promise.resolve();\r\n            }\r\n            let providerName = providerId;\r\n            let configName = yield this.getCurrentConfigName();\r\n            const notReadyMessage = `${providerName} is not ready`;\r\n            let provideConfigurationAsync = () => __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    let provider = providers.get(providerId);\r\n                    if (provider) {\r\n                        if (!provider.isReady) {\r\n                            return Promise.reject(notReadyMessage);\r\n                        }\r\n                        providerName = provider.name;\r\n                        if (yield provider.canProvideConfiguration(document.uri, tokenSource.token)) {\r\n                            return provider.provideConfigurations([document.uri], tokenSource.token);\r\n                        }\r\n                    }\r\n                }\r\n                catch (err) {\r\n                }\r\n                console.warn(\"failed to provide configuration\");\r\n                return Promise.reject(\"\");\r\n            });\r\n            return this.queueTaskWithTimeout(provideConfigurationAsync, configProviderTimeout, tokenSource).then((configs) => {\r\n                if (configs && configs.length > 0) {\r\n                    this.sendCustomConfigurations(configs, true);\r\n                }\r\n            }, (err) => {\r\n                if (err === notReadyMessage) {\r\n                    return;\r\n                }\r\n                let settings = new settings_1.CppSettings(this.RootUri);\r\n                if (settings.configurationWarnings === \"Enabled\" && !this.isExternalHeader(document) && !vscode.debug.activeDebugSession) {\r\n                    const dismiss = \"Dismiss\";\r\n                    const disable = \"Disable Warnings\";\r\n                    let message = `'${providerName}' is unable to provide IntelliSense configuration information for '${document.uri.fsPath}'. ` +\r\n                        `Settings from the '${configName}' configuration will be used instead.`;\r\n                    if (err) {\r\n                        message += ` (${err})`;\r\n                    }\r\n                    vscode.window.showInformationMessage(message, dismiss, disable).then(response => {\r\n                        switch (response) {\r\n                            case disable: {\r\n                                settings.toggleSetting(\"configurationWarnings\", \"Enabled\", \"Disabled\");\r\n                                break;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    isExternalHeader(document) {\r\n        return util.isHeader(document) && !document.uri.toString().startsWith(this.RootUri.toString());\r\n    }\r\n    getCustomConfigurationProviderId() {\r\n        return this.queueTask(() => Promise.resolve(this.configuration.CurrentConfigurationProvider));\r\n    }\r\n    getCurrentConfigName() {\r\n        return this.queueTask(() => Promise.resolve(this.configuration.CurrentConfiguration.name));\r\n    }\r\n    getCompilerPath() {\r\n        return this.queueTask(() => Promise.resolve(this.configuration.CompilerPath));\r\n    }\r\n    getKnownCompilers() {\r\n        return this.queueTask(() => Promise.resolve(this.configuration.KnownCompiler));\r\n    }\r\n    takeOwnership(document) {\r\n        let params = {\r\n            textDocument: {\r\n                uri: document.uri.toString(),\r\n                languageId: document.languageId,\r\n                version: document.version,\r\n                text: document.getText()\r\n            }\r\n        };\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(DidOpenNotification, params));\r\n        this.trackedDocuments.add(document);\r\n    }\r\n    queueTask(task) {\r\n        if (this.isSupported) {\r\n            let nextTask = () => __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    return yield task();\r\n                }\r\n                catch (err) {\r\n                    console.error(err);\r\n                    throw err;\r\n                }\r\n            });\r\n            if (this.pendingTask && !this.pendingTask.Done) {\r\n                return this.pendingTask.then(nextTask, nextTask);\r\n            }\r\n            else {\r\n                this.pendingTask = undefined;\r\n                return nextTask();\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject(\"Unsupported client\");\r\n        }\r\n    }\r\n    queueBlockingTask(task) {\r\n        if (this.isSupported) {\r\n            this.pendingTask = new BlockingTask(task, this.pendingTask);\r\n        }\r\n        else {\r\n            return Promise.reject(\"Unsupported client\");\r\n        }\r\n    }\r\n    queueTaskWithTimeout(task, ms, cancelToken) {\r\n        let timer;\r\n        let timeout = () => new Promise((resolve, reject) => {\r\n            timer = setTimeout(() => {\r\n                clearTimeout(timer);\r\n                if (cancelToken) {\r\n                    cancelToken.cancel();\r\n                }\r\n                reject(\"Timed out in \" + ms + \"ms.\");\r\n            }, ms);\r\n        });\r\n        return this.queueTask(() => {\r\n            return Promise.race([task(), timeout()]).then((result) => {\r\n                clearTimeout(timer);\r\n                return result;\r\n            }, (error) => {\r\n                clearTimeout(timer);\r\n                throw error;\r\n            });\r\n        });\r\n    }\r\n    requestWhenReady(request) {\r\n        return this.queueTask(request);\r\n    }\r\n    notifyWhenReady(notify, blockingTask) {\r\n        let task = () => new Promise(resolve => {\r\n            notify();\r\n            resolve();\r\n        });\r\n        if (blockingTask) {\r\n            return this.queueBlockingTask(task);\r\n        }\r\n        else {\r\n            return this.queueTask(task);\r\n        }\r\n    }\r\n    registerNotifications() {\r\n        console.assert(this.languageClient !== undefined, \"This method must not be called until this.languageClient is set in \\\"onReady\\\"\");\r\n        this.languageClient.onNotification(ReloadWindowNotification, () => util.promptForReloadWindowDueToSettingsChange());\r\n        this.languageClient.onNotification(LogTelemetryNotification, (e) => this.logTelemetry(e));\r\n        this.languageClient.onNotification(ReportNavigationNotification, (e) => this.navigate(e));\r\n        this.languageClient.onNotification(ReportStatusNotification, (e) => this.updateStatus(e));\r\n        this.languageClient.onNotification(ReportTagParseStatusNotification, (e) => this.updateTagParseStatus(e));\r\n        this.languageClient.onNotification(InactiveRegionNotification, (e) => this.updateInactiveRegions(e));\r\n        this.languageClient.onNotification(CompileCommandsPathsNotification, (e) => this.promptCompileCommands(e));\r\n        this.setupOutputHandlers();\r\n    }\r\n    registerFileWatcher() {\r\n        console.assert(this.languageClient !== undefined, \"This method must not be called until this.languageClient is set in \\\"onReady\\\"\");\r\n        if (this.rootFolder) {\r\n            this.rootPathFileWatcher = vscode.workspace.createFileSystemWatcher(\"**/*\", false, true, false);\r\n            this.rootPathFileWatcher.onDidCreate((uri) => {\r\n                this.languageClient.sendNotification(FileCreatedNotification, { uri: uri.toString() });\r\n            });\r\n            this.rootPathFileWatcher.onDidDelete((uri) => {\r\n                this.languageClient.sendNotification(FileDeletedNotification, { uri: uri.toString() });\r\n            });\r\n            this.disposables.push(this.rootPathFileWatcher);\r\n        }\r\n        else {\r\n            this.rootPathFileWatcher = undefined;\r\n        }\r\n    }\r\n    setupOutputHandlers() {\r\n        console.assert(this.languageClient !== undefined, \"This method must not be called until this.languageClient is set in \\\"onReady\\\"\");\r\n        this.languageClient.onNotification(DebugProtocolNotification, (output) => {\r\n            if (!this.debugChannel) {\r\n                this.debugChannel = vscode.window.createOutputChannel(`C/C++ Debug Protocol: ${this.Name}`);\r\n                this.disposables.push(this.debugChannel);\r\n            }\r\n            this.debugChannel.appendLine(\"\");\r\n            this.debugChannel.appendLine(\"************************************************************************************************************************\");\r\n            this.debugChannel.append(`${output}`);\r\n        });\r\n        this.languageClient.onNotification(DebugLogNotification, (output) => {\r\n            if (!this.outputChannel) {\r\n                if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 1) {\r\n                    this.outputChannel = vscode.window.createOutputChannel(`C/C++: ${this.Name}`);\r\n                }\r\n                else {\r\n                    this.outputChannel = logger.getOutputChannel();\r\n                }\r\n                this.disposables.push(this.outputChannel);\r\n            }\r\n            this.outputChannel.appendLine(`${output}`);\r\n        });\r\n    }\r\n    logTelemetry(notificationBody) {\r\n        telemetry.logLanguageServerEvent(notificationBody.event, notificationBody.properties, notificationBody.metrics);\r\n    }\r\n    navigate(payload) {\r\n        let cppSettings = new settings_1.CppSettings(this.RootUri);\r\n        if (cppSettings.autoAddFileAssociations && payload.navigation.startsWith(\"<def\")) {\r\n            this.addFileAssociations(payload.navigation.substr(4));\r\n            return;\r\n        }\r\n        let currentNavigation = payload.navigation;\r\n        let maxLength = cppSettings.navigationLength;\r\n        if (currentNavigation.length > maxLength) {\r\n            currentNavigation = currentNavigation.substring(0, maxLength - 3).concat(\"...\");\r\n        }\r\n        this.model.navigationLocation.Value = currentNavigation;\r\n    }\r\n    addFileAssociations(fileAssociations) {\r\n        let settings = new settings_1.OtherSettings(this.RootUri);\r\n        let assocs = settings.filesAssociations;\r\n        let is_c = fileAssociations.startsWith(\"c\");\r\n        fileAssociations = fileAssociations.substr(is_c ? 3 : 2);\r\n        let filesAndPaths = fileAssociations.split(\";\");\r\n        let foundNewAssociation = false;\r\n        for (let i = 0; i < filesAndPaths.length - 1; ++i) {\r\n            let fileAndPath = filesAndPaths[i].split(\"@\");\r\n            let file = fileAndPath[0];\r\n            let filePath = fileAndPath[1];\r\n            if ((file in assocs) || ((\"**/\" + file) in assocs)) {\r\n                continue;\r\n            }\r\n            let j = file.lastIndexOf('.');\r\n            if (j !== -1) {\r\n                let ext = file.substr(j);\r\n                if (((\"*\" + ext) in assocs) || ((\"**/*\" + ext) in assocs)) {\r\n                    continue;\r\n                }\r\n            }\r\n            let foundGlobMatch = false;\r\n            for (let assoc in assocs) {\r\n                if (minimatch(filePath, assoc)) {\r\n                    foundGlobMatch = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (foundGlobMatch) {\r\n                continue;\r\n            }\r\n            assocs[file] = is_c ? \"c\" : \"cpp\";\r\n            foundNewAssociation = true;\r\n        }\r\n        if (foundNewAssociation) {\r\n            settings.filesAssociations = assocs;\r\n        }\r\n    }\r\n    updateStatus(notificationBody) {\r\n        let message = notificationBody.status;\r\n        util.setProgress(util.getProgressExecutableSuccess());\r\n        let testHook = testHook_1.getTestHook();\r\n        if (message.endsWith(\"Indexing...\")) {\r\n            this.model.isTagParsing.Value = true;\r\n            testHook.updateStatus(testApi_1.Status.TagParsingBegun);\r\n        }\r\n        else if (message.endsWith(\"Updating IntelliSense...\")) {\r\n            this.model.isUpdatingIntelliSense.Value = true;\r\n            testHook.updateStatus(testApi_1.Status.IntelliSenseCompiling);\r\n        }\r\n        else if (message.endsWith(\"IntelliSense Ready\")) {\r\n            this.model.isUpdatingIntelliSense.Value = false;\r\n            testHook.updateStatus(testApi_1.Status.IntelliSenseReady);\r\n        }\r\n        else if (message.endsWith(\"Ready\")) {\r\n            this.model.isTagParsing.Value = false;\r\n            testHook.updateStatus(testApi_1.Status.TagParsingDone);\r\n            util.setProgress(util.getProgressParseRootSuccess());\r\n        }\r\n        else if (message.endsWith(\"No Squiggles\")) {\r\n            util.setIntelliSenseProgress(util.getProgressIntelliSenseNoSquiggles());\r\n        }\r\n        else if (message.endsWith(\"IntelliSense Fallback\")) {\r\n            let showIntelliSenseFallbackMessage = new persistentState_1.PersistentState(\"CPP.showIntelliSenseFallbackMessage\", true);\r\n            if (showIntelliSenseFallbackMessage.Value) {\r\n                ui.showConfigureIncludePathMessage(() => {\r\n                    let learnMorePanel = \"Configuration Help\";\r\n                    let dontShowAgain = \"Don't Show Again\";\r\n                    let fallbackMsg = this.configuration.VcpkgInstalled ?\r\n                        \"Update your IntelliSense settings or use Vcpkg to install libraries to help find missing headers.\" :\r\n                        \"Configure your IntelliSense settings to help find missing headers.\";\r\n                    return vscode.window.showInformationMessage(fallbackMsg, learnMorePanel, dontShowAgain).then((value) => {\r\n                        switch (value) {\r\n                            case learnMorePanel:\r\n                                let uri = vscode.Uri.parse(`https://go.microsoft.com/fwlink/?linkid=864631`);\r\n                                vscode.commands.executeCommand('vscode.open', uri);\r\n                                vscode.commands.getCommands(true).then((commands) => {\r\n                                    if (commands.indexOf(\"workbench.action.problems.focus\") >= 0) {\r\n                                        vscode.commands.executeCommand(\"workbench.action.problems.focus\");\r\n                                    }\r\n                                });\r\n                                this.handleConfigurationEditCommand();\r\n                                break;\r\n                            case dontShowAgain:\r\n                                showIntelliSenseFallbackMessage.Value = false;\r\n                                break;\r\n                        }\r\n                        return true;\r\n                    });\r\n                }, () => showIntelliSenseFallbackMessage.Value = false);\r\n            }\r\n        }\r\n    }\r\n    updateTagParseStatus(notificationBody) {\r\n        this.model.tagParserStatus.Value = notificationBody.status;\r\n    }\r\n    updateInactiveRegions(params) {\r\n        let settings = new settings_1.CppSettings(this.RootUri);\r\n        let decoration = vscode.window.createTextEditorDecorationType({\r\n            opacity: settings.inactiveRegionOpacity.toString(),\r\n            backgroundColor: settings.inactiveRegionBackgroundColor,\r\n            color: settings.inactiveRegionForegroundColor,\r\n            rangeBehavior: vscode.DecorationRangeBehavior.ClosedOpen\r\n        });\r\n        let ranges = [];\r\n        params.regions.forEach(element => {\r\n            let newRange = new vscode.Range(element.startLine, 0, element.endLine, 0);\r\n            ranges.push(newRange);\r\n        });\r\n        let valuePair = this.inactiveRegionsDecorations.get(params.uri);\r\n        if (valuePair) {\r\n            valuePair.decoration.dispose();\r\n            valuePair.decoration = decoration;\r\n            valuePair.ranges = ranges;\r\n        }\r\n        else {\r\n            let toInsert = {\r\n                decoration: decoration,\r\n                ranges: ranges\r\n            };\r\n            this.inactiveRegionsDecorations.set(params.uri, toInsert);\r\n        }\r\n        if (settings.dimInactiveRegions) {\r\n            let editors = vscode.window.visibleTextEditors.filter(e => e.document.uri.toString() === params.uri);\r\n            for (let e of editors) {\r\n                e.setDecorations(decoration, ranges);\r\n            }\r\n        }\r\n    }\r\n    promptCompileCommands(params) {\r\n        if (this.configuration.CurrentConfiguration.compileCommands !== undefined) {\r\n            return;\r\n        }\r\n        let ask = new persistentState_1.PersistentState(\"CPP.showCompileCommandsSelection\", true);\r\n        if (!ask.Value) {\r\n            return;\r\n        }\r\n        let compileCommandStr = params.paths.length > 1 ? \"a compile_commands.json file\" : params.paths[0];\r\n        let folderStr = (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 1) ? \"the '\" + this.Name + \"'\" : \"this\";\r\n        const message = `Would you like to use ${compileCommandStr} to auto-configure IntelliSense for ${folderStr} folder?`;\r\n        ui.showConfigureCompileCommandsMessage(() => {\r\n            const yes = \"Yes\";\r\n            const no = \"No\";\r\n            const askLater = \"Ask Me Later\";\r\n            return vscode.window.showInformationMessage(message, yes, no, askLater).then((value) => __awaiter(this, void 0, void 0, function* () {\r\n                switch (value) {\r\n                    case yes:\r\n                        if (params.paths.length > 1) {\r\n                            let index = yield ui.showCompileCommands(params.paths);\r\n                            if (index < 0) {\r\n                                return false;\r\n                            }\r\n                            this.configuration.setCompileCommands(params.paths[index]);\r\n                        }\r\n                        else {\r\n                            this.configuration.setCompileCommands(params.paths[0]);\r\n                        }\r\n                        return true;\r\n                    case askLater:\r\n                        break;\r\n                    case no:\r\n                        ask.Value = false;\r\n                        break;\r\n                }\r\n                return false;\r\n            }));\r\n        }, () => ask.Value = false);\r\n    }\r\n    requestGoToDeclaration() {\r\n        return this.requestWhenReady(() => this.languageClient.sendRequest(GoToDeclarationRequest, null));\r\n    }\r\n    requestSwitchHeaderSource(rootPath, fileName) {\r\n        let params = {\r\n            rootPath: rootPath,\r\n            switchHeaderSourceFileName: fileName\r\n        };\r\n        return this.requestWhenReady(() => this.languageClient.sendRequest(SwitchHeaderSourceRequest, params));\r\n    }\r\n    requestNavigationList(document) {\r\n        return this.requestWhenReady(() => {\r\n            return this.languageClient.sendRequest(NavigationListRequest, this.languageClient.code2ProtocolConverter.asTextDocumentIdentifier(document));\r\n        });\r\n    }\r\n    activeDocumentChanged(document) {\r\n        this.notifyWhenReady(() => {\r\n            this.languageClient.sendNotification(ActiveDocumentChangeNotification, this.languageClient.code2ProtocolConverter.asTextDocumentIdentifier(document));\r\n        });\r\n    }\r\n    activate() {\r\n        for (let key in this.model) {\r\n            if (this.model.hasOwnProperty(key)) {\r\n                this.model[key].activate();\r\n            }\r\n        }\r\n        this.resumeParsing();\r\n    }\r\n    selectionChanged(selection) {\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(TextEditorSelectionChangeNotification, selection));\r\n    }\r\n    resetDatabase() {\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(ResetDatabaseNotification));\r\n    }\r\n    deactivate() {\r\n        for (let key in this.model) {\r\n            if (this.model.hasOwnProperty(key)) {\r\n                this.model[key].deactivate();\r\n            }\r\n        }\r\n        this.pauseParsing();\r\n    }\r\n    pauseParsing() {\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(PauseParsingNotification));\r\n    }\r\n    resumeParsing() {\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(ResumeParsingNotification));\r\n    }\r\n    onConfigurationsChanged(configurations) {\r\n        let params = {\r\n            configurations: configurations,\r\n            currentConfiguration: this.configuration.CurrentConfigurationIndex\r\n        };\r\n        this.notifyWhenReady(() => {\r\n            this.languageClient.sendNotification(ChangeFolderSettingsNotification, params);\r\n            this.model.activeConfigName.Value = configurations[params.currentConfiguration].name;\r\n        }).then(() => {\r\n            let newProvider = this.configuration.CurrentConfigurationProvider;\r\n            if (this.configurationProvider !== newProvider) {\r\n                this.configurationProvider = newProvider;\r\n                this.updateCustomConfigurations();\r\n                this.updateCustomBrowseConfiguration();\r\n            }\r\n        });\r\n    }\r\n    onSelectedConfigurationChanged(index) {\r\n        let params = {\r\n            currentConfiguration: index\r\n        };\r\n        this.notifyWhenReady(() => {\r\n            this.languageClient.sendNotification(ChangeSelectedSettingNotification, params);\r\n            this.model.activeConfigName.Value = this.configuration.ConfigurationNames[index];\r\n        });\r\n    }\r\n    onCompileCommandsChanged(path) {\r\n        let params = {\r\n            uri: path\r\n        };\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(ChangeCompileCommandsNotification, params));\r\n    }\r\n    isSourceFileConfigurationItem(input) {\r\n        return (input && (util.isString(input.uri) || util.isUri(input.uri)) &&\r\n            input.configuration && util.isArrayOfString(input.configuration.includePath) && util.isArrayOfString(input.configuration.defines) &&\r\n            util.isString(input.configuration.intelliSenseMode) && util.isString(input.configuration.standard) && util.isOptionalString(input.configuration.compilerPath) &&\r\n            util.isOptionalArrayOfString(input.configuration.forcedInclude));\r\n    }\r\n    sendCustomConfigurations(configs, blockingTask) {\r\n        if (!configs || !(configs instanceof Array)) {\r\n            console.warn(\"discarding invalid SourceFileConfigurationItems[]: \" + configs);\r\n            return;\r\n        }\r\n        let settings = new settings_1.CppSettings(this.RootUri);\r\n        let out = logger.getOutputChannelLogger();\r\n        if (settings.loggingLevel === \"Debug\") {\r\n            out.appendLine(\"Custom configurations received:\");\r\n        }\r\n        let sanitized = [];\r\n        configs.forEach(item => {\r\n            if (this.isSourceFileConfigurationItem(item)) {\r\n                sanitized.push({\r\n                    uri: item.uri.toString(),\r\n                    configuration: item.configuration\r\n                });\r\n                if (settings.loggingLevel === \"Debug\") {\r\n                    out.appendLine(`  uri: ${item.uri.toString()}`);\r\n                    out.appendLine(`  config: ${JSON.stringify(item.configuration, null, 2)}`);\r\n                }\r\n                if (item.configuration.includePath.some(path => path.endsWith('**'))) {\r\n                    console.warn(\"custom include paths should not use recursive includes ('**')\");\r\n                }\r\n            }\r\n            else {\r\n                console.warn(\"discarding invalid SourceFileConfigurationItem: \" + item);\r\n            }\r\n        });\r\n        if (sanitized.length === 0) {\r\n            return;\r\n        }\r\n        let params = {\r\n            configurationItems: sanitized\r\n        };\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(CustomConfigurationNotification, params), blockingTask);\r\n    }\r\n    sendCustomBrowseConfiguration(config) {\r\n        if (!config || config instanceof Array) {\r\n            console.warn(\"discarding invalid WorkspaceBrowseConfiguration: \" + config);\r\n            return Promise.resolve();\r\n        }\r\n        let sanitized = config;\r\n        if (!util.isArrayOfString(sanitized.browsePath) || !util.isOptionalString(sanitized.compilerPath) ||\r\n            !util.isOptionalString(sanitized.standard) || !util.isOptionalString(sanitized.windowsSdkVersion)) {\r\n            console.warn(\"discarding invalid WorkspaceBrowseConfiguration: \" + config);\r\n            return Promise.resolve();\r\n        }\r\n        let settings = new settings_1.CppSettings(this.RootUri);\r\n        let out = logger.getOutputChannelLogger();\r\n        if (settings.loggingLevel === \"Debug\") {\r\n            out.appendLine(`Custom browse configuration received: ${JSON.stringify(sanitized, null, 2)}`);\r\n        }\r\n        let params = {\r\n            browseConfiguration: sanitized\r\n        };\r\n        return this.notifyWhenReady(() => this.languageClient.sendNotification(CustomBrowseConfigurationNotification, params));\r\n    }\r\n    clearCustomConfigurations() {\r\n        this.notifyWhenReady(() => this.languageClient.sendNotification(ClearCustomConfigurationsNotification));\r\n    }\r\n    handleConfigurationSelectCommand() {\r\n        this.notifyWhenReady(() => {\r\n            ui.showConfigurations(this.configuration.ConfigurationNames)\r\n                .then((index) => {\r\n                if (index < 0) {\r\n                    return;\r\n                }\r\n                this.configuration.select(index);\r\n            });\r\n        });\r\n    }\r\n    handleConfigurationProviderSelectCommand() {\r\n        this.notifyWhenReady(() => {\r\n            ui.showConfigurationProviders(this.configuration.CurrentConfigurationProvider)\r\n                .then(extensionId => {\r\n                if (extensionId === undefined) {\r\n                    return;\r\n                }\r\n                this.configuration.updateCustomConfigurationProvider(extensionId)\r\n                    .then(() => {\r\n                    if (extensionId) {\r\n                        let provider = customProviders_1.getCustomConfigProviders().get(extensionId);\r\n                        this.updateCustomConfigurations(provider);\r\n                        this.updateCustomBrowseConfiguration(provider);\r\n                        telemetry.logLanguageServerEvent(\"customConfigurationProvider\", { \"providerId\": extensionId });\r\n                    }\r\n                    else {\r\n                        this.clearCustomConfigurations();\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleShowParsingCommands() {\r\n        this.notifyWhenReady(() => {\r\n            ui.showParsingCommands()\r\n                .then((index) => {\r\n                if (index === 0) {\r\n                    this.pauseParsing();\r\n                }\r\n                else if (index === 1) {\r\n                    this.resumeParsing();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    handleConfigurationEditCommand() {\r\n        this.notifyWhenReady(() => this.configuration.handleConfigurationEditCommand(vscode.window.showTextDocument));\r\n    }\r\n    handleAddToIncludePathCommand(path) {\r\n        this.notifyWhenReady(() => this.configuration.addToIncludePathCommand(path));\r\n    }\r\n    onInterval() {\r\n        if (this.languageClient !== undefined && this.configuration !== undefined) {\r\n            this.languageClient.sendNotification(IntervalTimerNotification);\r\n            this.configuration.checkCppProperties();\r\n        }\r\n    }\r\n    dispose() {\r\n        let promise = (this.languageClient) ? this.languageClient.stop() : Promise.resolve();\r\n        return promise.then(() => {\r\n            this.disposables.forEach((d) => d.dispose());\r\n            this.disposables = [];\r\n            for (let key in this.model) {\r\n                if (this.model.hasOwnProperty(key)) {\r\n                    this.model[key].dispose();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction getLanguageServerFileName() {\r\n    let extensionProcessName = 'Microsoft.VSCode.CPP.Extension';\r\n    let plat = process.platform;\r\n    if (plat === 'linux') {\r\n        extensionProcessName += '.linux';\r\n    }\r\n    else if (plat === 'darwin') {\r\n        extensionProcessName += '.darwin';\r\n    }\r\n    else if (plat === 'win32') {\r\n        extensionProcessName += '.exe';\r\n    }\r\n    else {\r\n        throw \"Invalid Platform\";\r\n    }\r\n    return path.resolve(util.getExtensionFilePath(\"bin\"), extensionProcessName);\r\n}\r\nclass NullClient {\r\n    constructor() {\r\n        this.booleanEvent = new vscode.EventEmitter();\r\n        this.stringEvent = new vscode.EventEmitter();\r\n        this.RootPath = \"/\";\r\n        this.RootUri = vscode.Uri.file(\"/\");\r\n        this.Name = \"(empty)\";\r\n        this.TrackedDocuments = new Set();\r\n    }\r\n    get TagParsingChanged() { return this.booleanEvent.event; }\r\n    get IntelliSenseParsingChanged() { return this.booleanEvent.event; }\r\n    get NavigationLocationChanged() { return this.stringEvent.event; }\r\n    get TagParserStatusChanged() { return this.stringEvent.event; }\r\n    get ActiveConfigChanged() { return this.stringEvent.event; }\r\n    onDidChangeSettings() { return {}; }\r\n    onDidChangeVisibleTextEditors(editors) { }\r\n    onRegisterCustomConfigurationProvider(provider) { return Promise.resolve(); }\r\n    updateCustomConfigurations(requestingProvider) { return Promise.resolve(); }\r\n    updateCustomBrowseConfiguration(requestingProvider) { return Promise.resolve(); }\r\n    provideCustomConfiguration(document) { return Promise.resolve(); }\r\n    getCurrentConfigName() { return Promise.resolve(\"\"); }\r\n    getCompilerPath() { return Promise.resolve(\"\"); }\r\n    getKnownCompilers() { return Promise.resolve([]); }\r\n    takeOwnership(document) { }\r\n    queueTask(task) { return task(); }\r\n    requestWhenReady(request) { return; }\r\n    notifyWhenReady(notify) { }\r\n    requestGoToDeclaration() { return Promise.resolve(); }\r\n    requestSwitchHeaderSource(rootPath, fileName) { return Promise.resolve(\"\"); }\r\n    requestNavigationList(document) { return Promise.resolve(\"\"); }\r\n    activeDocumentChanged(document) { }\r\n    activate() { }\r\n    selectionChanged(selection) { }\r\n    resetDatabase() { }\r\n    deactivate() { }\r\n    pauseParsing() { }\r\n    resumeParsing() { }\r\n    handleConfigurationSelectCommand() { }\r\n    handleConfigurationProviderSelectCommand() { }\r\n    handleShowParsingCommands() { }\r\n    handleConfigurationEditCommand() { }\r\n    handleAddToIncludePathCommand(path) { }\r\n    onInterval() { }\r\n    dispose() {\r\n        this.booleanEvent.dispose();\r\n        this.stringEvent.dispose();\r\n        return Promise.resolve();\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LanguageServer/client.ts\n");

/***/ }),

/***/ "./src/LanguageServer/clientCollection.ts":
/*!************************************************!*\
  !*** ./src/LanguageServer/clientCollection.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst telemetry = __webpack_require__(/*! ../telemetry */ \"./src/telemetry.ts\");\r\nconst cpptools = __webpack_require__(/*! ./client */ \"./src/LanguageServer/client.ts\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst customProviders_1 = __webpack_require__(/*! ./customProviders */ \"./src/LanguageServer/customProviders.ts\");\r\nconst defaultClientKey = \"@@default@@\";\r\nclass ClientCollection {\r\n    constructor() {\r\n        this.disposables = [];\r\n        this.languageClients = new Map();\r\n        let key = defaultClientKey;\r\n        if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {\r\n            let folder = vscode.workspace.workspaceFolders[0];\r\n            key = util.asFolder(folder.uri);\r\n            this.activeClient = cpptools.createClient(this, folder);\r\n        }\r\n        else {\r\n            this.activeClient = cpptools.createClient(this);\r\n        }\r\n        this.defaultClient = this.activeClient;\r\n        this.languageClients.set(key, this.activeClient);\r\n        this.disposables.push(vscode.workspace.onDidChangeWorkspaceFolders(e => this.onDidChangeWorkspaceFolders(e)));\r\n        this.disposables.push(vscode.workspace.onDidOpenTextDocument(d => this.onDidOpenTextDocument(d)));\r\n        this.disposables.push(vscode.workspace.onDidCloseTextDocument(d => this.onDidCloseTextDocument(d)));\r\n    }\r\n    get ActiveClient() { return this.activeClient; }\r\n    get Names() {\r\n        let result = [];\r\n        this.languageClients.forEach((client, key) => {\r\n            result.push({ name: client.Name, key: key });\r\n        });\r\n        return result;\r\n    }\r\n    get Count() { return this.languageClients.size; }\r\n    activeDocumentChanged(document) {\r\n        this.activeDocument = document;\r\n        let activeClient = this.getClientFor(document.uri);\r\n        activeClient.activeDocumentChanged(document);\r\n        if (activeClient !== this.activeClient) {\r\n            activeClient.activate();\r\n            this.activeClient.deactivate();\r\n            this.activeClient = activeClient;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (this.languageClients.has(key)) {\r\n            return this.languageClients.get(key);\r\n        }\r\n        console.assert(\"key not found\");\r\n        return null;\r\n    }\r\n    forEach(callback) {\r\n        this.languageClients.forEach(callback);\r\n    }\r\n    checkOwnership(client, document) {\r\n        let owners = [];\r\n        this.languageClients.forEach(languageClient => {\r\n            if (document.uri.fsPath.startsWith(languageClient.RootPath + path.sep)) {\r\n                owners.push(languageClient);\r\n            }\r\n        });\r\n        if (owners.length === 0) {\r\n            owners.push(this.activeClient);\r\n        }\r\n        return (owners[0] === client);\r\n    }\r\n    replace(client, transferFileOwnership) {\r\n        let key = undefined;\r\n        for (let pair of this.languageClients) {\r\n            if (pair[1] === client) {\r\n                key = pair[0];\r\n                break;\r\n            }\r\n        }\r\n        if (key) {\r\n            this.languageClients.delete(key);\r\n            if (transferFileOwnership) {\r\n                client.TrackedDocuments.forEach(document => this.transferOwnership(document, client));\r\n                client.TrackedDocuments.clear();\r\n            }\r\n            else {\r\n                this.languageClients.set(key, cpptools.createNullClient());\r\n            }\r\n            if (this.activeClient === client && this.activeDocument) {\r\n                this.activeClient = this.getClientFor(this.activeDocument.uri);\r\n                this.activeClient.activeDocumentChanged(this.activeDocument);\r\n            }\r\n            client.dispose();\r\n            return this.languageClients.get(key);\r\n        }\r\n        else {\r\n            console.assert(key, \"unable to locate language client\");\r\n            return null;\r\n        }\r\n    }\r\n    onDidChangeWorkspaceFolders(e) {\r\n        let folderCount = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders.length : 0;\r\n        if (folderCount > 1) {\r\n            telemetry.logLanguageServerEvent(\"workspaceFoldersChange\", { \"count\": folderCount.toString() });\r\n        }\r\n        if (e !== undefined) {\r\n            e.removed.forEach(folder => {\r\n                let path = util.asFolder(folder.uri);\r\n                let client = this.languageClients.get(path);\r\n                if (client) {\r\n                    this.languageClients.delete(path);\r\n                    client.TrackedDocuments.forEach(document => this.transferOwnership(document, client));\r\n                    client.TrackedDocuments.clear();\r\n                    if (this.activeClient === client && this.activeDocument) {\r\n                        this.activeClient = this.getClientFor(this.activeDocument.uri);\r\n                        this.activeClient.activeDocumentChanged(this.activeDocument);\r\n                    }\r\n                    client.dispose();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    transferOwnership(document, oldOwner) {\r\n        let newOwner = this.getClientFor(document.uri);\r\n        console.assert(newOwner !== oldOwner, \"'oldOwner' should not be in the list of clients to consider\");\r\n        newOwner.takeOwnership(document);\r\n    }\r\n    onDidOpenTextDocument(document) {\r\n        if (document.languageId === \"c\" || document.languageId === \"cpp\"\r\n            || document.languageId === \"json\" && document.uri.fsPath.endsWith(\"c_cpp_properties.json\")) {\r\n            this.getClientFor(document.uri);\r\n        }\r\n    }\r\n    getClientFor(uri) {\r\n        let folder = vscode.workspace.getWorkspaceFolder(uri);\r\n        if (!folder) {\r\n            return this.defaultClient;\r\n        }\r\n        else {\r\n            let key = util.asFolder(folder.uri);\r\n            if (!this.languageClients.has(key)) {\r\n                let newClient = cpptools.createClient(this, folder);\r\n                this.languageClients.set(key, newClient);\r\n                customProviders_1.getCustomConfigProviders().forEach(provider => newClient.onRegisterCustomConfigurationProvider(provider));\r\n            }\r\n            return this.languageClients.get(key);\r\n        }\r\n    }\r\n    onDidCloseTextDocument(document) {\r\n    }\r\n    dispose() {\r\n        let promises = [];\r\n        this.defaultClient = undefined;\r\n        this.languageClients.forEach(client => promises.push(client.dispose()));\r\n        this.languageClients.clear();\r\n        return Promise.all(promises).then(() => undefined);\r\n    }\r\n}\r\nexports.ClientCollection = ClientCollection;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LanguageServer/clientCollection.ts\n");

/***/ }),

/***/ "./src/LanguageServer/configurations.ts":
/*!**********************************************!*\
  !*** ./src/LanguageServer/configurations.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst telemetry = __webpack_require__(/*! ../telemetry */ \"./src/telemetry.ts\");\r\nconst persistentState_1 = __webpack_require__(/*! ./persistentState */ \"./src/LanguageServer/persistentState.ts\");\r\nconst settings_1 = __webpack_require__(/*! ./settings */ \"./src/LanguageServer/settings.ts\");\r\nconst abTesting_1 = __webpack_require__(/*! ../abTesting */ \"./src/abTesting.ts\");\r\nconst customProviders_1 = __webpack_require__(/*! ./customProviders */ \"./src/LanguageServer/customProviders.ts\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst configVersion = 4;\r\nfunction getDefaultConfig() {\r\n    if (process.platform === 'darwin') {\r\n        return { name: \"Mac\" };\r\n    }\r\n    else if (process.platform === 'win32') {\r\n        return { name: \"Win32\" };\r\n    }\r\n    else {\r\n        return { name: \"Linux\" };\r\n    }\r\n}\r\nfunction getDefaultCppProperties() {\r\n    return {\r\n        configurations: [getDefaultConfig()],\r\n        version: configVersion\r\n    };\r\n}\r\nclass CppProperties {\r\n    constructor(rootUri) {\r\n        this.propertiesFile = undefined;\r\n        this.configurationJson = null;\r\n        this.configFileWatcher = null;\r\n        this.configFileWatcherFallbackTime = new Date();\r\n        this.compileCommandFileWatchers = [];\r\n        this.defaultCompilerPath = null;\r\n        this.knownCompilers = null;\r\n        this.defaultCStandard = null;\r\n        this.defaultCppStandard = null;\r\n        this.defaultIncludes = null;\r\n        this.defaultFrameworks = null;\r\n        this.defaultWindowsSdkVersion = null;\r\n        this.vcpkgIncludes = [];\r\n        this.vcpkgPathReady = false;\r\n        this.defaultIntelliSenseMode = null;\r\n        this.configurationGlobPattern = \"c_cpp_properties.json\";\r\n        this.disposables = [];\r\n        this.configurationsChanged = new vscode.EventEmitter();\r\n        this.selectionChanged = new vscode.EventEmitter();\r\n        this.compileCommandsChanged = new vscode.EventEmitter();\r\n        this.prevSquiggleMetrics = new Map();\r\n        this.rootfs = null;\r\n        this.configurationIncomplete = true;\r\n        console.assert(rootUri !== undefined);\r\n        this.rootUri = rootUri;\r\n        let rootPath = rootUri ? rootUri.fsPath : \"\";\r\n        this.currentConfigurationIndex = new persistentState_1.PersistentFolderState(\"CppProperties.currentConfigurationIndex\", -1, rootPath);\r\n        this.configFolder = path.join(rootPath, \".vscode\");\r\n        this.diagnosticCollection = vscode.languages.createDiagnosticCollection(rootPath);\r\n        this.buildVcpkgIncludePath();\r\n        this.disposables.push(vscode.Disposable.from(this.configurationsChanged, this.selectionChanged, this.compileCommandsChanged));\r\n    }\r\n    get ConfigurationsChanged() { return this.configurationsChanged.event; }\r\n    get SelectionChanged() { return this.selectionChanged.event; }\r\n    get CompileCommandsChanged() { return this.compileCommandsChanged.event; }\r\n    get Configurations() { return this.configurationJson ? this.configurationJson.configurations : null; }\r\n    get CurrentConfigurationIndex() { return this.currentConfigurationIndex.Value; }\r\n    get CurrentConfiguration() { return this.Configurations ? this.Configurations[this.CurrentConfigurationIndex] : null; }\r\n    get CompilerPath() { return this.CurrentConfiguration ? this.CurrentConfiguration.compilerPath : null; }\r\n    get KnownCompiler() { return this.knownCompilers; }\r\n    get CurrentConfigurationProvider() {\r\n        if (this.CurrentConfiguration.configurationProvider) {\r\n            return this.CurrentConfiguration.configurationProvider;\r\n        }\r\n        return new settings_1.CppSettings(this.rootUri).defaultConfigurationProvider;\r\n    }\r\n    get ConfigurationNames() {\r\n        let result = [];\r\n        this.configurationJson.configurations.forEach((config) => result.push(config.name));\r\n        return result;\r\n    }\r\n    set CompilerDefaults(compilerDefaults) {\r\n        this.defaultCompilerPath = compilerDefaults.compilerPath;\r\n        this.knownCompilers = compilerDefaults.knownCompilers;\r\n        this.defaultCStandard = compilerDefaults.cStandard;\r\n        this.defaultCppStandard = compilerDefaults.cppStandard;\r\n        this.defaultIncludes = compilerDefaults.includes;\r\n        this.defaultFrameworks = compilerDefaults.frameworks;\r\n        this.defaultWindowsSdkVersion = compilerDefaults.windowsSdkVersion;\r\n        this.defaultIntelliSenseMode = compilerDefaults.intelliSenseMode;\r\n        this.rootfs = compilerDefaults.rootfs;\r\n        let configFilePath = path.join(this.configFolder, \"c_cpp_properties.json\");\r\n        if (fs.existsSync(configFilePath)) {\r\n            this.propertiesFile = vscode.Uri.file(configFilePath);\r\n        }\r\n        else {\r\n            this.propertiesFile = null;\r\n        }\r\n        this.configFileWatcher = vscode.workspace.createFileSystemWatcher(path.join(this.configFolder, this.configurationGlobPattern));\r\n        this.disposables.push(this.configFileWatcher);\r\n        this.configFileWatcher.onDidCreate((uri) => {\r\n            this.propertiesFile = uri;\r\n            this.handleConfigurationChange();\r\n        });\r\n        this.configFileWatcher.onDidDelete(() => {\r\n            this.propertiesFile = null;\r\n            this.resetToDefaultSettings(true);\r\n            this.handleConfigurationChange();\r\n        });\r\n        this.configFileWatcher.onDidChange(() => {\r\n            this.handleConfigurationChange();\r\n        });\r\n        this.handleConfigurationChange();\r\n    }\r\n    get VcpkgInstalled() {\r\n        return this.vcpkgIncludes.length > 0;\r\n    }\r\n    onConfigurationsChanged() {\r\n        this.configurationsChanged.fire(this.Configurations);\r\n    }\r\n    onSelectionChanged() {\r\n        this.selectionChanged.fire(this.CurrentConfigurationIndex);\r\n        this.handleSquiggles();\r\n    }\r\n    onCompileCommandsChanged(path) {\r\n        this.compileCommandsChanged.fire(path);\r\n    }\r\n    onDidChangeSettings() {\r\n        if (!this.propertiesFile) {\r\n            this.resetToDefaultSettings(true);\r\n            this.handleConfigurationChange();\r\n        }\r\n        else if (!this.configurationIncomplete) {\r\n            this.handleConfigurationChange();\r\n        }\r\n    }\r\n    resetToDefaultSettings(resetIndex) {\r\n        this.configurationJson = getDefaultCppProperties();\r\n        if (resetIndex || this.CurrentConfigurationIndex < 0 ||\r\n            this.CurrentConfigurationIndex >= this.configurationJson.configurations.length) {\r\n            this.currentConfigurationIndex.Value = this.getConfigIndexForPlatform(this.configurationJson);\r\n        }\r\n        this.configurationIncomplete = true;\r\n    }\r\n    applyDefaultIncludePathsAndFrameworks() {\r\n        if (this.configurationIncomplete && this.defaultIncludes && this.defaultFrameworks && this.vcpkgPathReady) {\r\n            let configuration = this.CurrentConfiguration;\r\n            let settings = new settings_1.CppSettings(this.rootUri);\r\n            let isUnset = (input) => {\r\n                return input === null;\r\n            };\r\n            if (isUnset(settings.defaultIncludePath)) {\r\n                let abTestSettings = abTesting_1.getABTestSettings();\r\n                let rootFolder = abTestSettings.UseRecursiveIncludes ? \"${workspaceFolder}/**\" : \"${workspaceFolder}\";\r\n                configuration.includePath = [rootFolder].concat(this.vcpkgIncludes);\r\n            }\r\n            if (isUnset(settings.defaultDefines)) {\r\n                configuration.defines = (process.platform === 'win32') ? [\"_DEBUG\", \"UNICODE\", \"_UNICODE\"] : [];\r\n            }\r\n            if (isUnset(settings.defaultMacFrameworkPath) && process.platform === 'darwin') {\r\n                configuration.macFrameworkPath = this.defaultFrameworks;\r\n            }\r\n            if (isUnset(settings.defaultWindowsSdkVersion) && this.defaultWindowsSdkVersion && process.platform === 'win32') {\r\n                configuration.windowsSdkVersion = this.defaultWindowsSdkVersion;\r\n            }\r\n            if (isUnset(settings.defaultCompilerPath) && this.defaultCompilerPath &&\r\n                isUnset(settings.defaultCompileCommands) && !configuration.compileCommands) {\r\n                configuration.compilerPath = this.defaultCompilerPath;\r\n            }\r\n            if (this.knownCompilers) {\r\n                configuration.knownCompilers = this.knownCompilers;\r\n            }\r\n            if (isUnset(settings.defaultCStandard) && this.defaultCStandard) {\r\n                configuration.cStandard = this.defaultCStandard;\r\n            }\r\n            if (isUnset(settings.defaultCppStandard) && this.defaultCppStandard) {\r\n                configuration.cppStandard = this.defaultCppStandard;\r\n            }\r\n            if (isUnset(settings.defaultIntelliSenseMode)) {\r\n                configuration.intelliSenseMode = this.defaultIntelliSenseMode;\r\n            }\r\n            this.configurationIncomplete = false;\r\n        }\r\n    }\r\n    get ExtendedEnvironment() {\r\n        let result = {};\r\n        if (this.configurationJson.env) {\r\n            Object.assign(result, this.configurationJson.env);\r\n        }\r\n        result[\"workspaceFolderBasename\"] = this.rootUri ? path.basename(this.rootUri.fsPath) : \"\";\r\n        return result;\r\n    }\r\n    buildVcpkgIncludePath() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let vcpkgRoot = util.getVcpkgRoot();\r\n                if (vcpkgRoot) {\r\n                    let list = yield util.readDir(vcpkgRoot);\r\n                    if (list !== undefined) {\r\n                        list.forEach((entry) => {\r\n                            if (entry !== \"vcpkg\") {\r\n                                let pathToCheck = path.join(vcpkgRoot, entry);\r\n                                if (fs.existsSync(pathToCheck)) {\r\n                                    let p = path.join(pathToCheck, \"include\");\r\n                                    if (fs.existsSync(p)) {\r\n                                        p = p.replace(/\\\\/g, \"/\");\r\n                                        p = p.replace(vcpkgRoot, \"${vcpkgRoot}\");\r\n                                        this.vcpkgIncludes.push(p);\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            catch (error) { }\r\n            finally {\r\n                this.vcpkgPathReady = true;\r\n                this.handleConfigurationChange();\r\n            }\r\n        });\r\n    }\r\n    getConfigIndexForPlatform(config) {\r\n        let plat;\r\n        if (process.platform === 'darwin') {\r\n            plat = \"Mac\";\r\n        }\r\n        else if (process.platform === 'win32') {\r\n            plat = \"Win32\";\r\n        }\r\n        else {\r\n            plat = \"Linux\";\r\n        }\r\n        for (let i = 0; i < this.configurationJson.configurations.length; i++) {\r\n            if (config.configurations[i].name === plat) {\r\n                return i;\r\n            }\r\n        }\r\n        return this.configurationJson.configurations.length - 1;\r\n    }\r\n    getIntelliSenseModeForPlatform(name) {\r\n        if (name === \"Linux\") {\r\n            return \"gcc-x64\";\r\n        }\r\n        else if (name === \"Mac\") {\r\n            return \"clang-x64\";\r\n        }\r\n        else if (name === \"Win32\") {\r\n            return \"msvc-x64\";\r\n        }\r\n        else if (process.platform === 'win32') {\r\n            return \"msvc-x64\";\r\n        }\r\n        else if (process.platform === 'darwin') {\r\n            return \"clang-x64\";\r\n        }\r\n        else {\r\n            return \"gcc-x64\";\r\n        }\r\n    }\r\n    addToIncludePathCommand(path) {\r\n        this.handleConfigurationEditCommand((document) => {\r\n            telemetry.logLanguageServerEvent(\"addToIncludePath\");\r\n            this.parsePropertiesFile();\r\n            let config = this.CurrentConfiguration;\r\n            if (config.includePath === undefined) {\r\n                config.includePath = [\"${default}\"];\r\n            }\r\n            config.includePath.splice(config.includePath.length, 0, path);\r\n            fs.writeFileSync(this.propertiesFile.fsPath, JSON.stringify(this.configurationJson, null, 4));\r\n            this.handleConfigurationChange();\r\n        });\r\n    }\r\n    updateCustomConfigurationProvider(providerId) {\r\n        return new Promise((resolve) => {\r\n            if (this.propertiesFile) {\r\n                this.handleConfigurationEditCommand((document) => {\r\n                    this.parsePropertiesFile();\r\n                    let config = this.CurrentConfiguration;\r\n                    if (providerId) {\r\n                        config.configurationProvider = providerId;\r\n                    }\r\n                    else {\r\n                        delete config.configurationProvider;\r\n                    }\r\n                    fs.writeFileSync(this.propertiesFile.fsPath, JSON.stringify(this.configurationJson, null, 4));\r\n                    this.handleConfigurationChange();\r\n                    resolve();\r\n                });\r\n            }\r\n            else {\r\n                let settings = new settings_1.CppSettings(this.rootUri);\r\n                if (providerId) {\r\n                    settings.update(\"default.configurationProvider\", providerId);\r\n                }\r\n                else {\r\n                    settings.update(\"default.configurationProvider\", undefined);\r\n                }\r\n                this.CurrentConfiguration.configurationProvider = providerId;\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n    setCompileCommands(path) {\r\n        this.handleConfigurationEditCommand((document) => {\r\n            this.parsePropertiesFile();\r\n            let config = this.CurrentConfiguration;\r\n            config.compileCommands = path;\r\n            fs.writeFileSync(this.propertiesFile.fsPath, JSON.stringify(this.configurationJson, null, 4));\r\n            this.handleConfigurationChange();\r\n        });\r\n    }\r\n    select(index) {\r\n        if (index === this.configurationJson.configurations.length) {\r\n            this.handleConfigurationEditCommand(vscode.window.showTextDocument);\r\n            return;\r\n        }\r\n        this.currentConfigurationIndex.Value = index;\r\n        this.onSelectionChanged();\r\n    }\r\n    resolveDefaults(entries, defaultValue) {\r\n        let result = [];\r\n        entries.forEach(entry => {\r\n            if (entry === \"${default}\") {\r\n                if (defaultValue !== null) {\r\n                    result = result.concat(defaultValue);\r\n                }\r\n            }\r\n            else {\r\n                result.push(entry);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    resolveAndSplit(paths, defaultValue, env) {\r\n        let result = [];\r\n        if (paths) {\r\n            paths.forEach(entry => {\r\n                let entries = util.resolveVariables(entry, env).split(\";\").filter(e => e);\r\n                entries = this.resolveDefaults(entries, defaultValue);\r\n                result = result.concat(entries);\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    resolveVariables(input, defaultValue, env) {\r\n        if (input === undefined || input === \"${default}\") {\r\n            input = defaultValue;\r\n        }\r\n        if (typeof input === \"boolean\") {\r\n            return input;\r\n        }\r\n        return util.resolveVariables(input, env);\r\n    }\r\n    updateConfiguration(property, defaultValue, env) {\r\n        if (util.isString(property) || util.isString(defaultValue)) {\r\n            return this.resolveVariables(property, defaultValue, env);\r\n        }\r\n        else if (util.isBoolean(property) || util.isBoolean(defaultValue)) {\r\n            return this.resolveVariables(property, defaultValue, env);\r\n        }\r\n        else if (util.isArrayOfString(property) || util.isArrayOfString(defaultValue)) {\r\n            if (property) {\r\n                return this.resolveAndSplit(property, defaultValue, env);\r\n            }\r\n            else if (property === undefined && defaultValue) {\r\n                return this.resolveAndSplit(defaultValue, [], env);\r\n            }\r\n        }\r\n        return property;\r\n    }\r\n    updateServerOnFolderSettingsChange() {\r\n        if (!this.configurationJson) {\r\n            return;\r\n        }\r\n        let settings = new settings_1.CppSettings(this.rootUri);\r\n        let env = this.ExtendedEnvironment;\r\n        for (let i = 0; i < this.configurationJson.configurations.length; i++) {\r\n            let configuration = this.configurationJson.configurations[i];\r\n            configuration.includePath = this.updateConfiguration(configuration.includePath, settings.defaultIncludePath, env);\r\n            configuration.defines = this.updateConfiguration(configuration.defines, settings.defaultDefines, env);\r\n            configuration.macFrameworkPath = this.updateConfiguration(configuration.macFrameworkPath, settings.defaultMacFrameworkPath, env);\r\n            configuration.windowsSdkVersion = this.updateConfiguration(configuration.windowsSdkVersion, settings.defaultWindowsSdkVersion, env);\r\n            configuration.forcedInclude = this.updateConfiguration(configuration.forcedInclude, settings.defaultForcedInclude, env);\r\n            configuration.compileCommands = this.updateConfiguration(configuration.compileCommands, settings.defaultCompileCommands, env);\r\n            configuration.compilerPath = this.updateConfiguration(configuration.compilerPath, settings.defaultCompilerPath, env);\r\n            configuration.cStandard = this.updateConfiguration(configuration.cStandard, settings.defaultCStandard, env);\r\n            configuration.cppStandard = this.updateConfiguration(configuration.cppStandard, settings.defaultCppStandard, env);\r\n            configuration.intelliSenseMode = this.updateConfiguration(configuration.intelliSenseMode, settings.defaultIntelliSenseMode, env);\r\n            configuration.configurationProvider = this.updateConfiguration(configuration.configurationProvider, settings.defaultConfigurationProvider, env);\r\n            if (!configuration.browse) {\r\n                configuration.browse = {};\r\n            }\r\n            if (!configuration.browse.path) {\r\n                if (settings.defaultBrowsePath) {\r\n                    configuration.browse.path = settings.defaultBrowsePath;\r\n                }\r\n                else if (configuration.includePath) {\r\n                    configuration.browse.path = configuration.includePath.slice(0);\r\n                    if (-1 === configuration.includePath.findIndex((value, index) => {\r\n                        return !!value.match(/^\\$\\{(workspaceRoot|workspaceFolder)\\}(\\\\\\*{0,2}|\\/\\*{0,2})?$/g);\r\n                    })) {\r\n                        configuration.browse.path.push(\"${workspaceFolder}\");\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                configuration.browse.path = this.updateConfiguration(configuration.browse.path, settings.defaultBrowsePath, env);\r\n            }\r\n            configuration.browse.limitSymbolsToIncludedHeaders = this.updateConfiguration(configuration.browse.limitSymbolsToIncludedHeaders, settings.defaultLimitSymbolsToIncludedHeaders, env);\r\n            configuration.browse.databaseFilename = this.updateConfiguration(configuration.browse.databaseFilename, settings.defaultDatabaseFilename, env);\r\n        }\r\n        this.updateCompileCommandsFileWatchers();\r\n        if (!this.configurationIncomplete) {\r\n            this.onConfigurationsChanged();\r\n        }\r\n    }\r\n    updateCompileCommandsFileWatchers() {\r\n        this.compileCommandFileWatchers.forEach((watcher) => watcher.close());\r\n        this.compileCommandFileWatchers = [];\r\n        let filePaths = new Set();\r\n        this.configurationJson.configurations.forEach(c => {\r\n            if (c.compileCommands !== undefined && fs.existsSync(c.compileCommands)) {\r\n                filePaths.add(c.compileCommands);\r\n            }\r\n        });\r\n        try {\r\n            filePaths.forEach((path) => {\r\n                this.compileCommandFileWatchers.push(fs.watch(path, (event, filename) => {\r\n                    if (event !== \"rename\") {\r\n                        this.onCompileCommandsChanged(path);\r\n                    }\r\n                }));\r\n            });\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n    handleConfigurationEditCommand(onSuccess) {\r\n        if (this.propertiesFile && fs.existsSync(this.propertiesFile.fsPath)) {\r\n            vscode.workspace.openTextDocument(this.propertiesFile).then((document) => {\r\n                onSuccess(document);\r\n            });\r\n        }\r\n        else {\r\n            fs.mkdir(this.configFolder, (e) => {\r\n                if (!e || e.code === 'EEXIST') {\r\n                    let fullPathToFile = path.join(this.configFolder, \"c_cpp_properties.json\");\r\n                    let filePath = vscode.Uri.file(fullPathToFile).with({ scheme: \"untitled\" });\r\n                    vscode.workspace.openTextDocument(filePath).then((document) => {\r\n                        let edit = new vscode.WorkspaceEdit();\r\n                        if (this.configurationJson) {\r\n                            this.resetToDefaultSettings(true);\r\n                        }\r\n                        this.applyDefaultIncludePathsAndFrameworks();\r\n                        let settings = new settings_1.CppSettings(this.rootUri);\r\n                        if (settings.defaultConfigurationProvider) {\r\n                            this.configurationJson.configurations.forEach(config => {\r\n                                config.configurationProvider = settings.defaultConfigurationProvider;\r\n                            });\r\n                            settings.update(\"default.configurationProvider\", undefined);\r\n                        }\r\n                        let savedKnownCompilers = this.configurationJson.configurations[0].knownCompilers;\r\n                        delete this.configurationJson.configurations[0].knownCompilers;\r\n                        edit.insert(document.uri, new vscode.Position(0, 0), JSON.stringify(this.configurationJson, null, 4));\r\n                        this.configurationJson.configurations[0].knownCompilers = savedKnownCompilers;\r\n                        vscode.workspace.applyEdit(edit).then((status) => {\r\n                            document.save().then(() => {\r\n                                this.propertiesFile = vscode.Uri.file(path.join(this.configFolder, \"c_cpp_properties.json\"));\r\n                                vscode.workspace.openTextDocument(this.propertiesFile).then((document) => {\r\n                                    onSuccess(document);\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    handleConfigurationChange() {\r\n        if (this.propertiesFile === undefined) {\r\n            return;\r\n        }\r\n        this.configFileWatcherFallbackTime = new Date();\r\n        if (this.propertiesFile) {\r\n            this.parsePropertiesFile();\r\n            if (this.configurationJson) {\r\n                if (this.CurrentConfigurationIndex < 0 ||\r\n                    this.CurrentConfigurationIndex >= this.configurationJson.configurations.length) {\r\n                    this.currentConfigurationIndex.Value = this.getConfigIndexForPlatform(this.configurationJson);\r\n                }\r\n            }\r\n        }\r\n        if (!this.configurationJson) {\r\n            this.resetToDefaultSettings(true);\r\n        }\r\n        this.applyDefaultIncludePathsAndFrameworks();\r\n        this.updateServerOnFolderSettingsChange();\r\n    }\r\n    parsePropertiesFile() {\r\n        try {\r\n            let readResults = fs.readFileSync(this.propertiesFile.fsPath, 'utf8');\r\n            if (readResults === \"\") {\r\n                return;\r\n            }\r\n            readResults = readResults.replace(/\\\\/g, '\\\\\\\\');\r\n            readResults = readResults.replace(/\\\\\\\\\"/g, '\\\\\"');\r\n            let newJson = JSON.parse(readResults);\r\n            if (!newJson || !newJson.configurations || newJson.configurations.length === 0) {\r\n                throw { message: \"Invalid configuration file. There must be at least one configuration present in the array.\" };\r\n            }\r\n            if (!this.configurationIncomplete && this.configurationJson && this.configurationJson.configurations &&\r\n                this.CurrentConfigurationIndex >= 0 && this.CurrentConfigurationIndex < this.configurationJson.configurations.length) {\r\n                for (let i = 0; i < newJson.configurations.length; i++) {\r\n                    if (newJson.configurations[i].name === this.configurationJson.configurations[this.CurrentConfigurationIndex].name) {\r\n                        this.currentConfigurationIndex.Value = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.configurationJson = newJson;\r\n            if (this.CurrentConfigurationIndex < 0 || this.CurrentConfigurationIndex >= newJson.configurations.length) {\r\n                this.currentConfigurationIndex.Value = this.getConfigIndexForPlatform(newJson);\r\n            }\r\n            let dirty = false;\r\n            for (let i = 0; i < this.configurationJson.configurations.length; i++) {\r\n                let newId = customProviders_1.getCustomConfigProviders().checkId(this.configurationJson.configurations[i].configurationProvider);\r\n                if (newId !== this.configurationJson.configurations[i].configurationProvider) {\r\n                    dirty = true;\r\n                    this.configurationJson.configurations[i].configurationProvider = newId;\r\n                }\r\n            }\r\n            if (this.configurationJson.env) {\r\n                delete this.configurationJson.env['workspaceRoot'];\r\n                delete this.configurationJson.env['workspaceFolder'];\r\n                delete this.configurationJson.env['workspaceFolderBasename'];\r\n                delete this.configurationJson.env['default'];\r\n            }\r\n            this.configurationIncomplete = false;\r\n            if (this.configurationJson.version !== configVersion) {\r\n                dirty = true;\r\n                if (this.configurationJson.version === undefined) {\r\n                    this.updateToVersion2();\r\n                }\r\n                if (this.configurationJson.version === 2) {\r\n                    this.updateToVersion3();\r\n                }\r\n                if (this.configurationJson.version === 3) {\r\n                    this.updateToVersion4();\r\n                }\r\n                else {\r\n                    this.configurationJson.version = configVersion;\r\n                    vscode.window.showErrorMessage('Unknown version number found in c_cpp_properties.json. Some features may not work as expected.');\r\n                }\r\n            }\r\n            if (dirty) {\r\n                try {\r\n                    fs.writeFileSync(this.propertiesFile.fsPath, JSON.stringify(this.configurationJson, null, 4));\r\n                }\r\n                catch (err) {\r\n                    vscode.window.showWarningMessage(`Attempt to update \"${this.propertiesFile.fsPath}\" failed (do you have write access?)`);\r\n                }\r\n            }\r\n            this.handleSquiggles();\r\n        }\r\n        catch (err) {\r\n            vscode.window.showErrorMessage(`Failed to parse \"${this.propertiesFile.fsPath}\": ${err.message}`);\r\n            throw err;\r\n        }\r\n    }\r\n    handleSquiggles() {\r\n        if (!this.propertiesFile) {\r\n            return;\r\n        }\r\n        vscode.workspace.openTextDocument(this.propertiesFile).then((document) => {\r\n            let diagnostics = new Array();\r\n            let curText = document.getText();\r\n            let curTextStartOffset = 0;\r\n            const configStart = curText.search(new RegExp(`{\\\\s*\"name\"\\\\s*:\\\\s*\"${this.CurrentConfiguration.name}\"`));\r\n            if (configStart === -1) {\r\n                telemetry.logLanguageServerEvent(\"ConfigSquiggles\", { \"error\": \"config name not first\" });\r\n                return;\r\n            }\r\n            curTextStartOffset = configStart + 1;\r\n            curText = curText.substr(curTextStartOffset);\r\n            const nameEnd = curText.indexOf(\":\");\r\n            curTextStartOffset += nameEnd + 1;\r\n            curText = curText.substr(nameEnd + 1);\r\n            const nextNameStart = curText.search(new RegExp('\"name\"\\\\s*:\\\\s*\"'));\r\n            if (nextNameStart !== -1) {\r\n                curText = curText.substr(0, nextNameStart + 6);\r\n                const nextNameStart2 = curText.search(new RegExp('\\\\s*}\\\\s*,\\\\s*{\\\\s*\"name\"'));\r\n                if (nextNameStart2 === -1) {\r\n                    telemetry.logLanguageServerEvent(\"ConfigSquiggles\", { \"error\": \"next config name not first\" });\r\n                    return;\r\n                }\r\n                curText = curText.substr(0, nextNameStart2);\r\n            }\r\n            let paths = new Set();\r\n            for (let pathArray of [(this.CurrentConfiguration.browse ? this.CurrentConfiguration.browse.path : undefined),\r\n                this.CurrentConfiguration.includePath, this.CurrentConfiguration.macFrameworkPath, this.CurrentConfiguration.forcedInclude]) {\r\n                if (pathArray) {\r\n                    for (let curPath of pathArray) {\r\n                        paths.add(`\"${curPath}\"`);\r\n                    }\r\n                }\r\n            }\r\n            if (this.CurrentConfiguration.compileCommands) {\r\n                paths.add(`\"${this.CurrentConfiguration.compileCommands}\"`);\r\n            }\r\n            const isWindows = os.platform() === 'win32';\r\n            if (this.CurrentConfiguration.compilerPath) {\r\n                let compilerPathAndArgs;\r\n                compilerPathAndArgs = util.extractCompilerPathAndArgs(this.CurrentConfiguration.compilerPath);\r\n                if (!(isWindows && compilerPathAndArgs.compilerPath.endsWith(\"cl.exe\"))) {\r\n                    paths.add(`${compilerPathAndArgs.compilerPath}`);\r\n                }\r\n            }\r\n            const forcedIncludeStart = curText.search(/\\s*\\\"forcedInclude\\\"\\s*:\\s*\\[/);\r\n            const forcedeIncludeEnd = forcedIncludeStart === -1 ? -1 : curText.indexOf(\"]\", forcedIncludeStart);\r\n            const compileCommandsStart = curText.search(/\\s*\\\"compileCommands\\\"\\s*:\\s*\\\"/);\r\n            const compileCommandsEnd = compileCommandsStart === -1 ? -1 : curText.indexOf('\"', curText.indexOf('\"', curText.indexOf(\":\", compileCommandsStart)) + 1);\r\n            const compilerPathStart = curText.search(/\\s*\\\"compilerPath\\\"\\s*:\\s*\\\"/);\r\n            const compilerPathEnd = compilerPathStart === -1 ? -1 : curText.indexOf('\"', curText.indexOf('\"', curText.indexOf(\":\", compilerPathStart)) + 1) + 1;\r\n            if (this.prevSquiggleMetrics[this.CurrentConfiguration.name] === undefined) {\r\n                this.prevSquiggleMetrics[this.CurrentConfiguration.name] = { PathNonExistent: 0, PathNotAFile: 0, PathNotADirectory: 0 };\r\n            }\r\n            let newSquiggleMetrics = { PathNonExistent: 0, PathNotAFile: 0, PathNotADirectory: 0 };\r\n            for (let curPath of paths) {\r\n                const isCompilerPath = !curPath.startsWith('\"');\r\n                let resolvedPath = curPath.substr((!isCompilerPath ? 1 : 0), curPath.length + (!isCompilerPath ? -2 : 0));\r\n                if (resolvedPath === \"${default}\") {\r\n                    continue;\r\n                }\r\n                resolvedPath = util.resolveVariables(resolvedPath, this.ExtendedEnvironment);\r\n                if (resolvedPath.includes(\"${workspaceFolder}\")) {\r\n                    resolvedPath = resolvedPath.replace(\"${workspaceFolder}\", this.rootUri.fsPath);\r\n                }\r\n                if (resolvedPath.includes(\"${workspaceRoot}\")) {\r\n                    resolvedPath = resolvedPath.replace(\"${workspaceRoot}\", this.rootUri.fsPath);\r\n                }\r\n                if (resolvedPath.includes(\"${vcpkgRoot}\")) {\r\n                    resolvedPath = resolvedPath.replace(\"${vcpkgRoot}\", util.getVcpkgRoot());\r\n                }\r\n                if (resolvedPath.includes(\"*\")) {\r\n                    resolvedPath = resolvedPath.replace(/\\*/g, \"\");\r\n                }\r\n                const isWSL = isWindows && resolvedPath.startsWith(\"/\");\r\n                if (isWSL) {\r\n                    const mntStr = \"/mnt/\";\r\n                    if (resolvedPath.length > \"/mnt/c/\".length && resolvedPath.substr(0, mntStr.length) === mntStr) {\r\n                        resolvedPath = resolvedPath.substr(mntStr.length);\r\n                        resolvedPath = resolvedPath.substr(0, 1) + \":\" + resolvedPath.substr(1);\r\n                    }\r\n                    else if (this.rootfs && this.rootfs.length > 0) {\r\n                        resolvedPath = this.rootfs + resolvedPath.substr(1);\r\n                        resolvedPath = resolvedPath.replace(/\\//g, path.sep);\r\n                    }\r\n                }\r\n                let pathExists = true;\r\n                let existsWithExeAdded = (path) => {\r\n                    return isCompilerPath && isWindows && !isWSL && fs.existsSync(path + \".exe\");\r\n                };\r\n                if (!fs.existsSync(resolvedPath)) {\r\n                    if (existsWithExeAdded(resolvedPath)) {\r\n                        resolvedPath += \".exe\";\r\n                    }\r\n                    else {\r\n                        const relativePath = this.rootUri.fsPath + path.sep + resolvedPath;\r\n                        if (!fs.existsSync(relativePath)) {\r\n                            if (existsWithExeAdded(resolvedPath)) {\r\n                                resolvedPath += \".exe\";\r\n                            }\r\n                            else {\r\n                                pathExists = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            resolvedPath = relativePath;\r\n                        }\r\n                    }\r\n                }\r\n                for (let curOffset = curText.indexOf(curPath); curOffset !== -1; curOffset = curText.indexOf(curPath, curOffset + curPath.length)) {\r\n                    let message;\r\n                    if (!pathExists) {\r\n                        message = `Cannot find \"${resolvedPath}\".`;\r\n                        newSquiggleMetrics.PathNonExistent++;\r\n                    }\r\n                    else {\r\n                        if ((curOffset >= forcedIncludeStart && curOffset <= forcedeIncludeEnd) ||\r\n                            (curOffset >= compileCommandsStart && curOffset <= compileCommandsEnd) ||\r\n                            (curOffset >= compilerPathStart && curOffset <= compilerPathEnd)) {\r\n                            if (util.checkFileExistsSync(resolvedPath)) {\r\n                                continue;\r\n                            }\r\n                            message = `Path is not a file: \"${resolvedPath}\".`;\r\n                            newSquiggleMetrics.PathNotAFile++;\r\n                        }\r\n                        else {\r\n                            if (util.checkDirectoryExistsSync(resolvedPath)) {\r\n                                continue;\r\n                            }\r\n                            message = `Path is not a directory: \"${resolvedPath}\".`;\r\n                            newSquiggleMetrics.PathNotADirectory++;\r\n                        }\r\n                    }\r\n                    let diagnostic = new vscode.Diagnostic(new vscode.Range(document.positionAt(curTextStartOffset + curOffset), document.positionAt(curTextStartOffset + curOffset + curPath.length + (!isCompilerPath ? -1 : 0))), message, vscode.DiagnosticSeverity.Warning);\r\n                    diagnostics.push(diagnostic);\r\n                }\r\n            }\r\n            if (diagnostics.length !== 0) {\r\n                this.diagnosticCollection.set(document.uri, diagnostics);\r\n            }\r\n            else {\r\n                this.diagnosticCollection.clear();\r\n            }\r\n            let changedSquiggleMetrics = {};\r\n            if (newSquiggleMetrics.PathNonExistent !== this.prevSquiggleMetrics[this.CurrentConfiguration.name].PathNonExistent) {\r\n                changedSquiggleMetrics.PathNonExistent = newSquiggleMetrics.PathNonExistent;\r\n            }\r\n            if (newSquiggleMetrics.PathNotAFile !== this.prevSquiggleMetrics[this.CurrentConfiguration.name].PathNotAFile) {\r\n                changedSquiggleMetrics.PathNotAFile = newSquiggleMetrics.PathNotAFile;\r\n            }\r\n            if (newSquiggleMetrics.PathNotADirectory !== this.prevSquiggleMetrics[this.CurrentConfiguration.name].PathNotADirectory) {\r\n                changedSquiggleMetrics.PathNotADirectory = newSquiggleMetrics.PathNotADirectory;\r\n            }\r\n            if (Object.keys(changedSquiggleMetrics).length > 0) {\r\n                telemetry.logLanguageServerEvent(\"ConfigSquiggles\", null, changedSquiggleMetrics);\r\n            }\r\n            this.prevSquiggleMetrics[this.CurrentConfiguration.name] = newSquiggleMetrics;\r\n        });\r\n    }\r\n    updateToVersion2() {\r\n        this.configurationJson.version = 2;\r\n    }\r\n    updateToVersion3() {\r\n        this.configurationJson.version = 3;\r\n        for (let i = 0; i < this.configurationJson.configurations.length; i++) {\r\n            let config = this.configurationJson.configurations[i];\r\n            if (config.name === \"Mac\" || (process.platform === 'darwin' && config.name !== \"Win32\" && config.name !== \"Linux\")) {\r\n                if (config.macFrameworkPath === undefined) {\r\n                    config.macFrameworkPath = [\r\n                        \"/System/Library/Frameworks\",\r\n                        \"/Library/Frameworks\"\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateToVersion4() {\r\n        this.configurationJson.version = 4;\r\n        let settings = new settings_1.CppSettings(this.rootUri);\r\n        for (let i = 0; i < this.configurationJson.configurations.length; i++) {\r\n            let config = this.configurationJson.configurations[i];\r\n            if (config.intelliSenseMode === undefined && !settings.defaultIntelliSenseMode) {\r\n                config.intelliSenseMode = this.getIntelliSenseModeForPlatform(config.name);\r\n            }\r\n            if (config.compilerPath === undefined && this.defaultCompilerPath && !config.compileCommands && !settings.defaultCompilerPath) {\r\n                config.compilerPath = this.defaultCompilerPath;\r\n            }\r\n            if (!config.cStandard && this.defaultCStandard && !settings.defaultCStandard) {\r\n                config.cStandard = this.defaultCStandard;\r\n            }\r\n            if (!config.cppStandard && this.defaultCppStandard && !settings.defaultCppStandard) {\r\n                config.cppStandard = this.defaultCppStandard;\r\n            }\r\n        }\r\n    }\r\n    checkCppProperties() {\r\n        let propertiesFile = path.join(this.configFolder, \"c_cpp_properties.json\");\r\n        fs.stat(propertiesFile, (err, stats) => {\r\n            if (err) {\r\n                if (this.propertiesFile) {\r\n                    this.propertiesFile = null;\r\n                    this.resetToDefaultSettings(true);\r\n                    this.handleConfigurationChange();\r\n                }\r\n            }\r\n            else if (stats.mtime > this.configFileWatcherFallbackTime) {\r\n                if (!this.propertiesFile) {\r\n                    this.propertiesFile = vscode.Uri.file(propertiesFile);\r\n                }\r\n                this.handleConfigurationChange();\r\n            }\r\n        });\r\n    }\r\n    dispose() {\r\n        this.disposables.forEach((d) => d.dispose());\r\n        this.disposables = [];\r\n        this.compileCommandFileWatchers.forEach((watcher) => watcher.close());\r\n        this.compileCommandFileWatchers = [];\r\n        this.diagnosticCollection.dispose();\r\n    }\r\n}\r\nexports.CppProperties = CppProperties;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LanguageServer/configurations.ts\n");

/***/ }),

/***/ "./src/LanguageServer/customProviders.ts":
/*!***********************************************!*\
  !*** ./src/LanguageServer/customProviders.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_cpptools_1 = __webpack_require__(/*! vscode-cpptools */ \"./node_modules/vscode-cpptools/out/api.js\");\r\nconst settings_1 = __webpack_require__(/*! ./settings */ \"./src/LanguageServer/settings.ts\");\r\nclass CustomProviderWrapper {\r\n    constructor(provider, version) {\r\n        this._isReady = version < vscode_cpptools_1.Version.v2;\r\n        this.provider = provider;\r\n        if (provider.extensionId && version === vscode_cpptools_1.Version.v0) {\r\n            version = vscode_cpptools_1.Version.v1;\r\n        }\r\n        this._version = version;\r\n    }\r\n    get isReady() {\r\n        return this._isReady;\r\n    }\r\n    set isReady(ready) {\r\n        this._isReady = ready;\r\n    }\r\n    get isValid() {\r\n        let valid = !!(this.provider.name && this.provider.canProvideConfiguration && this.provider.provideConfigurations);\r\n        if (valid && this._version > vscode_cpptools_1.Version.v0) {\r\n            valid = !!(this.provider.extensionId && this.provider.dispose);\r\n        }\r\n        if (valid && this._version > vscode_cpptools_1.Version.v1) {\r\n            valid = !!(this.provider.canProvideBrowseConfiguration && this.provider.provideBrowseConfiguration);\r\n        }\r\n        return valid;\r\n    }\r\n    get version() {\r\n        return this._version;\r\n    }\r\n    get name() {\r\n        return this.provider.name;\r\n    }\r\n    get extensionId() {\r\n        return this._version === vscode_cpptools_1.Version.v0 ? this.provider.name : this.provider.extensionId;\r\n    }\r\n    canProvideConfiguration(uri, token) {\r\n        return this.provider.canProvideConfiguration(uri, token);\r\n    }\r\n    provideConfigurations(uris, token) {\r\n        return this.provider.provideConfigurations(uris, token);\r\n    }\r\n    canProvideBrowseConfiguration(token) {\r\n        return this._version < vscode_cpptools_1.Version.v2 ? Promise.resolve(false) : this.provider.canProvideBrowseConfiguration(token);\r\n    }\r\n    provideBrowseConfiguration(token) {\r\n        console.assert(this._version >= vscode_cpptools_1.Version.v2);\r\n        return this._version < vscode_cpptools_1.Version.v2 ? Promise.resolve({ browsePath: [] }) : this.provider.provideBrowseConfiguration(token);\r\n    }\r\n    dispose() {\r\n        if (this._version !== vscode_cpptools_1.Version.v0) {\r\n            this.provider.dispose();\r\n        }\r\n    }\r\n}\r\nclass CustomConfigurationProviderCollection {\r\n    constructor() {\r\n        this.providers = new Map();\r\n    }\r\n    logProblems(provider, version) {\r\n        let missing = [];\r\n        if (!provider.name) {\r\n            missing.push(\"'name'\");\r\n        }\r\n        if (version !== vscode_cpptools_1.Version.v0 && !provider.extensionId) {\r\n            missing.push(\"'extensionId'\");\r\n        }\r\n        if (!provider.canProvideConfiguration) {\r\n            missing.push(\"'canProvideConfiguration'\");\r\n        }\r\n        if (!provider.provideConfigurations) {\r\n            missing.push(\"'canProvideConfiguration'\");\r\n        }\r\n        if (version !== vscode_cpptools_1.Version.v0 && !provider.dispose) {\r\n            missing.push(\"'dispose'\");\r\n        }\r\n        if (version >= vscode_cpptools_1.Version.v2 && !provider.canProvideBrowseConfiguration) {\r\n            missing.push(\"'canProvideBrowseConfiguration'\");\r\n        }\r\n        if (version >= vscode_cpptools_1.Version.v2 && !provider.provideBrowseConfiguration) {\r\n            missing.push(\"'provideBrowseConfiguration'\");\r\n        }\r\n        console.error(`CustomConfigurationProvider was not registered. The following properties are missing from the implementation: ${missing.join(\", \")}.`);\r\n    }\r\n    getId(provider) {\r\n        if (typeof provider === \"string\") {\r\n            return provider;\r\n        }\r\n        else if (provider.extensionId) {\r\n            return provider.extensionId;\r\n        }\r\n        else if (provider.name) {\r\n            return provider.name;\r\n        }\r\n        else {\r\n            console.error(`invalid provider: ${provider}`);\r\n            return \"\";\r\n        }\r\n    }\r\n    get size() {\r\n        return this.providers.size;\r\n    }\r\n    add(provider, version) {\r\n        if (new settings_1.CppSettings().intelliSenseEngine === \"Disabled\") {\r\n            console.warn(\"IntelliSense is disabled. Provider will not be registered.\");\r\n            return false;\r\n        }\r\n        let wrapper = new CustomProviderWrapper(provider, version);\r\n        if (!wrapper.isValid) {\r\n            this.logProblems(provider, version);\r\n            return false;\r\n        }\r\n        let exists = this.providers.has(wrapper.extensionId);\r\n        if (exists) {\r\n            let existing = this.providers.get(wrapper.extensionId);\r\n            exists = (existing.version === vscode_cpptools_1.Version.v0 && wrapper.version === vscode_cpptools_1.Version.v0);\r\n        }\r\n        if (!exists) {\r\n            this.providers.set(wrapper.extensionId, wrapper);\r\n        }\r\n        else {\r\n            console.error(`CustomConfigurationProvider '${wrapper.extensionId}' has already been registered.`);\r\n        }\r\n        return !exists;\r\n    }\r\n    get(provider) {\r\n        let id = this.getId(provider);\r\n        if (this.providers.has(id)) {\r\n            return this.providers.get(id);\r\n        }\r\n        return null;\r\n    }\r\n    forEach(func) {\r\n        this.providers.forEach(provider => func(provider));\r\n    }\r\n    remove(provider) {\r\n        let id = this.getId(provider);\r\n        if (this.providers.has(id)) {\r\n            this.providers.delete(id);\r\n        }\r\n        else {\r\n            console.warn(`${id} is not registered`);\r\n        }\r\n    }\r\n    checkId(providerId) {\r\n        if (!providerId) {\r\n            return providerId;\r\n        }\r\n        let found = [];\r\n        let noUpdate = false;\r\n        this.forEach(provider => {\r\n            if (provider.extensionId === providerId) {\r\n                noUpdate = true;\r\n            }\r\n            else if (provider.name === providerId && provider.version !== vscode_cpptools_1.Version.v0) {\r\n                found.push(provider);\r\n            }\r\n        });\r\n        if (noUpdate) {\r\n            return providerId;\r\n        }\r\n        if (found.length === 1) {\r\n            return found[0].extensionId;\r\n        }\r\n        else if (found.length > 1) {\r\n            console.warn(\"duplicate provider name found. Not upgrading.\");\r\n        }\r\n        return providerId;\r\n    }\r\n}\r\nexports.CustomConfigurationProviderCollection = CustomConfigurationProviderCollection;\r\nlet providerCollection = new CustomConfigurationProviderCollection();\r\nfunction getCustomConfigProviders() {\r\n    return providerCollection;\r\n}\r\nexports.getCustomConfigProviders = getCustomConfigProviders;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LanguageServer/customProviders.ts\n");

/***/ }),

/***/ "./src/LanguageServer/dataBinding.ts":
/*!*******************************************!*\
  !*** ./src/LanguageServer/dataBinding.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nclass DataBinding {\r\n    constructor(value) {\r\n        this.valueChanged = new vscode.EventEmitter();\r\n        this.isActive = true;\r\n        this.value = value;\r\n        this.isActive = true;\r\n    }\r\n    get Value() {\r\n        return this.value;\r\n    }\r\n    set Value(value) {\r\n        if (value !== this.value) {\r\n            this.value = value;\r\n            if (this.isActive) {\r\n                this.valueChanged.fire(this.value);\r\n            }\r\n        }\r\n    }\r\n    get ValueChanged() {\r\n        return this.valueChanged.event;\r\n    }\r\n    activate() {\r\n        this.isActive = true;\r\n        this.valueChanged.fire(this.value);\r\n    }\r\n    deactivate() {\r\n        this.isActive = false;\r\n    }\r\n    dispose() {\r\n        this.deactivate();\r\n        this.valueChanged.dispose();\r\n    }\r\n}\r\nexports.DataBinding = DataBinding;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTGFuZ3VhZ2VTZXJ2ZXIvZGF0YUJpbmRpbmcudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL0xhbmd1YWdlU2VydmVyL2RhdGFCaW5kaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY2xhc3MgRGF0YUJpbmRpbmcge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZCA9IG5ldyB2c2NvZGUuRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IFZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmZpcmUodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgVmFsdWVDaGFuZ2VkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlQ2hhbmdlZC5ldmVudDtcclxuICAgIH1cclxuICAgIGFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmZpcmUodGhpcy52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBkZWFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZWQuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGF0YUJpbmRpbmcgPSBEYXRhQmluZGluZztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/LanguageServer/dataBinding.ts\n");

/***/ }),

/***/ "./src/LanguageServer/extension.ts":
/*!*****************************************!*\
  !*** ./src/LanguageServer/extension.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst telemetry = __webpack_require__(/*! ../telemetry */ \"./src/telemetry.ts\");\r\nconst ui_1 = __webpack_require__(/*! ./ui */ \"./src/LanguageServer/ui.ts\");\r\nconst clientCollection_1 = __webpack_require__(/*! ./clientCollection */ \"./src/LanguageServer/clientCollection.ts\");\r\nconst settings_1 = __webpack_require__(/*! ./settings */ \"./src/LanguageServer/settings.ts\");\r\nconst persistentState_1 = __webpack_require__(/*! ./persistentState */ \"./src/LanguageServer/persistentState.ts\");\r\nconst languageConfig_1 = __webpack_require__(/*! ./languageConfig */ \"./src/LanguageServer/languageConfig.ts\");\r\nconst customProviders_1 = __webpack_require__(/*! ./customProviders */ \"./src/LanguageServer/customProviders.ts\");\r\nconst platform_1 = __webpack_require__(/*! ../platform */ \"./src/platform.ts\");\r\nconst vscode_languageclient_1 = __webpack_require__(/*! vscode-languageclient */ \"./node_modules/vscode-languageclient/lib/main.js\");\r\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\r\nconst tmp = __webpack_require__(/*! tmp */ \"./node_modules/tmp/lib/tmp.js\");\r\nconst githubAPI_1 = __webpack_require__(/*! ../githubAPI */ \"./src/githubAPI.ts\");\r\nconst packageVersion_1 = __webpack_require__(/*! ../packageVersion */ \"./src/packageVersion.ts\");\r\nconst commands_1 = __webpack_require__(/*! ../commands */ \"./src/commands.ts\");\r\nlet prevCrashFile;\r\nlet clients;\r\nlet activeDocument;\r\nlet ui;\r\nlet disposables = [];\r\nlet languageConfigurations = [];\r\nlet intervalTimer;\r\nlet insiderUpdateTimer;\r\nlet realActivationOccurred = false;\r\nlet tempCommands = [];\r\nlet activatedPreviously;\r\nconst insiderUpdateTimerInterval = 1000 * 60 * 60;\r\nlet buildInfoCache = null;\r\nconst taskSourceStr = \"C/C++\";\r\nconst cppInstallVsixStr = 'C/C++: Install vsix -- ';\r\nlet taskProvider;\r\nfunction activate(activationEventOccurred) {\r\n    if (realActivationOccurred) {\r\n        return;\r\n    }\r\n    activatedPreviously = new persistentState_1.PersistentWorkspaceState(\"activatedPreviously\", false);\r\n    if (activatedPreviously.Value) {\r\n        activatedPreviously.Value = false;\r\n        realActivation();\r\n    }\r\n    if (tempCommands.length === 0) {\r\n        tempCommands.push(vscode.workspace.onDidOpenTextDocument(d => onDidOpenTextDocument(d)));\r\n    }\r\n    if (activationEventOccurred) {\r\n        onActivationEvent();\r\n        return;\r\n    }\r\n    taskProvider = vscode.tasks.registerTaskProvider(taskSourceStr, {\r\n        provideTasks: () => {\r\n            return getBuildTasks();\r\n        },\r\n        resolveTask(task) {\r\n            return undefined;\r\n        }\r\n    });\r\n    vscode.tasks.onDidStartTask(event => {\r\n        if (event.execution.task.source === taskSourceStr) {\r\n            telemetry.logLanguageServerEvent('buildTaskStarted');\r\n        }\r\n    });\r\n    if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {\r\n        for (let i = 0; i < vscode.workspace.workspaceFolders.length; ++i) {\r\n            let config = path.join(vscode.workspace.workspaceFolders[i].uri.fsPath, \".vscode/c_cpp_properties.json\");\r\n            if (fs.existsSync(config)) {\r\n                onActivationEvent();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (vscode.workspace.textDocuments !== undefined && vscode.workspace.textDocuments.length > 0) {\r\n        for (let i = 0; i < vscode.workspace.textDocuments.length; ++i) {\r\n            let document = vscode.workspace.textDocuments[i];\r\n            if (document.languageId === \"cpp\" || document.languageId === \"c\") {\r\n                onActivationEvent();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.activate = activate;\r\nfunction getBuildTasks() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            return [];\r\n        }\r\n        const fileExt = path.extname(editor.document.fileName);\r\n        if (!fileExt) {\r\n            return;\r\n        }\r\n        const fileExtLower = fileExt.toLowerCase();\r\n        const isHeader = !fileExt || [\".hpp\", \".hh\", \".hxx\", \".h\", \".inl\", \"\"].some(ext => fileExtLower === ext);\r\n        if (isHeader) {\r\n            return [];\r\n        }\r\n        let fileIsCpp;\r\n        let fileIsC;\r\n        if (fileExt === \".C\") {\r\n            fileIsCpp = true;\r\n            fileIsC = true;\r\n        }\r\n        else {\r\n            fileIsCpp = [\".cpp\", \".cc\", \".cxx\", \".mm\", \".ino\"].some(ext => fileExtLower === ext);\r\n            fileIsC = fileExtLower === \".c\";\r\n        }\r\n        if (!(fileIsCpp || fileIsC)) {\r\n            return [];\r\n        }\r\n        let compilerPaths;\r\n        const isWindows = os.platform() === 'win32';\r\n        const activeClient = getActiveClient();\r\n        let userCompilerPath = yield activeClient.getCompilerPath();\r\n        if (userCompilerPath) {\r\n            userCompilerPath = userCompilerPath.trim();\r\n            if (isWindows && userCompilerPath.startsWith(\"/\")) {\r\n                userCompilerPath = null;\r\n            }\r\n            else {\r\n                userCompilerPath = userCompilerPath.replace(/\\\\\\\\/g, \"\\\\\");\r\n            }\r\n        }\r\n        let knownCompilers = yield activeClient.getKnownCompilers();\r\n        if (knownCompilers) {\r\n            knownCompilers = knownCompilers.filter(info => {\r\n                return ((fileIsCpp && !info.isC) || (fileIsC && info.isC)) &&\r\n                    (!isWindows || !info.path.startsWith(\"/\"));\r\n            });\r\n            compilerPaths = knownCompilers.map(info => { return info.path; });\r\n            let map = new Map();\r\n            const insertOrAssignEntry = (compilerPath) => {\r\n                const basename = path.basename(compilerPath);\r\n                map.set(basename, compilerPath);\r\n            };\r\n            compilerPaths.forEach(insertOrAssignEntry);\r\n            if (userCompilerPath) {\r\n                insertOrAssignEntry(userCompilerPath);\r\n            }\r\n            compilerPaths = [...map.values()];\r\n        }\r\n        else if (userCompilerPath) {\r\n            compilerPaths = [userCompilerPath];\r\n        }\r\n        if (!compilerPaths) {\r\n            telemetry.logLanguageServerEvent('noCompilerFound');\r\n            return [];\r\n        }\r\n        return compilerPaths.map(compilerPath => {\r\n            let compilerPathAndArgs = util.extractCompilerPathAndArgs(compilerPath);\r\n            compilerPath = compilerPathAndArgs.compilerPath;\r\n            const filePath = path.join('${fileDirname}', '${fileBasenameNoExtension}');\r\n            const compilerPathBase = path.basename(compilerPath);\r\n            const taskName = compilerPathBase + \" build active file\";\r\n            const isCl = taskName.startsWith(\"cl.exe\");\r\n            let args = isCl ? ['/Zi', '/EHsc', '/Fe:', filePath + '.exe', '${file}'] : ['-g', '${file}', '-o', filePath + (isWindows ? '.exe' : '')];\r\n            if (compilerPathAndArgs.additionalArgs) {\r\n                args = args.concat(compilerPathAndArgs.additionalArgs);\r\n            }\r\n            const cwd = isCl ? \"\" : path.dirname(compilerPath);\r\n            const kind = {\r\n                type: 'shell',\r\n                label: taskName,\r\n                command: isCl ? compilerPathBase : compilerPath,\r\n                args: args,\r\n                options: isCl ? undefined : { \"cwd\": cwd },\r\n                compilerPath: isCl ? compilerPathBase : compilerPath\r\n            };\r\n            const command = new vscode.ShellExecution(compilerPath, [...args], { cwd: cwd });\r\n            const target = vscode.workspace.getWorkspaceFolder(clients.ActiveClient.RootUri);\r\n            let task = new vscode.Task(kind, target, taskName, taskSourceStr, command, '$gcc');\r\n            task.definition = kind;\r\n            task.group = vscode.TaskGroup.Build;\r\n            return task;\r\n        });\r\n    });\r\n}\r\nexports.getBuildTasks = getBuildTasks;\r\nfunction onDidOpenTextDocument(document) {\r\n    if (document.languageId === \"c\" || document.languageId === \"cpp\") {\r\n        onActivationEvent();\r\n    }\r\n}\r\nfunction onActivationEvent() {\r\n    if (tempCommands.length === 0) {\r\n        return;\r\n    }\r\n    tempCommands.forEach((command) => {\r\n        command.dispose();\r\n    });\r\n    tempCommands = [];\r\n    if (!realActivationOccurred) {\r\n        realActivation();\r\n    }\r\n    activatedPreviously.Value = true;\r\n}\r\nfunction realActivation() {\r\n    if (new settings_1.CppSettings().intelliSenseEngine === \"Disabled\") {\r\n        throw new Error(\"Do not activate the extension when IntelliSense is disabled.\");\r\n    }\r\n    else {\r\n        console.log(\"activating extension\");\r\n        let checkForConflictingExtensions = new persistentState_1.PersistentState(\"CPP.\" + util.packageJson.version + \".checkForConflictingExtensions\", true);\r\n        if (checkForConflictingExtensions.Value) {\r\n            checkForConflictingExtensions.Value = false;\r\n            let clangCommandAdapterActive = vscode.extensions.all.some((extension, index, array) => {\r\n                return extension.isActive && extension.id === \"mitaki28.vscode-clang\";\r\n            });\r\n            if (clangCommandAdapterActive) {\r\n                telemetry.logLanguageServerEvent(\"conflictingExtension\");\r\n            }\r\n        }\r\n    }\r\n    realActivationOccurred = true;\r\n    console.log(\"starting language server\");\r\n    clients = new clientCollection_1.ClientCollection();\r\n    ui = ui_1.getUI();\r\n    if (vscode.workspace.textDocuments !== undefined && vscode.workspace.textDocuments.length > 0) {\r\n        onDidChangeActiveTextEditor(vscode.window.activeTextEditor);\r\n    }\r\n    clients.forEach(client => {\r\n        customProviders_1.getCustomConfigProviders().forEach(provider => client.onRegisterCustomConfigurationProvider(provider));\r\n    });\r\n    disposables.push(vscode.workspace.onDidChangeConfiguration(onDidChangeSettings));\r\n    disposables.push(vscode.workspace.onDidSaveTextDocument(onDidSaveTextDocument));\r\n    disposables.push(vscode.window.onDidChangeActiveTextEditor(onDidChangeActiveTextEditor));\r\n    disposables.push(vscode.window.onDidChangeTextEditorSelection(onDidChangeTextEditorSelection));\r\n    disposables.push(vscode.window.onDidChangeVisibleTextEditors(onDidChangeVisibleTextEditors));\r\n    updateLanguageConfigurations();\r\n    reportMacCrashes();\r\n    const settings = new settings_1.CppSettings(clients.ActiveClient.RootUri);\r\n    if (settings.updateChannel === 'Default') {\r\n        suggestInsidersChannel();\r\n    }\r\n    else if (settings.updateChannel === 'Insiders') {\r\n        insiderUpdateTimer = setInterval(checkAndApplyUpdate, insiderUpdateTimerInterval, settings.updateChannel);\r\n        checkAndApplyUpdate(settings.updateChannel);\r\n    }\r\n    intervalTimer = setInterval(onInterval, 2500);\r\n}\r\nfunction updateLanguageConfigurations() {\r\n    languageConfigurations.forEach(d => d.dispose());\r\n    languageConfigurations = [];\r\n    languageConfigurations.push(vscode.languages.setLanguageConfiguration('c', languageConfig_1.getLanguageConfig('c', clients.ActiveClient.RootUri)));\r\n    languageConfigurations.push(vscode.languages.setLanguageConfiguration('cpp', languageConfig_1.getLanguageConfig('cpp', clients.ActiveClient.RootUri)));\r\n}\r\nexports.updateLanguageConfigurations = updateLanguageConfigurations;\r\nfunction onDidChangeSettings() {\r\n    const changedActiveClientSettings = clients.ActiveClient.onDidChangeSettings();\r\n    clients.forEach(client => client.onDidChangeSettings());\r\n    const newUpdateChannel = changedActiveClientSettings['updateChannel'];\r\n    if (newUpdateChannel) {\r\n        if (newUpdateChannel === 'Default') {\r\n            clearInterval(insiderUpdateTimer);\r\n        }\r\n        else if (newUpdateChannel === 'Insiders') {\r\n            insiderUpdateTimer = setInterval(checkAndApplyUpdate, insiderUpdateTimerInterval);\r\n        }\r\n        checkAndApplyUpdate(newUpdateChannel);\r\n    }\r\n}\r\nlet saveMessageShown = false;\r\nfunction onDidSaveTextDocument(doc) {\r\n    if (!vscode.window.activeTextEditor || doc !== vscode.window.activeTextEditor.document || (doc.languageId !== \"cpp\" && doc.languageId !== \"c\")) {\r\n        return;\r\n    }\r\n    if (!saveMessageShown && new settings_1.CppSettings(doc.uri).clangFormatOnSave) {\r\n        saveMessageShown = true;\r\n        vscode.window.showInformationMessage(\"\\\"C_Cpp.clang_format_formatOnSave\\\" has been removed. Please use \\\"editor.formatOnSave\\\" instead.\");\r\n    }\r\n}\r\nfunction onDidChangeActiveTextEditor(editor) {\r\n    console.assert(clients !== undefined, \"client should be available before active editor is changed\");\r\n    if (clients === undefined) {\r\n        return;\r\n    }\r\n    let activeEditor = vscode.window.activeTextEditor;\r\n    if (!activeEditor || (activeEditor.document.languageId !== \"cpp\" && activeEditor.document.languageId !== \"c\")) {\r\n        activeDocument = \"\";\r\n    }\r\n    else {\r\n        activeDocument = editor.document.uri.toString();\r\n        clients.activeDocumentChanged(editor.document);\r\n        clients.ActiveClient.selectionChanged(vscode_languageclient_1.Range.create(editor.selection.start, editor.selection.end));\r\n    }\r\n    ui.activeDocumentChanged();\r\n}\r\nfunction onDidChangeTextEditorSelection(event) {\r\n    if (!event.textEditor || !vscode.window.activeTextEditor || event.textEditor.document.uri !== vscode.window.activeTextEditor.document.uri ||\r\n        (event.textEditor.document.languageId !== \"cpp\" && event.textEditor.document.languageId !== \"c\")) {\r\n        return;\r\n    }\r\n    if (activeDocument !== event.textEditor.document.uri.toString()) {\r\n        activeDocument = event.textEditor.document.uri.toString();\r\n        clients.activeDocumentChanged(event.textEditor.document);\r\n        ui.activeDocumentChanged();\r\n    }\r\n    clients.ActiveClient.selectionChanged(vscode_languageclient_1.Range.create(event.selections[0].start, event.selections[0].end));\r\n}\r\nfunction onDidChangeVisibleTextEditors(editors) {\r\n    clients.forEach(client => client.onDidChangeVisibleTextEditors(editors));\r\n}\r\nfunction onInterval() {\r\n    clients.ActiveClient.onInterval();\r\n}\r\nfunction installVsix(vsixLocation, updateChannel) {\r\n    return platform_1.PlatformInformation.GetPlatformInformation().then((platformInfo) => {\r\n        const vsCodeScriptPath = function (platformInfo) {\r\n            if (platformInfo.platform === 'win32') {\r\n                const vsCodeBinName = path.basename(process.execPath);\r\n                let cmdFile;\r\n                if (vsCodeBinName === 'Code - Insiders.exe') {\r\n                    cmdFile = 'code-insiders.cmd';\r\n                }\r\n                else if (vsCodeBinName === 'Code - Exploration.exe') {\r\n                    cmdFile = 'code-exploration.cmd';\r\n                }\r\n                else {\r\n                    cmdFile = 'code.cmd';\r\n                }\r\n                const vsCodeExeDir = path.dirname(process.execPath);\r\n                return path.join(vsCodeExeDir, 'bin', cmdFile);\r\n            }\r\n            else if (platformInfo.platform === 'darwin') {\r\n                return path.join(process.execPath, '..', '..', '..', '..', '..', 'Resources', 'app', 'bin', 'code');\r\n            }\r\n            else {\r\n                const vsCodeBinName = path.basename(process.execPath);\r\n                try {\r\n                    const stdout = child_process_1.execSync('which ' + vsCodeBinName);\r\n                    return stdout.toString().trim();\r\n                }\r\n                catch (error) {\r\n                    return undefined;\r\n                }\r\n            }\r\n        }(platformInfo);\r\n        if (!vsCodeScriptPath) {\r\n            return Promise.reject(new Error('Failed to find VS Code script'));\r\n        }\r\n        let userVersion = new packageVersion_1.PackageVersion(vscode.version);\r\n        let breakingVersion = new packageVersion_1.PackageVersion('1.28.0');\r\n        if (userVersion.isGreaterThan(breakingVersion, 'insider')) {\r\n            return new Promise((resolve, reject) => {\r\n                let process;\r\n                try {\r\n                    process = child_process_1.spawn(vsCodeScriptPath, ['--install-extension', vsixLocation, '--force']);\r\n                    const timer = setTimeout(() => {\r\n                        process.kill();\r\n                        reject(new Error('Failed to receive response from VS Code script process for installation within 30s.'));\r\n                    }, 30000);\r\n                    process.on('exit', (code) => {\r\n                        clearInterval(timer);\r\n                        if (code !== 0) {\r\n                            reject(new Error(`VS Code script exited with error code ${code}`));\r\n                        }\r\n                        else {\r\n                            resolve();\r\n                        }\r\n                    });\r\n                    if (process.pid === undefined) {\r\n                        throw new Error();\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    reject(new Error('Failed to launch VS Code script process for installation'));\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let process;\r\n            try {\r\n                process = child_process_1.spawn(vsCodeScriptPath, ['--install-extension', vsixLocation]);\r\n                if (process.pid === undefined) {\r\n                    throw new Error();\r\n                }\r\n            }\r\n            catch (error) {\r\n                reject(new Error('Failed to launch VS Code script process for installation'));\r\n                return;\r\n            }\r\n            const timer = setTimeout(() => {\r\n                process.kill();\r\n                reject(new Error('Failed to receive response from VS Code script process for installation within 30s.'));\r\n            }, 30000);\r\n            let sentOverride = false;\r\n            process.stdout.on('data', () => {\r\n                if (sentOverride) {\r\n                    return;\r\n                }\r\n                process.stdin.write('0\\n');\r\n                sentOverride = true;\r\n                clearInterval(timer);\r\n                resolve();\r\n            });\r\n        });\r\n    });\r\n}\r\nfunction suggestInsidersChannel() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let suggestInsiders = new persistentState_1.PersistentState(\"CPP.suggestInsiders\", true);\r\n        if (!suggestInsiders.Value) {\r\n            return;\r\n        }\r\n        let buildInfo;\r\n        try {\r\n            buildInfo = yield githubAPI_1.getTargetBuildInfo(\"Insiders\");\r\n        }\r\n        catch (error) {\r\n            console.log(`${cppInstallVsixStr}${error.message}`);\r\n            if (error.message.indexOf('/') !== -1 || error.message.indexOf('\\\\') !== -1) {\r\n                error.message = \"Potential PII hidden\";\r\n            }\r\n            telemetry.logLanguageServerEvent('suggestInsiders', { 'error': error.message, 'success': 'false' });\r\n        }\r\n        if (!buildInfo) {\r\n            return;\r\n        }\r\n        const message = `Insiders version ${buildInfo.name} is available. Would you like to switch to the Insiders channel and install this update?`;\r\n        const yes = \"Yes\";\r\n        const askLater = \"Ask Me Later\";\r\n        const dontShowAgain = \"Don't Show Again\";\r\n        let selection = yield vscode.window.showInformationMessage(message, yes, askLater, dontShowAgain);\r\n        switch (selection) {\r\n            case yes:\r\n                buildInfoCache = buildInfo;\r\n                vscode.workspace.getConfiguration(\"C_Cpp\").update(\"updateChannel\", \"Insiders\", vscode.ConfigurationTarget.Global);\r\n                break;\r\n            case dontShowAgain:\r\n                suggestInsiders.Value = false;\r\n                break;\r\n            case askLater:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\nfunction applyUpdate(buildInfo, updateChannel) {\r\n    return new Promise((resolve, reject) => {\r\n        tmp.file({ postfix: '.vsix' }, (err, vsixPath, fd, cleanupCallback) => __awaiter(this, void 0, void 0, function* () {\r\n            if (err) {\r\n                reject(new Error('Failed to create vsix file'));\r\n                return;\r\n            }\r\n            let config = vscode.workspace.getConfiguration();\r\n            let originalProxySupport = config.inspect('http.proxySupport').globalValue;\r\n            while (true) {\r\n                try {\r\n                    yield util.downloadFileToDestination(buildInfo.downloadUrl, vsixPath);\r\n                }\r\n                catch (_a) {\r\n                    if (originalProxySupport !== config.inspect('http.proxySupport').globalValue) {\r\n                        config.update('http.proxySupport', originalProxySupport, true);\r\n                        reject(new Error('Failed to download VSIX package with proxySupport off'));\r\n                        return;\r\n                    }\r\n                    if (config.get('http.proxySupport') !== \"off\" && originalProxySupport !== \"off\") {\r\n                        config.update('http.proxySupport', \"off\", true);\r\n                        continue;\r\n                    }\r\n                    reject(new Error('Failed to download VSIX package'));\r\n                    return;\r\n                }\r\n                if (originalProxySupport !== config.inspect('http.proxySupport').globalValue) {\r\n                    config.update('http.proxySupport', originalProxySupport, true);\r\n                    telemetry.logLanguageServerEvent('installVsix', { 'error': \"Success with proxySupport off\", 'success': 'true' });\r\n                }\r\n                break;\r\n            }\r\n            try {\r\n                yield installVsix(vsixPath, updateChannel);\r\n            }\r\n            catch (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n            clearInterval(insiderUpdateTimer);\r\n            const message = `The C/C++ Extension has been updated to version ${buildInfo.name}. Please reload the window for the changes to take effect.`;\r\n            util.promptReloadWindow(message);\r\n            telemetry.logLanguageServerEvent('installVsix', { 'success': 'true' });\r\n            resolve();\r\n        }));\r\n    }).catch(error => {\r\n        console.error(`${cppInstallVsixStr}${error.message}`);\r\n        if (error.message.indexOf('/') !== -1 || error.message.indexOf('\\\\') !== -1) {\r\n            error.message = \"Potential PII hidden\";\r\n        }\r\n        telemetry.logLanguageServerEvent('installVsix', { 'error': error.message, 'success': 'false' });\r\n    });\r\n}\r\nfunction checkAndApplyUpdate(updateChannel) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let buildInfo = buildInfoCache;\r\n        buildInfoCache = null;\r\n        if (!buildInfo) {\r\n            try {\r\n                buildInfo = yield githubAPI_1.getTargetBuildInfo(updateChannel);\r\n            }\r\n            catch (error) {\r\n                telemetry.logLanguageServerEvent('installVsix', { 'error': error.message, 'success': 'false' });\r\n            }\r\n        }\r\n        if (!buildInfo) {\r\n            return;\r\n        }\r\n        yield applyUpdate(buildInfo, updateChannel);\r\n    });\r\n}\r\nlet commandsRegistered = false;\r\nfunction registerCommands() {\r\n    if (commandsRegistered) {\r\n        return;\r\n    }\r\n    commandsRegistered = true;\r\n    commands_1.getTemporaryCommandRegistrarInstance().clearTempCommands();\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.Navigate', onNavigate));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.GoToDeclaration', onGoToDeclaration));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.PeekDeclaration', onPeekDeclaration));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.SwitchHeaderSource', onSwitchHeaderSource));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ResetDatabase', onResetDatabase));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ConfigurationSelect', onSelectConfiguration));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ConfigurationProviderSelect', onSelectConfigurationProvider));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ConfigurationEdit', onEditConfiguration));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.AddToIncludePath', onAddToIncludePath));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ToggleErrorSquiggles', onToggleSquiggles));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ToggleIncludeFallback', onToggleIncludeFallback));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ToggleDimInactiveRegions', onToggleDimInactiveRegions));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ShowReleaseNotes', onShowReleaseNotes));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.PauseParsing', onPauseParsing));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ResumeParsing', onResumeParsing));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.ShowParsingCommands', onShowParsingCommands));\r\n    disposables.push(vscode.commands.registerCommand('C_Cpp.TakeSurvey', onTakeSurvey));\r\n    disposables.push(vscode.commands.registerCommand('cpptools.activeConfigName', onGetActiveConfigName));\r\n    commands_1.getTemporaryCommandRegistrarInstance().executeDelayedCommands();\r\n}\r\nexports.registerCommands = registerCommands;\r\nfunction onNavigate() {\r\n    onActivationEvent();\r\n    let activeEditor = vscode.window.activeTextEditor;\r\n    if (!activeEditor) {\r\n        return;\r\n    }\r\n    clients.ActiveClient.requestNavigationList(activeEditor.document).then((navigationList) => {\r\n        ui.showNavigationOptions(navigationList);\r\n    });\r\n}\r\nfunction onGoToDeclaration() {\r\n    onActivationEvent();\r\n    clients.ActiveClient.requestGoToDeclaration().then(() => vscode.commands.executeCommand(\"editor.action.goToDeclaration\"));\r\n}\r\nfunction onPeekDeclaration() {\r\n    onActivationEvent();\r\n    clients.ActiveClient.requestGoToDeclaration().then(() => vscode.commands.executeCommand(\"editor.action.previewDeclaration\"));\r\n}\r\nfunction onSwitchHeaderSource() {\r\n    onActivationEvent();\r\n    let activeEditor = vscode.window.activeTextEditor;\r\n    if (!activeEditor || !activeEditor.document) {\r\n        return;\r\n    }\r\n    if (activeEditor.document.languageId !== \"cpp\" && activeEditor.document.languageId !== \"c\") {\r\n        return;\r\n    }\r\n    let rootPath = clients.ActiveClient.RootPath;\r\n    let fileName = activeEditor.document.fileName;\r\n    if (!rootPath) {\r\n        rootPath = path.dirname(fileName);\r\n    }\r\n    clients.ActiveClient.requestSwitchHeaderSource(rootPath, fileName).then((targetFileName) => {\r\n        vscode.workspace.openTextDocument(targetFileName).then((document) => {\r\n            let foundEditor = false;\r\n            vscode.window.visibleTextEditors.forEach((editor, index, array) => {\r\n                if (editor.document === document && !foundEditor) {\r\n                    foundEditor = true;\r\n                    vscode.window.showTextDocument(document, editor.viewColumn);\r\n                }\r\n            });\r\n            if (!foundEditor) {\r\n                if (vscode.window.activeTextEditor !== undefined) {\r\n                    vscode.window.showTextDocument(document, vscode.window.activeTextEditor.viewColumn);\r\n                }\r\n                else {\r\n                    vscode.window.showTextDocument(document);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction selectClient() {\r\n    if (clients.Count === 1) {\r\n        return Promise.resolve(clients.ActiveClient);\r\n    }\r\n    else {\r\n        return ui.showWorkspaces(clients.Names).then(key => {\r\n            if (key !== \"\") {\r\n                let client = clients.get(key);\r\n                if (client) {\r\n                    return client;\r\n                }\r\n                else {\r\n                    console.assert(\"client not found\");\r\n                }\r\n            }\r\n            return Promise.reject(\"client not found\");\r\n        });\r\n    }\r\n}\r\nfunction onResetDatabase() {\r\n    onActivationEvent();\r\n    selectClient().then(client => client.resetDatabase(), rejected => { });\r\n}\r\nfunction onSelectConfiguration() {\r\n    onActivationEvent();\r\n    if (!isFolderOpen()) {\r\n        vscode.window.showInformationMessage('Open a folder first to select a configuration');\r\n    }\r\n    else {\r\n        clients.ActiveClient.handleConfigurationSelectCommand();\r\n    }\r\n}\r\nfunction onSelectConfigurationProvider() {\r\n    onActivationEvent();\r\n    if (!isFolderOpen()) {\r\n        vscode.window.showInformationMessage('Open a folder first to select a configuration provider');\r\n    }\r\n    else {\r\n        selectClient().then(client => client.handleConfigurationProviderSelectCommand(), rejected => { });\r\n    }\r\n}\r\nfunction onEditConfiguration() {\r\n    onActivationEvent();\r\n    if (!isFolderOpen()) {\r\n        vscode.window.showInformationMessage('Open a folder first to edit configurations');\r\n    }\r\n    else {\r\n        selectClient().then(client => client.handleConfigurationEditCommand(), rejected => { });\r\n    }\r\n}\r\nfunction onAddToIncludePath(path) {\r\n    if (!isFolderOpen()) {\r\n        vscode.window.showInformationMessage('Open a folder first to add to includePath');\r\n    }\r\n    else {\r\n        clients.ActiveClient.handleAddToIncludePathCommand(path);\r\n    }\r\n}\r\nfunction onToggleSquiggles() {\r\n    onActivationEvent();\r\n    let settings = new settings_1.CppSettings(clients.ActiveClient.RootUri);\r\n    settings.toggleSetting(\"errorSquiggles\", \"Enabled\", \"Disabled\");\r\n}\r\nfunction onToggleIncludeFallback() {\r\n    onActivationEvent();\r\n    let settings = new settings_1.CppSettings(clients.ActiveClient.RootUri);\r\n    settings.toggleSetting(\"intelliSenseEngineFallback\", \"Enabled\", \"Disabled\");\r\n}\r\nfunction onToggleDimInactiveRegions() {\r\n    onActivationEvent();\r\n    let settings = new settings_1.CppSettings(clients.ActiveClient.RootUri);\r\n    settings.update(\"dimInactiveRegions\", !settings.dimInactiveRegions);\r\n}\r\nfunction onShowReleaseNotes() {\r\n    onActivationEvent();\r\n    util.showReleaseNotes();\r\n}\r\nfunction onPauseParsing() {\r\n    onActivationEvent();\r\n    selectClient().then(client => client.pauseParsing(), rejected => { });\r\n}\r\nfunction onResumeParsing() {\r\n    onActivationEvent();\r\n    selectClient().then(client => client.resumeParsing(), rejected => { });\r\n}\r\nfunction onShowParsingCommands() {\r\n    onActivationEvent();\r\n    selectClient().then(client => client.handleShowParsingCommands(), rejected => { });\r\n}\r\nfunction onTakeSurvey() {\r\n    onActivationEvent();\r\n    telemetry.logLanguageServerEvent(\"onTakeSurvey\");\r\n    let uri = vscode.Uri.parse(`https://www.research.net/r/VBVV6C6?o=${os.platform()}&m=${vscode.env.machineId}`);\r\n    vscode.commands.executeCommand('vscode.open', uri);\r\n}\r\nfunction onGetActiveConfigName() {\r\n    return clients.ActiveClient.getCurrentConfigName();\r\n}\r\nfunction reportMacCrashes() {\r\n    if (process.platform === \"darwin\") {\r\n        prevCrashFile = \"\";\r\n        let crashFolder = path.resolve(process.env.HOME, \"Library/Logs/DiagnosticReports\");\r\n        fs.stat(crashFolder, (err, stats) => {\r\n            let crashObject = {};\r\n            if (err) {\r\n                crashObject[\"fs.stat: err.code\"] = err.code;\r\n                telemetry.logLanguageServerEvent(\"MacCrash\", crashObject, null);\r\n                return;\r\n            }\r\n            try {\r\n                fs.watch(crashFolder, (event, filename) => {\r\n                    if (event !== \"rename\") {\r\n                        return;\r\n                    }\r\n                    if (filename === prevCrashFile) {\r\n                        return;\r\n                    }\r\n                    prevCrashFile = filename;\r\n                    if (!filename.startsWith(\"Microsoft.VSCode.CPP.\")) {\r\n                        return;\r\n                    }\r\n                    setTimeout(() => {\r\n                        fs.readFile(path.resolve(crashFolder, filename), 'utf8', (err, data) => {\r\n                            if (err) {\r\n                                fs.readFile(path.resolve(crashFolder, filename), 'utf8', handleCrashFileRead);\r\n                                return;\r\n                            }\r\n                            handleCrashFileRead(err, data);\r\n                        });\r\n                    }, 5000);\r\n                });\r\n            }\r\n            catch (e) {\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction logCrashTelemetry(data) {\r\n    let crashObject = {};\r\n    crashObject[\"CrashingThreadCallStack\"] = data;\r\n    telemetry.logLanguageServerEvent(\"MacCrash\", crashObject, null);\r\n}\r\nfunction handleCrashFileRead(err, data) {\r\n    if (err) {\r\n        return logCrashTelemetry(\"readFile: \" + err.code);\r\n    }\r\n    const crashStart = \" Crashed:\";\r\n    let startCrash = data.indexOf(crashStart);\r\n    if (startCrash < 0) {\r\n        return logCrashTelemetry(\"No crash start\");\r\n    }\r\n    startCrash += crashStart.length + 1;\r\n    let endCrash = data.indexOf(\"Thread \", startCrash);\r\n    if (endCrash < 0) {\r\n        endCrash = data.length - 1;\r\n    }\r\n    if (endCrash <= startCrash) {\r\n        return logCrashTelemetry(\"No crash end\");\r\n    }\r\n    data = data.substr(startCrash, endCrash - startCrash);\r\n    data = data.replace(/0x................ /g, \"\");\r\n    data = data.replace(/0x1........ \\+ 0/g, \"\");\r\n    const process1 = \"Microsoft.VSCode.CPP.IntelliSense.Msvc.darwin\\t\";\r\n    const process2 = \"Microsoft.VSCode.CPP.Extension.darwin\\t\";\r\n    if (data.includes(process1)) {\r\n        data = data.replace(new RegExp(process1, \"g\"), \"\");\r\n        data = process1 + \"\\n\" + data;\r\n    }\r\n    else if (data.includes(process2)) {\r\n        data = data.replace(new RegExp(process2, \"g\"), \"\");\r\n        data = process2 + \"\\n\" + data;\r\n    }\r\n    else {\r\n        return logCrashTelemetry(\"No process\");\r\n    }\r\n    let lines = data.split(\"\\n\");\r\n    data = \"\";\r\n    lines.forEach((line) => {\r\n        if (!line.includes(\".dylib\") && !line.includes(\"???\")) {\r\n            line = line.replace(/^\\d+\\s+/, \"\");\r\n            line = line.replace(/std::__1::/g, \"std::\");\r\n            data += (line + \"\\n\");\r\n        }\r\n    });\r\n    data = data.trimRight();\r\n    if (data.length > 8192) {\r\n        data = data.substr(0, 8189) + \"...\";\r\n    }\r\n    logCrashTelemetry(data);\r\n}\r\nfunction deactivate() {\r\n    console.log(\"deactivating extension\");\r\n    telemetry.logLanguageServerEvent(\"LanguageServerShutdown\");\r\n    clearInterval(intervalTimer);\r\n    clearInterval(insiderUpdateTimer);\r\n    disposables.forEach(d => d.dispose());\r\n    languageConfigurations.forEach(d => d.dispose());\r\n    ui.dispose();\r\n    if (taskProvider) {\r\n        taskProvider.dispose();\r\n    }\r\n    return clients.dispose();\r\n}\r\nexports.deactivate = deactivate;\r\nfunction isFolderOpen() {\r\n    return vscode.workspace.workspaceFolders !== undefined && vscode.workspace.workspaceFolders.length > 0;\r\n}\r\nexports.isFolderOpen = isFolderOpen;\r\nfunction getClients() {\r\n    if (!realActivationOccurred) {\r\n        realActivation();\r\n    }\r\n    return clients;\r\n}\r\nexports.getClients = getClients;\r\nfunction getActiveClient() {\r\n    if (!realActivationOccurred) {\r\n        realActivation();\r\n    }\r\n    return clients.ActiveClient;\r\n}\r\nexports.getActiveClient = getActiveClient;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LanguageServer/extension.ts\n");

/***/ }),

/***/ "./src/LanguageServer/languageConfig.ts":
/*!**********************************************!*\
  !*** ./src/LanguageServer/languageConfig.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst settings_1 = __webpack_require__(/*! ./settings */ \"./src/LanguageServer/settings.ts\");\r\nconst logger_1 = __webpack_require__(/*! ../logger */ \"./src/logger.ts\");\r\nconst escapeChars = /[\\\\\\^\\$\\*\\+\\?\\{\\}\\(\\)\\.\\!\\=\\|\\[\\]\\ \\/]/;\r\nfunction escape(chars) {\r\n    let result = \"\";\r\n    for (let char of chars) {\r\n        if (char.match(escapeChars)) {\r\n            result += `\\\\${char}`;\r\n        }\r\n        else {\r\n            result += char;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction getMLBeginPattern(insert) {\r\n    if (insert && insert.startsWith(\"/*\")) {\r\n        let match = escape(insert.substr(2));\r\n        return `^\\\\s*\\\\/\\\\*${match}(?!\\\\/)([^\\\\*]|\\\\*(?!\\\\/))*$`;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLSplitAfterPattern() {\r\n    return \"^\\\\s*\\\\*\\\\/$\";\r\n}\r\nfunction getMLContinuePattern(insert) {\r\n    if (insert) {\r\n        let match = escape(insert.trimRight());\r\n        if (match) {\r\n            let right = escape(insert.substr(insert.trimRight().length));\r\n            return `^\\\\s*${match}(${right}([^\\\\*]|\\\\*(?!\\\\/))*)?$`;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLEndPattern(insert) {\r\n    if (insert) {\r\n        let match = escape(insert.trimRight().trimLeft());\r\n        if (match) {\r\n            return `^\\\\s*${match}[^/]*\\\\*\\\\/\\\\s*$`;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLEmptyEndPattern(insert) {\r\n    if (insert) {\r\n        insert = insert.trimRight();\r\n        if (insert) {\r\n            if (insert.endsWith('*')) {\r\n                insert = insert.substr(0, insert.length - 1);\r\n            }\r\n            let match = escape(insert.trimRight());\r\n            return `^\\\\s*${match}\\\\*\\\\/\\\\s*$`;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getSLBeginPattern(insert) {\r\n    if (insert) {\r\n        let match = escape(insert.trimRight());\r\n        return `^\\\\s*${match}.*$`;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getSLContinuePattern(insert) {\r\n    if (insert) {\r\n        let match = escape(insert.trimRight());\r\n        return `^\\\\s*${match}.+$`;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getSLEndPattern(insert) {\r\n    if (insert) {\r\n        let match = escape(insert);\r\n        let trimmed = escape(insert.trimRight());\r\n        if (match !== trimmed) {\r\n            match = `(${match}|${trimmed})`;\r\n        }\r\n        return `^\\\\s*${match}$`;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLSplitRule(comment) {\r\n    if (comment) {\r\n        let beforePattern = getMLBeginPattern(comment.begin);\r\n        if (beforePattern) {\r\n            return {\r\n                beforeText: new RegExp(beforePattern),\r\n                afterText: new RegExp(getMLSplitAfterPattern()),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.IndentOutdent,\r\n                    appendText: comment.continue ? comment.continue : ''\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLFirstLineRule(comment) {\r\n    if (comment) {\r\n        let beforePattern = getMLBeginPattern(comment.begin);\r\n        if (beforePattern) {\r\n            return {\r\n                beforeText: new RegExp(beforePattern),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.None,\r\n                    appendText: comment.continue ? comment.continue : ''\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLContinuationRule(comment) {\r\n    if (comment) {\r\n        let continuePattern = getMLContinuePattern(comment.continue);\r\n        if (continuePattern) {\r\n            return {\r\n                beforeText: new RegExp(continuePattern),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.None,\r\n                    appendText: comment.continue.trimLeft()\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLEndRule(comment) {\r\n    if (comment) {\r\n        let endPattern = getMLEndPattern(comment.continue);\r\n        if (endPattern) {\r\n            return {\r\n                beforeText: new RegExp(endPattern),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.None,\r\n                    removeText: comment.continue.length - comment.continue.trimLeft().length\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMLEmptyEndRule(comment) {\r\n    if (comment) {\r\n        let endPattern = getMLEmptyEndPattern(comment.continue);\r\n        if (endPattern) {\r\n            return {\r\n                beforeText: new RegExp(endPattern),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.None,\r\n                    removeText: comment.continue.length - comment.continue.trimLeft().length\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getSLFirstLineRule(comment) {\r\n    if (comment) {\r\n        let continuePattern = getSLBeginPattern(comment.begin);\r\n        if (continuePattern) {\r\n            return {\r\n                beforeText: new RegExp(continuePattern),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.None,\r\n                    appendText: comment.continue.trimLeft()\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getSLContinuationRule(comment) {\r\n    if (comment) {\r\n        let continuePattern = getSLContinuePattern(comment.continue);\r\n        if (continuePattern) {\r\n            return {\r\n                beforeText: new RegExp(continuePattern),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.None,\r\n                    appendText: comment.continue.trimLeft()\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getSLEndRule(comment) {\r\n    if (comment) {\r\n        let endPattern = getSLEndPattern(comment.continue);\r\n        if (endPattern) {\r\n            return {\r\n                beforeText: new RegExp(endPattern),\r\n                action: {\r\n                    indentAction: vscode.IndentAction.None,\r\n                    removeText: comment.continue.length - comment.continue.trimLeft().length\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction getLanguageConfig(languageId, resource) {\r\n    let settings = new settings_1.CppSettings(resource);\r\n    let patterns = settings.commentContinuationPatterns;\r\n    return getLanguageConfigFromPatterns(languageId, patterns);\r\n}\r\nexports.getLanguageConfig = getLanguageConfig;\r\nfunction getLanguageConfigFromPatterns(languageId, patterns) {\r\n    let beginPatterns = [];\r\n    let continuePatterns = [];\r\n    let duplicates = false;\r\n    let beginRules = [];\r\n    let continueRules = [];\r\n    let endRules = [];\r\n    patterns.forEach(pattern => {\r\n        let c = (typeof pattern === \"string\") ? { begin: pattern, continue: pattern.startsWith('/*') ? \" * \" : pattern } : pattern;\r\n        let r = constructCommentRules(c, languageId);\r\n        if (beginPatterns.indexOf(c.begin) < 0) {\r\n            if (r.begin && r.begin.length > 0) {\r\n                beginRules = beginRules.concat(r.begin);\r\n            }\r\n            beginPatterns.push(c.begin);\r\n        }\r\n        else {\r\n            duplicates = true;\r\n        }\r\n        if (continuePatterns.indexOf(c.continue) < 0) {\r\n            if (r.continue && r.continue.length > 0) {\r\n                continueRules = continueRules.concat(r.continue);\r\n            }\r\n            if (r.end && r.end.length > 0) {\r\n                endRules = endRules.concat(r.end);\r\n            }\r\n            continuePatterns.push(c.continue);\r\n        }\r\n    });\r\n    if (duplicates) {\r\n        logger_1.getOutputChannel().appendLine(\"Duplicate multiline comment patterns detected.\");\r\n    }\r\n    return { onEnterRules: beginRules.concat(continueRules).concat(endRules).filter(e => (e)) };\r\n}\r\nexports.getLanguageConfigFromPatterns = getLanguageConfigFromPatterns;\r\nfunction constructCommentRules(comment, languageId) {\r\n    if (comment && comment.begin && comment.begin.startsWith('/*') && (languageId === 'c' || languageId === 'cpp')) {\r\n        return {\r\n            begin: [\r\n                getMLSplitRule(comment),\r\n                getMLFirstLineRule(comment)\r\n            ],\r\n            continue: [getMLContinuationRule(comment)],\r\n            end: [\r\n                getMLEmptyEndRule(comment),\r\n                getMLEndRule(comment)\r\n            ]\r\n        };\r\n    }\r\n    else if (comment && comment.begin && comment.begin.startsWith('//') && languageId === 'cpp') {\r\n        return {\r\n            begin: (comment.begin === comment.continue) ? [] : [getSLFirstLineRule(comment)],\r\n            continue: [getSLContinuationRule(comment)],\r\n            end: [getSLEndRule(comment)]\r\n        };\r\n    }\r\n    return {\r\n        begin: [],\r\n        continue: [],\r\n        end: []\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTGFuZ3VhZ2VTZXJ2ZXIvbGFuZ3VhZ2VDb25maWcudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL0xhbmd1YWdlU2VydmVyL2xhbmd1YWdlQ29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGUgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XHJcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uL2xvZ2dlclwiKTtcclxuY29uc3QgZXNjYXBlQ2hhcnMgPSAvW1xcXFxcXF5cXCRcXCpcXCtcXD9cXHtcXH1cXChcXClcXC5cXCFcXD1cXHxcXFtcXF1cXCBcXC9dLztcclxuZnVuY3Rpb24gZXNjYXBlKGNoYXJzKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcclxuICAgICAgICBpZiAoY2hhci5tYXRjaChlc2NhcGVDaGFycykpIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IGBcXFxcJHtjaGFyfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gY2hhcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGdldE1MQmVnaW5QYXR0ZXJuKGluc2VydCkge1xyXG4gICAgaWYgKGluc2VydCAmJiBpbnNlcnQuc3RhcnRzV2l0aChcIi8qXCIpKSB7XHJcbiAgICAgICAgbGV0IG1hdGNoID0gZXNjYXBlKGluc2VydC5zdWJzdHIoMikpO1xyXG4gICAgICAgIHJldHVybiBgXlxcXFxzKlxcXFwvXFxcXCoke21hdGNofSg/IVxcXFwvKShbXlxcXFwqXXxcXFxcKig/IVxcXFwvKSkqJGA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1MU3BsaXRBZnRlclBhdHRlcm4oKSB7XHJcbiAgICByZXR1cm4gXCJeXFxcXHMqXFxcXCpcXFxcLyRcIjtcclxufVxyXG5mdW5jdGlvbiBnZXRNTENvbnRpbnVlUGF0dGVybihpbnNlcnQpIHtcclxuICAgIGlmIChpbnNlcnQpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSBlc2NhcGUoaW5zZXJ0LnRyaW1SaWdodCgpKTtcclxuICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgbGV0IHJpZ2h0ID0gZXNjYXBlKGluc2VydC5zdWJzdHIoaW5zZXJ0LnRyaW1SaWdodCgpLmxlbmd0aCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gYF5cXFxccyoke21hdGNofSgke3JpZ2h0fShbXlxcXFwqXXxcXFxcKig/IVxcXFwvKSkqKT8kYDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1MRW5kUGF0dGVybihpbnNlcnQpIHtcclxuICAgIGlmIChpbnNlcnQpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSBlc2NhcGUoaW5zZXJ0LnRyaW1SaWdodCgpLnRyaW1MZWZ0KCkpO1xyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYF5cXFxccyoke21hdGNofVteL10qXFxcXCpcXFxcL1xcXFxzKiRgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuZnVuY3Rpb24gZ2V0TUxFbXB0eUVuZFBhdHRlcm4oaW5zZXJ0KSB7XHJcbiAgICBpZiAoaW5zZXJ0KSB7XHJcbiAgICAgICAgaW5zZXJ0ID0gaW5zZXJ0LnRyaW1SaWdodCgpO1xyXG4gICAgICAgIGlmIChpbnNlcnQpIHtcclxuICAgICAgICAgICAgaWYgKGluc2VydC5lbmRzV2l0aCgnKicpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnQgPSBpbnNlcnQuc3Vic3RyKDAsIGluc2VydC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSBlc2NhcGUoaW5zZXJ0LnRyaW1SaWdodCgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGBeXFxcXHMqJHttYXRjaH1cXFxcKlxcXFwvXFxcXHMqJGA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5mdW5jdGlvbiBnZXRTTEJlZ2luUGF0dGVybihpbnNlcnQpIHtcclxuICAgIGlmIChpbnNlcnQpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSBlc2NhcGUoaW5zZXJ0LnRyaW1SaWdodCgpKTtcclxuICAgICAgICByZXR1cm4gYF5cXFxccyoke21hdGNofS4qJGA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNMQ29udGludWVQYXR0ZXJuKGluc2VydCkge1xyXG4gICAgaWYgKGluc2VydCkge1xyXG4gICAgICAgIGxldCBtYXRjaCA9IGVzY2FwZShpbnNlcnQudHJpbVJpZ2h0KCkpO1xyXG4gICAgICAgIHJldHVybiBgXlxcXFxzKiR7bWF0Y2h9LiskYDtcclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U0xFbmRQYXR0ZXJuKGluc2VydCkge1xyXG4gICAgaWYgKGluc2VydCkge1xyXG4gICAgICAgIGxldCBtYXRjaCA9IGVzY2FwZShpbnNlcnQpO1xyXG4gICAgICAgIGxldCB0cmltbWVkID0gZXNjYXBlKGluc2VydC50cmltUmlnaHQoKSk7XHJcbiAgICAgICAgaWYgKG1hdGNoICE9PSB0cmltbWVkKSB7XHJcbiAgICAgICAgICAgIG1hdGNoID0gYCgke21hdGNofXwke3RyaW1tZWR9KWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgXlxcXFxzKiR7bWF0Y2h9JGA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1MU3BsaXRSdWxlKGNvbW1lbnQpIHtcclxuICAgIGlmIChjb21tZW50KSB7XHJcbiAgICAgICAgbGV0IGJlZm9yZVBhdHRlcm4gPSBnZXRNTEJlZ2luUGF0dGVybihjb21tZW50LmJlZ2luKTtcclxuICAgICAgICBpZiAoYmVmb3JlUGF0dGVybikge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYmVmb3JlVGV4dDogbmV3IFJlZ0V4cChiZWZvcmVQYXR0ZXJuKSxcclxuICAgICAgICAgICAgICAgIGFmdGVyVGV4dDogbmV3IFJlZ0V4cChnZXRNTFNwbGl0QWZ0ZXJQYXR0ZXJuKCkpLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50QWN0aW9uOiB2c2NvZGUuSW5kZW50QWN0aW9uLkluZGVudE91dGRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVGV4dDogY29tbWVudC5jb250aW51ZSA/IGNvbW1lbnQuY29udGludWUgOiAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuZnVuY3Rpb24gZ2V0TUxGaXJzdExpbmVSdWxlKGNvbW1lbnQpIHtcclxuICAgIGlmIChjb21tZW50KSB7XHJcbiAgICAgICAgbGV0IGJlZm9yZVBhdHRlcm4gPSBnZXRNTEJlZ2luUGF0dGVybihjb21tZW50LmJlZ2luKTtcclxuICAgICAgICBpZiAoYmVmb3JlUGF0dGVybikge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYmVmb3JlVGV4dDogbmV3IFJlZ0V4cChiZWZvcmVQYXR0ZXJuKSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGVudEFjdGlvbjogdnNjb2RlLkluZGVudEFjdGlvbi5Ob25lLFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZFRleHQ6IGNvbW1lbnQuY29udGludWUgPyBjb21tZW50LmNvbnRpbnVlIDogJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1MQ29udGludWF0aW9uUnVsZShjb21tZW50KSB7XHJcbiAgICBpZiAoY29tbWVudCkge1xyXG4gICAgICAgIGxldCBjb250aW51ZVBhdHRlcm4gPSBnZXRNTENvbnRpbnVlUGF0dGVybihjb21tZW50LmNvbnRpbnVlKTtcclxuICAgICAgICBpZiAoY29udGludWVQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUZXh0OiBuZXcgUmVnRXhwKGNvbnRpbnVlUGF0dGVybiksXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRlbnRBY3Rpb246IHZzY29kZS5JbmRlbnRBY3Rpb24uTm9uZSxcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRUZXh0OiBjb21tZW50LmNvbnRpbnVlLnRyaW1MZWZ0KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldE1MRW5kUnVsZShjb21tZW50KSB7XHJcbiAgICBpZiAoY29tbWVudCkge1xyXG4gICAgICAgIGxldCBlbmRQYXR0ZXJuID0gZ2V0TUxFbmRQYXR0ZXJuKGNvbW1lbnQuY29udGludWUpO1xyXG4gICAgICAgIGlmIChlbmRQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUZXh0OiBuZXcgUmVnRXhwKGVuZFBhdHRlcm4pLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50QWN0aW9uOiB2c2NvZGUuSW5kZW50QWN0aW9uLk5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVGV4dDogY29tbWVudC5jb250aW51ZS5sZW5ndGggLSBjb21tZW50LmNvbnRpbnVlLnRyaW1MZWZ0KCkubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5mdW5jdGlvbiBnZXRNTEVtcHR5RW5kUnVsZShjb21tZW50KSB7XHJcbiAgICBpZiAoY29tbWVudCkge1xyXG4gICAgICAgIGxldCBlbmRQYXR0ZXJuID0gZ2V0TUxFbXB0eUVuZFBhdHRlcm4oY29tbWVudC5jb250aW51ZSk7XHJcbiAgICAgICAgaWYgKGVuZFBhdHRlcm4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGJlZm9yZVRleHQ6IG5ldyBSZWdFeHAoZW5kUGF0dGVybiksXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRlbnRBY3Rpb246IHZzY29kZS5JbmRlbnRBY3Rpb24uTm9uZSxcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVUZXh0OiBjb21tZW50LmNvbnRpbnVlLmxlbmd0aCAtIGNvbW1lbnQuY29udGludWUudHJpbUxlZnQoKS5sZW5ndGhcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNMRmlyc3RMaW5lUnVsZShjb21tZW50KSB7XHJcbiAgICBpZiAoY29tbWVudCkge1xyXG4gICAgICAgIGxldCBjb250aW51ZVBhdHRlcm4gPSBnZXRTTEJlZ2luUGF0dGVybihjb21tZW50LmJlZ2luKTtcclxuICAgICAgICBpZiAoY29udGludWVQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUZXh0OiBuZXcgUmVnRXhwKGNvbnRpbnVlUGF0dGVybiksXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRlbnRBY3Rpb246IHZzY29kZS5JbmRlbnRBY3Rpb24uTm9uZSxcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRUZXh0OiBjb21tZW50LmNvbnRpbnVlLnRyaW1MZWZ0KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNMQ29udGludWF0aW9uUnVsZShjb21tZW50KSB7XHJcbiAgICBpZiAoY29tbWVudCkge1xyXG4gICAgICAgIGxldCBjb250aW51ZVBhdHRlcm4gPSBnZXRTTENvbnRpbnVlUGF0dGVybihjb21tZW50LmNvbnRpbnVlKTtcclxuICAgICAgICBpZiAoY29udGludWVQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUZXh0OiBuZXcgUmVnRXhwKGNvbnRpbnVlUGF0dGVybiksXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRlbnRBY3Rpb246IHZzY29kZS5JbmRlbnRBY3Rpb24uTm9uZSxcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRUZXh0OiBjb21tZW50LmNvbnRpbnVlLnRyaW1MZWZ0KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNMRW5kUnVsZShjb21tZW50KSB7XHJcbiAgICBpZiAoY29tbWVudCkge1xyXG4gICAgICAgIGxldCBlbmRQYXR0ZXJuID0gZ2V0U0xFbmRQYXR0ZXJuKGNvbW1lbnQuY29udGludWUpO1xyXG4gICAgICAgIGlmIChlbmRQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUZXh0OiBuZXcgUmVnRXhwKGVuZFBhdHRlcm4pLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50QWN0aW9uOiB2c2NvZGUuSW5kZW50QWN0aW9uLk5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVGV4dDogY29tbWVudC5jb250aW51ZS5sZW5ndGggLSBjb21tZW50LmNvbnRpbnVlLnRyaW1MZWZ0KCkubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5mdW5jdGlvbiBnZXRMYW5ndWFnZUNvbmZpZyhsYW5ndWFnZUlkLCByZXNvdXJjZSkge1xyXG4gICAgbGV0IHNldHRpbmdzID0gbmV3IHNldHRpbmdzXzEuQ3BwU2V0dGluZ3MocmVzb3VyY2UpO1xyXG4gICAgbGV0IHBhdHRlcm5zID0gc2V0dGluZ3MuY29tbWVudENvbnRpbnVhdGlvblBhdHRlcm5zO1xyXG4gICAgcmV0dXJuIGdldExhbmd1YWdlQ29uZmlnRnJvbVBhdHRlcm5zKGxhbmd1YWdlSWQsIHBhdHRlcm5zKTtcclxufVxyXG5leHBvcnRzLmdldExhbmd1YWdlQ29uZmlnID0gZ2V0TGFuZ3VhZ2VDb25maWc7XHJcbmZ1bmN0aW9uIGdldExhbmd1YWdlQ29uZmlnRnJvbVBhdHRlcm5zKGxhbmd1YWdlSWQsIHBhdHRlcm5zKSB7XHJcbiAgICBsZXQgYmVnaW5QYXR0ZXJucyA9IFtdO1xyXG4gICAgbGV0IGNvbnRpbnVlUGF0dGVybnMgPSBbXTtcclxuICAgIGxldCBkdXBsaWNhdGVzID0gZmFsc2U7XHJcbiAgICBsZXQgYmVnaW5SdWxlcyA9IFtdO1xyXG4gICAgbGV0IGNvbnRpbnVlUnVsZXMgPSBbXTtcclxuICAgIGxldCBlbmRSdWxlcyA9IFtdO1xyXG4gICAgcGF0dGVybnMuZm9yRWFjaChwYXR0ZXJuID0+IHtcclxuICAgICAgICBsZXQgYyA9ICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikgPyB7IGJlZ2luOiBwYXR0ZXJuLCBjb250aW51ZTogcGF0dGVybi5zdGFydHNXaXRoKCcvKicpID8gXCIgKiBcIiA6IHBhdHRlcm4gfSA6IHBhdHRlcm47XHJcbiAgICAgICAgbGV0IHIgPSBjb25zdHJ1Y3RDb21tZW50UnVsZXMoYywgbGFuZ3VhZ2VJZCk7XHJcbiAgICAgICAgaWYgKGJlZ2luUGF0dGVybnMuaW5kZXhPZihjLmJlZ2luKSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKHIuYmVnaW4gJiYgci5iZWdpbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBiZWdpblJ1bGVzID0gYmVnaW5SdWxlcy5jb25jYXQoci5iZWdpbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmVnaW5QYXR0ZXJucy5wdXNoKGMuYmVnaW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZHVwbGljYXRlcyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250aW51ZVBhdHRlcm5zLmluZGV4T2YoYy5jb250aW51ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIGlmIChyLmNvbnRpbnVlICYmIHIuY29udGludWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWVSdWxlcyA9IGNvbnRpbnVlUnVsZXMuY29uY2F0KHIuY29udGludWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyLmVuZCAmJiByLmVuZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRSdWxlcyA9IGVuZFJ1bGVzLmNvbmNhdChyLmVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGludWVQYXR0ZXJucy5wdXNoKGMuY29udGludWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKGR1cGxpY2F0ZXMpIHtcclxuICAgICAgICBsb2dnZXJfMS5nZXRPdXRwdXRDaGFubmVsKCkuYXBwZW5kTGluZShcIkR1cGxpY2F0ZSBtdWx0aWxpbmUgY29tbWVudCBwYXR0ZXJucyBkZXRlY3RlZC5cIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBvbkVudGVyUnVsZXM6IGJlZ2luUnVsZXMuY29uY2F0KGNvbnRpbnVlUnVsZXMpLmNvbmNhdChlbmRSdWxlcykuZmlsdGVyKGUgPT4gKGUpKSB9O1xyXG59XHJcbmV4cG9ydHMuZ2V0TGFuZ3VhZ2VDb25maWdGcm9tUGF0dGVybnMgPSBnZXRMYW5ndWFnZUNvbmZpZ0Zyb21QYXR0ZXJucztcclxuZnVuY3Rpb24gY29uc3RydWN0Q29tbWVudFJ1bGVzKGNvbW1lbnQsIGxhbmd1YWdlSWQpIHtcclxuICAgIGlmIChjb21tZW50ICYmIGNvbW1lbnQuYmVnaW4gJiYgY29tbWVudC5iZWdpbi5zdGFydHNXaXRoKCcvKicpICYmIChsYW5ndWFnZUlkID09PSAnYycgfHwgbGFuZ3VhZ2VJZCA9PT0gJ2NwcCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVnaW46IFtcclxuICAgICAgICAgICAgICAgIGdldE1MU3BsaXRSdWxlKGNvbW1lbnQpLFxyXG4gICAgICAgICAgICAgICAgZ2V0TUxGaXJzdExpbmVSdWxlKGNvbW1lbnQpXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGNvbnRpbnVlOiBbZ2V0TUxDb250aW51YXRpb25SdWxlKGNvbW1lbnQpXSxcclxuICAgICAgICAgICAgZW5kOiBbXHJcbiAgICAgICAgICAgICAgICBnZXRNTEVtcHR5RW5kUnVsZShjb21tZW50KSxcclxuICAgICAgICAgICAgICAgIGdldE1MRW5kUnVsZShjb21tZW50KVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGNvbW1lbnQgJiYgY29tbWVudC5iZWdpbiAmJiBjb21tZW50LmJlZ2luLnN0YXJ0c1dpdGgoJy8vJykgJiYgbGFuZ3VhZ2VJZCA9PT0gJ2NwcCcpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWdpbjogKGNvbW1lbnQuYmVnaW4gPT09IGNvbW1lbnQuY29udGludWUpID8gW10gOiBbZ2V0U0xGaXJzdExpbmVSdWxlKGNvbW1lbnQpXSxcclxuICAgICAgICAgICAgY29udGludWU6IFtnZXRTTENvbnRpbnVhdGlvblJ1bGUoY29tbWVudCldLFxyXG4gICAgICAgICAgICBlbmQ6IFtnZXRTTEVuZFJ1bGUoY29tbWVudCldXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmVnaW46IFtdLFxyXG4gICAgICAgIGNvbnRpbnVlOiBbXSxcclxuICAgICAgICBlbmQ6IFtdXHJcbiAgICB9O1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/LanguageServer/languageConfig.ts\n");

/***/ }),

/***/ "./src/LanguageServer/persistentState.ts":
/*!***********************************************!*\
  !*** ./src/LanguageServer/persistentState.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nclass PersistentStateBase {\r\n    constructor(key, defaultValue, state) {\r\n        this.key = key;\r\n        this.defaultvalue = defaultValue;\r\n        this.state = state;\r\n    }\r\n    get Value() {\r\n        return this.state.get(this.key, this.defaultvalue);\r\n    }\r\n    set Value(newValue) {\r\n        this.state.update(this.key, newValue);\r\n    }\r\n    get DefaultValue() {\r\n        return this.defaultvalue;\r\n    }\r\n}\r\nclass PersistentState extends PersistentStateBase {\r\n    constructor(key, defaultValue) {\r\n        super(key, defaultValue, util.extensionContext.globalState);\r\n    }\r\n}\r\nexports.PersistentState = PersistentState;\r\nclass PersistentWorkspaceState extends PersistentStateBase {\r\n    constructor(key, defaultValue) {\r\n        super(key, defaultValue, util.extensionContext.workspaceState);\r\n    }\r\n}\r\nexports.PersistentWorkspaceState = PersistentWorkspaceState;\r\nclass PersistentFolderState extends PersistentWorkspaceState {\r\n    constructor(key, defaultValue, folder) {\r\n        let newKey = key + (folder ? `-${path.basename(folder)}` : \"-untitled\");\r\n        super(newKey, defaultValue);\r\n    }\r\n}\r\nexports.PersistentFolderState = PersistentFolderState;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTGFuZ3VhZ2VTZXJ2ZXIvcGVyc2lzdGVudFN0YXRlLnRzLmpzIiwic291cmNlcyI6WyIuLi8uL3NyYy9MYW5ndWFnZVNlcnZlci9wZXJzaXN0ZW50U3RhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNsYXNzIFBlcnNpc3RlbnRTdGF0ZUJhc2Uge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5LCBkZWZhdWx0VmFsdWUsIHN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0dmFsdWUgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgfVxyXG4gICAgZ2V0IFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmdldCh0aGlzLmtleSwgdGhpcy5kZWZhdWx0dmFsdWUpO1xyXG4gICAgfVxyXG4gICAgc2V0IFZhbHVlKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS51cGRhdGUodGhpcy5rZXksIG5ld1ZhbHVlKTtcclxuICAgIH1cclxuICAgIGdldCBEZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFBlcnNpc3RlbnRTdGF0ZSBleHRlbmRzIFBlcnNpc3RlbnRTdGF0ZUJhc2Uge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5LCBkZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICBzdXBlcihrZXksIGRlZmF1bHRWYWx1ZSwgdXRpbC5leHRlbnNpb25Db250ZXh0Lmdsb2JhbFN0YXRlKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBlcnNpc3RlbnRTdGF0ZSA9IFBlcnNpc3RlbnRTdGF0ZTtcclxuY2xhc3MgUGVyc2lzdGVudFdvcmtzcGFjZVN0YXRlIGV4dGVuZHMgUGVyc2lzdGVudFN0YXRlQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihrZXksIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIHN1cGVyKGtleSwgZGVmYXVsdFZhbHVlLCB1dGlsLmV4dGVuc2lvbkNvbnRleHQud29ya3NwYWNlU3RhdGUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGVyc2lzdGVudFdvcmtzcGFjZVN0YXRlID0gUGVyc2lzdGVudFdvcmtzcGFjZVN0YXRlO1xyXG5jbGFzcyBQZXJzaXN0ZW50Rm9sZGVyU3RhdGUgZXh0ZW5kcyBQZXJzaXN0ZW50V29ya3NwYWNlU3RhdGUge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5LCBkZWZhdWx0VmFsdWUsIGZvbGRlcikge1xyXG4gICAgICAgIGxldCBuZXdLZXkgPSBrZXkgKyAoZm9sZGVyID8gYC0ke3BhdGguYmFzZW5hbWUoZm9sZGVyKX1gIDogXCItdW50aXRsZWRcIik7XHJcbiAgICAgICAgc3VwZXIobmV3S2V5LCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGVyc2lzdGVudEZvbGRlclN0YXRlID0gUGVyc2lzdGVudEZvbGRlclN0YXRlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/LanguageServer/persistentState.ts\n");

/***/ }),

/***/ "./src/LanguageServer/protocolFilter.ts":
/*!**********************************************!*\
  !*** ./src/LanguageServer/protocolFilter.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction createProtocolFilter(me, clients) {\r\n    let defaultHandler = (data, callback) => { if (clients.ActiveClient === me) {\r\n        me.notifyWhenReady(() => callback(data));\r\n    } };\r\n    let invoke1 = (a, callback) => { if (clients.ActiveClient === me) {\r\n        return me.requestWhenReady(() => callback(a));\r\n    } return null; };\r\n    let invoke2 = (a, b, callback) => { if (clients.ActiveClient === me) {\r\n        return me.requestWhenReady(() => callback(a, b));\r\n    } return null; };\r\n    let invoke3 = (a, b, c, callback) => { if (clients.ActiveClient === me) {\r\n        return me.requestWhenReady(() => callback(a, b, c));\r\n    } return null; };\r\n    let invoke4 = (a, b, c, d, callback) => { if (clients.ActiveClient === me) {\r\n        return me.requestWhenReady(() => callback(a, b, c, d));\r\n    } return null; };\r\n    let invoke5 = (a, b, c, d, e, callback) => { if (clients.ActiveClient === me) {\r\n        return me.requestWhenReady(() => callback(a, b, c, d, e));\r\n    } return null; };\r\n    return {\r\n        didOpen: (document, sendMessage) => {\r\n            if (clients.checkOwnership(me, document)) {\r\n                me.TrackedDocuments.add(document);\r\n                me.provideCustomConfiguration(document).then(() => {\r\n                    sendMessage(document);\r\n                }, () => {\r\n                    sendMessage(document);\r\n                });\r\n            }\r\n        },\r\n        didChange: defaultHandler,\r\n        willSave: defaultHandler,\r\n        willSaveWaitUntil: (event, sendMessage) => {\r\n            if (clients.ActiveClient === me) {\r\n                return me.requestWhenReady(() => sendMessage(event));\r\n            }\r\n            return Promise.resolve([]);\r\n        },\r\n        didSave: defaultHandler,\r\n        didClose: (document, sendMessage) => {\r\n            if (clients.ActiveClient === me) {\r\n                console.assert(me.TrackedDocuments.has(document));\r\n                me.TrackedDocuments.delete(document);\r\n                me.notifyWhenReady(() => sendMessage(document));\r\n            }\r\n        },\r\n        provideCompletionItem: invoke4,\r\n        resolveCompletionItem: invoke2,\r\n        provideHover: invoke3,\r\n        provideSignatureHelp: invoke3,\r\n        provideDefinition: invoke3,\r\n        provideReferences: invoke4,\r\n        provideDocumentHighlights: invoke3,\r\n        provideDocumentSymbols: invoke2,\r\n        provideWorkspaceSymbols: invoke2,\r\n        provideCodeActions: invoke4,\r\n        provideCodeLenses: invoke2,\r\n        resolveCodeLens: invoke2,\r\n        provideDocumentFormattingEdits: invoke3,\r\n        provideDocumentRangeFormattingEdits: invoke4,\r\n        provideOnTypeFormattingEdits: invoke5,\r\n        provideRenameEdits: invoke4,\r\n        provideDocumentLinks: invoke2,\r\n        resolveDocumentLink: invoke2,\r\n    };\r\n}\r\nexports.createProtocolFilter = createProtocolFilter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTGFuZ3VhZ2VTZXJ2ZXIvcHJvdG9jb2xGaWx0ZXIudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL0xhbmd1YWdlU2VydmVyL3Byb3RvY29sRmlsdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBjcmVhdGVQcm90b2NvbEZpbHRlcihtZSwgY2xpZW50cykge1xyXG4gICAgbGV0IGRlZmF1bHRIYW5kbGVyID0gKGRhdGEsIGNhbGxiYWNrKSA9PiB7IGlmIChjbGllbnRzLkFjdGl2ZUNsaWVudCA9PT0gbWUpIHtcclxuICAgICAgICBtZS5ub3RpZnlXaGVuUmVhZHkoKCkgPT4gY2FsbGJhY2soZGF0YSkpO1xyXG4gICAgfSB9O1xyXG4gICAgbGV0IGludm9rZTEgPSAoYSwgY2FsbGJhY2spID0+IHsgaWYgKGNsaWVudHMuQWN0aXZlQ2xpZW50ID09PSBtZSkge1xyXG4gICAgICAgIHJldHVybiBtZS5yZXF1ZXN0V2hlblJlYWR5KCgpID0+IGNhbGxiYWNrKGEpKTtcclxuICAgIH0gcmV0dXJuIG51bGw7IH07XHJcbiAgICBsZXQgaW52b2tlMiA9IChhLCBiLCBjYWxsYmFjaykgPT4geyBpZiAoY2xpZW50cy5BY3RpdmVDbGllbnQgPT09IG1lKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lLnJlcXVlc3RXaGVuUmVhZHkoKCkgPT4gY2FsbGJhY2soYSwgYikpO1xyXG4gICAgfSByZXR1cm4gbnVsbDsgfTtcclxuICAgIGxldCBpbnZva2UzID0gKGEsIGIsIGMsIGNhbGxiYWNrKSA9PiB7IGlmIChjbGllbnRzLkFjdGl2ZUNsaWVudCA9PT0gbWUpIHtcclxuICAgICAgICByZXR1cm4gbWUucmVxdWVzdFdoZW5SZWFkeSgoKSA9PiBjYWxsYmFjayhhLCBiLCBjKSk7XHJcbiAgICB9IHJldHVybiBudWxsOyB9O1xyXG4gICAgbGV0IGludm9rZTQgPSAoYSwgYiwgYywgZCwgY2FsbGJhY2spID0+IHsgaWYgKGNsaWVudHMuQWN0aXZlQ2xpZW50ID09PSBtZSkge1xyXG4gICAgICAgIHJldHVybiBtZS5yZXF1ZXN0V2hlblJlYWR5KCgpID0+IGNhbGxiYWNrKGEsIGIsIGMsIGQpKTtcclxuICAgIH0gcmV0dXJuIG51bGw7IH07XHJcbiAgICBsZXQgaW52b2tlNSA9IChhLCBiLCBjLCBkLCBlLCBjYWxsYmFjaykgPT4geyBpZiAoY2xpZW50cy5BY3RpdmVDbGllbnQgPT09IG1lKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lLnJlcXVlc3RXaGVuUmVhZHkoKCkgPT4gY2FsbGJhY2soYSwgYiwgYywgZCwgZSkpO1xyXG4gICAgfSByZXR1cm4gbnVsbDsgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlkT3BlbjogKGRvY3VtZW50LCBzZW5kTWVzc2FnZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2xpZW50cy5jaGVja093bmVyc2hpcChtZSwgZG9jdW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBtZS5UcmFja2VkRG9jdW1lbnRzLmFkZChkb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICBtZS5wcm92aWRlQ3VzdG9tQ29uZmlndXJhdGlvbihkb2N1bWVudCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UoZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlKGRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaWRDaGFuZ2U6IGRlZmF1bHRIYW5kbGVyLFxyXG4gICAgICAgIHdpbGxTYXZlOiBkZWZhdWx0SGFuZGxlcixcclxuICAgICAgICB3aWxsU2F2ZVdhaXRVbnRpbDogKGV2ZW50LCBzZW5kTWVzc2FnZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2xpZW50cy5BY3RpdmVDbGllbnQgPT09IG1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWUucmVxdWVzdFdoZW5SZWFkeSgoKSA9PiBzZW5kTWVzc2FnZShldmVudCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlkU2F2ZTogZGVmYXVsdEhhbmRsZXIsXHJcbiAgICAgICAgZGlkQ2xvc2U6IChkb2N1bWVudCwgc2VuZE1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNsaWVudHMuQWN0aXZlQ2xpZW50ID09PSBtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQobWUuVHJhY2tlZERvY3VtZW50cy5oYXMoZG9jdW1lbnQpKTtcclxuICAgICAgICAgICAgICAgIG1lLlRyYWNrZWREb2N1bWVudHMuZGVsZXRlKGRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgIG1lLm5vdGlmeVdoZW5SZWFkeSgoKSA9PiBzZW5kTWVzc2FnZShkb2N1bWVudCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcm92aWRlQ29tcGxldGlvbkl0ZW06IGludm9rZTQsXHJcbiAgICAgICAgcmVzb2x2ZUNvbXBsZXRpb25JdGVtOiBpbnZva2UyLFxyXG4gICAgICAgIHByb3ZpZGVIb3ZlcjogaW52b2tlMyxcclxuICAgICAgICBwcm92aWRlU2lnbmF0dXJlSGVscDogaW52b2tlMyxcclxuICAgICAgICBwcm92aWRlRGVmaW5pdGlvbjogaW52b2tlMyxcclxuICAgICAgICBwcm92aWRlUmVmZXJlbmNlczogaW52b2tlNCxcclxuICAgICAgICBwcm92aWRlRG9jdW1lbnRIaWdobGlnaHRzOiBpbnZva2UzLFxyXG4gICAgICAgIHByb3ZpZGVEb2N1bWVudFN5bWJvbHM6IGludm9rZTIsXHJcbiAgICAgICAgcHJvdmlkZVdvcmtzcGFjZVN5bWJvbHM6IGludm9rZTIsXHJcbiAgICAgICAgcHJvdmlkZUNvZGVBY3Rpb25zOiBpbnZva2U0LFxyXG4gICAgICAgIHByb3ZpZGVDb2RlTGVuc2VzOiBpbnZva2UyLFxyXG4gICAgICAgIHJlc29sdmVDb2RlTGVuczogaW52b2tlMixcclxuICAgICAgICBwcm92aWRlRG9jdW1lbnRGb3JtYXR0aW5nRWRpdHM6IGludm9rZTMsXHJcbiAgICAgICAgcHJvdmlkZURvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdHM6IGludm9rZTQsXHJcbiAgICAgICAgcHJvdmlkZU9uVHlwZUZvcm1hdHRpbmdFZGl0czogaW52b2tlNSxcclxuICAgICAgICBwcm92aWRlUmVuYW1lRWRpdHM6IGludm9rZTQsXHJcbiAgICAgICAgcHJvdmlkZURvY3VtZW50TGlua3M6IGludm9rZTIsXHJcbiAgICAgICAgcmVzb2x2ZURvY3VtZW50TGluazogaW52b2tlMixcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVQcm90b2NvbEZpbHRlciA9IGNyZWF0ZVByb3RvY29sRmlsdGVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/LanguageServer/protocolFilter.ts\n");

/***/ }),

/***/ "./src/LanguageServer/settings.ts":
/*!****************************************!*\
  !*** ./src/LanguageServer/settings.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nfunction getTarget() {\r\n    return (vscode.workspace.workspaceFolders) ? vscode.ConfigurationTarget.WorkspaceFolder : vscode.ConfigurationTarget.Global;\r\n}\r\nclass Settings {\r\n    constructor(section, resource) {\r\n        this.settings = vscode.workspace.getConfiguration(section, resource ? resource : null);\r\n    }\r\n    get Section() { return this.settings; }\r\n}\r\nclass CppSettings extends Settings {\r\n    constructor(resource) {\r\n        super(\"C_Cpp\", resource);\r\n    }\r\n    get clangFormatPath() { return super.Section.get(\"clang_format_path\"); }\r\n    get clangFormatStyle() { return super.Section.get(\"clang_format_style\"); }\r\n    get clangFormatFallbackStyle() { return super.Section.get(\"clang_format_fallbackStyle\"); }\r\n    get clangFormatSortIncludes() { return super.Section.get(\"clang_format_sortIncludes\"); }\r\n    get clangFormatOnSave() { return super.Section.get(\"clang_format_formatOnSave\"); }\r\n    get formatting() { return super.Section.get(\"formatting\"); }\r\n    get suggestSnippets() { return super.Section.get(\"suggestSnippets\"); }\r\n    get intelliSenseEngine() { return super.Section.get(\"intelliSenseEngine\"); }\r\n    get intelliSenseEngineFallback() { return super.Section.get(\"intelliSenseEngineFallback\"); }\r\n    get intelliSenseCachePath() { return super.Section.get(\"intelliSenseCachePath\"); }\r\n    get intelliSenseCacheSize() { return super.Section.get(\"intelliSenseCacheSize\"); }\r\n    get errorSquiggles() { return super.Section.get(\"errorSquiggles\"); }\r\n    get dimInactiveRegions() { return super.Section.get(\"dimInactiveRegions\"); }\r\n    get inactiveRegionOpacity() { return super.Section.get(\"inactiveRegionOpacity\"); }\r\n    get inactiveRegionForegroundColor() { return super.Section.get(\"inactiveRegionForegroundColor\"); }\r\n    get inactiveRegionBackgroundColor() { return super.Section.get(\"inactiveRegionBackgroundColor\"); }\r\n    get autoComplete() { return super.Section.get(\"autocomplete\"); }\r\n    get loggingLevel() { return super.Section.get(\"loggingLevel\"); }\r\n    get navigationLength() { return super.Section.get(\"navigation.length\", 60); }\r\n    get autoAddFileAssociations() { return super.Section.get(\"autoAddFileAssociations\"); }\r\n    get workspaceParsingPriority() { return super.Section.get(\"workspaceParsingPriority\"); }\r\n    get workspaceSymbols() { return super.Section.get(\"workspaceSymbols\"); }\r\n    get exclusionPolicy() { return super.Section.get(\"exclusionPolicy\"); }\r\n    get commentContinuationPatterns() { return super.Section.get(\"commentContinuationPatterns\"); }\r\n    get configurationWarnings() { return super.Section.get(\"configurationWarnings\"); }\r\n    get preferredPathSeparator() { return super.Section.get(\"preferredPathSeparator\"); }\r\n    get updateChannel() { return super.Section.get(\"updateChannel\"); }\r\n    get defaultIncludePath() { return super.Section.get(\"default.includePath\"); }\r\n    get defaultDefines() { return super.Section.get(\"default.defines\"); }\r\n    get defaultMacFrameworkPath() { return super.Section.get(\"default.macFrameworkPath\"); }\r\n    get defaultWindowsSdkVersion() { return super.Section.get(\"default.windowsSdkVersion\"); }\r\n    get defaultCompileCommands() { return super.Section.get(\"default.compileCommands\"); }\r\n    get defaultForcedInclude() { return super.Section.get(\"default.forcedInclude\"); }\r\n    get defaultIntelliSenseMode() { return super.Section.get(\"default.intelliSenseMode\"); }\r\n    get defaultCompilerPath() { return super.Section.get(\"default.compilerPath\"); }\r\n    get defaultCStandard() { return super.Section.get(\"default.cStandard\"); }\r\n    get defaultCppStandard() { return super.Section.get(\"default.cppStandard\"); }\r\n    get defaultConfigurationProvider() { return super.Section.get(\"default.configurationProvider\"); }\r\n    get defaultBrowsePath() { return super.Section.get(\"default.browse.path\"); }\r\n    get defaultDatabaseFilename() { return super.Section.get(\"default.browse.databaseFilename\"); }\r\n    get defaultLimitSymbolsToIncludedHeaders() { return super.Section.get(\"default.browse.limitSymbolsToIncludedHeaders\"); }\r\n    get defaultSystemIncludePath() { return super.Section.get(\"default.systemIncludePath\"); }\r\n    toggleSetting(name, value1, value2) {\r\n        let value = super.Section.get(name);\r\n        super.Section.update(name, value === value1 ? value2 : value1, getTarget());\r\n    }\r\n    update(name, value) {\r\n        super.Section.update(name, value);\r\n    }\r\n}\r\nexports.CppSettings = CppSettings;\r\nclass OtherSettings {\r\n    constructor(resource) {\r\n        if (!resource) {\r\n            resource = null;\r\n        }\r\n        this.resource = resource;\r\n    }\r\n    get editorTabSize() { return vscode.workspace.getConfiguration(\"editor\", this.resource).get(\"tabSize\"); }\r\n    get filesAssociations() { return vscode.workspace.getConfiguration(\"files\", null).get(\"associations\"); }\r\n    get filesExclude() { return vscode.workspace.getConfiguration(\"files\", this.resource).get(\"exclude\"); }\r\n    get searchExclude() { return vscode.workspace.getConfiguration(\"search\", this.resource).get(\"exclude\"); }\r\n    set filesAssociations(value) {\r\n        vscode.workspace.getConfiguration(\"files\", null).update(\"associations\", value, vscode.ConfigurationTarget.Workspace);\r\n    }\r\n}\r\nexports.OtherSettings = OtherSettings;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LanguageServer/settings.ts\n");

/***/ }),

/***/ "./src/LanguageServer/settingsTracker.ts":
/*!***********************************************!*\
  !*** ./src/LanguageServer/settingsTracker.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst util = __webpack_require__(/*! ../common */ \"./src/common.ts\");\r\nconst maxSettingLengthForTelemetry = 50;\r\nlet cache = undefined;\r\nclass SettingsTracker {\r\n    constructor(resource) {\r\n        this.previousCppSettings = {};\r\n        this.resource = resource;\r\n        this.collectSettings(() => true);\r\n    }\r\n    getUserModifiedSettings() {\r\n        let filter = (key, val, settings) => {\r\n            return !this.areEqual(val, settings.inspect(key).defaultValue);\r\n        };\r\n        return this.collectSettings(filter);\r\n    }\r\n    getChangedSettings() {\r\n        let filter = (key, val) => {\r\n            return !(key in this.previousCppSettings) || !this.areEqual(val, this.previousCppSettings[key]);\r\n        };\r\n        return this.collectSettings(filter);\r\n    }\r\n    collectSettings(filter) {\r\n        let settings = vscode.workspace.getConfiguration(\"C_Cpp\", this.resource);\r\n        let result = {};\r\n        for (let key in settings) {\r\n            let val = this.getSetting(settings, key);\r\n            if (val === undefined) {\r\n                continue;\r\n            }\r\n            if (val instanceof Object && !(val instanceof Array)) {\r\n                for (let subKey in val) {\r\n                    let newKey = key + \".\" + subKey;\r\n                    let subVal = this.getSetting(settings, newKey);\r\n                    if (subVal === undefined) {\r\n                        continue;\r\n                    }\r\n                    let entry = this.filterAndSanitize(newKey, subVal, settings, filter);\r\n                    if (entry && entry.key && entry.value) {\r\n                        result[entry.key] = entry.value;\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            let entry = this.filterAndSanitize(key, val, settings, filter);\r\n            if (entry && entry.key && entry.value) {\r\n                result[entry.key] = entry.value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    getSetting(settings, key) {\r\n        if (settings.inspect(key).defaultValue !== undefined) {\r\n            let val = settings.get(key);\r\n            if (val instanceof Object) {\r\n                return val;\r\n            }\r\n            let curSetting = util.packageJson.contributes.configuration.properties[\"C_Cpp.\" + key];\r\n            if (curSetting) {\r\n                let type = this.typeMatch(val, curSetting[\"type\"]);\r\n                if (type) {\r\n                    if (type !== \"string\") {\r\n                        return val;\r\n                    }\r\n                    let curEnum = curSetting[\"enum\"];\r\n                    if (curEnum && curEnum.indexOf(val) === -1) {\r\n                        return \"<invalid>\";\r\n                    }\r\n                    return val;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    typeMatch(value, type) {\r\n        if (type) {\r\n            if (type instanceof Array) {\r\n                for (let i = 0; i < type.length; i++) {\r\n                    let t = type[i];\r\n                    if (t) {\r\n                        if (typeof value === t) {\r\n                            return t;\r\n                        }\r\n                        if (t === \"array\" && value instanceof Array) {\r\n                            return t;\r\n                        }\r\n                        if (t === \"null\" && value === null) {\r\n                            return t;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (typeof type === \"string\" && typeof value === type) {\r\n                return type;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    filterAndSanitize(key, val, settings, filter) {\r\n        if (filter(key, val, settings)) {\r\n            let value;\r\n            this.previousCppSettings[key] = val;\r\n            switch (key) {\r\n                case \"clang_format_style\":\r\n                case \"clang_format_fallbackStyle\": {\r\n                    let newKey = key + \"2\";\r\n                    if (val) {\r\n                        switch (String(val).toLowerCase()) {\r\n                            case \"visual studio\":\r\n                            case \"llvm\":\r\n                            case \"google\":\r\n                            case \"chromium\":\r\n                            case \"mozilla\":\r\n                            case \"webkit\":\r\n                            case \"file\":\r\n                            case \"none\": {\r\n                                value = String(this.previousCppSettings[key]);\r\n                                break;\r\n                            }\r\n                            default: {\r\n                                value = \"...\";\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        value = \"null\";\r\n                    }\r\n                    key = newKey;\r\n                    break;\r\n                }\r\n                case \"commentContinuationPatterns\": {\r\n                    value = this.areEqual(val, settings.inspect(key).defaultValue) ? \"<default>\" : \"...\";\r\n                    break;\r\n                }\r\n                default: {\r\n                    if (key === \"clang_format_path\" || key === \"intelliSenseCachePath\" || key.startsWith(\"default.\")) {\r\n                        value = this.areEqual(val, settings.inspect(key).defaultValue) ? \"<default>\" : \"...\";\r\n                    }\r\n                    else {\r\n                        value = String(this.previousCppSettings[key]);\r\n                    }\r\n                }\r\n            }\r\n            if (value && value.length > maxSettingLengthForTelemetry) {\r\n                value = value.substr(0, maxSettingLengthForTelemetry) + \"...\";\r\n            }\r\n            return { key: key, value: value };\r\n        }\r\n    }\r\n    areEqual(value1, value2) {\r\n        if (value1 instanceof Object && value2 instanceof Object) {\r\n            return JSON.stringify(value1) === JSON.stringify(value2);\r\n        }\r\n        return value1 === value2;\r\n    }\r\n}\r\nexports.SettingsTracker = SettingsTracker;\r\nfunction getTracker(resource) {\r\n    if (!cache) {\r\n        cache = new SettingsTracker(resource);\r\n    }\r\n    return cache;\r\n}\r\nexports.getTracker = getTracker;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTGFuZ3VhZ2VTZXJ2ZXIvc2V0dGluZ3NUcmFja2VyLnRzLmpzIiwic291cmNlcyI6WyIuLi8uL3NyYy9MYW5ndWFnZVNlcnZlci9zZXR0aW5nc1RyYWNrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHZzY29kZSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xyXG5jb25zdCBtYXhTZXR0aW5nTGVuZ3RoRm9yVGVsZW1ldHJ5ID0gNTA7XHJcbmxldCBjYWNoZSA9IHVuZGVmaW5lZDtcclxuY2xhc3MgU2V0dGluZ3NUcmFja2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHJlc291cmNlKSB7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c0NwcFNldHRpbmdzID0ge307XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdFNldHRpbmdzKCgpID0+IHRydWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0VXNlck1vZGlmaWVkU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgbGV0IGZpbHRlciA9IChrZXksIHZhbCwgc2V0dGluZ3MpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmFyZUVxdWFsKHZhbCwgc2V0dGluZ3MuaW5zcGVjdChrZXkpLmRlZmF1bHRWYWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0U2V0dGluZ3MoZmlsdGVyKTtcclxuICAgIH1cclxuICAgIGdldENoYW5nZWRTZXR0aW5ncygpIHtcclxuICAgICAgICBsZXQgZmlsdGVyID0gKGtleSwgdmFsKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAhKGtleSBpbiB0aGlzLnByZXZpb3VzQ3BwU2V0dGluZ3MpIHx8ICF0aGlzLmFyZUVxdWFsKHZhbCwgdGhpcy5wcmV2aW91c0NwcFNldHRpbmdzW2tleV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdFNldHRpbmdzKGZpbHRlcik7XHJcbiAgICB9XHJcbiAgICBjb2xsZWN0U2V0dGluZ3MoZmlsdGVyKSB7XHJcbiAgICAgICAgbGV0IHNldHRpbmdzID0gdnNjb2RlLndvcmtzcGFjZS5nZXRDb25maWd1cmF0aW9uKFwiQ19DcHBcIiwgdGhpcy5yZXNvdXJjZSk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBsZXQgdmFsID0gdGhpcy5nZXRTZXR0aW5nKHNldHRpbmdzLCBrZXkpO1xyXG4gICAgICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBPYmplY3QgJiYgISh2YWwgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHN1YktleSBpbiB2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3S2V5ID0ga2V5ICsgXCIuXCIgKyBzdWJLZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1YlZhbCA9IHRoaXMuZ2V0U2V0dGluZyhzZXR0aW5ncywgbmV3S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViVmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbnRyeSA9IHRoaXMuZmlsdGVyQW5kU2FuaXRpemUobmV3S2V5LCBzdWJWYWwsIHNldHRpbmdzLCBmaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeS5rZXkgJiYgZW50cnkudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2VudHJ5LmtleV0gPSBlbnRyeS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZW50cnkgPSB0aGlzLmZpbHRlckFuZFNhbml0aXplKGtleSwgdmFsLCBzZXR0aW5ncywgZmlsdGVyKTtcclxuICAgICAgICAgICAgaWYgKGVudHJ5ICYmIGVudHJ5LmtleSAmJiBlbnRyeS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2VudHJ5LmtleV0gPSBlbnRyeS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZ2V0U2V0dGluZyhzZXR0aW5ncywga2V5KSB7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmluc3BlY3Qoa2V5KS5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsID0gc2V0dGluZ3MuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGN1clNldHRpbmcgPSB1dGlsLnBhY2thZ2VKc29uLmNvbnRyaWJ1dGVzLmNvbmZpZ3VyYXRpb24ucHJvcGVydGllc1tcIkNfQ3BwLlwiICsga2V5XTtcclxuICAgICAgICAgICAgaWYgKGN1clNldHRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0eXBlID0gdGhpcy50eXBlTWF0Y2godmFsLCBjdXJTZXR0aW5nW1widHlwZVwiXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJFbnVtID0gY3VyU2V0dGluZ1tcImVudW1cIl07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckVudW0gJiYgY3VyRW51bS5pbmRleE9mKHZhbCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjxpbnZhbGlkPlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICB0eXBlTWF0Y2godmFsdWUsIHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IHR5cGVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IFwiYXJyYXlcIiAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gXCJudWxsXCIgJiYgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZSA9PT0gdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGZpbHRlckFuZFNhbml0aXplKGtleSwgdmFsLCBzZXR0aW5ncywgZmlsdGVyKSB7XHJcbiAgICAgICAgaWYgKGZpbHRlcihrZXksIHZhbCwgc2V0dGluZ3MpKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aW91c0NwcFNldHRpbmdzW2tleV0gPSB2YWw7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2xhbmdfZm9ybWF0X3N0eWxlXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2xhbmdfZm9ybWF0X2ZhbGxiYWNrU3R5bGVcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdLZXkgPSBrZXkgKyBcIjJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInZpc3VhbCBzdHVkaW9cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsbHZtXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZ29vZ2xlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2hyb21pdW1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ppbGxhXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwid2Via2l0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZmlsZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vbmVcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHRoaXMucHJldmlvdXNDcHBTZXR0aW5nc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiLi4uXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gXCJudWxsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IG5ld0tleTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjb21tZW50Q29udGludWF0aW9uUGF0dGVybnNcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5hcmVFcXVhbCh2YWwsIHNldHRpbmdzLmluc3BlY3Qoa2V5KS5kZWZhdWx0VmFsdWUpID8gXCI8ZGVmYXVsdD5cIiA6IFwiLi4uXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJjbGFuZ19mb3JtYXRfcGF0aFwiIHx8IGtleSA9PT0gXCJpbnRlbGxpU2Vuc2VDYWNoZVBhdGhcIiB8fCBrZXkuc3RhcnRzV2l0aChcImRlZmF1bHQuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5hcmVFcXVhbCh2YWwsIHNldHRpbmdzLmluc3BlY3Qoa2V5KS5kZWZhdWx0VmFsdWUpID8gXCI8ZGVmYXVsdD5cIiA6IFwiLi4uXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFN0cmluZyh0aGlzLnByZXZpb3VzQ3BwU2V0dGluZ3Nba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPiBtYXhTZXR0aW5nTGVuZ3RoRm9yVGVsZW1ldHJ5KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCBtYXhTZXR0aW5nTGVuZ3RoRm9yVGVsZW1ldHJ5KSArIFwiLi4uXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsga2V5OiBrZXksIHZhbHVlOiB2YWx1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFyZUVxdWFsKHZhbHVlMSwgdmFsdWUyKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlMSBpbnN0YW5jZW9mIE9iamVjdCAmJiB2YWx1ZTIgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlMSkgPT09IEpTT04uc3RyaW5naWZ5KHZhbHVlMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTEgPT09IHZhbHVlMjtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNldHRpbmdzVHJhY2tlciA9IFNldHRpbmdzVHJhY2tlcjtcclxuZnVuY3Rpb24gZ2V0VHJhY2tlcihyZXNvdXJjZSkge1xyXG4gICAgaWYgKCFjYWNoZSkge1xyXG4gICAgICAgIGNhY2hlID0gbmV3IFNldHRpbmdzVHJhY2tlcihyZXNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2FjaGU7XHJcbn1cclxuZXhwb3J0cy5nZXRUcmFja2VyID0gZ2V0VHJhY2tlcjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/LanguageServer/settingsTracker.ts\n");

/***/ }),

/***/ "./src/LanguageServer/ui.ts":
/*!**********************************!*\
  !*** ./src/LanguageServer/ui.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst customProviders_1 = __webpack_require__(/*! ./customProviders */ \"./src/LanguageServer/customProviders.ts\");\r\nlet ui;\r\nvar ConfigurationPriority;\r\n(function (ConfigurationPriority) {\r\n    ConfigurationPriority[ConfigurationPriority[\"IncludePath\"] = 1] = \"IncludePath\";\r\n    ConfigurationPriority[ConfigurationPriority[\"CompileCommands\"] = 2] = \"CompileCommands\";\r\n    ConfigurationPriority[ConfigurationPriority[\"CustomProvider\"] = 3] = \"CustomProvider\";\r\n})(ConfigurationPriority || (ConfigurationPriority = {}));\r\nclass UI {\r\n    constructor() {\r\n        this.navigationStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 1000);\r\n        this.navigationStatusBarItem.tooltip = \"C/C++ Navigation\";\r\n        this.navigationStatusBarItem.command = \"C_Cpp.Navigate\";\r\n        this.ShowNavigation = true;\r\n        this.configStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 2);\r\n        this.configStatusBarItem.command = \"C_Cpp.ConfigurationSelect\";\r\n        this.configStatusBarItem.tooltip = \"C/C++ Configuration\";\r\n        this.ShowConfiguration = true;\r\n        this.intelliSenseStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 1);\r\n        this.intelliSenseStatusBarItem.text = \"\";\r\n        this.intelliSenseStatusBarItem.tooltip = \"Updating IntelliSense...\";\r\n        this.intelliSenseStatusBarItem.color = \"Red\";\r\n        this.ShowFlameIcon = true;\r\n        this.browseEngineStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 0);\r\n        this.browseEngineStatusBarItem.text = \"\";\r\n        this.browseEngineStatusBarItem.tooltip = \"Discovering files...\";\r\n        this.browseEngineStatusBarItem.color = new vscode.ThemeColor(\"statusBar.foreground\");\r\n        this.browseEngineStatusBarItem.command = \"C_Cpp.ShowParsingCommands\";\r\n        this.ShowDBIcon = true;\r\n    }\r\n    set NavigationLocation(location) {\r\n        this.navigationStatusBarItem.text = location;\r\n    }\r\n    set ActiveConfig(label) {\r\n        this.configStatusBarItem.text = label;\r\n    }\r\n    set TagParseStatus(label) {\r\n        this.browseEngineStatusBarItem.tooltip = label;\r\n    }\r\n    get IsTagParsing() {\r\n        return this.browseEngineStatusBarItem.text !== \"\";\r\n    }\r\n    set IsTagParsing(val) {\r\n        this.browseEngineStatusBarItem.text = val ? \"$(database)\" : \"\";\r\n        this.ShowDBIcon = val;\r\n    }\r\n    get IsUpdatingIntelliSense() {\r\n        return this.intelliSenseStatusBarItem.text !== \"\";\r\n    }\r\n    set IsUpdatingIntelliSense(val) {\r\n        this.intelliSenseStatusBarItem.text = val ? \"$(flame)\" : \"\";\r\n        this.ShowFlameIcon = val;\r\n    }\r\n    set ShowNavigation(show) {\r\n        if (show) {\r\n            this.navigationStatusBarItem.show();\r\n        }\r\n        else {\r\n            this.navigationStatusBarItem.hide();\r\n        }\r\n    }\r\n    set ShowDBIcon(show) {\r\n        if (show && this.IsTagParsing) {\r\n            this.browseEngineStatusBarItem.show();\r\n        }\r\n        else {\r\n            this.browseEngineStatusBarItem.hide();\r\n        }\r\n    }\r\n    set ShowFlameIcon(show) {\r\n        if (show && this.IsUpdatingIntelliSense) {\r\n            this.intelliSenseStatusBarItem.show();\r\n        }\r\n        else {\r\n            this.intelliSenseStatusBarItem.hide();\r\n        }\r\n    }\r\n    set ShowConfiguration(show) {\r\n        if (show) {\r\n            this.configStatusBarItem.show();\r\n        }\r\n        else {\r\n            this.configStatusBarItem.hide();\r\n        }\r\n    }\r\n    activeDocumentChanged() {\r\n        let activeEditor = vscode.window.activeTextEditor;\r\n        let isCpp = (activeEditor && (activeEditor.document.languageId === \"cpp\" || activeEditor.document.languageId === \"c\"));\r\n        let isSettingsJson = (activeEditor && (activeEditor.document.fileName.endsWith(\"c_cpp_properties.json\") || activeEditor.document.fileName.endsWith(\"settings.json\")));\r\n        this.ShowConfiguration = isCpp || isSettingsJson;\r\n        this.ShowDBIcon = isCpp || isSettingsJson;\r\n        this.ShowFlameIcon = isCpp || isSettingsJson;\r\n        this.ShowNavigation = isCpp;\r\n    }\r\n    bind(client) {\r\n        client.TagParsingChanged(value => { this.IsTagParsing = value; });\r\n        client.IntelliSenseParsingChanged(value => { this.IsUpdatingIntelliSense = value; });\r\n        client.NavigationLocationChanged(value => { this.NavigationLocation = value; });\r\n        client.TagParserStatusChanged(value => { this.TagParseStatus = value; });\r\n        client.ActiveConfigChanged(value => { this.ActiveConfig = value; });\r\n    }\r\n    showNavigationOptions(navigationList) {\r\n        let options = {};\r\n        options.placeHolder = \"Select where to navigate to\";\r\n        let items = [];\r\n        let navlist = navigationList.split(\";\");\r\n        for (let i = 0; i < navlist.length - 1; i += 2) {\r\n            items.push({ label: navlist[i], description: \"\", index: Number(navlist[i + 1]) });\r\n        }\r\n        vscode.window.showQuickPick(items, options)\r\n            .then(selection => {\r\n            if (!selection) {\r\n                return;\r\n            }\r\n            vscode.window.activeTextEditor.revealRange(new vscode.Range(selection.index, 0, selection.index, 0), vscode.TextEditorRevealType.InCenter);\r\n            vscode.window.activeTextEditor.selection = new vscode.Selection(new vscode.Position(selection.index, 0), new vscode.Position(selection.index, 0));\r\n        });\r\n    }\r\n    showConfigurations(configurationNames) {\r\n        let options = {};\r\n        options.placeHolder = \"Select a Configuration...\";\r\n        let items = [];\r\n        for (let i = 0; i < configurationNames.length; i++) {\r\n            items.push({ label: configurationNames[i], description: \"\", index: i });\r\n        }\r\n        items.push({ label: \"Edit Configurations...\", description: \"\", index: configurationNames.length });\r\n        return vscode.window.showQuickPick(items, options)\r\n            .then(selection => (selection) ? selection.index : -1);\r\n    }\r\n    showConfigurationProviders(currentProvider) {\r\n        let options = {};\r\n        options.placeHolder = \"Select a Configuration Provider...\";\r\n        let providers = customProviders_1.getCustomConfigProviders();\r\n        let items = [];\r\n        providers.forEach(provider => {\r\n            let label = provider.name;\r\n            if (provider.extensionId === currentProvider) {\r\n                label += \" (active)\";\r\n            }\r\n            items.push({ label: label, description: \"\", key: provider.extensionId });\r\n        });\r\n        items.push({ label: \"(none)\", description: \"Disable the active configuration provider, if applicable.\", key: \"\" });\r\n        return vscode.window.showQuickPick(items, options)\r\n            .then(selection => (selection) ? selection.key : undefined);\r\n    }\r\n    showCompileCommands(paths) {\r\n        let options = {};\r\n        options.placeHolder = \"Select a compile_commands.json...\";\r\n        let items = [];\r\n        for (let i = 0; i < paths.length; i++) {\r\n            items.push({ label: paths[i], description: \"\", index: i });\r\n        }\r\n        return vscode.window.showQuickPick(items, options)\r\n            .then(selection => (selection) ? selection.index : -1);\r\n    }\r\n    showWorkspaces(workspaceNames) {\r\n        let options = {};\r\n        options.placeHolder = \"Select a Workspace...\";\r\n        let items = [];\r\n        workspaceNames.forEach(name => items.push({ label: name.name, description: \"\", key: name.key }));\r\n        return vscode.window.showQuickPick(items, options)\r\n            .then(selection => (selection) ? selection.key : \"\");\r\n    }\r\n    showParsingCommands() {\r\n        let options = {};\r\n        options.placeHolder = \"Select a parsing command...\";\r\n        let items;\r\n        items = [];\r\n        if (this.browseEngineStatusBarItem.tooltip === \"Parsing paused\") {\r\n            items.push({ label: \"Resume Parsing\", description: \"\", index: 1 });\r\n        }\r\n        else {\r\n            items.push({ label: \"Pause Parsing\", description: \"\", index: 0 });\r\n        }\r\n        return vscode.window.showQuickPick(items, options)\r\n            .then(selection => (selection) ? selection.index : -1);\r\n    }\r\n    showConfigureIncludePathMessage(prompt, onSkip) {\r\n        setTimeout(() => {\r\n            this.showConfigurationPrompt(ConfigurationPriority.IncludePath, prompt, onSkip);\r\n        }, 10000);\r\n    }\r\n    showConfigureCompileCommandsMessage(prompt, onSkip) {\r\n        setTimeout(() => {\r\n            this.showConfigurationPrompt(ConfigurationPriority.CompileCommands, prompt, onSkip);\r\n        }, 5000);\r\n    }\r\n    showConfigureCustomProviderMessage(prompt, onSkip) {\r\n        this.showConfigurationPrompt(ConfigurationPriority.CustomProvider, prompt, onSkip);\r\n    }\r\n    showConfigurationPrompt(priority, prompt, onSkip) {\r\n        let showPrompt = () => __awaiter(this, void 0, void 0, function* () {\r\n            let configured = yield prompt();\r\n            return Promise.resolve({\r\n                priority: priority,\r\n                configured: configured\r\n            });\r\n        });\r\n        if (this.configurationUIPromise) {\r\n            this.configurationUIPromise = this.configurationUIPromise.then(result => {\r\n                if (priority > result.priority) {\r\n                    return showPrompt();\r\n                }\r\n                else if (!result.configured) {\r\n                    return showPrompt();\r\n                }\r\n                onSkip();\r\n                return Promise.resolve({\r\n                    priority: result.priority,\r\n                    configured: true\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            this.configurationUIPromise = showPrompt();\r\n        }\r\n    }\r\n    dispose() {\r\n        this.configStatusBarItem.dispose();\r\n        this.browseEngineStatusBarItem.dispose();\r\n        this.intelliSenseStatusBarItem.dispose();\r\n        this.navigationStatusBarItem.dispose();\r\n    }\r\n}\r\nexports.UI = UI;\r\nfunction getUI() {\r\n    if (ui === undefined) {\r\n        ui = new UI();\r\n    }\r\n    return ui;\r\n}\r\nexports.getUI = getUI;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LanguageServer/ui.ts\n");

/***/ }),

/***/ "./src/abTesting.ts":
/*!**************************!*\
  !*** ./src/abTesting.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst util = __webpack_require__(/*! ./common */ \"./src/common.ts\");\r\nconst Telemetry = __webpack_require__(/*! ./telemetry */ \"./src/telemetry.ts\");\r\nconst persistentState_1 = __webpack_require__(/*! ./LanguageServer/persistentState */ \"./src/LanguageServer/persistentState.ts\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst userBucketMax = 100;\r\nconst userBucketString = \"CPP.UserBucket\";\r\nconst localConfigFile = \"cpptools.json\";\r\nclass ABTestSettings {\r\n    constructor() {\r\n        this.intelliSenseEngineDefault = new persistentState_1.PersistentState(\"ABTest.1\", 100);\r\n        this.recursiveIncludesDefault = new persistentState_1.PersistentState(\"ABTest.2\", 100);\r\n        this.gotoDefIntelliSenseDefault = new persistentState_1.PersistentState(\"ABTest.3\", 100);\r\n        this.settings = {\r\n            defaultIntelliSenseEngine: this.intelliSenseEngineDefault.Value,\r\n            recursiveIncludes: this.recursiveIncludesDefault.Value,\r\n            gotoDefIntelliSense: this.gotoDefIntelliSenseDefault.Value\r\n        };\r\n        this.bucket = new persistentState_1.PersistentState(userBucketString, -1);\r\n        if (this.bucket.Value === -1) {\r\n            this.bucket.Value = Math.floor(Math.random() * userBucketMax) + 1;\r\n        }\r\n        this.updateSettings();\r\n        this.downloadCpptoolsJsonPkgAsync();\r\n        setInterval(() => { this.downloadCpptoolsJsonPkgAsync(); }, 30 * 60 * 1000);\r\n    }\r\n    get UseDefaultIntelliSenseEngine() {\r\n        return util.isNumber(this.settings.defaultIntelliSenseEngine) ? this.settings.defaultIntelliSenseEngine >= this.bucket.Value : true;\r\n    }\r\n    get UseRecursiveIncludes() {\r\n        return util.isNumber(this.settings.recursiveIncludes) ? this.settings.recursiveIncludes >= this.bucket.Value : true;\r\n    }\r\n    get UseGoToDefIntelliSense() {\r\n        return util.isNumber(this.settings.gotoDefIntelliSense) ? this.settings.gotoDefIntelliSense >= this.bucket.Value : true;\r\n    }\r\n    updateSettings() {\r\n        const cpptoolsJsonFile = util.getExtensionFilePath(localConfigFile);\r\n        try {\r\n            const exists = fs.existsSync(cpptoolsJsonFile);\r\n            if (exists) {\r\n                const fileContent = fs.readFileSync(cpptoolsJsonFile).toString();\r\n                let newSettings = JSON.parse(fileContent);\r\n                this.intelliSenseEngineDefault.Value = util.isNumber(newSettings.defaultIntelliSenseEngine) ? newSettings.defaultIntelliSenseEngine : this.intelliSenseEngineDefault.DefaultValue;\r\n                this.recursiveIncludesDefault.Value = util.isNumber(newSettings.recursiveIncludes) ? newSettings.recursiveIncludes : this.recursiveIncludesDefault.DefaultValue;\r\n                this.gotoDefIntelliSenseDefault.Value = util.isNumber(newSettings.gotoDefIntelliSense) ? newSettings.gotoDefIntelliSense : this.gotoDefIntelliSenseDefault.DefaultValue;\r\n                this.settings = {\r\n                    defaultIntelliSenseEngine: this.intelliSenseEngineDefault.Value,\r\n                    recursiveIncludes: this.recursiveIncludesDefault.Value,\r\n                    gotoDefIntelliSense: this.gotoDefIntelliSenseDefault.Value\r\n                };\r\n            }\r\n        }\r\n        catch (error) {\r\n        }\r\n    }\r\n    downloadCpptoolsJsonPkgAsync() {\r\n        let hasError = false;\r\n        let telemetryProperties = {};\r\n        const localConfigPath = util.getExtensionFilePath(localConfigFile);\r\n        return util.downloadFileToDestination(\"https://go.microsoft.com/fwlink/?linkid=2026205\", localConfigPath)\r\n            .catch((error) => {\r\n            hasError = true;\r\n        })\r\n            .then(() => {\r\n            this.updateSettings();\r\n            telemetryProperties['success'] = (!hasError).toString();\r\n            Telemetry.logDebuggerEvent(\"cpptoolsJsonDownload\", telemetryProperties);\r\n        });\r\n    }\r\n}\r\nexports.ABTestSettings = ABTestSettings;\r\nlet settings;\r\nfunction getABTestSettings() {\r\n    if (!settings) {\r\n        settings = new ABTestSettings();\r\n    }\r\n    return settings;\r\n}\r\nexports.getABTestSettings = getABTestSettings;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYWJUZXN0aW5nLnRzLmpzIiwic291cmNlcyI6WyIuLi8uL3NyYy9hYlRlc3RpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XHJcbmNvbnN0IFRlbGVtZXRyeSA9IHJlcXVpcmUoXCIuL3RlbGVtZXRyeVwiKTtcclxuY29uc3QgcGVyc2lzdGVudFN0YXRlXzEgPSByZXF1aXJlKFwiLi9MYW5ndWFnZVNlcnZlci9wZXJzaXN0ZW50U3RhdGVcIik7XHJcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xyXG5jb25zdCB1c2VyQnVja2V0TWF4ID0gMTAwO1xyXG5jb25zdCB1c2VyQnVja2V0U3RyaW5nID0gXCJDUFAuVXNlckJ1Y2tldFwiO1xyXG5jb25zdCBsb2NhbENvbmZpZ0ZpbGUgPSBcImNwcHRvb2xzLmpzb25cIjtcclxuY2xhc3MgQUJUZXN0U2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbnRlbGxpU2Vuc2VFbmdpbmVEZWZhdWx0ID0gbmV3IHBlcnNpc3RlbnRTdGF0ZV8xLlBlcnNpc3RlbnRTdGF0ZShcIkFCVGVzdC4xXCIsIDEwMCk7XHJcbiAgICAgICAgdGhpcy5yZWN1cnNpdmVJbmNsdWRlc0RlZmF1bHQgPSBuZXcgcGVyc2lzdGVudFN0YXRlXzEuUGVyc2lzdGVudFN0YXRlKFwiQUJUZXN0LjJcIiwgMTAwKTtcclxuICAgICAgICB0aGlzLmdvdG9EZWZJbnRlbGxpU2Vuc2VEZWZhdWx0ID0gbmV3IHBlcnNpc3RlbnRTdGF0ZV8xLlBlcnNpc3RlbnRTdGF0ZShcIkFCVGVzdC4zXCIsIDEwMCk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgZGVmYXVsdEludGVsbGlTZW5zZUVuZ2luZTogdGhpcy5pbnRlbGxpU2Vuc2VFbmdpbmVEZWZhdWx0LlZhbHVlLFxyXG4gICAgICAgICAgICByZWN1cnNpdmVJbmNsdWRlczogdGhpcy5yZWN1cnNpdmVJbmNsdWRlc0RlZmF1bHQuVmFsdWUsXHJcbiAgICAgICAgICAgIGdvdG9EZWZJbnRlbGxpU2Vuc2U6IHRoaXMuZ290b0RlZkludGVsbGlTZW5zZURlZmF1bHQuVmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYnVja2V0ID0gbmV3IHBlcnNpc3RlbnRTdGF0ZV8xLlBlcnNpc3RlbnRTdGF0ZSh1c2VyQnVja2V0U3RyaW5nLCAtMSk7XHJcbiAgICAgICAgaWYgKHRoaXMuYnVja2V0LlZhbHVlID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1Y2tldC5WYWx1ZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHVzZXJCdWNrZXRNYXgpICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVTZXR0aW5ncygpO1xyXG4gICAgICAgIHRoaXMuZG93bmxvYWRDcHB0b29sc0pzb25Qa2dBc3luYygpO1xyXG4gICAgICAgIHNldEludGVydmFsKCgpID0+IHsgdGhpcy5kb3dubG9hZENwcHRvb2xzSnNvblBrZ0FzeW5jKCk7IH0sIDMwICogNjAgKiAxMDAwKTtcclxuICAgIH1cclxuICAgIGdldCBVc2VEZWZhdWx0SW50ZWxsaVNlbnNlRW5naW5lKCkge1xyXG4gICAgICAgIHJldHVybiB1dGlsLmlzTnVtYmVyKHRoaXMuc2V0dGluZ3MuZGVmYXVsdEludGVsbGlTZW5zZUVuZ2luZSkgPyB0aGlzLnNldHRpbmdzLmRlZmF1bHRJbnRlbGxpU2Vuc2VFbmdpbmUgPj0gdGhpcy5idWNrZXQuVmFsdWUgOiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IFVzZVJlY3Vyc2l2ZUluY2x1ZGVzKCkge1xyXG4gICAgICAgIHJldHVybiB1dGlsLmlzTnVtYmVyKHRoaXMuc2V0dGluZ3MucmVjdXJzaXZlSW5jbHVkZXMpID8gdGhpcy5zZXR0aW5ncy5yZWN1cnNpdmVJbmNsdWRlcyA+PSB0aGlzLmJ1Y2tldC5WYWx1ZSA6IHRydWU7XHJcbiAgICB9XHJcbiAgICBnZXQgVXNlR29Ub0RlZkludGVsbGlTZW5zZSgpIHtcclxuICAgICAgICByZXR1cm4gdXRpbC5pc051bWJlcih0aGlzLnNldHRpbmdzLmdvdG9EZWZJbnRlbGxpU2Vuc2UpID8gdGhpcy5zZXR0aW5ncy5nb3RvRGVmSW50ZWxsaVNlbnNlID49IHRoaXMuYnVja2V0LlZhbHVlIDogdHJ1ZTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVNldHRpbmdzKCkge1xyXG4gICAgICAgIGNvbnN0IGNwcHRvb2xzSnNvbkZpbGUgPSB1dGlsLmdldEV4dGVuc2lvbkZpbGVQYXRoKGxvY2FsQ29uZmlnRmlsZSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gZnMuZXhpc3RzU3luYyhjcHB0b29sc0pzb25GaWxlKTtcclxuICAgICAgICAgICAgaWYgKGV4aXN0cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoY3BwdG9vbHNKc29uRmlsZSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdTZXR0aW5ncyA9IEpTT04ucGFyc2UoZmlsZUNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlbGxpU2Vuc2VFbmdpbmVEZWZhdWx0LlZhbHVlID0gdXRpbC5pc051bWJlcihuZXdTZXR0aW5ncy5kZWZhdWx0SW50ZWxsaVNlbnNlRW5naW5lKSA/IG5ld1NldHRpbmdzLmRlZmF1bHRJbnRlbGxpU2Vuc2VFbmdpbmUgOiB0aGlzLmludGVsbGlTZW5zZUVuZ2luZURlZmF1bHQuRGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWN1cnNpdmVJbmNsdWRlc0RlZmF1bHQuVmFsdWUgPSB1dGlsLmlzTnVtYmVyKG5ld1NldHRpbmdzLnJlY3Vyc2l2ZUluY2x1ZGVzKSA/IG5ld1NldHRpbmdzLnJlY3Vyc2l2ZUluY2x1ZGVzIDogdGhpcy5yZWN1cnNpdmVJbmNsdWRlc0RlZmF1bHQuRGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nb3RvRGVmSW50ZWxsaVNlbnNlRGVmYXVsdC5WYWx1ZSA9IHV0aWwuaXNOdW1iZXIobmV3U2V0dGluZ3MuZ290b0RlZkludGVsbGlTZW5zZSkgPyBuZXdTZXR0aW5ncy5nb3RvRGVmSW50ZWxsaVNlbnNlIDogdGhpcy5nb3RvRGVmSW50ZWxsaVNlbnNlRGVmYXVsdC5EZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRJbnRlbGxpU2Vuc2VFbmdpbmU6IHRoaXMuaW50ZWxsaVNlbnNlRW5naW5lRGVmYXVsdC5WYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmVJbmNsdWRlczogdGhpcy5yZWN1cnNpdmVJbmNsdWRlc0RlZmF1bHQuVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZ290b0RlZkludGVsbGlTZW5zZTogdGhpcy5nb3RvRGVmSW50ZWxsaVNlbnNlRGVmYXVsdC5WYWx1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkb3dubG9hZENwcHRvb2xzSnNvblBrZ0FzeW5jKCkge1xyXG4gICAgICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgIGxldCB0ZWxlbWV0cnlQcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgY29uc3QgbG9jYWxDb25maWdQYXRoID0gdXRpbC5nZXRFeHRlbnNpb25GaWxlUGF0aChsb2NhbENvbmZpZ0ZpbGUpO1xyXG4gICAgICAgIHJldHVybiB1dGlsLmRvd25sb2FkRmlsZVRvRGVzdGluYXRpb24oXCJodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9saW5raWQ9MjAyNjIwNVwiLCBsb2NhbENvbmZpZ1BhdGgpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB0ZWxlbWV0cnlQcm9wZXJ0aWVzWydzdWNjZXNzJ10gPSAoIWhhc0Vycm9yKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBUZWxlbWV0cnkubG9nRGVidWdnZXJFdmVudChcImNwcHRvb2xzSnNvbkRvd25sb2FkXCIsIHRlbGVtZXRyeVByb3BlcnRpZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQUJUZXN0U2V0dGluZ3MgPSBBQlRlc3RTZXR0aW5ncztcclxubGV0IHNldHRpbmdzO1xyXG5mdW5jdGlvbiBnZXRBQlRlc3RTZXR0aW5ncygpIHtcclxuICAgIGlmICghc2V0dGluZ3MpIHtcclxuICAgICAgICBzZXR0aW5ncyA9IG5ldyBBQlRlc3RTZXR0aW5ncygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNldHRpbmdzO1xyXG59XHJcbmV4cG9ydHMuZ2V0QUJUZXN0U2V0dGluZ3MgPSBnZXRBQlRlc3RTZXR0aW5ncztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/abTesting.ts\n");

/***/ }),

/***/ "./src/commands.ts":
/*!*************************!*\
  !*** ./src/commands.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst LanguageServer = __webpack_require__(/*! ./LanguageServer/extension */ \"./src/LanguageServer/extension.ts\");\r\nclass TemporaryCommandRegistrar {\r\n    constructor() {\r\n        this.isLanguageServerDisabled = false;\r\n        this.isActivationReady = false;\r\n        this.commandsToRegister = [\r\n            \"C_Cpp.ConfigurationEdit\",\r\n            \"C_Cpp.ConfigurationSelect\",\r\n            \"C_Cpp.ConfigurationProviderSelect\",\r\n            \"C_Cpp.SwitchHeaderSource\",\r\n            \"C_Cpp.Navigate\",\r\n            \"C_Cpp.GoToDeclaration\",\r\n            \"C_Cpp.PeekDeclaration\",\r\n            \"C_Cpp.ToggleErrorSquiggles\",\r\n            \"C_Cpp.ToggleIncludeFallback\",\r\n            \"C_Cpp.ToggleDimInactiveRegions\",\r\n            \"C_Cpp.ShowReleaseNotes\",\r\n            \"C_Cpp.ResetDatabase\",\r\n            \"C_Cpp.PauseParsing\",\r\n            \"C_Cpp.ResumeParsing\",\r\n            \"C_Cpp.ShowParsingCommands\",\r\n            \"C_Cpp.TakeSurvey\"\r\n        ];\r\n        this.tempCommands = [];\r\n        this.delayedCommandsToExecute = new Set();\r\n        this.commandsToRegister.forEach(command => {\r\n            this.registerTempCommand(command);\r\n        });\r\n    }\r\n    registerTempCommand(command) {\r\n        this.tempCommands.push(vscode.commands.registerCommand(command, () => {\r\n            if (this.isLanguageServerDisabled) {\r\n                vscode.window.showInformationMessage(\"The command is disabled because \\\"C_Cpp.intelliSenseEngine\\\" is set to \\\"Disabled\\\".\");\r\n                return;\r\n            }\r\n            this.delayedCommandsToExecute.add(command);\r\n            if (this.isActivationReady) {\r\n                LanguageServer.activate(true);\r\n            }\r\n        }));\r\n    }\r\n    disableLanguageServer() {\r\n        this.isLanguageServerDisabled = true;\r\n    }\r\n    activateLanguageServer() {\r\n        LanguageServer.activate(this.delayedCommandsToExecute.size > 0);\r\n        this.isActivationReady = true;\r\n    }\r\n    clearTempCommands() {\r\n        this.tempCommands.forEach((command) => {\r\n            command.dispose();\r\n        });\r\n        this.tempCommands = [];\r\n    }\r\n    executeDelayedCommands() {\r\n        this.delayedCommandsToExecute.forEach((command) => {\r\n            vscode.commands.executeCommand(command);\r\n        });\r\n        this.delayedCommandsToExecute.clear();\r\n    }\r\n}\r\nlet tempCommandRegistrar;\r\nfunction initializeTemporaryCommandRegistrar() {\r\n    tempCommandRegistrar = new TemporaryCommandRegistrar();\r\n}\r\nexports.initializeTemporaryCommandRegistrar = initializeTemporaryCommandRegistrar;\r\nfunction getTemporaryCommandRegistrarInstance() {\r\n    return tempCommandRegistrar;\r\n}\r\nexports.getTemporaryCommandRegistrarInstance = getTemporaryCommandRegistrarInstance;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbWFuZHMudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL2NvbW1hbmRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGUgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCBMYW5ndWFnZVNlcnZlciA9IHJlcXVpcmUoXCIuL0xhbmd1YWdlU2VydmVyL2V4dGVuc2lvblwiKTtcclxuY2xhc3MgVGVtcG9yYXJ5Q29tbWFuZFJlZ2lzdHJhciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmlzTGFuZ3VhZ2VTZXJ2ZXJEaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmF0aW9uUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRzVG9SZWdpc3RlciA9IFtcclxuICAgICAgICAgICAgXCJDX0NwcC5Db25maWd1cmF0aW9uRWRpdFwiLFxyXG4gICAgICAgICAgICBcIkNfQ3BwLkNvbmZpZ3VyYXRpb25TZWxlY3RcIixcclxuICAgICAgICAgICAgXCJDX0NwcC5Db25maWd1cmF0aW9uUHJvdmlkZXJTZWxlY3RcIixcclxuICAgICAgICAgICAgXCJDX0NwcC5Td2l0Y2hIZWFkZXJTb3VyY2VcIixcclxuICAgICAgICAgICAgXCJDX0NwcC5OYXZpZ2F0ZVwiLFxyXG4gICAgICAgICAgICBcIkNfQ3BwLkdvVG9EZWNsYXJhdGlvblwiLFxyXG4gICAgICAgICAgICBcIkNfQ3BwLlBlZWtEZWNsYXJhdGlvblwiLFxyXG4gICAgICAgICAgICBcIkNfQ3BwLlRvZ2dsZUVycm9yU3F1aWdnbGVzXCIsXHJcbiAgICAgICAgICAgIFwiQ19DcHAuVG9nZ2xlSW5jbHVkZUZhbGxiYWNrXCIsXHJcbiAgICAgICAgICAgIFwiQ19DcHAuVG9nZ2xlRGltSW5hY3RpdmVSZWdpb25zXCIsXHJcbiAgICAgICAgICAgIFwiQ19DcHAuU2hvd1JlbGVhc2VOb3Rlc1wiLFxyXG4gICAgICAgICAgICBcIkNfQ3BwLlJlc2V0RGF0YWJhc2VcIixcclxuICAgICAgICAgICAgXCJDX0NwcC5QYXVzZVBhcnNpbmdcIixcclxuICAgICAgICAgICAgXCJDX0NwcC5SZXN1bWVQYXJzaW5nXCIsXHJcbiAgICAgICAgICAgIFwiQ19DcHAuU2hvd1BhcnNpbmdDb21tYW5kc1wiLFxyXG4gICAgICAgICAgICBcIkNfQ3BwLlRha2VTdXJ2ZXlcIlxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdGhpcy50ZW1wQ29tbWFuZHMgPSBbXTtcclxuICAgICAgICB0aGlzLmRlbGF5ZWRDb21tYW5kc1RvRXhlY3V0ZSA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRzVG9SZWdpc3Rlci5mb3JFYWNoKGNvbW1hbmQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyVGVtcENvbW1hbmQoY29tbWFuZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZWdpc3RlclRlbXBDb21tYW5kKGNvbW1hbmQpIHtcclxuICAgICAgICB0aGlzLnRlbXBDb21tYW5kcy5wdXNoKHZzY29kZS5jb21tYW5kcy5yZWdpc3RlckNvbW1hbmQoY29tbWFuZCwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0xhbmd1YWdlU2VydmVyRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIHZzY29kZS53aW5kb3cuc2hvd0luZm9ybWF0aW9uTWVzc2FnZShcIlRoZSBjb21tYW5kIGlzIGRpc2FibGVkIGJlY2F1c2UgXFxcIkNfQ3BwLmludGVsbGlTZW5zZUVuZ2luZVxcXCIgaXMgc2V0IHRvIFxcXCJEaXNhYmxlZFxcXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZENvbW1hbmRzVG9FeGVjdXRlLmFkZChjb21tYW5kKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmF0aW9uUmVhZHkpIHtcclxuICAgICAgICAgICAgICAgIExhbmd1YWdlU2VydmVyLmFjdGl2YXRlKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgZGlzYWJsZUxhbmd1YWdlU2VydmVyKCkge1xyXG4gICAgICAgIHRoaXMuaXNMYW5ndWFnZVNlcnZlckRpc2FibGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGFjdGl2YXRlTGFuZ3VhZ2VTZXJ2ZXIoKSB7XHJcbiAgICAgICAgTGFuZ3VhZ2VTZXJ2ZXIuYWN0aXZhdGUodGhpcy5kZWxheWVkQ29tbWFuZHNUb0V4ZWN1dGUuc2l6ZSA+IDApO1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmF0aW9uUmVhZHkgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgY2xlYXJUZW1wQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wQ29tbWFuZHMuZm9yRWFjaCgoY29tbWFuZCkgPT4ge1xyXG4gICAgICAgICAgICBjb21tYW5kLmRpc3Bvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRlbXBDb21tYW5kcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgZXhlY3V0ZURlbGF5ZWRDb21tYW5kcygpIHtcclxuICAgICAgICB0aGlzLmRlbGF5ZWRDb21tYW5kc1RvRXhlY3V0ZS5mb3JFYWNoKChjb21tYW5kKSA9PiB7XHJcbiAgICAgICAgICAgIHZzY29kZS5jb21tYW5kcy5leGVjdXRlQ29tbWFuZChjb21tYW5kKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRlbGF5ZWRDb21tYW5kc1RvRXhlY3V0ZS5jbGVhcigpO1xyXG4gICAgfVxyXG59XHJcbmxldCB0ZW1wQ29tbWFuZFJlZ2lzdHJhcjtcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVRlbXBvcmFyeUNvbW1hbmRSZWdpc3RyYXIoKSB7XHJcbiAgICB0ZW1wQ29tbWFuZFJlZ2lzdHJhciA9IG5ldyBUZW1wb3JhcnlDb21tYW5kUmVnaXN0cmFyKCk7XHJcbn1cclxuZXhwb3J0cy5pbml0aWFsaXplVGVtcG9yYXJ5Q29tbWFuZFJlZ2lzdHJhciA9IGluaXRpYWxpemVUZW1wb3JhcnlDb21tYW5kUmVnaXN0cmFyO1xyXG5mdW5jdGlvbiBnZXRUZW1wb3JhcnlDb21tYW5kUmVnaXN0cmFySW5zdGFuY2UoKSB7XHJcbiAgICByZXR1cm4gdGVtcENvbW1hbmRSZWdpc3RyYXI7XHJcbn1cclxuZXhwb3J0cy5nZXRUZW1wb3JhcnlDb21tYW5kUmVnaXN0cmFySW5zdGFuY2UgPSBnZXRUZW1wb3JhcnlDb21tYW5kUmVnaXN0cmFySW5zdGFuY2U7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/commands.ts\n");

/***/ }),

/***/ "./src/common.ts":
/*!***********************!*\
  !*** ./src/common.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst child_process = __webpack_require__(/*! child_process */ \"child_process\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst Telemetry = __webpack_require__(/*! ./telemetry */ \"./src/telemetry.ts\");\r\nconst HttpsProxyAgent = __webpack_require__(/*! https-proxy-agent */ \"./node_modules/https-proxy-agent/index.js\");\r\nconst url = __webpack_require__(/*! url */ \"url\");\r\nconst logger_1 = __webpack_require__(/*! ./logger */ \"./src/logger.ts\");\r\nconst assert = __webpack_require__(/*! assert */ \"assert\");\r\nconst https = __webpack_require__(/*! https */ \"https\");\r\nconst extension_1 = __webpack_require__(/*! ./LanguageServer/extension */ \"./src/LanguageServer/extension.ts\");\r\nfunction setExtensionContext(context) {\r\n    exports.extensionContext = context;\r\n}\r\nexports.setExtensionContext = setExtensionContext;\r\nexports.packageJson = vscode.extensions.getExtension(\"ms-vscode.cpptools\").packageJSON;\r\nlet rawPackageJson = null;\r\nfunction getRawPackageJson() {\r\n    if (rawPackageJson === null) {\r\n        const fileContents = fs.readFileSync(getPackageJsonPath());\r\n        rawPackageJson = JSON.parse(fileContents.toString());\r\n    }\r\n    return rawPackageJson;\r\n}\r\nexports.getRawPackageJson = getRawPackageJson;\r\nfunction getRawTasksJson() {\r\n    const path = getTasksJsonPath();\r\n    if (!path) {\r\n        return undefined;\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        fs.exists(path, exists => {\r\n            if (!exists) {\r\n                return resolve({});\r\n            }\r\n            const fileContents = fs.readFileSync(path);\r\n            let rawTasks = {};\r\n            try {\r\n                rawTasks = JSON.parse(fileContents.toString());\r\n            }\r\n            catch (error) {\r\n            }\r\n            resolve(rawTasks);\r\n        });\r\n    });\r\n}\r\nexports.getRawTasksJson = getRawTasksJson;\r\nfunction ensureBuildTaskExists(taskName) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let rawTasksJson = yield getRawTasksJson();\r\n        if (!rawTasksJson.tasks) {\r\n            rawTasksJson.tasks = new Array();\r\n        }\r\n        let selectedTask = rawTasksJson.tasks.find(task => {\r\n            return task.label && task.label === task;\r\n        });\r\n        if (selectedTask) {\r\n            return;\r\n        }\r\n        const buildTasks = yield extension_1.getBuildTasks();\r\n        selectedTask = buildTasks.find(task => task.name === taskName);\r\n        console.assert(selectedTask);\r\n        let definition = selectedTask.definition;\r\n        if (definition && definition.compilerPath) {\r\n            delete definition.compilerPath;\r\n        }\r\n        rawTasksJson.version = \"2.0.0\";\r\n        if (!rawTasksJson.tasks.find(task => { return task.label === selectedTask.definition.label; })) {\r\n            rawTasksJson.tasks.push(selectedTask.definition);\r\n        }\r\n        yield writeFileText(getTasksJsonPath(), JSON.stringify(rawTasksJson, null, 2));\r\n    });\r\n}\r\nexports.ensureBuildTaskExists = ensureBuildTaskExists;\r\nfunction fileIsCOrCppSource(file) {\r\n    const fileExtLower = path.extname(file).toLowerCase();\r\n    return [\".C\", \".c\", \".cpp\", \".cc\", \".cxx\", \".mm\", \".ino\", \".inl\"].some(ext => fileExtLower === ext);\r\n}\r\nexports.fileIsCOrCppSource = fileIsCOrCppSource;\r\nfunction stringifyPackageJson(packageJson) {\r\n    return JSON.stringify(packageJson, null, 2);\r\n}\r\nexports.stringifyPackageJson = stringifyPackageJson;\r\nfunction getExtensionFilePath(extensionfile) {\r\n    return path.resolve(exports.extensionContext.extensionPath, extensionfile);\r\n}\r\nexports.getExtensionFilePath = getExtensionFilePath;\r\nfunction getPackageJsonPath() {\r\n    return getExtensionFilePath(\"package.json\");\r\n}\r\nexports.getPackageJsonPath = getPackageJsonPath;\r\nfunction getTasksJsonPath() {\r\n    const editor = vscode.window.activeTextEditor;\r\n    const folder = vscode.workspace.getWorkspaceFolder(editor.document.uri);\r\n    if (!folder) {\r\n        return undefined;\r\n    }\r\n    return path.join(folder.uri.fsPath, \".vscode\", \"tasks.json\");\r\n}\r\nexports.getTasksJsonPath = getTasksJsonPath;\r\nfunction getVcpkgPathDescriptorFile() {\r\n    if (process.platform === 'win32') {\r\n        return path.join(process.env.LOCALAPPDATA, \"vcpkg/vcpkg.path.txt\");\r\n    }\r\n    else {\r\n        return path.join(process.env.HOME, \".vcpkg/vcpkg.path.txt\");\r\n    }\r\n}\r\nexports.getVcpkgPathDescriptorFile = getVcpkgPathDescriptorFile;\r\nlet vcpkgRoot;\r\nfunction getVcpkgRoot() {\r\n    if (!vcpkgRoot && vcpkgRoot !== \"\") {\r\n        vcpkgRoot = \"\";\r\n        if (fs.existsSync(getVcpkgPathDescriptorFile())) {\r\n            let vcpkgRootTemp = fs.readFileSync(getVcpkgPathDescriptorFile()).toString();\r\n            vcpkgRootTemp = vcpkgRootTemp.trim();\r\n            if (fs.existsSync(vcpkgRootTemp)) {\r\n                vcpkgRoot = path.join(vcpkgRootTemp, \"/installed\").replace(/\\\\/g, \"/\");\r\n            }\r\n        }\r\n    }\r\n    return vcpkgRoot;\r\n}\r\nexports.getVcpkgRoot = getVcpkgRoot;\r\nfunction isHeader(document) {\r\n    let ext = path.extname(document.uri.fsPath);\r\n    return !ext || ext.startsWith(\".h\") || ext.startsWith(\".H\");\r\n}\r\nexports.isHeader = isHeader;\r\nfunction isExtensionReady() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const doesInstallLockFileExist = yield checkInstallLockFile();\r\n        return doesInstallLockFileExist;\r\n    });\r\n}\r\nexports.isExtensionReady = isExtensionReady;\r\nlet isExtensionNotReadyPromptDisplayed = false;\r\nexports.extensionNotReadyString = 'The C/C++ extension is still installing. See the output window for more information.';\r\nfunction displayExtensionNotReadyPrompt() {\r\n    if (!isExtensionNotReadyPromptDisplayed) {\r\n        isExtensionNotReadyPromptDisplayed = true;\r\n        logger_1.showOutputChannel();\r\n        logger_1.getOutputChannelLogger().showInformationMessage(exports.extensionNotReadyString).then(() => { isExtensionNotReadyPromptDisplayed = false; }, () => { isExtensionNotReadyPromptDisplayed = false; });\r\n    }\r\n}\r\nexports.displayExtensionNotReadyPrompt = displayExtensionNotReadyPrompt;\r\nconst progressInstallSuccess = 100;\r\nconst progressExecutableStarted = 150;\r\nconst progressExecutableSuccess = 200;\r\nconst progressParseRootSuccess = 300;\r\nconst progressIntelliSenseNoSquiggles = 1000;\r\nlet installProgressStr = \"CPP.\" + exports.packageJson.version + \".Progress\";\r\nlet intelliSenseProgressStr = \"CPP.\" + exports.packageJson.version + \".IntelliSenseProgress\";\r\nfunction getProgress() {\r\n    return exports.extensionContext.globalState.get(installProgressStr, -1);\r\n}\r\nexports.getProgress = getProgress;\r\nfunction getIntelliSenseProgress() {\r\n    return exports.extensionContext.globalState.get(intelliSenseProgressStr, -1);\r\n}\r\nexports.getIntelliSenseProgress = getIntelliSenseProgress;\r\nfunction setProgress(progress) {\r\n    if (getProgress() < progress) {\r\n        exports.extensionContext.globalState.update(installProgressStr, progress);\r\n        let telemetryProperties = {};\r\n        let progressName;\r\n        switch (progress) {\r\n            case 0:\r\n                progressName = \"install started\";\r\n                break;\r\n            case progressInstallSuccess:\r\n                progressName = \"install succeeded\";\r\n                break;\r\n            case progressExecutableStarted:\r\n                progressName = \"executable started\";\r\n                break;\r\n            case progressExecutableSuccess:\r\n                progressName = \"executable succeeded\";\r\n                break;\r\n            case progressParseRootSuccess:\r\n                progressName = \"parse root succeeded\";\r\n                break;\r\n        }\r\n        telemetryProperties['progress'] = progressName;\r\n        Telemetry.logDebuggerEvent(\"progress\", telemetryProperties);\r\n    }\r\n}\r\nexports.setProgress = setProgress;\r\nfunction setIntelliSenseProgress(progress) {\r\n    if (getIntelliSenseProgress() < progress) {\r\n        exports.extensionContext.globalState.update(intelliSenseProgressStr, progress);\r\n        let telemetryProperties = {};\r\n        let progressName;\r\n        switch (progress) {\r\n            case progressIntelliSenseNoSquiggles:\r\n                progressName = \"IntelliSense no squiggles\";\r\n                break;\r\n        }\r\n        telemetryProperties['progress'] = progressName;\r\n        Telemetry.logDebuggerEvent(\"progress\", telemetryProperties);\r\n    }\r\n}\r\nexports.setIntelliSenseProgress = setIntelliSenseProgress;\r\nfunction getProgressInstallSuccess() { return progressInstallSuccess; }\r\nexports.getProgressInstallSuccess = getProgressInstallSuccess;\r\nfunction getProgressExecutableStarted() { return progressExecutableStarted; }\r\nexports.getProgressExecutableStarted = getProgressExecutableStarted;\r\nfunction getProgressExecutableSuccess() { return progressExecutableSuccess; }\r\nexports.getProgressExecutableSuccess = getProgressExecutableSuccess;\r\nfunction getProgressParseRootSuccess() { return progressParseRootSuccess; }\r\nexports.getProgressParseRootSuccess = getProgressParseRootSuccess;\r\nfunction getProgressIntelliSenseNoSquiggles() { return progressIntelliSenseNoSquiggles; }\r\nexports.getProgressIntelliSenseNoSquiggles = getProgressIntelliSenseNoSquiggles;\r\nlet releaseNotesPanel = undefined;\r\nfunction showReleaseNotes() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (releaseNotesPanel) {\r\n            releaseNotesPanel.reveal();\r\n        }\r\n        else {\r\n            releaseNotesPanel = vscode.window.createWebviewPanel('releaseNotes', \"C/C++ Extension Release Notes\", vscode.ViewColumn.One);\r\n            releaseNotesPanel.webview.html = yield readFileText(getExtensionFilePath(\"ReleaseNotes.html\"));\r\n            releaseNotesPanel.onDidDispose(() => releaseNotesPanel = undefined, null, exports.extensionContext.subscriptions);\r\n        }\r\n    });\r\n}\r\nexports.showReleaseNotes = showReleaseNotes;\r\nfunction isUri(input) {\r\n    return input && input instanceof vscode.Uri;\r\n}\r\nexports.isUri = isUri;\r\nfunction isString(input) {\r\n    return typeof (input) === \"string\";\r\n}\r\nexports.isString = isString;\r\nfunction isNumber(input) {\r\n    return typeof (input) === \"number\";\r\n}\r\nexports.isNumber = isNumber;\r\nfunction isBoolean(input) {\r\n    return typeof (input) === \"boolean\";\r\n}\r\nexports.isBoolean = isBoolean;\r\nfunction isArray(input) {\r\n    return input instanceof Array;\r\n}\r\nexports.isArray = isArray;\r\nfunction isOptionalString(input) {\r\n    return input === undefined || isString(input);\r\n}\r\nexports.isOptionalString = isOptionalString;\r\nfunction isArrayOfString(input) {\r\n    return isArray(input) && input.every(item => isString(item));\r\n}\r\nexports.isArrayOfString = isArrayOfString;\r\nfunction isOptionalArrayOfString(input) {\r\n    return input === undefined || isArrayOfString(input);\r\n}\r\nexports.isOptionalArrayOfString = isOptionalArrayOfString;\r\nfunction resolveVariables(input, additionalEnvironment) {\r\n    if (!input) {\r\n        return \"\";\r\n    }\r\n    if (!additionalEnvironment) {\r\n        additionalEnvironment = {};\r\n    }\r\n    let regexp = () => /\\$\\{((env|config|workspaceFolder)(\\.|:))?(.*?)\\}/g;\r\n    let ret = input;\r\n    let cycleCache = new Set();\r\n    while (!cycleCache.has(ret)) {\r\n        cycleCache.add(ret);\r\n        ret = ret.replace(regexp(), (match, ignored1, varType, ignored2, name) => {\r\n            if (varType === undefined) {\r\n                varType = \"env\";\r\n            }\r\n            let newValue;\r\n            switch (varType) {\r\n                case \"env\": {\r\n                    let v = additionalEnvironment[name];\r\n                    if (isString(v)) {\r\n                        newValue = v;\r\n                    }\r\n                    else if (input === match && isArrayOfString(v)) {\r\n                        newValue = v.join(\";\");\r\n                    }\r\n                    if (!isString(newValue)) {\r\n                        newValue = process.env[name];\r\n                    }\r\n                    break;\r\n                }\r\n                case \"config\": {\r\n                    let config = vscode.workspace.getConfiguration();\r\n                    if (config) {\r\n                        newValue = config.get(name);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"workspaceFolder\": {\r\n                    if (name && vscode.workspace && vscode.workspace.workspaceFolders) {\r\n                        let folder = vscode.workspace.workspaceFolders.find(folder => folder.name.toLocaleLowerCase() === name.toLocaleLowerCase());\r\n                        if (folder) {\r\n                            newValue = folder.uri.fsPath;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    assert.fail(\"unknown varType matched\");\r\n                }\r\n            }\r\n            return (isString(newValue)) ? newValue : match;\r\n        });\r\n    }\r\n    regexp = () => /^\\~/g;\r\n    ret = ret.replace(regexp(), (match, name) => {\r\n        let newValue = (process.platform === 'win32') ? process.env.USERPROFILE : process.env.HOME;\r\n        return (newValue) ? newValue : match;\r\n    });\r\n    return ret;\r\n}\r\nexports.resolveVariables = resolveVariables;\r\nfunction asFolder(uri) {\r\n    let result = uri.toString();\r\n    if (result.charAt(result.length - 1) !== '/') {\r\n        result += '/';\r\n    }\r\n    return result;\r\n}\r\nexports.asFolder = asFolder;\r\nfunction getOpenCommand() {\r\n    if (os.platform() === 'win32') {\r\n        return 'explorer';\r\n    }\r\n    else if (os.platform() === 'darwin') {\r\n        return '/usr/bin/open';\r\n    }\r\n    else {\r\n        return '/usr/bin/xdg-open';\r\n    }\r\n}\r\nexports.getOpenCommand = getOpenCommand;\r\nfunction getDebugAdaptersPath(file) {\r\n    return path.resolve(getExtensionFilePath(\"debugAdapters\"), file);\r\n}\r\nexports.getDebugAdaptersPath = getDebugAdaptersPath;\r\nfunction getHttpsProxyAgent() {\r\n    let proxy = vscode.workspace.getConfiguration().get('http.proxy');\r\n    if (!proxy) {\r\n        proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;\r\n        if (!proxy) {\r\n            return null;\r\n        }\r\n    }\r\n    let proxyUrl = url.parse(proxy);\r\n    if (proxyUrl.protocol !== \"https:\" && proxyUrl.protocol !== \"http:\") {\r\n        return null;\r\n    }\r\n    let strictProxy = vscode.workspace.getConfiguration().get(\"http.proxyStrictSSL\", true);\r\n    let proxyOptions = {\r\n        host: proxyUrl.hostname,\r\n        port: parseInt(proxyUrl.port, 10),\r\n        auth: proxyUrl.auth,\r\n        rejectUnauthorized: strictProxy\r\n    };\r\n    return new HttpsProxyAgent(proxyOptions);\r\n}\r\nexports.getHttpsProxyAgent = getHttpsProxyAgent;\r\nfunction touchFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.writeFile(file, \"\", (err) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nfunction touchInstallLockFile() {\r\n    return touchFile(getInstallLockPath());\r\n}\r\nexports.touchInstallLockFile = touchInstallLockFile;\r\nfunction touchExtensionFolder() {\r\n    return new Promise((resolve, reject) => {\r\n        fs.utimes(path.resolve(exports.extensionContext.extensionPath, \"..\"), new Date(Date.now()), new Date(Date.now()), (err) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexports.touchExtensionFolder = touchExtensionFolder;\r\nfunction checkFileExists(filePath) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.stat(filePath, (err, stats) => {\r\n            if (stats && stats.isFile()) {\r\n                resolve(true);\r\n            }\r\n            else {\r\n                resolve(false);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.checkFileExists = checkFileExists;\r\nfunction checkDirectoryExists(dirPath) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.stat(dirPath, (err, stats) => {\r\n            if (stats && stats.isDirectory()) {\r\n                resolve(true);\r\n            }\r\n            else {\r\n                resolve(false);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.checkDirectoryExists = checkDirectoryExists;\r\nfunction checkFileExistsSync(filePath) {\r\n    try {\r\n        return fs.statSync(filePath).isFile();\r\n    }\r\n    catch (e) {\r\n    }\r\n    return false;\r\n}\r\nexports.checkFileExistsSync = checkFileExistsSync;\r\nfunction checkDirectoryExistsSync(dirPath) {\r\n    try {\r\n        return fs.statSync(dirPath).isDirectory();\r\n    }\r\n    catch (e) {\r\n    }\r\n    return false;\r\n}\r\nexports.checkDirectoryExistsSync = checkDirectoryExistsSync;\r\nfunction readDir(dirPath) {\r\n    return new Promise((resolve) => {\r\n        fs.readdir(dirPath, (err, list) => {\r\n            resolve(list);\r\n        });\r\n    });\r\n}\r\nexports.readDir = readDir;\r\nfunction checkInstallLockFile() {\r\n    return checkFileExists(getInstallLockPath());\r\n}\r\nexports.checkInstallLockFile = checkInstallLockFile;\r\nfunction readFileText(filePath, encoding = \"utf8\") {\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(filePath, encoding, (err, data) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve(data);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.readFileText = readFileText;\r\nfunction writeFileText(filePath, content, encoding = \"utf8\") {\r\n    return new Promise((resolve, reject) => {\r\n        fs.writeFile(filePath, content, { encoding }, (err) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.writeFileText = writeFileText;\r\nfunction deleteFile(filePath) {\r\n    return new Promise((resolve, reject) => {\r\n        if (fs.existsSync(filePath)) {\r\n            fs.unlink(filePath, (err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\nexports.deleteFile = deleteFile;\r\nfunction getInstallLockPath() {\r\n    return getExtensionFilePath(\"install.lock\");\r\n}\r\nexports.getInstallLockPath = getInstallLockPath;\r\nfunction getReadmeMessage() {\r\n    const readmePath = getExtensionFilePath(\"README.md\");\r\n    const readmeMessage = `Please refer to ${readmePath} for troubleshooting information. Issues can be created at https://github.com/Microsoft/vscode-cpptools/issues`;\r\n    return readmeMessage;\r\n}\r\nexports.getReadmeMessage = getReadmeMessage;\r\nfunction logToFile(message) {\r\n    const logFolder = getExtensionFilePath(\"extension.log\");\r\n    fs.writeFileSync(logFolder, `${message}${os.EOL}`, { flag: 'a' });\r\n}\r\nexports.logToFile = logToFile;\r\nfunction execChildProcess(process, workingDirectory, channel) {\r\n    return new Promise((resolve, reject) => {\r\n        child_process.exec(process, { cwd: workingDirectory, maxBuffer: 500 * 1024 }, (error, stdout, stderr) => {\r\n            if (channel) {\r\n                let message = \"\";\r\n                let err = false;\r\n                if (stdout && stdout.length > 0) {\r\n                    message += stdout;\r\n                }\r\n                if (stderr && stderr.length > 0) {\r\n                    message += stderr;\r\n                    err = true;\r\n                }\r\n                if (error) {\r\n                    message += error.message;\r\n                    err = true;\r\n                }\r\n                if (err) {\r\n                    channel.append(message);\r\n                    channel.show();\r\n                }\r\n            }\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n            if (stderr && stderr.length > 0) {\r\n                reject(new Error(stderr));\r\n                return;\r\n            }\r\n            resolve(stdout);\r\n        });\r\n    });\r\n}\r\nexports.execChildProcess = execChildProcess;\r\nfunction spawnChildProcess(process, args, workingDirectory, dataCallback, errorCallback) {\r\n    return new Promise(function (resolve, reject) {\r\n        const child = child_process.spawn(process, args, { cwd: workingDirectory });\r\n        child.stdout.on('data', (data) => {\r\n            dataCallback(`${data}`);\r\n        });\r\n        child.stderr.on('data', (data) => {\r\n            errorCallback(`${data}`);\r\n        });\r\n        child.on('exit', (code) => {\r\n            if (code !== 0) {\r\n                reject(new Error(`${process} exited with error code ${code}`));\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.spawnChildProcess = spawnChildProcess;\r\nfunction allowExecution(file) {\r\n    return new Promise((resolve, reject) => {\r\n        if (process.platform !== 'win32') {\r\n            checkFileExists(file).then((exists) => {\r\n                if (exists) {\r\n                    fs.chmod(file, '755', (err) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        resolve();\r\n                    });\r\n                }\r\n                else {\r\n                    logger_1.getOutputChannelLogger().appendLine(\"\");\r\n                    logger_1.getOutputChannelLogger().appendLine(`Warning: Expected file ${file} is missing.`);\r\n                    resolve();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\nexports.allowExecution = allowExecution;\r\nfunction removePotentialPII(str) {\r\n    let words = str.split(\" \");\r\n    let result = \"\";\r\n    for (let word of words) {\r\n        if (word.indexOf(\".\") === -1 && word.indexOf(\"/\") === -1 && word.indexOf(\"\\\\\") === -1 && word.indexOf(\":\") === -1) {\r\n            result += word + \" \";\r\n        }\r\n        else {\r\n            result += \"? \";\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.removePotentialPII = removePotentialPII;\r\nfunction checkDistro(platformInfo) {\r\n    if (platformInfo.platform !== 'win32' && platformInfo.platform !== 'linux' && platformInfo.platform !== 'darwin') {\r\n        logger_1.getOutputChannelLogger().appendLine(`Warning: Debugging has not been tested for this platform. ${getReadmeMessage()}`);\r\n    }\r\n}\r\nexports.checkDistro = checkDistro;\r\nfunction unlinkPromise(fileName) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve, reject) => {\r\n            fs.unlink(fileName, err => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n                return resolve();\r\n            });\r\n        });\r\n    });\r\n}\r\nexports.unlinkPromise = unlinkPromise;\r\nfunction renamePromise(oldName, newName) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve, reject) => {\r\n            fs.rename(oldName, newName, err => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n                return resolve();\r\n            });\r\n        });\r\n    });\r\n}\r\nexports.renamePromise = renamePromise;\r\nfunction promptForReloadWindowDueToSettingsChange() {\r\n    promptReloadWindow(\"Reload the workspace for the settings change to take effect.\");\r\n}\r\nexports.promptForReloadWindowDueToSettingsChange = promptForReloadWindowDueToSettingsChange;\r\nfunction promptReloadWindow(message) {\r\n    let reload = \"Reload\";\r\n    vscode.window.showInformationMessage(message, reload).then((value) => {\r\n        if (value === reload) {\r\n            vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\r\n        }\r\n    });\r\n}\r\nexports.promptReloadWindow = promptReloadWindow;\r\nfunction downloadFileToDestination(urlStr, destinationPath, headers) {\r\n    return new Promise((resolve, reject) => {\r\n        let parsedUrl = url.parse(urlStr);\r\n        let request = https.request({\r\n            host: parsedUrl.host,\r\n            path: parsedUrl.path,\r\n            agent: getHttpsProxyAgent(),\r\n            rejectUnauthorized: vscode.workspace.getConfiguration().get('http.proxyStrictSSL', true),\r\n            headers: headers\r\n        }, (response) => {\r\n            if (response.statusCode === 301 || response.statusCode === 302) {\r\n                let redirectUrl;\r\n                if (typeof response.headers.location === 'string') {\r\n                    redirectUrl = response.headers.location;\r\n                }\r\n                else {\r\n                    redirectUrl = response.headers.location[0];\r\n                }\r\n                return resolve(downloadFileToDestination(redirectUrl, destinationPath, headers));\r\n            }\r\n            if (response.statusCode !== 200) {\r\n                return reject();\r\n            }\r\n            let createdFile = fs.createWriteStream(destinationPath);\r\n            createdFile.on('finish', () => { resolve(); });\r\n            response.on('error', (error) => { reject(error); });\r\n            response.pipe(createdFile);\r\n        });\r\n        request.on('error', (error) => { reject(error); });\r\n        request.end();\r\n    });\r\n}\r\nexports.downloadFileToDestination = downloadFileToDestination;\r\nfunction downloadFileToStr(urlStr, headers) {\r\n    return new Promise((resolve, reject) => {\r\n        let parsedUrl = url.parse(urlStr);\r\n        let request = https.request({\r\n            host: parsedUrl.host,\r\n            path: parsedUrl.path,\r\n            agent: getHttpsProxyAgent(),\r\n            rejectUnauthorized: vscode.workspace.getConfiguration().get('http.proxyStrictSSL', true),\r\n            headers: headers\r\n        }, (response) => {\r\n            if (response.statusCode === 301 || response.statusCode === 302) {\r\n                let redirectUrl;\r\n                if (typeof response.headers.location === 'string') {\r\n                    redirectUrl = response.headers.location;\r\n                }\r\n                else {\r\n                    redirectUrl = response.headers.location[0];\r\n                }\r\n                return resolve(downloadFileToStr(redirectUrl, headers));\r\n            }\r\n            if (response.statusCode !== 200) {\r\n                return reject();\r\n            }\r\n            let downloadedData = '';\r\n            response.on('data', (data) => { downloadedData += data; });\r\n            response.on('error', (error) => { reject(error); });\r\n            response.on('end', () => { resolve(downloadedData); });\r\n        });\r\n        request.on('error', (error) => { reject(error); });\r\n        request.end();\r\n    });\r\n}\r\nexports.downloadFileToStr = downloadFileToStr;\r\nfunction extractCompilerPathAndArgs(inputCompilerPath) {\r\n    let compilerPath = inputCompilerPath;\r\n    let additionalArgs;\r\n    let isWindows = os.platform() === 'win32';\r\n    if (compilerPath) {\r\n        compilerPath = compilerPath.trim();\r\n        if (compilerPath.startsWith(\"\\\"\")) {\r\n            let endQuote = compilerPath.substr(1).search(\"\\\"\") + 1;\r\n            if (endQuote !== -1) {\r\n                additionalArgs = compilerPath.substr(endQuote + 1).split(\" \");\r\n                additionalArgs = additionalArgs.filter((arg) => { return arg.trim().length !== 0; });\r\n                compilerPath = compilerPath.substr(1, endQuote - 1);\r\n            }\r\n        }\r\n        else {\r\n            let spaceStart = compilerPath.lastIndexOf(\" \");\r\n            if (spaceStart !== -1 && (!isWindows || !compilerPath.endsWith(\"cl.exe\")) && !checkFileExistsSync(compilerPath)) {\r\n                let potentialCompilerPath = compilerPath.substr(0, spaceStart);\r\n                while ((!isWindows || !potentialCompilerPath.endsWith(\"cl.exe\")) && !checkFileExistsSync(potentialCompilerPath)) {\r\n                    spaceStart = potentialCompilerPath.lastIndexOf(\" \");\r\n                    if (spaceStart === -1) {\r\n                        potentialCompilerPath = compilerPath;\r\n                        break;\r\n                    }\r\n                    potentialCompilerPath = potentialCompilerPath.substr(0, spaceStart);\r\n                }\r\n                if (compilerPath !== potentialCompilerPath) {\r\n                    additionalArgs = compilerPath.substr(spaceStart + 1).split(\" \");\r\n                    additionalArgs = additionalArgs.filter((arg) => { return arg.trim().length !== 0; });\r\n                    compilerPath = potentialCompilerPath;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { compilerPath, additionalArgs };\r\n}\r\nexports.extractCompilerPathAndArgs = extractCompilerPathAndArgs;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/common.ts\n");

/***/ }),

/***/ "./src/cppTools.ts":
/*!*************************!*\
  !*** ./src/cppTools.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_cpptools_1 = __webpack_require__(/*! vscode-cpptools */ \"./node_modules/vscode-cpptools/out/api.js\");\r\nconst customProviders_1 = __webpack_require__(/*! ./LanguageServer/customProviders */ \"./src/LanguageServer/customProviders.ts\");\r\nconst logger_1 = __webpack_require__(/*! ./logger */ \"./src/logger.ts\");\r\nconst LanguageServer = __webpack_require__(/*! ./LanguageServer/extension */ \"./src/LanguageServer/extension.ts\");\r\nconst test = __webpack_require__(/*! ./testHook */ \"./src/testHook.ts\");\r\nclass CppTools {\r\n    constructor(version) {\r\n        this.providers = [];\r\n        this.failedRegistrations = [];\r\n        this.timers = new Map();\r\n        if (version > vscode_cpptools_1.Version.latest) {\r\n            console.warn(`version ${version} is not supported by this version of cpptools`);\r\n            console.warn(`  using ${vscode_cpptools_1.Version.latest} instead`);\r\n            version = vscode_cpptools_1.Version.latest;\r\n        }\r\n        this.version = version;\r\n    }\r\n    addNotifyReadyTimer(provider) {\r\n        if (this.version >= vscode_cpptools_1.Version.v2) {\r\n            const timeout = 30;\r\n            let timer = setTimeout(() => {\r\n                console.warn(`registered provider ${provider.extensionId} did not call 'notifyReady' within ${timeout} seconds`);\r\n            }, timeout * 1000);\r\n            this.timers.set(provider.extensionId, timer);\r\n        }\r\n    }\r\n    removeNotifyReadyTimer(provider) {\r\n        if (this.version >= vscode_cpptools_1.Version.v2) {\r\n            let timer = this.timers.get(provider.extensionId);\r\n            if (timer) {\r\n                this.timers.delete(provider.extensionId);\r\n                clearTimeout(timer);\r\n            }\r\n        }\r\n    }\r\n    getVersion() {\r\n        return this.version;\r\n    }\r\n    registerCustomConfigurationProvider(provider) {\r\n        let providers = customProviders_1.getCustomConfigProviders();\r\n        if (providers.add(provider, this.version)) {\r\n            let added = providers.get(provider);\r\n            logger_1.getOutputChannel().appendLine(`Custom configuration provider '${added.name}' registered`);\r\n            this.providers.push(added);\r\n            LanguageServer.getClients().forEach(client => client.onRegisterCustomConfigurationProvider(added));\r\n            this.addNotifyReadyTimer(added);\r\n        }\r\n        else {\r\n            this.failedRegistrations.push(provider);\r\n        }\r\n    }\r\n    notifyReady(provider) {\r\n        let providers = customProviders_1.getCustomConfigProviders();\r\n        let p = providers.get(provider);\r\n        if (p) {\r\n            this.removeNotifyReadyTimer(p);\r\n            p.isReady = true;\r\n            LanguageServer.getClients().forEach(client => {\r\n                client.updateCustomConfigurations(p);\r\n                client.updateCustomBrowseConfiguration(p);\r\n            });\r\n        }\r\n        else if (this.failedRegistrations.find(p => p === provider)) {\r\n            console.warn(\"provider not successfully registered, 'notifyReady' ignored\");\r\n        }\r\n        else {\r\n            console.warn(\"provider should be registered before signaling it's ready to provide configurations\");\r\n        }\r\n    }\r\n    didChangeCustomConfiguration(provider) {\r\n        let providers = customProviders_1.getCustomConfigProviders();\r\n        let p = providers.get(provider);\r\n        if (p) {\r\n            if (!p.isReady) {\r\n                console.warn(\"didChangeCustomConfiguration was invoked before notifyReady\");\r\n            }\r\n            LanguageServer.getClients().forEach(client => client.updateCustomConfigurations(p));\r\n        }\r\n        else if (this.failedRegistrations.find(p => p === provider)) {\r\n            console.warn(\"provider not successfully registered, 'didChangeCustomConfiguration' ignored\");\r\n        }\r\n        else {\r\n            console.warn(\"provider should be registered before sending config change messages\");\r\n        }\r\n    }\r\n    didChangeCustomBrowseConfiguration(provider) {\r\n        let providers = customProviders_1.getCustomConfigProviders();\r\n        let p = providers.get(provider);\r\n        if (p) {\r\n            LanguageServer.getClients().forEach(client => client.updateCustomBrowseConfiguration(p));\r\n        }\r\n        else if (this.failedRegistrations.find(p => p === provider)) {\r\n            console.warn(\"provider not successfully registered, 'didChangeCustomBrowseConfiguration' ignored\");\r\n        }\r\n        else {\r\n            console.warn(\"provider should be registered before sending config change messages\");\r\n        }\r\n    }\r\n    dispose() {\r\n        this.providers.forEach(provider => {\r\n            customProviders_1.getCustomConfigProviders().remove(provider);\r\n            provider.dispose();\r\n        });\r\n        this.providers = [];\r\n    }\r\n    getTestHook() {\r\n        return test.getTestHook();\r\n    }\r\n}\r\nexports.CppTools = CppTools;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3BwVG9vbHMudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL2NwcFRvb2xzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGVfY3BwdG9vbHNfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtY3BwdG9vbHNcIik7XHJcbmNvbnN0IGN1c3RvbVByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4vTGFuZ3VhZ2VTZXJ2ZXIvY3VzdG9tUHJvdmlkZXJzXCIpO1xyXG5jb25zdCBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuL2xvZ2dlclwiKTtcclxuY29uc3QgTGFuZ3VhZ2VTZXJ2ZXIgPSByZXF1aXJlKFwiLi9MYW5ndWFnZVNlcnZlci9leHRlbnNpb25cIik7XHJcbmNvbnN0IHRlc3QgPSByZXF1aXJlKFwiLi90ZXN0SG9va1wiKTtcclxuY2xhc3MgQ3BwVG9vbHMge1xyXG4gICAgY29uc3RydWN0b3IodmVyc2lvbikge1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5mYWlsZWRSZWdpc3RyYXRpb25zID0gW107XHJcbiAgICAgICAgdGhpcy50aW1lcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgaWYgKHZlcnNpb24gPiB2c2NvZGVfY3BwdG9vbHNfMS5WZXJzaW9uLmxhdGVzdCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHZlcnNpb24gJHt2ZXJzaW9ufSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgdmVyc2lvbiBvZiBjcHB0b29sc2ApO1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCAgdXNpbmcgJHt2c2NvZGVfY3BwdG9vbHNfMS5WZXJzaW9uLmxhdGVzdH0gaW5zdGVhZGApO1xyXG4gICAgICAgICAgICB2ZXJzaW9uID0gdnNjb2RlX2NwcHRvb2xzXzEuVmVyc2lvbi5sYXRlc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcbiAgICB9XHJcbiAgICBhZGROb3RpZnlSZWFkeVRpbWVyKHByb3ZpZGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiA+PSB2c2NvZGVfY3BwdG9vbHNfMS5WZXJzaW9uLnYyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSAzMDtcclxuICAgICAgICAgICAgbGV0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHJlZ2lzdGVyZWQgcHJvdmlkZXIgJHtwcm92aWRlci5leHRlbnNpb25JZH0gZGlkIG5vdCBjYWxsICdub3RpZnlSZWFkeScgd2l0aGluICR7dGltZW91dH0gc2Vjb25kc2ApO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0ICogMTAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJzLnNldChwcm92aWRlci5leHRlbnNpb25JZCwgdGltZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbW92ZU5vdGlmeVJlYWR5VGltZXIocHJvdmlkZXIpIHtcclxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uID49IHZzY29kZV9jcHB0b29sc18xLlZlcnNpb24udjIpIHtcclxuICAgICAgICAgICAgbGV0IHRpbWVyID0gdGhpcy50aW1lcnMuZ2V0KHByb3ZpZGVyLmV4dGVuc2lvbklkKTtcclxuICAgICAgICAgICAgaWYgKHRpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVycy5kZWxldGUocHJvdmlkZXIuZXh0ZW5zaW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldFZlcnNpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVyc2lvbjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyQ3VzdG9tQ29uZmlndXJhdGlvblByb3ZpZGVyKHByb3ZpZGVyKSB7XHJcbiAgICAgICAgbGV0IHByb3ZpZGVycyA9IGN1c3RvbVByb3ZpZGVyc18xLmdldEN1c3RvbUNvbmZpZ1Byb3ZpZGVycygpO1xyXG4gICAgICAgIGlmIChwcm92aWRlcnMuYWRkKHByb3ZpZGVyLCB0aGlzLnZlcnNpb24pKSB7XHJcbiAgICAgICAgICAgIGxldCBhZGRlZCA9IHByb3ZpZGVycy5nZXQocHJvdmlkZXIpO1xyXG4gICAgICAgICAgICBsb2dnZXJfMS5nZXRPdXRwdXRDaGFubmVsKCkuYXBwZW5kTGluZShgQ3VzdG9tIGNvbmZpZ3VyYXRpb24gcHJvdmlkZXIgJyR7YWRkZWQubmFtZX0nIHJlZ2lzdGVyZWRgKTtcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMucHVzaChhZGRlZCk7XHJcbiAgICAgICAgICAgIExhbmd1YWdlU2VydmVyLmdldENsaWVudHMoKS5mb3JFYWNoKGNsaWVudCA9PiBjbGllbnQub25SZWdpc3RlckN1c3RvbUNvbmZpZ3VyYXRpb25Qcm92aWRlcihhZGRlZCkpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGlmeVJlYWR5VGltZXIoYWRkZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5mYWlsZWRSZWdpc3RyYXRpb25zLnB1c2gocHJvdmlkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG5vdGlmeVJlYWR5KHByb3ZpZGVyKSB7XHJcbiAgICAgICAgbGV0IHByb3ZpZGVycyA9IGN1c3RvbVByb3ZpZGVyc18xLmdldEN1c3RvbUNvbmZpZ1Byb3ZpZGVycygpO1xyXG4gICAgICAgIGxldCBwID0gcHJvdmlkZXJzLmdldChwcm92aWRlcik7XHJcbiAgICAgICAgaWYgKHApIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVOb3RpZnlSZWFkeVRpbWVyKHApO1xyXG4gICAgICAgICAgICBwLmlzUmVhZHkgPSB0cnVlO1xyXG4gICAgICAgICAgICBMYW5ndWFnZVNlcnZlci5nZXRDbGllbnRzKCkuZm9yRWFjaChjbGllbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50LnVwZGF0ZUN1c3RvbUNvbmZpZ3VyYXRpb25zKHApO1xyXG4gICAgICAgICAgICAgICAgY2xpZW50LnVwZGF0ZUN1c3RvbUJyb3dzZUNvbmZpZ3VyYXRpb24ocCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmZhaWxlZFJlZ2lzdHJhdGlvbnMuZmluZChwID0+IHAgPT09IHByb3ZpZGVyKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJwcm92aWRlciBub3Qgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWQsICdub3RpZnlSZWFkeScgaWdub3JlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcInByb3ZpZGVyIHNob3VsZCBiZSByZWdpc3RlcmVkIGJlZm9yZSBzaWduYWxpbmcgaXQncyByZWFkeSB0byBwcm92aWRlIGNvbmZpZ3VyYXRpb25zXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpZENoYW5nZUN1c3RvbUNvbmZpZ3VyYXRpb24ocHJvdmlkZXIpIHtcclxuICAgICAgICBsZXQgcHJvdmlkZXJzID0gY3VzdG9tUHJvdmlkZXJzXzEuZ2V0Q3VzdG9tQ29uZmlnUHJvdmlkZXJzKCk7XHJcbiAgICAgICAgbGV0IHAgPSBwcm92aWRlcnMuZ2V0KHByb3ZpZGVyKTtcclxuICAgICAgICBpZiAocCkge1xyXG4gICAgICAgICAgICBpZiAoIXAuaXNSZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiZGlkQ2hhbmdlQ3VzdG9tQ29uZmlndXJhdGlvbiB3YXMgaW52b2tlZCBiZWZvcmUgbm90aWZ5UmVhZHlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTGFuZ3VhZ2VTZXJ2ZXIuZ2V0Q2xpZW50cygpLmZvckVhY2goY2xpZW50ID0+IGNsaWVudC51cGRhdGVDdXN0b21Db25maWd1cmF0aW9ucyhwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZmFpbGVkUmVnaXN0cmF0aW9ucy5maW5kKHAgPT4gcCA9PT0gcHJvdmlkZXIpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcInByb3ZpZGVyIG5vdCBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCwgJ2RpZENoYW5nZUN1c3RvbUNvbmZpZ3VyYXRpb24nIGlnbm9yZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJwcm92aWRlciBzaG91bGQgYmUgcmVnaXN0ZXJlZCBiZWZvcmUgc2VuZGluZyBjb25maWcgY2hhbmdlIG1lc3NhZ2VzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpZENoYW5nZUN1c3RvbUJyb3dzZUNvbmZpZ3VyYXRpb24ocHJvdmlkZXIpIHtcclxuICAgICAgICBsZXQgcHJvdmlkZXJzID0gY3VzdG9tUHJvdmlkZXJzXzEuZ2V0Q3VzdG9tQ29uZmlnUHJvdmlkZXJzKCk7XHJcbiAgICAgICAgbGV0IHAgPSBwcm92aWRlcnMuZ2V0KHByb3ZpZGVyKTtcclxuICAgICAgICBpZiAocCkge1xyXG4gICAgICAgICAgICBMYW5ndWFnZVNlcnZlci5nZXRDbGllbnRzKCkuZm9yRWFjaChjbGllbnQgPT4gY2xpZW50LnVwZGF0ZUN1c3RvbUJyb3dzZUNvbmZpZ3VyYXRpb24ocCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmZhaWxlZFJlZ2lzdHJhdGlvbnMuZmluZChwID0+IHAgPT09IHByb3ZpZGVyKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJwcm92aWRlciBub3Qgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWQsICdkaWRDaGFuZ2VDdXN0b21Ccm93c2VDb25maWd1cmF0aW9uJyBpZ25vcmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwicHJvdmlkZXIgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgYmVmb3JlIHNlbmRpbmcgY29uZmlnIGNoYW5nZSBtZXNzYWdlc1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLmZvckVhY2gocHJvdmlkZXIgPT4ge1xyXG4gICAgICAgICAgICBjdXN0b21Qcm92aWRlcnNfMS5nZXRDdXN0b21Db25maWdQcm92aWRlcnMoKS5yZW1vdmUocHJvdmlkZXIpO1xyXG4gICAgICAgICAgICBwcm92aWRlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIGdldFRlc3RIb29rKCkge1xyXG4gICAgICAgIHJldHVybiB0ZXN0LmdldFRlc3RIb29rKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5DcHBUb29scyA9IENwcFRvb2xzO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cppTools.ts\n");

/***/ }),

/***/ "./src/cppTools1.ts":
/*!**************************!*\
  !*** ./src/cppTools1.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_cpptools_1 = __webpack_require__(/*! vscode-cpptools */ \"./node_modules/vscode-cpptools/out/api.js\");\r\nconst cppTools_1 = __webpack_require__(/*! ./cppTools */ \"./src/cppTools.ts\");\r\nclass CppTools1 {\r\n    get BackupApi() {\r\n        if (!this.backupApi) {\r\n            this.backupApi = new cppTools_1.CppTools(vscode_cpptools_1.Version.v0);\r\n        }\r\n        return this.backupApi;\r\n    }\r\n    getApi(version) {\r\n        switch (version) {\r\n            case vscode_cpptools_1.Version.v0:\r\n                return this.BackupApi;\r\n            default:\r\n                return new cppTools_1.CppTools(version);\r\n        }\r\n    }\r\n    getTestApi(version) {\r\n        return this.getApi(version);\r\n    }\r\n    getVersion() {\r\n        return this.BackupApi.getVersion();\r\n    }\r\n    registerCustomConfigurationProvider(provider) {\r\n        this.BackupApi.registerCustomConfigurationProvider(provider);\r\n    }\r\n    notifyReady(provider) {\r\n        this.BackupApi.notifyReady(provider);\r\n    }\r\n    didChangeCustomConfiguration(provider) {\r\n        this.BackupApi.didChangeCustomConfiguration(provider);\r\n    }\r\n    didChangeCustomBrowseConfiguration(provider) {\r\n        this.BackupApi.didChangeCustomBrowseConfiguration(provider);\r\n    }\r\n    dispose() {\r\n    }\r\n    getTestHook() {\r\n        return this.BackupApi.getTestHook();\r\n    }\r\n}\r\nexports.CppTools1 = CppTools1;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3BwVG9vbHMxLnRzLmpzIiwic291cmNlcyI6WyIuLi8uL3NyYy9jcHBUb29sczEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHZzY29kZV9jcHB0b29sc18xID0gcmVxdWlyZShcInZzY29kZS1jcHB0b29sc1wiKTtcclxuY29uc3QgY3BwVG9vbHNfMSA9IHJlcXVpcmUoXCIuL2NwcFRvb2xzXCIpO1xyXG5jbGFzcyBDcHBUb29sczEge1xyXG4gICAgZ2V0IEJhY2t1cEFwaSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYmFja3VwQXBpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja3VwQXBpID0gbmV3IGNwcFRvb2xzXzEuQ3BwVG9vbHModnNjb2RlX2NwcHRvb2xzXzEuVmVyc2lvbi52MCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmJhY2t1cEFwaTtcclxuICAgIH1cclxuICAgIGdldEFwaSh2ZXJzaW9uKSB7XHJcbiAgICAgICAgc3dpdGNoICh2ZXJzaW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgdnNjb2RlX2NwcHRvb2xzXzEuVmVyc2lvbi52MDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkJhY2t1cEFwaTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgY3BwVG9vbHNfMS5DcHBUb29scyh2ZXJzaW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRUZXN0QXBpKHZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRBcGkodmVyc2lvbik7XHJcbiAgICB9XHJcbiAgICBnZXRWZXJzaW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkJhY2t1cEFwaS5nZXRWZXJzaW9uKCk7XHJcbiAgICB9XHJcbiAgICByZWdpc3RlckN1c3RvbUNvbmZpZ3VyYXRpb25Qcm92aWRlcihwcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMuQmFja3VwQXBpLnJlZ2lzdGVyQ3VzdG9tQ29uZmlndXJhdGlvblByb3ZpZGVyKHByb3ZpZGVyKTtcclxuICAgIH1cclxuICAgIG5vdGlmeVJlYWR5KHByb3ZpZGVyKSB7XHJcbiAgICAgICAgdGhpcy5CYWNrdXBBcGkubm90aWZ5UmVhZHkocHJvdmlkZXIpO1xyXG4gICAgfVxyXG4gICAgZGlkQ2hhbmdlQ3VzdG9tQ29uZmlndXJhdGlvbihwcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMuQmFja3VwQXBpLmRpZENoYW5nZUN1c3RvbUNvbmZpZ3VyYXRpb24ocHJvdmlkZXIpO1xyXG4gICAgfVxyXG4gICAgZGlkQ2hhbmdlQ3VzdG9tQnJvd3NlQ29uZmlndXJhdGlvbihwcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMuQmFja3VwQXBpLmRpZENoYW5nZUN1c3RvbUJyb3dzZUNvbmZpZ3VyYXRpb24ocHJvdmlkZXIpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgIH1cclxuICAgIGdldFRlc3RIb29rKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkJhY2t1cEFwaS5nZXRUZXN0SG9vaygpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ3BwVG9vbHMxID0gQ3BwVG9vbHMxO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cppTools1.ts\n");

/***/ }),

/***/ "./src/githubAPI.ts":
/*!**************************!*\
  !*** ./src/githubAPI.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst packageVersion_1 = __webpack_require__(/*! ./packageVersion */ \"./src/packageVersion.ts\");\r\nconst util = __webpack_require__(/*! ./common */ \"./src/common.ts\");\r\nconst platform_1 = __webpack_require__(/*! ./platform */ \"./src/platform.ts\");\r\nconst testingInsidersVsixInstall = false;\r\nfunction getVsixDownloadUrl(build, vsixName) {\r\n    const downloadUrl = build.assets.find(asset => {\r\n        return asset.name === vsixName;\r\n    }).browser_download_url;\r\n    if (!downloadUrl) {\r\n        throw new Error('Failed to find VSIX: ' + vsixName + ' in build: ' + build.name);\r\n    }\r\n    return downloadUrl;\r\n}\r\nfunction isAsset(input) {\r\n    return input && input.name && typeof (input.name) === \"string\" &&\r\n        input.browser_download_url && typeof (input.browser_download_url) === \"string\";\r\n}\r\nfunction isBuild(input) {\r\n    return input && input.name && typeof (input.name) === \"string\" && isArrayOfAssets(input.assets) && input.assets.length >= 4;\r\n}\r\nfunction isArrayOfAssets(input) {\r\n    return input instanceof Array && input.every(item => isAsset(item));\r\n}\r\nfunction isArrayOfBuilds(input) {\r\n    if (!input || !(input instanceof Array) || input.length === 0) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < 5 && i < input.length; i++) {\r\n        if (!isBuild(input[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction vsixNameForPlatform(info) {\r\n    const vsixName = function (platformInfo) {\r\n        switch (platformInfo.platform) {\r\n            case 'win32': return 'cpptools-win32.vsix';\r\n            case 'darwin': return 'cpptools-osx.vsix';\r\n            default: {\r\n                switch (platformInfo.architecture) {\r\n                    case 'x86_64': return 'cpptools-linux.vsix';\r\n                    case 'x86':\r\n                    case 'i386':\r\n                    case 'i686': return 'cpptools-linux32.vsix';\r\n                }\r\n            }\r\n        }\r\n    }(info);\r\n    if (!vsixName) {\r\n        throw new Error('Failed to match VSIX name for: ' + info.platform + ':' + info.architecture);\r\n    }\r\n    return vsixName;\r\n}\r\nfunction getTargetBuildInfo(updateChannel) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return getReleaseJson()\r\n            .then(builds => {\r\n            if (!builds || builds.length === 0) {\r\n                return undefined;\r\n            }\r\n            const userVersion = new packageVersion_1.PackageVersion(util.packageJson.version);\r\n            const latestVersion = new packageVersion_1.PackageVersion(builds[0].name);\r\n            if (!testingInsidersVsixInstall && (userVersion.isGreaterThan(latestVersion) || (userVersion.suffix && userVersion.suffix !== 'insiders'))) {\r\n                return undefined;\r\n            }\r\n            return getTargetBuild(builds, userVersion, updateChannel);\r\n        })\r\n            .then((build) => __awaiter(this, void 0, void 0, function* () {\r\n            if (!build) {\r\n                return Promise.resolve(undefined);\r\n            }\r\n            try {\r\n                const platformInfo = yield platform_1.PlatformInformation.GetPlatformInformation();\r\n                const vsixName = vsixNameForPlatform(platformInfo);\r\n                const downloadUrl = getVsixDownloadUrl(build, vsixName);\r\n                return { downloadUrl: downloadUrl, name: build.name };\r\n            }\r\n            catch (error) {\r\n                return Promise.reject(error);\r\n            }\r\n        }));\r\n    });\r\n}\r\nexports.getTargetBuildInfo = getTargetBuildInfo;\r\nfunction getTargetBuild(builds, userVersion, updateChannel) {\r\n    let needsUpdate;\r\n    let useBuild;\r\n    if (updateChannel === 'Insiders') {\r\n        needsUpdate = (installed, target) => { return testingInsidersVsixInstall || target.isGreaterThan(installed); };\r\n        useBuild = (build) => { return true; };\r\n    }\r\n    else if (updateChannel === 'Default') {\r\n        needsUpdate = function (installed, target) { return installed.isGreaterThan(target); };\r\n        useBuild = (build) => { return build.name.indexOf('-') === -1; };\r\n    }\r\n    else {\r\n        throw new Error('Incorrect updateChannel setting provided');\r\n    }\r\n    const targetBuild = builds.find((build) => useBuild(build));\r\n    if (!targetBuild) {\r\n        throw new Error('Failed to determine installation candidate');\r\n    }\r\n    const targetVersion = new packageVersion_1.PackageVersion(targetBuild.name);\r\n    if (needsUpdate(userVersion, targetVersion)) {\r\n        return targetBuild;\r\n    }\r\n    return undefined;\r\n}\r\nfunction isRate(input) {\r\n    return input && util.isNumber(input.remaining);\r\n}\r\nfunction isRateLimit(input) {\r\n    return input && isRate(input.rate);\r\n}\r\nfunction getRateLimit() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const header = { 'User-Agent': 'vscode-cpptools' };\r\n        const data = yield util.downloadFileToStr('https://api.github.com/rate_limit', header)\r\n            .catch((error) => {\r\n            if (error && error.code && error.code !== \"ENOENT\") {\r\n                throw new Error('Failed to download rate limit JSON');\r\n            }\r\n        });\r\n        if (!data) {\r\n            return Promise.resolve(null);\r\n        }\r\n        let rateLimit;\r\n        try {\r\n            rateLimit = JSON.parse(data);\r\n        }\r\n        catch (error) {\r\n            throw new Error('Failed to parse rate limit JSON');\r\n        }\r\n        if (isRateLimit(rateLimit)) {\r\n            return Promise.resolve(rateLimit);\r\n        }\r\n        else {\r\n            throw new Error('Rate limit JSON is not of type RateLimit');\r\n        }\r\n    });\r\n}\r\nfunction rateLimitExceeded() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const rateLimit = yield getRateLimit();\r\n        return rateLimit && rateLimit.rate.remaining <= 0;\r\n    });\r\n}\r\nfunction getReleaseJson() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (yield rateLimitExceeded()) {\r\n            throw new Error('Failed to stay within GitHub API rate limit');\r\n        }\r\n        const releaseUrl = 'https://api.github.com/repos/Microsoft/vscode-cpptools/releases';\r\n        const header = { 'User-Agent': 'vscode-cpptools' };\r\n        const data = yield util.downloadFileToStr(releaseUrl, header)\r\n            .catch((error) => {\r\n            if (error && error.code && error.code !== \"ENOENT\") {\r\n                throw new Error('Failed to download release JSON');\r\n            }\r\n        });\r\n        if (!data) {\r\n            return Promise.resolve(null);\r\n        }\r\n        let releaseJson;\r\n        try {\r\n            releaseJson = JSON.parse(data);\r\n        }\r\n        catch (error) {\r\n            throw new Error('Failed to parse release JSON');\r\n        }\r\n        if (isArrayOfBuilds(releaseJson)) {\r\n            return releaseJson;\r\n        }\r\n        else {\r\n            throw new Error('Release JSON is not of type Build[]');\r\n        }\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/githubAPI.ts\n");

/***/ }),

/***/ "./src/installationInformation.ts":
/*!****************************************!*\
  !*** ./src/installationInformation.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nclass InstallationInformation {\r\n    constructor() {\r\n        this.hasError = false;\r\n        this.telemetryProperties = {};\r\n    }\r\n}\r\nexports.InstallationInformation = InstallationInformation;\r\nlet installBlob;\r\nfunction getInstallationInformation() {\r\n    if (!installBlob) {\r\n        installBlob = new InstallationInformation();\r\n    }\r\n    return installBlob;\r\n}\r\nexports.getInstallationInformation = getInstallationInformation;\r\nfunction setInstallationStage(stage) {\r\n    getInstallationInformation().stage = stage;\r\n}\r\nexports.setInstallationStage = setInstallationStage;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5zdGFsbGF0aW9uSW5mb3JtYXRpb24udHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL2luc3RhbGxhdGlvbkluZm9ybWF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgSW5zdGFsbGF0aW9uSW5mb3JtYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGVsZW1ldHJ5UHJvcGVydGllcyA9IHt9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSW5zdGFsbGF0aW9uSW5mb3JtYXRpb24gPSBJbnN0YWxsYXRpb25JbmZvcm1hdGlvbjtcclxubGV0IGluc3RhbGxCbG9iO1xyXG5mdW5jdGlvbiBnZXRJbnN0YWxsYXRpb25JbmZvcm1hdGlvbigpIHtcclxuICAgIGlmICghaW5zdGFsbEJsb2IpIHtcclxuICAgICAgICBpbnN0YWxsQmxvYiA9IG5ldyBJbnN0YWxsYXRpb25JbmZvcm1hdGlvbigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluc3RhbGxCbG9iO1xyXG59XHJcbmV4cG9ydHMuZ2V0SW5zdGFsbGF0aW9uSW5mb3JtYXRpb24gPSBnZXRJbnN0YWxsYXRpb25JbmZvcm1hdGlvbjtcclxuZnVuY3Rpb24gc2V0SW5zdGFsbGF0aW9uU3RhZ2Uoc3RhZ2UpIHtcclxuICAgIGdldEluc3RhbGxhdGlvbkluZm9ybWF0aW9uKCkuc3RhZ2UgPSBzdGFnZTtcclxufVxyXG5leHBvcnRzLnNldEluc3RhbGxhdGlvblN0YWdlID0gc2V0SW5zdGFsbGF0aW9uU3RhZ2U7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/installationInformation.ts\n");

/***/ }),

/***/ "./src/linuxDistribution.ts":
/*!**********************************!*\
  !*** ./src/linuxDistribution.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nclass LinuxDistribution {\r\n    constructor(name, version) {\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n    static GetDistroInformation() {\r\n        let linuxDistro;\r\n        linuxDistro = LinuxDistribution.getDistroInformationFromFile('/etc/os-release')\r\n            .catch(() => {\r\n            return LinuxDistribution.getDistroInformationFromFile('/usr/lib/os-release');\r\n        }).catch(() => {\r\n            return Promise.resolve(new LinuxDistribution('unknown', 'unknown'));\r\n        });\r\n        return linuxDistro;\r\n    }\r\n    static getDistroInformationFromFile(path) {\r\n        return new Promise((resolve, reject) => {\r\n            fs.readFile(path, 'utf8', (error, data) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                resolve(LinuxDistribution.getDistroInformation(data));\r\n            });\r\n        });\r\n    }\r\n    static getDistroInformation(data) {\r\n        const idKey = 'ID';\r\n        const versionKey = 'VERSION_ID';\r\n        let distroName = 'unknown';\r\n        let distroVersion = 'unknown';\r\n        let keyValues = data.split(os.EOL);\r\n        for (let i = 0; i < keyValues.length; i++) {\r\n            let keyValue = keyValues[i].split('=');\r\n            if (keyValue.length === 2) {\r\n                if (keyValue[0] === idKey) {\r\n                    distroName = keyValue[1];\r\n                }\r\n                else if (keyValue[0] === versionKey) {\r\n                    distroVersion = keyValue[1];\r\n                }\r\n            }\r\n        }\r\n        return new LinuxDistribution(distroName, distroVersion);\r\n    }\r\n}\r\nexports.LinuxDistribution = LinuxDistribution;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGludXhEaXN0cmlidXRpb24udHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL2xpbnV4RGlzdHJpYnV0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmNvbnN0IG9zID0gcmVxdWlyZShcIm9zXCIpO1xyXG5jbGFzcyBMaW51eERpc3RyaWJ1dGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB2ZXJzaW9uKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIEdldERpc3Ryb0luZm9ybWF0aW9uKCkge1xyXG4gICAgICAgIGxldCBsaW51eERpc3RybztcclxuICAgICAgICBsaW51eERpc3RybyA9IExpbnV4RGlzdHJpYnV0aW9uLmdldERpc3Ryb0luZm9ybWF0aW9uRnJvbUZpbGUoJy9ldGMvb3MtcmVsZWFzZScpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBMaW51eERpc3RyaWJ1dGlvbi5nZXREaXN0cm9JbmZvcm1hdGlvbkZyb21GaWxlKCcvdXNyL2xpYi9vcy1yZWxlYXNlJyk7XHJcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBMaW51eERpc3RyaWJ1dGlvbigndW5rbm93bicsICd1bmtub3duJykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBsaW51eERpc3RybztcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXREaXN0cm9JbmZvcm1hdGlvbkZyb21GaWxlKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBmcy5yZWFkRmlsZShwYXRoLCAndXRmOCcsIChlcnJvciwgZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKExpbnV4RGlzdHJpYnV0aW9uLmdldERpc3Ryb0luZm9ybWF0aW9uKGRhdGEpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0RGlzdHJvSW5mb3JtYXRpb24oZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGlkS2V5ID0gJ0lEJztcclxuICAgICAgICBjb25zdCB2ZXJzaW9uS2V5ID0gJ1ZFUlNJT05fSUQnO1xyXG4gICAgICAgIGxldCBkaXN0cm9OYW1lID0gJ3Vua25vd24nO1xyXG4gICAgICAgIGxldCBkaXN0cm9WZXJzaW9uID0gJ3Vua25vd24nO1xyXG4gICAgICAgIGxldCBrZXlWYWx1ZXMgPSBkYXRhLnNwbGl0KG9zLkVPTCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlWYWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGtleVZhbHVlID0ga2V5VmFsdWVzW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIGlmIChrZXlWYWx1ZS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChrZXlWYWx1ZVswXSA9PT0gaWRLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXN0cm9OYW1lID0ga2V5VmFsdWVbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXlWYWx1ZVswXSA9PT0gdmVyc2lvbktleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3Ryb1ZlcnNpb24gPSBrZXlWYWx1ZVsxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IExpbnV4RGlzdHJpYnV0aW9uKGRpc3Ryb05hbWUsIGRpc3Ryb1ZlcnNpb24pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTGludXhEaXN0cmlidXRpb24gPSBMaW51eERpc3RyaWJ1dGlvbjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/linuxDistribution.ts\n");

/***/ }),

/***/ "./src/logger.ts":
/*!***********************!*\
  !*** ./src/logger.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nlet Subscriber;\r\nfunction subscribeToAllLoggers(subscriber) {\r\n    Subscriber = subscriber;\r\n}\r\nexports.subscribeToAllLoggers = subscribeToAllLoggers;\r\nclass Logger {\r\n    constructor(writer) {\r\n        this.writer = writer;\r\n    }\r\n    append(message) {\r\n        this.writer(message);\r\n        if (Subscriber) {\r\n            Subscriber(message);\r\n        }\r\n    }\r\n    appendLine(message) {\r\n        this.writer(message + os.EOL);\r\n        if (Subscriber) {\r\n            Subscriber(message + os.EOL);\r\n        }\r\n    }\r\n    showInformationMessage(message, items) {\r\n        this.appendLine(message);\r\n        return vscode.window.showInformationMessage(message, ...items);\r\n    }\r\n    showWarningMessage(message, items) {\r\n        this.appendLine(message);\r\n        return vscode.window.showWarningMessage(message, ...items);\r\n    }\r\n    showErrorMessage(message, items) {\r\n        this.appendLine(message);\r\n        return vscode.window.showErrorMessage(message, ...items);\r\n    }\r\n}\r\nexports.Logger = Logger;\r\nlet outputChannel;\r\nfunction getOutputChannel() {\r\n    if (outputChannel === undefined) {\r\n        outputChannel = vscode.window.createOutputChannel(\"C/C++\");\r\n    }\r\n    return outputChannel;\r\n}\r\nexports.getOutputChannel = getOutputChannel;\r\nfunction showOutputChannel() {\r\n    getOutputChannel().show();\r\n}\r\nexports.showOutputChannel = showOutputChannel;\r\nlet outputChannelLogger;\r\nfunction getOutputChannelLogger() {\r\n    if (!outputChannelLogger) {\r\n        outputChannelLogger = new Logger(message => getOutputChannel().append(message));\r\n    }\r\n    return outputChannelLogger;\r\n}\r\nexports.getOutputChannelLogger = getOutputChannelLogger;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbG9nZ2VyLnRzLmpzIiwic291cmNlcyI6WyIuLi8uL3NyYy9sb2dnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHZzY29kZSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNvbnN0IG9zID0gcmVxdWlyZShcIm9zXCIpO1xyXG5sZXQgU3Vic2NyaWJlcjtcclxuZnVuY3Rpb24gc3Vic2NyaWJlVG9BbGxMb2dnZXJzKHN1YnNjcmliZXIpIHtcclxuICAgIFN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xyXG59XHJcbmV4cG9ydHMuc3Vic2NyaWJlVG9BbGxMb2dnZXJzID0gc3Vic2NyaWJlVG9BbGxMb2dnZXJzO1xyXG5jbGFzcyBMb2dnZXIge1xyXG4gICAgY29uc3RydWN0b3Iod3JpdGVyKSB7XHJcbiAgICAgICAgdGhpcy53cml0ZXIgPSB3cml0ZXI7XHJcbiAgICB9XHJcbiAgICBhcHBlbmQobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMud3JpdGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIGlmIChTdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgICAgIFN1YnNjcmliZXIobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXBwZW5kTGluZShtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy53cml0ZXIobWVzc2FnZSArIG9zLkVPTCk7XHJcbiAgICAgICAgaWYgKFN1YnNjcmliZXIpIHtcclxuICAgICAgICAgICAgU3Vic2NyaWJlcihtZXNzYWdlICsgb3MuRU9MKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93SW5mb3JtYXRpb25NZXNzYWdlKG1lc3NhZ2UsIGl0ZW1zKSB7XHJcbiAgICAgICAgdGhpcy5hcHBlbmRMaW5lKG1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiB2c2NvZGUud2luZG93LnNob3dJbmZvcm1hdGlvbk1lc3NhZ2UobWVzc2FnZSwgLi4uaXRlbXMpO1xyXG4gICAgfVxyXG4gICAgc2hvd1dhcm5pbmdNZXNzYWdlKG1lc3NhZ2UsIGl0ZW1zKSB7XHJcbiAgICAgICAgdGhpcy5hcHBlbmRMaW5lKG1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiB2c2NvZGUud2luZG93LnNob3dXYXJuaW5nTWVzc2FnZShtZXNzYWdlLCAuLi5pdGVtcyk7XHJcbiAgICB9XHJcbiAgICBzaG93RXJyb3JNZXNzYWdlKG1lc3NhZ2UsIGl0ZW1zKSB7XHJcbiAgICAgICAgdGhpcy5hcHBlbmRMaW5lKG1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiB2c2NvZGUud2luZG93LnNob3dFcnJvck1lc3NhZ2UobWVzc2FnZSwgLi4uaXRlbXMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTG9nZ2VyID0gTG9nZ2VyO1xyXG5sZXQgb3V0cHV0Q2hhbm5lbDtcclxuZnVuY3Rpb24gZ2V0T3V0cHV0Q2hhbm5lbCgpIHtcclxuICAgIGlmIChvdXRwdXRDaGFubmVsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBvdXRwdXRDaGFubmVsID0gdnNjb2RlLndpbmRvdy5jcmVhdGVPdXRwdXRDaGFubmVsKFwiQy9DKytcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0cHV0Q2hhbm5lbDtcclxufVxyXG5leHBvcnRzLmdldE91dHB1dENoYW5uZWwgPSBnZXRPdXRwdXRDaGFubmVsO1xyXG5mdW5jdGlvbiBzaG93T3V0cHV0Q2hhbm5lbCgpIHtcclxuICAgIGdldE91dHB1dENoYW5uZWwoKS5zaG93KCk7XHJcbn1cclxuZXhwb3J0cy5zaG93T3V0cHV0Q2hhbm5lbCA9IHNob3dPdXRwdXRDaGFubmVsO1xyXG5sZXQgb3V0cHV0Q2hhbm5lbExvZ2dlcjtcclxuZnVuY3Rpb24gZ2V0T3V0cHV0Q2hhbm5lbExvZ2dlcigpIHtcclxuICAgIGlmICghb3V0cHV0Q2hhbm5lbExvZ2dlcikge1xyXG4gICAgICAgIG91dHB1dENoYW5uZWxMb2dnZXIgPSBuZXcgTG9nZ2VyKG1lc3NhZ2UgPT4gZ2V0T3V0cHV0Q2hhbm5lbCgpLmFwcGVuZChtZXNzYWdlKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0cHV0Q2hhbm5lbExvZ2dlcjtcclxufVxyXG5leHBvcnRzLmdldE91dHB1dENoYW5uZWxMb2dnZXIgPSBnZXRPdXRwdXRDaGFubmVsTG9nZ2VyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/logger.ts\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cpptoolsJsonUtils = __webpack_require__(/*! ./abTesting */ \"./src/abTesting.ts\");\r\nconst DebuggerExtension = __webpack_require__(/*! ./Debugger/extension */ \"./src/Debugger/extension.ts\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst LanguageServer = __webpack_require__(/*! ./LanguageServer/extension */ \"./src/LanguageServer/extension.ts\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst Telemetry = __webpack_require__(/*! ./telemetry */ \"./src/telemetry.ts\");\r\nconst util = __webpack_require__(/*! ./common */ \"./src/common.ts\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst commands_1 = __webpack_require__(/*! ./commands */ \"./src/commands.ts\");\r\nconst platform_1 = __webpack_require__(/*! ./platform */ \"./src/platform.ts\");\r\nconst packageManager_1 = __webpack_require__(/*! ./packageManager */ \"./src/packageManager.ts\");\r\nconst persistentState_1 = __webpack_require__(/*! ./LanguageServer/persistentState */ \"./src/LanguageServer/persistentState.ts\");\r\nconst installationInformation_1 = __webpack_require__(/*! ./installationInformation */ \"./src/installationInformation.ts\");\r\nconst logger_1 = __webpack_require__(/*! ./logger */ \"./src/logger.ts\");\r\nconst cppTools1_1 = __webpack_require__(/*! ./cppTools1 */ \"./src/cppTools1.ts\");\r\nconst releaseNotesVersion = 3;\r\nconst cppTools = new cppTools1_1.CppTools1();\r\nlet languageServiceDisabled = false;\r\nlet reloadMessageShown = false;\r\nlet disposables = [];\r\nfunction activate(context) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        commands_1.initializeTemporaryCommandRegistrar();\r\n        util.setExtensionContext(context);\r\n        Telemetry.activate();\r\n        util.setProgress(0);\r\n        DebuggerExtension.initialize(context);\r\n        yield processRuntimeDependencies();\r\n        return cppTools;\r\n    });\r\n}\r\nexports.activate = activate;\r\nfunction deactivate() {\r\n    DebuggerExtension.dispose();\r\n    Telemetry.deactivate();\r\n    disposables.forEach(d => d.dispose());\r\n    if (languageServiceDisabled) {\r\n        return;\r\n    }\r\n    return LanguageServer.deactivate();\r\n}\r\nexports.deactivate = deactivate;\r\nfunction processRuntimeDependencies() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const installLockExists = yield util.checkInstallLockFile();\r\n        if (installLockExists) {\r\n            if (util.packageJson.activationEvents && util.packageJson.activationEvents.length === 1) {\r\n                try {\r\n                    yield offlineInstallation();\r\n                }\r\n                catch (error) {\r\n                    logger_1.getOutputChannelLogger().showErrorMessage('The installation of the C/C++ extension failed. Please see the output window for more information.');\r\n                    logger_1.showOutputChannel();\r\n                    sendTelemetry(yield platform_1.PlatformInformation.GetPlatformInformation());\r\n                }\r\n            }\r\n            else {\r\n                yield finalizeExtensionActivation();\r\n            }\r\n        }\r\n        else {\r\n            try {\r\n                yield onlineInstallation();\r\n            }\r\n            catch (error) {\r\n                handleError(error);\r\n                sendTelemetry(yield platform_1.PlatformInformation.GetPlatformInformation());\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction offlineInstallation() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        installationInformation_1.setInstallationStage('getPlatformInfo');\r\n        const info = yield platform_1.PlatformInformation.GetPlatformInformation();\r\n        installationInformation_1.setInstallationStage('makeBinariesExecutable');\r\n        yield makeBinariesExecutable();\r\n        installationInformation_1.setInstallationStage('makeOfflineBinariesExecutable');\r\n        yield makeOfflineBinariesExecutable(info);\r\n        installationInformation_1.setInstallationStage('removeUnnecessaryFile');\r\n        yield removeUnnecessaryFile();\r\n        installationInformation_1.setInstallationStage('rewriteManifest');\r\n        yield rewriteManifest();\r\n        installationInformation_1.setInstallationStage('postInstall');\r\n        yield postInstall(info);\r\n    });\r\n}\r\nfunction onlineInstallation() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        installationInformation_1.setInstallationStage('getPlatformInfo');\r\n        const info = yield platform_1.PlatformInformation.GetPlatformInformation();\r\n        yield downloadAndInstallPackages(info);\r\n        installationInformation_1.setInstallationStage('makeBinariesExecutable');\r\n        yield makeBinariesExecutable();\r\n        installationInformation_1.setInstallationStage('removeUnnecessaryFile');\r\n        yield removeUnnecessaryFile();\r\n        installationInformation_1.setInstallationStage('rewriteManifest');\r\n        yield rewriteManifest();\r\n        installationInformation_1.setInstallationStage('touchInstallLockFile');\r\n        yield touchInstallLockFile();\r\n        installationInformation_1.setInstallationStage('postInstall');\r\n        yield postInstall(info);\r\n    });\r\n}\r\nfunction downloadAndInstallPackages(info) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let outputChannelLogger = logger_1.getOutputChannelLogger();\r\n        outputChannelLogger.appendLine(\"Updating C/C++ dependencies...\");\r\n        let packageManager = new packageManager_1.PackageManager(info, outputChannelLogger);\r\n        return vscode.window.withProgress({\r\n            location: vscode.ProgressLocation.Notification,\r\n            title: \"C/C++ Extension\",\r\n            cancellable: false\r\n        }, (progress, token) => __awaiter(this, void 0, void 0, function* () {\r\n            outputChannelLogger.appendLine('');\r\n            installationInformation_1.setInstallationStage('downloadPackages');\r\n            yield packageManager.DownloadPackages(progress);\r\n            outputChannelLogger.appendLine('');\r\n            installationInformation_1.setInstallationStage('installPackages');\r\n            yield packageManager.InstallPackages(progress);\r\n        }));\r\n    });\r\n}\r\nfunction makeBinariesExecutable() {\r\n    return util.allowExecution(util.getDebugAdaptersPath(\"OpenDebugAD7\"));\r\n}\r\nfunction makeOfflineBinariesExecutable(info) {\r\n    let promises = [];\r\n    let packages = util.packageJson[\"runtimeDependencies\"];\r\n    packages.forEach(p => {\r\n        if (p.binaries && p.binaries.length > 0 &&\r\n            p.platforms.findIndex(plat => plat === info.platform) !== -1 &&\r\n            (p.architectures === undefined || p.architectures.findIndex(arch => arch === info.architecture) !== -1)) {\r\n            p.binaries.forEach(binary => promises.push(util.allowExecution(util.getExtensionFilePath(binary))));\r\n        }\r\n    });\r\n    return Promise.all(promises).then(() => { });\r\n}\r\nfunction removeUnnecessaryFile() {\r\n    if (os.platform() !== 'win32') {\r\n        let sourcePath = util.getDebugAdaptersPath(\"bin/OpenDebugAD7.exe.config\");\r\n        if (fs.existsSync(sourcePath)) {\r\n            fs.rename(sourcePath, util.getDebugAdaptersPath(\"bin/OpenDebugAD7.exe.config.unused\"), (err) => {\r\n                if (err) {\r\n                    logger_1.getOutputChannelLogger().appendLine(`ERROR: fs.rename failed with \"${err.message}\". Delete ${sourcePath} manually to enable debugging.`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return Promise.resolve();\r\n}\r\nfunction touchInstallLockFile() {\r\n    return util.touchInstallLockFile();\r\n}\r\nfunction handleError(error) {\r\n    let installationInformation = installationInformation_1.getInstallationInformation();\r\n    installationInformation.hasError = true;\r\n    installationInformation.telemetryProperties['stage'] = installationInformation.stage;\r\n    let errorMessage;\r\n    if (error instanceof packageManager_1.PackageManagerError) {\r\n        let packageError = error;\r\n        installationInformation.telemetryProperties['error.methodName'] = packageError.methodName;\r\n        installationInformation.telemetryProperties['error.message'] = packageError.message;\r\n        if (packageError.innerError) {\r\n            errorMessage = packageError.innerError.toString();\r\n            installationInformation.telemetryProperties['error.innerError'] = util.removePotentialPII(errorMessage);\r\n        }\r\n        else {\r\n            errorMessage = packageError.message;\r\n        }\r\n        if (packageError.pkg) {\r\n            installationInformation.telemetryProperties['error.packageName'] = packageError.pkg.description;\r\n            installationInformation.telemetryProperties['error.packageUrl'] = packageError.pkg.url;\r\n        }\r\n        if (packageError.errorCode) {\r\n            installationInformation.telemetryProperties['error.errorCode'] = util.removePotentialPII(packageError.errorCode);\r\n        }\r\n    }\r\n    else {\r\n        errorMessage = error.toString();\r\n        installationInformation.telemetryProperties['error.toString'] = util.removePotentialPII(errorMessage);\r\n    }\r\n    let outputChannelLogger = logger_1.getOutputChannelLogger();\r\n    if (installationInformation.stage === 'downloadPackages') {\r\n        outputChannelLogger.appendLine(\"\");\r\n    }\r\n    outputChannelLogger.appendLine(`Failed at stage: ${installationInformation.stage}`);\r\n    outputChannelLogger.appendLine(errorMessage);\r\n    outputChannelLogger.appendLine(\"\");\r\n    outputChannelLogger.appendLine(`If you work in an offline environment or repeatedly see this error, try downloading a version of the extension with all the dependencies pre-included from https://github.com/Microsoft/vscode-cpptools/releases, then use the \"Install from VSIX\" command in VS Code to install it.`);\r\n    logger_1.showOutputChannel();\r\n}\r\nfunction sendTelemetry(info) {\r\n    let installBlob = installationInformation_1.getInstallationInformation();\r\n    const success = !installBlob.hasError;\r\n    installBlob.telemetryProperties['success'] = success.toString();\r\n    if (info.distribution) {\r\n        installBlob.telemetryProperties['linuxDistroName'] = info.distribution.name;\r\n        installBlob.telemetryProperties['linuxDistroVersion'] = info.distribution.version;\r\n    }\r\n    if (success) {\r\n        util.setProgress(util.getProgressInstallSuccess());\r\n        let versionShown = new persistentState_1.PersistentState(\"CPP.ReleaseNotesVersion\", -1);\r\n        if (versionShown.Value < releaseNotesVersion) {\r\n            util.showReleaseNotes();\r\n            versionShown.Value = releaseNotesVersion;\r\n        }\r\n    }\r\n    installBlob.telemetryProperties['osArchitecture'] = info.architecture;\r\n    Telemetry.logDebuggerEvent(\"acquisition\", installBlob.telemetryProperties);\r\n    return success;\r\n}\r\nfunction postInstall(info) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let outputChannelLogger = logger_1.getOutputChannelLogger();\r\n        outputChannelLogger.appendLine(\"\");\r\n        outputChannelLogger.appendLine(\"Finished installing dependencies\");\r\n        outputChannelLogger.appendLine(\"\");\r\n        const installSuccess = sendTelemetry(info);\r\n        if (!installSuccess) {\r\n            return Promise.reject(\"\");\r\n        }\r\n        else {\r\n            util.checkDistro(info);\r\n            return finalizeExtensionActivation();\r\n        }\r\n    });\r\n}\r\nfunction finalizeExtensionActivation() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (vscode.workspace.getConfiguration(\"C_Cpp\", null).get(\"intelliSenseEngine\") === \"Disabled\") {\r\n            languageServiceDisabled = true;\r\n            commands_1.getTemporaryCommandRegistrarInstance().disableLanguageServer();\r\n            disposables.push(vscode.workspace.onDidChangeConfiguration(() => {\r\n                if (!reloadMessageShown && vscode.workspace.getConfiguration(\"C_Cpp\", null).get(\"intelliSenseEngine\") !== \"Disabled\") {\r\n                    reloadMessageShown = true;\r\n                    util.promptForReloadWindowDueToSettingsChange();\r\n                }\r\n            }));\r\n            return;\r\n        }\r\n        disposables.push(vscode.workspace.onDidChangeConfiguration(() => {\r\n            if (!reloadMessageShown && vscode.workspace.getConfiguration(\"C_Cpp\", null).get(\"intelliSenseEngine\") === \"Disabled\") {\r\n                reloadMessageShown = true;\r\n                util.promptForReloadWindowDueToSettingsChange();\r\n            }\r\n        }));\r\n        commands_1.getTemporaryCommandRegistrarInstance().activateLanguageServer();\r\n        let packageJsonPath = util.getExtensionFilePath(\"package.json\");\r\n        if (!packageJsonPath.includes(\".vscode-insiders\") && !packageJsonPath.includes(\".vscode-exploration\")) {\r\n            let abTestSettings = cpptoolsJsonUtils.getABTestSettings();\r\n            let packageJson = util.getRawPackageJson();\r\n            let prevIntelliSenseEngineDefault = packageJson.contributes.configuration.properties[\"C_Cpp.intelliSenseEngine\"].default;\r\n            if (abTestSettings.UseDefaultIntelliSenseEngine) {\r\n                packageJson.contributes.configuration.properties[\"C_Cpp.intelliSenseEngine\"].default = \"Default\";\r\n            }\r\n            else {\r\n                packageJson.contributes.configuration.properties[\"C_Cpp.intelliSenseEngine\"].default = \"Tag Parser\";\r\n            }\r\n            if (prevIntelliSenseEngineDefault !== packageJson.contributes.configuration.properties[\"C_Cpp.intelliSenseEngine\"].default) {\r\n                return util.writeFileText(util.getPackageJsonPath(), util.stringifyPackageJson(packageJson));\r\n            }\r\n        }\r\n        else {\r\n            let packageJson = util.getRawPackageJson();\r\n            if (packageJson.contributes.configuration.properties['C_Cpp.updateChannel'].default === 'Default') {\r\n                packageJson.contributes.configuration.properties['C_Cpp.updateChannel'].default = 'Insiders';\r\n                return util.writeFileText(util.getPackageJsonPath(), util.stringifyPackageJson(packageJson));\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction rewriteManifest() {\r\n    let packageJson = util.getRawPackageJson();\r\n    packageJson.activationEvents = [\r\n        \"onLanguage:cpp\",\r\n        \"onLanguage:c\",\r\n        \"onCommand:extension.pickNativeProcess\",\r\n        \"onCommand:extension.pickRemoteNativeProcess\",\r\n        \"onCommand:C_Cpp.BuildAndDebugActiveFile\",\r\n        \"onCommand:C_Cpp.ConfigurationEdit\",\r\n        \"onCommand:C_Cpp.ConfigurationSelect\",\r\n        \"onCommand:C_Cpp.ConfigurationProviderSelect\",\r\n        \"onCommand:C_Cpp.SwitchHeaderSource\",\r\n        \"onCommand:C_Cpp.Navigate\",\r\n        \"onCommand:C_Cpp.GoToDeclaration\",\r\n        \"onCommand:C_Cpp.PeekDeclaration\",\r\n        \"onCommand:C_Cpp.ToggleErrorSquiggles\",\r\n        \"onCommand:C_Cpp.ToggleIncludeFallback\",\r\n        \"onCommand:C_Cpp.ToggleDimInactiveRegions\",\r\n        \"onCommand:C_Cpp.ShowReleaseNotes\",\r\n        \"onCommand:C_Cpp.ResetDatabase\",\r\n        \"onCommand:C_Cpp.PauseParsing\",\r\n        \"onCommand:C_Cpp.ResumeParsing\",\r\n        \"onCommand:C_Cpp.ShowParsingCommands\",\r\n        \"onCommand:C_Cpp.TakeSurvey\",\r\n        \"onDebug\",\r\n        \"workspaceContains:/.vscode/c_cpp_properties.json\"\r\n    ];\r\n    return util.writeFileText(util.getPackageJsonPath(), util.stringifyPackageJson(packageJson));\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/packageManager.ts":
/*!*******************************!*\
  !*** ./src/packageManager.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst https = __webpack_require__(/*! https */ \"https\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nconst url = __webpack_require__(/*! url */ \"url\");\r\nconst tmp = __webpack_require__(/*! tmp */ \"./node_modules/tmp/lib/tmp.js\");\r\nconst yauzl = __webpack_require__(/*! yauzl */ \"./node_modules/yauzl/index.js\");\r\nconst mkdirp = __webpack_require__(/*! mkdirp */ \"./node_modules/mkdirp/index.js\");\r\nconst util = __webpack_require__(/*! ./common */ \"./src/common.ts\");\r\nconst Telemetry = __webpack_require__(/*! ./telemetry */ \"./src/telemetry.ts\");\r\nclass PackageManagerError extends Error {\r\n    constructor(message, methodName, pkg = null, innerError = null, errorCode = '') {\r\n        super(message);\r\n        this.message = message;\r\n        this.methodName = methodName;\r\n        this.pkg = pkg;\r\n        this.innerError = innerError;\r\n        this.errorCode = errorCode;\r\n    }\r\n}\r\nexports.PackageManagerError = PackageManagerError;\r\nclass PackageManagerWebResponseError extends PackageManagerError {\r\n    constructor(socket, message, methodName, pkg = null, innerError = null, errorCode = '') {\r\n        super(message, methodName, pkg, innerError, errorCode);\r\n        this.socket = socket;\r\n        this.message = message;\r\n        this.methodName = methodName;\r\n        this.pkg = pkg;\r\n        this.innerError = innerError;\r\n        this.errorCode = errorCode;\r\n    }\r\n}\r\nexports.PackageManagerWebResponseError = PackageManagerWebResponseError;\r\nclass PackageManager {\r\n    constructor(platformInfo, outputChannel) {\r\n        this.platformInfo = platformInfo;\r\n        this.outputChannel = outputChannel;\r\n        tmp.setGracefulCleanup();\r\n    }\r\n    DownloadPackages(progress) {\r\n        return this.GetPackages()\r\n            .then((packages) => {\r\n            let count = 1;\r\n            return this.BuildPromiseChain(packages, (pkg) => {\r\n                const p = this.DownloadPackage(pkg, `${count}/${packages.length}`, progress);\r\n                count += 1;\r\n                return p;\r\n            });\r\n        });\r\n    }\r\n    InstallPackages(progress) {\r\n        return this.GetPackages()\r\n            .then((packages) => {\r\n            let count = 1;\r\n            return this.BuildPromiseChain(packages, (pkg) => {\r\n                const p = this.InstallPackage(pkg, `${count}/${packages.length}`, progress);\r\n                count += 1;\r\n                return p;\r\n            });\r\n        });\r\n    }\r\n    BuildPromiseChain(items, promiseBuilder) {\r\n        let promiseChain = Promise.resolve(null);\r\n        for (let item of items) {\r\n            promiseChain = promiseChain.then(() => {\r\n                return promiseBuilder(item);\r\n            });\r\n        }\r\n        return promiseChain;\r\n    }\r\n    GetPackageList() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.allPackages) {\r\n                if (util.packageJson.runtimeDependencies) {\r\n                    this.allPackages = util.packageJson.runtimeDependencies;\r\n                    for (let pkg of this.allPackages) {\r\n                        if (pkg.binaries) {\r\n                            pkg.binaries = pkg.binaries.map((value) => {\r\n                                return util.getExtensionFilePath(value);\r\n                            });\r\n                        }\r\n                    }\r\n                    resolve(this.allPackages);\r\n                }\r\n                else {\r\n                    reject(new PackageManagerError('Package manifest does not exist', 'GetPackageList'));\r\n                }\r\n            }\r\n            else {\r\n                resolve(this.allPackages);\r\n            }\r\n        });\r\n    }\r\n    GetPackages() {\r\n        return this.GetPackageList()\r\n            .then((list) => {\r\n            return list.filter((value, index, array) => {\r\n                return (!value.architectures || value.architectures.indexOf(this.platformInfo.architecture) !== -1) &&\r\n                    (!value.platforms || value.platforms.indexOf(this.platformInfo.platform) !== -1);\r\n            });\r\n        });\r\n    }\r\n    DownloadPackage(pkg, progressCount, progress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.AppendChannel(`Downloading package '${pkg.description}' `);\r\n            progress.report({ message: `Downloading ${progressCount}: ${pkg.description}` });\r\n            const tmpResult = yield this.CreateTempFile(pkg);\r\n            yield this.DownloadPackageWithRetries(pkg, tmpResult, progress);\r\n        });\r\n    }\r\n    CreateTempFile(pkg) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => {\r\n                tmp.file({ prefix: \"package-\" }, (err, path, fd, cleanupCallback) => {\r\n                    if (err) {\r\n                        return reject(new PackageManagerError('Error from temp.file', 'DownloadPackage', pkg, err));\r\n                    }\r\n                    return resolve({ name: path, fd: fd, removeCallback: cleanupCallback });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    DownloadPackageWithRetries(pkg, tmpResult, progress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            pkg.tmpFile = tmpResult;\r\n            let success = false;\r\n            let lastError = null;\r\n            let retryCount = 0;\r\n            const MAX_RETRIES = 5;\r\n            do {\r\n                try {\r\n                    yield this.DownloadFile(pkg.url, pkg, retryCount, progress);\r\n                    success = true;\r\n                }\r\n                catch (error) {\r\n                    retryCount += 1;\r\n                    lastError = error;\r\n                    if (retryCount > MAX_RETRIES) {\r\n                        this.AppendChannel(` Failed to download ` + pkg.url);\r\n                        throw error;\r\n                    }\r\n                    else {\r\n                        this.AppendChannel(` Failed. Retrying...`);\r\n                        continue;\r\n                    }\r\n                }\r\n            } while (!success && retryCount < MAX_RETRIES);\r\n            this.AppendLineChannel(\" Done!\");\r\n            if (retryCount !== 0) {\r\n                let telemetryProperties = {};\r\n                telemetryProperties[\"success\"] = success ? `OnRetry${retryCount}` : 'false';\r\n                if (lastError instanceof PackageManagerError) {\r\n                    let packageError = lastError;\r\n                    telemetryProperties['error.methodName'] = packageError.methodName;\r\n                    telemetryProperties['error.message'] = packageError.message;\r\n                    if (packageError.pkg) {\r\n                        telemetryProperties['error.packageName'] = packageError.pkg.description;\r\n                        telemetryProperties['error.packageUrl'] = packageError.pkg.url;\r\n                    }\r\n                    if (packageError.errorCode) {\r\n                        telemetryProperties['error.errorCode'] = packageError.errorCode;\r\n                    }\r\n                }\r\n                Telemetry.logDebuggerEvent(\"acquisition\", telemetryProperties);\r\n            }\r\n        });\r\n    }\r\n    DownloadFile(urlString, pkg, delay, progress) {\r\n        let parsedUrl = url.parse(urlString);\r\n        let proxyStrictSSL = vscode.workspace.getConfiguration().get(\"http.proxyStrictSSL\", true);\r\n        let options = {\r\n            host: parsedUrl.host,\r\n            path: parsedUrl.path,\r\n            agent: util.getHttpsProxyAgent(),\r\n            rejectUnauthorized: proxyStrictSSL\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            let secondsDelay = Math.pow(2, delay);\r\n            if (secondsDelay === 1) {\r\n                secondsDelay = 0;\r\n            }\r\n            if (secondsDelay > 4) {\r\n                this.AppendChannel(`Waiting ${secondsDelay} seconds...`);\r\n            }\r\n            setTimeout(() => {\r\n                if (!pkg.tmpFile || pkg.tmpFile.fd === 0) {\r\n                    return reject(new PackageManagerError('Temporary Package file unavailable', 'DownloadFile', pkg));\r\n                }\r\n                let handleHttpResponse = (response) => {\r\n                    if (response.statusCode === 301 || response.statusCode === 302) {\r\n                        let redirectUrl;\r\n                        if (typeof response.headers.location === \"string\") {\r\n                            redirectUrl = response.headers.location;\r\n                        }\r\n                        else {\r\n                            redirectUrl = response.headers.location[0];\r\n                        }\r\n                        return resolve(this.DownloadFile(redirectUrl, pkg, 0, progress));\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        let errorMessage = `failed (error code '${response.statusCode}')`;\r\n                        return reject(new PackageManagerWebResponseError(response.socket, 'HTTP/HTTPS Response Error', 'DownloadFile', pkg, errorMessage, response.statusCode.toString()));\r\n                    }\r\n                    else {\r\n                        let contentLength = response.headers['content-length'];\r\n                        if (typeof response.headers['content-length'] === \"string\") {\r\n                            contentLength = response.headers['content-length'];\r\n                        }\r\n                        else {\r\n                            contentLength = response.headers['content-length'][0];\r\n                        }\r\n                        let packageSize = parseInt(contentLength, 10);\r\n                        let downloadPercentage = 0;\r\n                        let dots = 0;\r\n                        let tmpFile = fs.createWriteStream(null, { fd: pkg.tmpFile.fd });\r\n                        this.AppendChannel(`(${Math.ceil(packageSize / 1024)} KB) `);\r\n                        response.on('data', (data) => {\r\n                            let newDots = Math.ceil(downloadPercentage / 5);\r\n                            if (newDots > dots) {\r\n                                this.AppendChannel(\".\".repeat(newDots - dots));\r\n                                dots = newDots;\r\n                            }\r\n                        });\r\n                        response.on('end', () => {\r\n                            return resolve();\r\n                        });\r\n                        response.on('error', (error) => {\r\n                            return reject(new PackageManagerWebResponseError(response.socket, 'HTTP/HTTPS Response error', 'DownloadFile', pkg, error.stack, error.name));\r\n                        });\r\n                        response.pipe(tmpFile, { end: false });\r\n                    }\r\n                };\r\n                let request = https.request(options, handleHttpResponse);\r\n                request.on('error', (error) => {\r\n                    return reject(new PackageManagerError('HTTP/HTTPS Request error' + (urlString.includes(\"fwlink\") ? \": fwlink\" : \"\"), 'DownloadFile', pkg, error.stack, error.message));\r\n                });\r\n                request.end();\r\n            }, secondsDelay * 1000);\r\n        });\r\n    }\r\n    InstallPackage(pkg, progressCount, progress) {\r\n        this.AppendLineChannel(`Installing package '${pkg.description}'`);\r\n        progress.report({ message: `Installing ${progressCount}: ${pkg.description}` });\r\n        return new Promise((resolve, reject) => {\r\n            if (!pkg.tmpFile || pkg.tmpFile.fd === 0) {\r\n                return reject(new PackageManagerError('Downloaded file unavailable', 'InstallPackage', pkg));\r\n            }\r\n            yauzl.fromFd(pkg.tmpFile.fd, { lazyEntries: true }, (err, zipfile) => {\r\n                if (err) {\r\n                    return reject(new PackageManagerError('Zip file error', 'InstallPackage', pkg, err));\r\n                }\r\n                zipfile.on('end', () => {\r\n                    return resolve();\r\n                });\r\n                zipfile.on('error', err => {\r\n                    return reject(new PackageManagerError('Zip File Error', 'InstallPackage', pkg, err, err.code));\r\n                });\r\n                zipfile.readEntry();\r\n                zipfile.on('entry', (entry) => {\r\n                    let absoluteEntryPath = util.getExtensionFilePath(entry.fileName);\r\n                    if (entry.fileName.endsWith(\"/\")) {\r\n                        mkdirp.mkdirp(absoluteEntryPath, { mode: 0o775 }, (err) => {\r\n                            if (err) {\r\n                                return reject(new PackageManagerError('Error creating directory', 'InstallPackage', pkg, err, err.code));\r\n                            }\r\n                            zipfile.readEntry();\r\n                        });\r\n                    }\r\n                    else {\r\n                        util.checkFileExists(absoluteEntryPath).then((exists) => {\r\n                            if (!exists) {\r\n                                zipfile.openReadStream(entry, (err, readStream) => {\r\n                                    if (err) {\r\n                                        return reject(new PackageManagerError('Error reading zip stream', 'InstallPackage', pkg, err));\r\n                                    }\r\n                                    readStream.on('error', (err) => {\r\n                                        return reject(new PackageManagerError('Error in readStream', 'InstallPackage', pkg, err));\r\n                                    });\r\n                                    mkdirp.mkdirp(path.dirname(absoluteEntryPath), { mode: 0o775 }, (err) => __awaiter(this, void 0, void 0, function* () {\r\n                                        if (err) {\r\n                                            return reject(new PackageManagerError('Error creating directory', 'InstallPackage', pkg, err, err.code));\r\n                                        }\r\n                                        let absoluteEntryTempFile = absoluteEntryPath + \".tmp\";\r\n                                        if (fs.existsSync(absoluteEntryTempFile)) {\r\n                                            try {\r\n                                                yield util.unlinkPromise(absoluteEntryTempFile);\r\n                                            }\r\n                                            catch (err) {\r\n                                                return reject(new PackageManagerError(`Error unlinking file ${absoluteEntryTempFile}`, 'InstallPackage', pkg, err));\r\n                                            }\r\n                                        }\r\n                                        let fileMode = (pkg.binaries && pkg.binaries.indexOf(absoluteEntryPath) !== -1) ? 0o755 : 0o664;\r\n                                        let writeStream = fs.createWriteStream(absoluteEntryTempFile, { mode: fileMode });\r\n                                        writeStream.on('close', () => __awaiter(this, void 0, void 0, function* () {\r\n                                            try {\r\n                                                yield util.renamePromise(absoluteEntryTempFile, absoluteEntryPath);\r\n                                            }\r\n                                            catch (err) {\r\n                                                return reject(new PackageManagerError(`Error renaming file ${absoluteEntryTempFile}`, 'InstallPackage', pkg, err));\r\n                                            }\r\n                                            zipfile.readEntry();\r\n                                        }));\r\n                                        writeStream.on('error', (err) => {\r\n                                            return reject(new PackageManagerError('Error in writeStream', 'InstallPackage', pkg, err));\r\n                                        });\r\n                                        readStream.pipe(writeStream);\r\n                                    }));\r\n                                });\r\n                            }\r\n                            else {\r\n                                if (path.extname(absoluteEntryPath) !== \".txt\") {\r\n                                    this.AppendLineChannel(`Warning: File '${absoluteEntryPath}' already exists and was not updated.`);\r\n                                }\r\n                                zipfile.readEntry();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }).then(() => {\r\n            pkg.tmpFile.removeCallback();\r\n        });\r\n    }\r\n    AppendChannel(text) {\r\n        if (this.outputChannel) {\r\n            this.outputChannel.append(text);\r\n        }\r\n    }\r\n    AppendLineChannel(text) {\r\n        if (this.outputChannel) {\r\n            this.outputChannel.appendLine(text);\r\n        }\r\n    }\r\n}\r\nexports.PackageManager = PackageManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/packageManager.ts\n");

/***/ }),

/***/ "./src/packageVersion.ts":
/*!*******************************!*\
  !*** ./src/packageVersion.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass PackageVersion {\r\n    constructor(version) {\r\n        const tokens = version.split(new RegExp('[-\\\\.]', 'g'));\r\n        if (tokens.length < 3) {\r\n            throw new Error('Failed to parse version string: ' + version);\r\n        }\r\n        this.major = parseInt(tokens[0]);\r\n        this.minor = parseInt(tokens[1]);\r\n        this.patch = parseInt(tokens[2]);\r\n        if (tokens.length > 3) {\r\n            const firstDigitOffset = tokens[3].search(new RegExp(/(\\d)/));\r\n            if (firstDigitOffset !== -1) {\r\n                this.suffix = tokens[3].substring(0, firstDigitOffset);\r\n                this.suffixVersion = parseInt(tokens[3].substring(firstDigitOffset));\r\n            }\r\n            else {\r\n                this.suffix = tokens[3];\r\n                this.suffixVersion = 1;\r\n            }\r\n        }\r\n        else {\r\n            this.suffix = undefined;\r\n            this.suffixVersion = 0;\r\n        }\r\n        if (this.major === undefined || this.minor === undefined || this.patch === undefined) {\r\n            throw new Error('Failed to parse version string: ' + version);\r\n        }\r\n    }\r\n    isGreaterThan(other, suffixStr = 'insiders') {\r\n        if ((this.suffix && !this.suffix.startsWith(suffixStr)) || (other.suffix && !other.suffix.startsWith(suffixStr))) {\r\n            return false;\r\n        }\r\n        let diff = this.major - other.major;\r\n        if (diff) {\r\n            return diff > 0;\r\n        }\r\n        else if (diff = this.minor - other.minor) {\r\n            return diff > 0;\r\n        }\r\n        else if (diff = this.patch - other.patch) {\r\n            return diff > 0;\r\n        }\r\n        else if (this.suffix) {\r\n            return (other.suffix && this.suffixVersion > other.suffixVersion);\r\n        }\r\n        else {\r\n            return other.suffix ? true : false;\r\n        }\r\n    }\r\n}\r\nexports.PackageVersion = PackageVersion;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFja2FnZVZlcnNpb24udHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL3BhY2thZ2VWZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBQYWNrYWdlVmVyc2lvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2ZXJzaW9uKSB7XHJcbiAgICAgICAgY29uc3QgdG9rZW5zID0gdmVyc2lvbi5zcGxpdChuZXcgUmVnRXhwKCdbLVxcXFwuXScsICdnJykpO1xyXG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoIDwgMykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSB2ZXJzaW9uIHN0cmluZzogJyArIHZlcnNpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1ham9yID0gcGFyc2VJbnQodG9rZW5zWzBdKTtcclxuICAgICAgICB0aGlzLm1pbm9yID0gcGFyc2VJbnQodG9rZW5zWzFdKTtcclxuICAgICAgICB0aGlzLnBhdGNoID0gcGFyc2VJbnQodG9rZW5zWzJdKTtcclxuICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDMpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3REaWdpdE9mZnNldCA9IHRva2Vuc1szXS5zZWFyY2gobmV3IFJlZ0V4cCgvKFxcZCkvKSk7XHJcbiAgICAgICAgICAgIGlmIChmaXJzdERpZ2l0T2Zmc2V0ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWZmaXggPSB0b2tlbnNbM10uc3Vic3RyaW5nKDAsIGZpcnN0RGlnaXRPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWZmaXhWZXJzaW9uID0gcGFyc2VJbnQodG9rZW5zWzNdLnN1YnN0cmluZyhmaXJzdERpZ2l0T2Zmc2V0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1ZmZpeCA9IHRva2Vuc1szXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VmZml4VmVyc2lvbiA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3VmZml4ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLnN1ZmZpeFZlcnNpb24gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tYWpvciA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubWlub3IgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnBhdGNoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcGFyc2UgdmVyc2lvbiBzdHJpbmc6ICcgKyB2ZXJzaW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpc0dyZWF0ZXJUaGFuKG90aGVyLCBzdWZmaXhTdHIgPSAnaW5zaWRlcnMnKSB7XHJcbiAgICAgICAgaWYgKCh0aGlzLnN1ZmZpeCAmJiAhdGhpcy5zdWZmaXguc3RhcnRzV2l0aChzdWZmaXhTdHIpKSB8fCAob3RoZXIuc3VmZml4ICYmICFvdGhlci5zdWZmaXguc3RhcnRzV2l0aChzdWZmaXhTdHIpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBkaWZmID0gdGhpcy5tYWpvciAtIG90aGVyLm1ham9yO1xyXG4gICAgICAgIGlmIChkaWZmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkaWZmID4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGlmZiA9IHRoaXMubWlub3IgLSBvdGhlci5taW5vcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZGlmZiA+IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRpZmYgPSB0aGlzLnBhdGNoIC0gb3RoZXIucGF0Y2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRpZmYgPiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnN1ZmZpeCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKG90aGVyLnN1ZmZpeCAmJiB0aGlzLnN1ZmZpeFZlcnNpb24gPiBvdGhlci5zdWZmaXhWZXJzaW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvdGhlci5zdWZmaXggPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUGFja2FnZVZlcnNpb24gPSBQYWNrYWdlVmVyc2lvbjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/packageVersion.ts\n");

/***/ }),

/***/ "./src/platform.ts":
/*!*************************!*\
  !*** ./src/platform.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", { value: true });\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst util = __webpack_require__(/*! ./common */ \"./src/common.ts\");\r\nconst linuxDistribution_1 = __webpack_require__(/*! ./linuxDistribution */ \"./src/linuxDistribution.ts\");\r\nclass PlatformInformation {\r\n    constructor(platform, architecture, distribution) {\r\n        this.platform = platform;\r\n        this.architecture = architecture;\r\n        this.distribution = distribution;\r\n    }\r\n    static GetPlatformInformation() {\r\n        let platform = os.platform();\r\n        let architecturePromise;\r\n        let distributionPromise = Promise.resolve(null);\r\n        switch (platform) {\r\n            case \"win32\":\r\n                architecturePromise = PlatformInformation.GetWindowsArchitecture();\r\n                break;\r\n            case \"linux\":\r\n                architecturePromise = PlatformInformation.GetUnixArchitecture();\r\n                distributionPromise = linuxDistribution_1.LinuxDistribution.GetDistroInformation();\r\n                break;\r\n            case \"darwin\":\r\n                architecturePromise = PlatformInformation.GetUnixArchitecture();\r\n                break;\r\n        }\r\n        return Promise.all([architecturePromise, distributionPromise])\r\n            .then(([arch, distro]) => {\r\n            return new PlatformInformation(platform, arch, distro);\r\n        });\r\n    }\r\n    static GetUnknownArchitecture() { return \"Unknown\"; }\r\n    static GetWindowsArchitecture() {\r\n        return util.execChildProcess('wmic os get osarchitecture', util.extensionContext.extensionPath)\r\n            .then((architecture) => {\r\n            if (architecture) {\r\n                let archArray = architecture.split(os.EOL);\r\n                if (archArray.length >= 2) {\r\n                    let arch = archArray[1].trim();\r\n                    if (arch.indexOf('64') >= 0) {\r\n                        return \"x86_64\";\r\n                    }\r\n                    else if (arch.indexOf('32') >= 0) {\r\n                        return \"x86\";\r\n                    }\r\n                }\r\n            }\r\n            return PlatformInformation.GetUnknownArchitecture();\r\n        }).catch((error) => {\r\n            return PlatformInformation.GetUnknownArchitecture();\r\n        });\r\n    }\r\n    static GetUnixArchitecture() {\r\n        return util.execChildProcess('uname -m', util.packageJson.extensionFolderPath)\r\n            .then((architecture) => {\r\n            if (architecture) {\r\n                return architecture.trim();\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n}\r\nexports.PlatformInformation = PlatformInformation;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGxhdGZvcm0udHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL3BsYXRmb3JtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3Qgb3MgPSByZXF1aXJlKFwib3NcIik7XHJcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XHJcbmNvbnN0IGxpbnV4RGlzdHJpYnV0aW9uXzEgPSByZXF1aXJlKFwiLi9saW51eERpc3RyaWJ1dGlvblwiKTtcclxuY2xhc3MgUGxhdGZvcm1JbmZvcm1hdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybSwgYXJjaGl0ZWN0dXJlLCBkaXN0cmlidXRpb24pIHtcclxuICAgICAgICB0aGlzLnBsYXRmb3JtID0gcGxhdGZvcm07XHJcbiAgICAgICAgdGhpcy5hcmNoaXRlY3R1cmUgPSBhcmNoaXRlY3R1cmU7XHJcbiAgICAgICAgdGhpcy5kaXN0cmlidXRpb24gPSBkaXN0cmlidXRpb247XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgR2V0UGxhdGZvcm1JbmZvcm1hdGlvbigpIHtcclxuICAgICAgICBsZXQgcGxhdGZvcm0gPSBvcy5wbGF0Zm9ybSgpO1xyXG4gICAgICAgIGxldCBhcmNoaXRlY3R1cmVQcm9taXNlO1xyXG4gICAgICAgIGxldCBkaXN0cmlidXRpb25Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIHN3aXRjaCAocGxhdGZvcm0pIHtcclxuICAgICAgICAgICAgY2FzZSBcIndpbjMyXCI6XHJcbiAgICAgICAgICAgICAgICBhcmNoaXRlY3R1cmVQcm9taXNlID0gUGxhdGZvcm1JbmZvcm1hdGlvbi5HZXRXaW5kb3dzQXJjaGl0ZWN0dXJlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImxpbnV4XCI6XHJcbiAgICAgICAgICAgICAgICBhcmNoaXRlY3R1cmVQcm9taXNlID0gUGxhdGZvcm1JbmZvcm1hdGlvbi5HZXRVbml4QXJjaGl0ZWN0dXJlKCk7XHJcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRpb25Qcm9taXNlID0gbGludXhEaXN0cmlidXRpb25fMS5MaW51eERpc3RyaWJ1dGlvbi5HZXREaXN0cm9JbmZvcm1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkYXJ3aW5cIjpcclxuICAgICAgICAgICAgICAgIGFyY2hpdGVjdHVyZVByb21pc2UgPSBQbGF0Zm9ybUluZm9ybWF0aW9uLkdldFVuaXhBcmNoaXRlY3R1cmUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2FyY2hpdGVjdHVyZVByb21pc2UsIGRpc3RyaWJ1dGlvblByb21pc2VdKVxyXG4gICAgICAgICAgICAudGhlbigoW2FyY2gsIGRpc3Ryb10pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQbGF0Zm9ybUluZm9ybWF0aW9uKHBsYXRmb3JtLCBhcmNoLCBkaXN0cm8pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIEdldFVua25vd25BcmNoaXRlY3R1cmUoKSB7IHJldHVybiBcIlVua25vd25cIjsgfVxyXG4gICAgc3RhdGljIEdldFdpbmRvd3NBcmNoaXRlY3R1cmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0aWwuZXhlY0NoaWxkUHJvY2Vzcygnd21pYyBvcyBnZXQgb3NhcmNoaXRlY3R1cmUnLCB1dGlsLmV4dGVuc2lvbkNvbnRleHQuZXh0ZW5zaW9uUGF0aClcclxuICAgICAgICAgICAgLnRoZW4oKGFyY2hpdGVjdHVyZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYXJjaGl0ZWN0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJjaEFycmF5ID0gYXJjaGl0ZWN0dXJlLnNwbGl0KG9zLkVPTCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJjaEFycmF5Lmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFyY2ggPSBhcmNoQXJyYXlbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmNoLmluZGV4T2YoJzY0JykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ4ODZfNjRcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJjaC5pbmRleE9mKCczMicpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwieDg2XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBQbGF0Zm9ybUluZm9ybWF0aW9uLkdldFVua25vd25BcmNoaXRlY3R1cmUoKTtcclxuICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtSW5mb3JtYXRpb24uR2V0VW5rbm93bkFyY2hpdGVjdHVyZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIEdldFVuaXhBcmNoaXRlY3R1cmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0aWwuZXhlY0NoaWxkUHJvY2VzcygndW5hbWUgLW0nLCB1dGlsLnBhY2thZ2VKc29uLmV4dGVuc2lvbkZvbGRlclBhdGgpXHJcbiAgICAgICAgICAgIC50aGVuKChhcmNoaXRlY3R1cmUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGFyY2hpdGVjdHVyZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyY2hpdGVjdHVyZS50cmltKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QbGF0Zm9ybUluZm9ybWF0aW9uID0gUGxhdGZvcm1JbmZvcm1hdGlvbjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/platform.ts\n");

/***/ }),

/***/ "./src/telemetry.ts":
/*!**************************!*\
  !*** ./src/telemetry.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode_extension_telemetry_1 = __webpack_require__(/*! vscode-extension-telemetry */ \"./node_modules/vscode-extension-telemetry/lib/telemetryReporter.js\");\r\nconst util = __webpack_require__(/*! ./common */ \"./src/common.ts\");\r\nlet telemetryReporter;\r\nfunction activate() {\r\n    try {\r\n        telemetryReporter = createReporter();\r\n    }\r\n    catch (e) {\r\n    }\r\n}\r\nexports.activate = activate;\r\nfunction deactivate() {\r\n    if (telemetryReporter) {\r\n        telemetryReporter.dispose();\r\n    }\r\n}\r\nexports.deactivate = deactivate;\r\nfunction logDebuggerEvent(eventName, properties) {\r\n    const eventNamePrefix = \"cppdbg/VS/Diagnostics/Debugger/\";\r\n    if (telemetryReporter) {\r\n        telemetryReporter.sendTelemetryEvent(eventNamePrefix + eventName, properties);\r\n    }\r\n}\r\nexports.logDebuggerEvent = logDebuggerEvent;\r\nfunction logLanguageServerEvent(eventName, properties, metrics) {\r\n    const eventNamePrefix = \"C_Cpp/LanguageServer/\";\r\n    if (telemetryReporter) {\r\n        telemetryReporter.sendTelemetryEvent(eventNamePrefix + eventName, properties, metrics);\r\n    }\r\n}\r\nexports.logLanguageServerEvent = logLanguageServerEvent;\r\nfunction createReporter() {\r\n    let packageInfo = getPackageInfo();\r\n    if (packageInfo && packageInfo.aiKey) {\r\n        return new vscode_extension_telemetry_1.default(packageInfo.name, packageInfo.version, packageInfo.aiKey);\r\n    }\r\n    return null;\r\n}\r\nfunction getPackageInfo() {\r\n    return {\r\n        name: util.packageJson.publisher + \".\" + util.packageJson.name,\r\n        version: util.packageJson.version,\r\n        aiKey: util.packageJson.contributes.debuggers[0].aiKey\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdGVsZW1ldHJ5LnRzLmpzIiwic291cmNlcyI6WyIuLi8uL3NyYy90ZWxlbWV0cnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHZzY29kZV9leHRlbnNpb25fdGVsZW1ldHJ5XzEgPSByZXF1aXJlKFwidnNjb2RlLWV4dGVuc2lvbi10ZWxlbWV0cnlcIik7XHJcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XHJcbmxldCB0ZWxlbWV0cnlSZXBvcnRlcjtcclxuZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHRlbGVtZXRyeVJlcG9ydGVyID0gY3JlYXRlUmVwb3J0ZXIoKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5hY3RpdmF0ZSA9IGFjdGl2YXRlO1xyXG5mdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xyXG4gICAgaWYgKHRlbGVtZXRyeVJlcG9ydGVyKSB7XHJcbiAgICAgICAgdGVsZW1ldHJ5UmVwb3J0ZXIuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVhY3RpdmF0ZSA9IGRlYWN0aXZhdGU7XHJcbmZ1bmN0aW9uIGxvZ0RlYnVnZ2VyRXZlbnQoZXZlbnROYW1lLCBwcm9wZXJ0aWVzKSB7XHJcbiAgICBjb25zdCBldmVudE5hbWVQcmVmaXggPSBcImNwcGRiZy9WUy9EaWFnbm9zdGljcy9EZWJ1Z2dlci9cIjtcclxuICAgIGlmICh0ZWxlbWV0cnlSZXBvcnRlcikge1xyXG4gICAgICAgIHRlbGVtZXRyeVJlcG9ydGVyLnNlbmRUZWxlbWV0cnlFdmVudChldmVudE5hbWVQcmVmaXggKyBldmVudE5hbWUsIHByb3BlcnRpZXMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMubG9nRGVidWdnZXJFdmVudCA9IGxvZ0RlYnVnZ2VyRXZlbnQ7XHJcbmZ1bmN0aW9uIGxvZ0xhbmd1YWdlU2VydmVyRXZlbnQoZXZlbnROYW1lLCBwcm9wZXJ0aWVzLCBtZXRyaWNzKSB7XHJcbiAgICBjb25zdCBldmVudE5hbWVQcmVmaXggPSBcIkNfQ3BwL0xhbmd1YWdlU2VydmVyL1wiO1xyXG4gICAgaWYgKHRlbGVtZXRyeVJlcG9ydGVyKSB7XHJcbiAgICAgICAgdGVsZW1ldHJ5UmVwb3J0ZXIuc2VuZFRlbGVtZXRyeUV2ZW50KGV2ZW50TmFtZVByZWZpeCArIGV2ZW50TmFtZSwgcHJvcGVydGllcywgbWV0cmljcyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5sb2dMYW5ndWFnZVNlcnZlckV2ZW50ID0gbG9nTGFuZ3VhZ2VTZXJ2ZXJFdmVudDtcclxuZnVuY3Rpb24gY3JlYXRlUmVwb3J0ZXIoKSB7XHJcbiAgICBsZXQgcGFja2FnZUluZm8gPSBnZXRQYWNrYWdlSW5mbygpO1xyXG4gICAgaWYgKHBhY2thZ2VJbmZvICYmIHBhY2thZ2VJbmZvLmFpS2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB2c2NvZGVfZXh0ZW5zaW9uX3RlbGVtZXRyeV8xLmRlZmF1bHQocGFja2FnZUluZm8ubmFtZSwgcGFja2FnZUluZm8udmVyc2lvbiwgcGFja2FnZUluZm8uYWlLZXkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuZnVuY3Rpb24gZ2V0UGFja2FnZUluZm8oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5hbWU6IHV0aWwucGFja2FnZUpzb24ucHVibGlzaGVyICsgXCIuXCIgKyB1dGlsLnBhY2thZ2VKc29uLm5hbWUsXHJcbiAgICAgICAgdmVyc2lvbjogdXRpbC5wYWNrYWdlSnNvbi52ZXJzaW9uLFxyXG4gICAgICAgIGFpS2V5OiB1dGlsLnBhY2thZ2VKc29uLmNvbnRyaWJ1dGVzLmRlYnVnZ2Vyc1swXS5haUtleVxyXG4gICAgfTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/telemetry.ts\n");

/***/ }),

/***/ "./src/testHook.ts":
/*!*************************!*\
  !*** ./src/testHook.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vscode = __webpack_require__(/*! vscode */ \"vscode\");\r\nclass TestHook {\r\n    constructor() {\r\n        this.statusChangedEvent = new vscode.EventEmitter();\r\n    }\r\n    get StatusChanged() {\r\n        return this.statusChangedEvent.event;\r\n    }\r\n    get valid() {\r\n        return !!this.statusChangedEvent;\r\n    }\r\n    updateStatus(status) {\r\n        this.statusChangedEvent.fire(status);\r\n    }\r\n    dispose() {\r\n        this.statusChangedEvent.dispose();\r\n        this.statusChangedEvent = null;\r\n    }\r\n}\r\nexports.TestHook = TestHook;\r\nlet testHook;\r\nfunction getTestHook() {\r\n    if (!testHook || !testHook.valid) {\r\n        testHook = new TestHook();\r\n    }\r\n    return testHook;\r\n}\r\nexports.getTestHook = getTestHook;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdGVzdEhvb2sudHMuanMiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL3Rlc3RIb29rLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGUgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jbGFzcyBUZXN0SG9vayB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnN0YXR1c0NoYW5nZWRFdmVudCA9IG5ldyB2c2NvZGUuRXZlbnRFbWl0dGVyKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgU3RhdHVzQ2hhbmdlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXNDaGFuZ2VkRXZlbnQuZXZlbnQ7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdGF0dXNDaGFuZ2VkRXZlbnQ7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVTdGF0dXMoc3RhdHVzKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNDaGFuZ2VkRXZlbnQuZmlyZShzdGF0dXMpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLnN0YXR1c0NoYW5nZWRFdmVudC5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNDaGFuZ2VkRXZlbnQgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVGVzdEhvb2sgPSBUZXN0SG9vaztcclxubGV0IHRlc3RIb29rO1xyXG5mdW5jdGlvbiBnZXRUZXN0SG9vaygpIHtcclxuICAgIGlmICghdGVzdEhvb2sgfHwgIXRlc3RIb29rLnZhbGlkKSB7XHJcbiAgICAgICAgdGVzdEhvb2sgPSBuZXcgVGVzdEhvb2soKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0ZXN0SG9vaztcclxufVxyXG5leHBvcnRzLmdldFRlc3RIb29rID0gZ2V0VGVzdEhvb2s7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/testHook.ts\n");

/***/ }),

/***/ "_http_client":
/*!*******************************!*\
  !*** external "_http_client" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("_http_client");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),

/***/ "console":
/*!**************************!*\
  !*** external "console" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("console");

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("constants");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("module");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),

/***/ "vscode":
/*!*************************!*\
  !*** external "vscode" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("vscode");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ })

/******/ });